// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    assert(ret);
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    //assert(sig); // TODO: support asm
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}







//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[(ptr++)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
  assert(i < TOTAL_MEMORY);
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

if (!Math.imul) Math.imul = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 6992;

assert(STATICTOP < TOTAL_MEMORY);




var _stderr;





































































allocate(4, "i8", ALLOC_NONE, 5242880);
allocate(16, "i8", ALLOC_NONE, 5242884);
allocate(16, "i8", ALLOC_NONE, 5242900);
allocate(4, "i8", ALLOC_NONE, 5242916);
allocate(4, "i8", ALLOC_NONE, 5242920);
allocate(4, "i8", ALLOC_NONE, 5242924);
allocate(4, "i8", ALLOC_NONE, 5242928);
allocate(8, "i8", ALLOC_NONE, 5242932);
allocate(8, "i8", ALLOC_NONE, 5242940);
allocate(4, "i8", ALLOC_NONE, 5242948);
allocate([144,1,0,0,32,3,0,0,64,6,0,0,128,12,0,0,128,37,0,0,128,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,0,0,192,3,0,0,128,7,0,0,0,15,0,0,0,45,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5242952);
allocate(24, "i8", ALLOC_NONE, 5243080);
allocate(4, "i8", ALLOC_NONE, 5243104);
allocate(12, "i8", ALLOC_NONE, 5243108);
allocate(16, "i8", ALLOC_NONE, 5243120);
allocate(4, "i8", ALLOC_NONE, 5243136);
allocate(16, "i8", ALLOC_NONE, 5243140);
allocate(4, "i8", ALLOC_NONE, 5243156);
allocate([109,117,95,100,105,118,97,112,112,114,95,113,46,99,0] /* mu_divappr_q.c\00 */, "i8", ALLOC_NONE, 5243160);
allocate([109,117,95,100,105,118,95,113,114,46,99,0] /* mu_div_qr.c\00 */, "i8", ALLOC_NONE, 5243176);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5243188);
allocate([100,32,60,32,49,53,0] /* d _ 15\00 */, "i8", ALLOC_NONE, 5243192);
allocate([110,108,32,61,61,32,48,0] /* nl == 0\00 */, "i8", ALLOC_NONE, 5243200);
allocate([97,114,103,99,32,60,32,50,0] /* argc _ 2\00 */, "i8", ALLOC_NONE, 5243208);
allocate([110,112,114,105,109,101,50,32,60,32,110,0] /* nprime2 _ n\00 */, "i8", ALLOC_NONE, 5243220);
allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* 0123456789abcdefghij */, "i8", ALLOC_NONE, 5243232);
allocate([107,32,60,61,32,102,109,117,108,45,62,109,97,120,95,102,97,99,115,0] /* k _= fmul-_max_facs\ */, "i8", ALLOC_NONE, 5243272);
allocate([40,110,32,38,32,40,75,50,32,45,32,49,41,41,32,61,61,32,48,0] /* (n & (K2 - 1)) == 0\ */, "i8", ALLOC_NONE, 5243292);
allocate([114,110,32,61,61,32,100,110,0] /* rn == dn\00 */, "i8", ALLOC_NONE, 5243312);
allocate([107,60,61,114,91,48,93,46,109,97,120,95,102,97,99,115,0] /* k_=r[0].max_facs\00 */, "i8", ALLOC_NONE, 5243324);
allocate([99,120,32,62,61,32,99,121,0] /* cx _= cy\00 */, "i8", ALLOC_NONE, 5243344);
allocate([109,117,108,95,102,102,116,46,99,0] /* mul_fft.c\00 */, "i8", ALLOC_NONE, 5243356);
allocate([71,78,85,32,77,80,58,32,67,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,40,115,105,122,101,61,37,108,117,41,10,0] /* GNU MP: Cannot alloc */, "i8", ALLOC_NONE, 5243368);
allocate([99,120,32,62,61,32,99,121,0] /* cx _= cy\00 */, "i8", ALLOC_NONE, 5243412);
allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,0] /* 0123456789ABCDEFGHIJ */, "i8", ALLOC_NONE, 5243424);
allocate([37,115,58,0] /* %s:\00 */, "i8", ALLOC_NONE, 5243464);
allocate([110,112,114,105,109,101,32,60,32,112,108,0] /* nprime _ pl\00 */, "i8", ALLOC_NONE, 5243468);
allocate([116,100,105,118,95,113,114,46,99,0] /* tdiv_qr.c\00 */, "i8", ALLOC_NONE, 5243480);
allocate([103,101,116,95,115,116,114,46,99,0] /* get_str.c\00 */, "i8", ALLOC_NONE, 5243492);
allocate([71,78,85,32,77,80,32,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,37,115,10,0] /* GNU MP assertion fai */, "i8", ALLOC_NONE, 5243504);
allocate([110,50,112,91,113,110,93,32,62,61,32,99,121,50,0] /* n2p[qn] _= cy2\00 */, "i8", ALLOC_NONE, 5243536);
allocate([103,109,112,58,32,111,118,101,114,102,108,111,119,32,105,110,32,109,112,122,32,116,121,112,101,10,0] /* gmp: overflow in mpz */, "i8", ALLOC_NONE, 5243552);
allocate([99,121,32,61,61,32,48,0] /* cy == 0\00 */, "i8", ALLOC_NONE, 5243580);
allocate([105,60,61,102,91,48,93,46,109,97,120,95,102,97,99,115,0] /* i_=f[0].max_facs\00 */, "i8", ALLOC_NONE, 5243588);
allocate([99,121,32,61,61,32,48,0] /* cy == 0\00 */, "i8", ALLOC_NONE, 5243608);
allocate([99,121,32,61,61,32,48,0] /* cy == 0\00 */, "i8", ALLOC_NONE, 5243616);
allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* 0123456789ABCDEFGHIJ */, "i8", ALLOC_NONE, 5243624);
allocate([71,78,85,32,77,80,58,32,67,97,110,110,111,116,32,114,101,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,40,111,108,100,95,115,105,122,101,61,37,108,117,32,110,101,119,95,115,105,122,101,61,37,108,117,41,10,0] /* GNU MP: Cannot reall */, "i8", ALLOC_NONE, 5243688);
allocate([95,95,103,109,112,110,95,102,102,116,95,110,101,120,116,95,115,105,122,101,32,40,112,108,44,32,107,41,32,61,61,32,112,108,0] /* __gmpn_fft_next_size */, "i8", ALLOC_NONE, 5243752);
allocate([115,98,112,105,49,95,100,105,118,97,112,112,114,95,113,46,99,0] /* sbpi1_divappr_q.c\00 */, "i8", ALLOC_NONE, 5243788);
allocate([115,98,112,105,49,95,100,105,118,95,113,46,99,0] /* sbpi1_div_q.c\00 */, "i8", ALLOC_NONE, 5243808);
allocate([37,100,58,32,0] /* %d: \00 */, "i8", ALLOC_NONE, 5243824);
allocate([113,120,110,32,61,61,32,48,0] /* qxn == 0\00 */, "i8", ALLOC_NONE, 5243832);
allocate([112,111,119,116,97,98,95,109,101,109,95,112,116,114,32,60,32,112,111,119,116,97,98,95,109,101,109,32,43,32,40,40,117,110,41,32,43,32,50,32,42,32,51,50,41,0] /* powtab_mem_ptr _ pow */, "i8", ALLOC_NONE, 5243844);
allocate([110,112,91,49,93,32,61,61,32,110,49,0] /* np[1] == n1\00 */, "i8", ALLOC_NONE, 5243892);
allocate([110,112,91,49,93,32,61,61,32,110,49,0] /* np[1] == n1\00 */, "i8", ALLOC_NONE, 5243904);
allocate([98,97,115,101,60,115,105,101,118,101,95,115,105,122,101,0] /* base_sieve_size\00 */, "i8", ALLOC_NONE, 5243916);
allocate([112,105,46,99,0] /* pi.c\00 */, "i8", ALLOC_NONE, 5243932);
allocate(468, "i8", ALLOC_NONE, 5243940);
allocate([1,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8] /* \01\02\03\03\04\04\0 */, "i8", ALLOC_NONE, 5244408);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,105,87,67,184,23,158,71,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,240,63,1,0,0,0,0,0,0,0,20,0,0,0,61,53,53,152,147,48,228,63,145,27,212,207,36,60,86,59,16,0,0,0,0,0,0,0,0,0,224,63,2,0,0,0,0,0,0,0,13,0,0,0,116,15,5,105,52,144,219,63,149,115,194,72,132,38,92,194,12,0,0,0,159,10,220,70,50,194,216,63,0,16,191,129,182,209,27,249,11,0,0,0,181,169,206,58,25,204,214,63,151,156,219,117,203,162,7,22,10,0,0,0,87,85,85,85,85,85,213,63,3,0,0,0,0,0,0,0,10,0,0,0,61,53,53,152,147,48,212,63,145,27,212,207,36,60,86,59,9,0,0,0,253,121,159,80,19,68,211,63,0,202,154,59,130,190,224,18,9,0,0,0,83,100,221,193,9,128,210,63,43,109,139,140,4,222,76,210,8,0,0,0,99,96,65,131,51,218,209,63,0,0,161,25,181,154,163,63,8,0,0,0,30,100,217,248,148,75,209,63,33,16,159,48,95,172,248,80,8,0,0,0,173,214,210,254,63,207,208,63,0,193,246,87,30,59,132,116,8,0,0,0,21,62,109,196,157,97,208,63,129,155,194,152,194,38,3,173,8,0,0,0,0,0,0,0,0,0,208,63,4,0,0,0,0,0,0,0,7,0,0,0,132,88,172,126,181,80,207,63,113,69,117,24,189,182,240,78,7,0,0,0,228,166,138,198,44,178,206,63,128,188,125,36,161,72,252,192,7,0,0,0,169,93,12,24,225,33,206,63,123,102,71,53,66,137,131,51,7,0,0,0,54,152,67,33,205,157,205,63,0,64,75,76,171,41,127,173,7,0,0,0,13,122,54,120,76,36,205,63,29,110,90,107,21,61,60,49,7,0,0,0,61,23,172,137,5,180,204,63,128,225,172,148,224,169,204,184,7,0,0,0,41,215,168,91,217,75,204,63,103,131,241,202,233,109,237,66,6,0,0,0,208,248,152,104,215,234,203,63,0,0,100,11,11,14,152,103,6,0,0,0,114,15,5,105,52,144,203,63,81,74,141,14,18,152,121,25,6,0,0,0,113,176,46,63,67,59,203,63,64,174,105,18,150,83,232,188,6,0,0,0,253,70,156,117,111,235,202,63,73,145,23,23,169,3,193,98,6,0,0,0,255,59,14,235,56,160,202,63,0,16,185,28,67,61,53,29,6,0,0,0,138,141,179,98,48,89,202,63,153,72,116,35,234,236,29,206,6,0,0,0,163,149,43,195,244,21,202,63,64,168,115,43,17,197,15,121,6,0,0,0,225,125,204,220,48,214,201,63,65,59,230,52,160,101,184,53,6,0,0,0,154,153,153,153,153,153,201,63,5,0,0,0,0,0,0,0,6,0,0,0,147,96,138,128,236,95,201,63,193,60,250,76,179,209,174,169,6,0,0,0,35,79,11,123,238,40,201,63,64,216,19,92,41,194,223,99,6,0,0,0,227,6,140,207,106,244,200,63,25,181,145,109,48,238,15,43,6,0,0,0,159,10,220,70,50,194,200,63,0,16,191,129,182,209,27,249,6,0,0,0,236,26,78,116,26,146,200,63,201,224,237,152,169,195,137,172,6,0,0,0,83,48,74,26,253,99,200,63,64,62,119,179,254,50,44,109,6,0,0,0,93,25,66,166,183,55,200,63,209,196,187,209,201,7,121,56,6,0,0,0,234,254,253,191,42,13,200,63,0,0,36,244,11,122,111,12,5,0,0,0,177,210,254,232,57,228,199,63,73,211,231,6,84,129,146,40,5,0,0,0,110,115,82,41,203,188,199,63,160,48,202,7,157,98,232,6,5,0,0,0,6,35,178,199,198,150,199,63,187,43,195,8,160,220,115,211,5,0,0,0,169,71,39,11,23,114,199,63,0,108,212,9,149,120,177,160,5,0,0,0,17,2,194,4,168,78,199,63,253,172,255,10,165,17,104,116,5,0,0,0,64,53,45,96,103,44,199,63,224,190,70,12,15,80,166,77,5,0,0,0,135,124,31,58,68,11,199,63,239,134,171,13,130,53,162,43,5,0,0,0,170,193,210,251,46,235,198,63,0,0,48,15,136,10,178,13,5,0,0,0,181,169,206,58,25,204,198,63,241,58,214,16,228,92,141,230,5,0,0,0,156,104,110,156,245,173,198,63,32,95,160,18,157,253,205,183,5,0,0,0,93,241,161,188,183,144,198,63,227,170,144,20,51,57,88,142,5,0,0,0,255,217,125,23,84,116,198,63,0,116,169,22,234,195,124,105,5,0,0,0,241,107,61,245,191,88,198,63,37,40,237,24,108,202,165,72,5,0,0,0,221,208,103,88,241,61,198,63,96,77,94,27,22,219,82,43,5,0,0,0,186,150,212,237,222,35,198,63,151,130,255,29,166,134,21,17,5,0,0,0,137,69,85,254,127,10,198,63,0,128,211,32,54,43,29,243,5,0,0,0,238,197,209,97,204,241,197,63,153,23,221,35,25,109,215,200,5,0,0,0,135,34,172,115,188,217,197,63,160,53,31,39,180,30,203,162,5,0,0,0,242,242,69,8,73,194,197,63,11,225,156,42,195,62,124,128,5,0,0,0,163,170,134,99,107,171,197,63,0,60,89,46,191,200,126,97,5,0,0,0,111,57,70,48,29,149,197,63,77,132,87,50,190,108,116,69,5,0,0,0,62,6,131,120,88,127,197,63,224,19,155,54,115,162,10,44,5,0,0,0,43,101,77,158,23,106,197,63,63,97,39,59,5,8,249,20,5,0,0,0,87,85,85,85,85,85,197,63,6,0,0,0,0,0,0,0,5,0,0,0,43,161,9,157,12,65,197,63,65,161,40,69,41,8,207,217,5,0,0,0,49,123,57,187,56,45,197,63,32,20,165,74,65,72,252,182,5,0,0,0,229,108,43,55,213,25,197,63,51,70,121,80,203,84,48,151,5,0,0,0,230,239,29,213,221,6,197,63,0,68,169,86,75,190,29,122,5,0,0,0,94,90,39,146,78,244,196,63,117,57,57,93,127,205,127,95,5,0,0,0,169,237,107,160,35,226,196,63,96,114,45,100,132,108,25,71,5,0,0,0,165,216,161,99,89,208,196,63,231,90,138,107,53,54,180,48,5,0,0,0,22,225,219,109,236,190,196,63,0,128,84,115,246,165,31,28,5,0,0,0,71,46,148,124,217,173,196,63,233,143,144,123,74,99,48,9,5,0,0,0,13,95,241,117,29,157,196,63,160,90,67,132,60,74,127,239,5,0,0,0,95,175,64,102,181,140,196,63,91,210,113,141,210,82,85,207,5,0,0,0,223,122,160,125,158,124,196,63,0,12,33,151,142,124,164,177,5,0,0,0,34,227,214,13,214,108,196,63,157,63,86,161,62,180,52,150,5,0,0,0,88,203,80,136,89,93,196,63,224,200,22,172,125,129,211,124,5,0,0,0,161,187,69,124,38,78,196,63,143,39,104,183,97,103,83,101,5,0,0,0,40,146,253,148,58,63,196,63,0,0,80,195,142,88,139,79,5,0,0,0,63,53,53,152,147,48,196,63,145,27,212,207,36,60,86,59,5,0,0,0,149,188,159,100,47,34,196,63,32,105,250,220,84,129,146,40,5,0,0,0,169,196,129,240,11,20,196,63,131,253,200,234,176,191,33,23,5,0,0,0,145,213,100,72,39,6,196,63,0,20,70,249,157,98,232,6,4,0,0,0,67,247,224,141,127,248,195,63,177,132,28,3,124,193,28,73,4,0,0,0,227,184,122,246,18,235,195,63,16,171,66,3,59,216,17,58,4,0,0,0,230,23,148,202,223,221,195,63,33,44,106,3,205,116,224,43,4,0,0,0,194,215,110,100,228,208,195,63,0,16,147,3,231,2,122,30,4,0,0,0,250,249,62,47,31,196,195,63,225,94,189,3,221,14,209,17,4,0,0,0,245,35,76,166,142,183,195,63,16,33,233,3,104,44,217,5,4,0,0,0,128,217,32,84,49,171,195,63,241,94,22,4,178,191,13,245,4,0,0,0,211,138,198,209,5,159,195,63,0,33,69,4,22,19,159,223,4,0,0,0,231,137,13,198,10,147,195,63,209,111,117,4,132,166,82,203,4,0,0,0,200,14,224,228,62,135,195,63,16,84,167,4,151,62,22,184,4,0,0,0,136,131,159,238,160,123,195,63,129,214,218,4,105,242,216,165,4,0,0,0,10,97,139,175,47,112,195,63,0,0,16,5,205,15,139,148,4,0,0,0,3,244,48,255,233,100,195,63,129,217,70,5,21,2,30,132,4,0,0,0,212,110,227,191,206,89,195,63,16,108,127,5,30,59,132,116,4,0,0,0,82,185,59,222,220,78,195,63,209,192,185,5,110,30,177,101,4,0,0,0,255,121,159,80,19,68,195,63,0,225,245,5,35,238,152,87,4,0,0,0,220,222,206,22,113,57,195,63,241,213,51,6,155,185,48,74,4,0,0,0,230,180,120,57,245,46,195,63,16,169,115,6,148,77,110,61,4,0,0,0,145,101,212,201,158,36,195,63,225,99,181,6,176,37,72,49,4,0,0,0,249,121,65,225,108,26,195,63,0,16,249,6,46,95,181,37,4,0,0,0,157,73,236,160,94,16,195,63,33,183,62,7,203,172,173,26,4,0,0,0,5,130,119,49,115,6,195,63,16,99,134,7,162,75,41,16,4,0,0,0,168,57,170,194,169,252,194,63,177,29,208,7,246,248,32,6,4,0,0,0,220,70,34,139,1,243,194,63,0,241,27,8,182,209,27,249,4,0,0,0,187,151,10,200,121,233,194,63,17,231,105,8,42,123,211,230,4,0,0,0,103,77,213,188,17,224,194,63,16,10,186,8,110,255,92,213,4,0,0,0,195,96,249,178,200,214,194,63,65,100,12,9,178,45,173,196,4,0,0,0,229,154,179,249,157,205,194,63,0,0,97,9,207,133,185,180,4,0,0,0,61,175,202,229,144,196,194,63,193,231,183,9,239,43,120,165,4,0,0,0,185,72,86,209,160,187,194,63,16,38,17,10,42,221,223,150,4,0,0,0,64,222,136,27,205,178,194,63,145,197,108,10,9,229,231,136,4,0,0,0,207,37,124,40,21,170,194,63,0,209,202,10,211,19,136,123,4,0,0,0,27,0,0,97,120,161,194,63,49,83,43,11,149,181,184,110,4,0,0,0,93,185,107,50,246,152,194,63,16,87,142,11,219,137,114,98,4,0,0,0,172,125,113,14,142,144,194,63,161,231,243,11,7,188,174,86,4,0,0,0,245,225,243,106,63,136,194,63,0,16,92,12,51,220,102,75,4,0,0,0,83,100,221,193,9,128,194,63,97,219,198,12,163,216,148,64,4,0,0,0,94,200,249,144,236,119,194,63,16,85,52,13,165,247,50,54,4,0,0,0,217,53,209,89,231,111,194,63,113,136,164,13,240,209,59,44,4,0,0,0,159,1,133,161,249,103,194,63,0,129,23,14,95,77,170,34,4,0,0,0,76,10,174,240,34,96,194,63,81,74,141,14,18,152,121,25,4,0,0,0,63,147,60,211,98,88,194,63,16,240,5,15,229,35,165,16,4,0,0,0,50,138,89,216,184,80,194,63,1,126,129,15,55,162,40,8,4,0,0,0,144,36,73,146,36,73,194,63,7,0,0,0,0,0,0,0,4,0,0,0,231,194,78,150,165,65,194,63,1,130,129,16,82,196,78,240,4,0,0,0,186,9,146,124,59,58,194,63,16,16,6,17,74,68,54,225,4,0,0,0,104,32,5,224,229,50,194,63,81,182,141,17,137,149,175,210,4,0,0,0,1,7,76,94,164,43,194,63,0,129,24,18,131,42,180,196,4,0,0,0,131,245,164,151,118,36,194,63,113,124,166,18,245,204,61,183,4,0,0,0,26,183,209,46,92,29,194,63,16,181,55,19,197,152,70,170,4,0,0,0,71,245,1,201,84,22,194,63,97,55,204,19,41,247,200,157,4,0,0,0,38,103,190,13,96,15,194,63,0,16,100,20,48,154,191,145,4,0,0,0,217,217,212,166,125,8,194,63,161,75,255,20,135,120,37,134,4,0,0,0,152,7,69,64,173,1,194,63,16,247,157,21,140,201,245,122,4,0,0,0,214,51,46,136,238,250,193,63,49,31,64,22,160,1,44,112,4,0,0,0,215,130,189,46,65,244,193,63,0,209,229,22,177,206,195,101,4,0,0,0,50,4,29,230,164,237,193,63,145,25,143,23,2,21,185,91,4,0,0,0,222,103,99,98,25,231,193,63,16,6,60,24,35,236,7,82,4,0,0,0,182,85,132,89,158,224,193,63,193,163,236,24,25,156,172,72,4,0,0,0,99,96,65,131,51,218,193,63,0,0,161,25,181,154,163,63,4,0,0,0,61,140,27,153,216,211,193,63,65,40,89,26,18,137,233,54,4,0,0,0,163,99,69,86,141,205,193,63,16,42,21,27,64,49,123,46,4,0,0,0,97,146,149,119,81,199,193,63,17,19,213,27,11,132,85,38,4,0,0,0,44,2,122,187,36,193,193,63,0,241,152,28,234,150,117,30,4,0,0,0,105,114,235,225,6,187,193,63,177,209,96,29,13,162,216,22,4,0,0,0,232,133,97,172,247,180,193,63,16,195,44,30,135,254,123,15,4,0,0,0,85,65,199,221,246,174,193,63,33,211,252,30,146,36,93,8,4,0,0,0,143,245,111,58,4,169,193,63,0,16,209,31,244,169,121,1,4,0,0,0,72,145,12,136,31,163,193,63,225,135,169,32,235,128,158,245,4,0,0,0,78,85,161,141,72,157,193,63,16,73,134,33,219,104,183,232,4,0,0,0,153,231,123,19,127,151,193,63,241,97,103,34,213,214,57,220,4,0,0,0,217,192,41,227,194,145,193,63,0,225,76,35,209,197,33,208,4,0,0,0,217,240,110,199,19,140,193,63,209,212,54,36,55,94,107,196,4,0,0,0,21,54,61,140,113,134,193,63,16,76,37,37,156,243,18,185,4,0,0,0,17,101,171,254,219,128,193,63,129,85,24,38,148,2,21,174,4,0,0,0,25,28,237,236,82,123,193,63,0,0,16,39,177,46,110,163,4,0,0,0,107,192,74,38,214,117,193,63,129,90,12,40,148,64,27,153,4,0,0,0,168,193,25,123,101,112,193,63,16,116,13,41,30,36,25,143,4,0,0,0,196,32,181,188,0,107,193,63,209,91,19,42,183,230,100,133,4,0,0,0,237,55,118,189,167,101,193,63,0,33,30,43,180,181,251,123,4,0,0,0,109,192,173,80,90,96,193,63,241,210,45,44,200,220,218,114,4,0,0,0,122,20,157,74,24,91,193,63,16,129,66,45,152,196,255,105,4,0,0,0,103,170,111,128,225,85,193,63,225,58,92,46,84,241,103,97,4,0,0,0,210,198,52,200,181,80,193,63,0,16,123,47,110,1,17,89,4,0,0,0,32,100,217,248,148,75,193,63,33,16,159,48,95,172,248,80,4,0,0,0,152,76,34,234,126,70,193,63,16,75,200,49,124,193,28,73,4,0,0,0,193,101,166,116,115,65,193,63,177,208,246,50,216,38,123,65,4,0,0,0,193,42,201,113,114,60,193,63,0,177,42,52,59,216,17,58,4,0,0,0,0,84,181,187,123,55,193,63,17,252,99,53,34,230,222,50,4,0,0,0,152,170,87,45,143,50,193,63,16,194,162,54,205,116,224,43,4,0,0,0,164,5,90,162,172,45,193,63,65,19,231,55,88,187,20,37,4,0,0,0,232,111,30,247,211,40,193,63,0,0,49,57,231,2,122,30,4,0,0,0,137,116,186,8,5,36,193,63,193,152,128,58,208,165,14,24,4,0,0,0,53,145,242,180,63,31,193,63,16,238,213,59,221,14,209,17,4,0,0,0,67,204,53,218,131,26,193,63,145,16,49,61,142,184,191,11,4,0,0,0,221,109,153,87,209,21,193,63,0,17,146,62,104,44,217,5,4,0,0,0,104,218,212,12,40,17,193,63,49,0,249,63,76,2,28,0,4,0,0,0,122,141,61,218,135,12,193,63,16,239,101,65,178,191,13,245,4,0,0,0,203,51,195,160,240,7,193,63,161,238,216,66,163,239,48,234,4,0,0,0,90,227,235,65,98,3,193,63,0,16,82,68,22,19,159,223,4,0,0,0,102,112,208,159,220,254,192,63,97,100,209,69,201,192,85,213,4,0,0,0,109,222,24,157,95,250,192,63,16,253,86,71,132,166,82,203,4,0,0,0,49,236,248,28,235,245,192,63,113,235,226,72,31,136,147,193,4,0,0,0,178,185,44,3,127,241,192,63,0,65,117,74,151,62,22,184,4,0,0,0,70,135,245,51,27,237,192,63,81,15,14,76,36,183,216,174,4,0,0,0,23,141,22,148,191,232,192,63,16,104,173,77,105,242,216,165,4,0,0,0,229,233,209,8,108,228,192,63,1,93,83,79,157,3,21,157,4,0,0,0,123,168,229,119,32,224,192,63,0,0,0,81,205,15,139,148,4,0,0,0,15,219,136,199,220,219,192,63,1,99,179,82,29,77,57,140,4,0,0,0,158,203,104,222,160,215,192,63,16,152,109,84,21,2,30,132,4,0,0,0,216,64,166,163,108,211,192,63,81,177,46,86,248,132,55,124,4,0,0,0,173,214,210,254,63,207,192,63,0,193,246,87,30,59,132,116,4,0,0,0,244,105,238,215,26,203,192,63,113,217,197,89,93,152,2,109,4,0,0,0,129,150,100,23,253,198,192,63,16,13,156,91,110,30,177,101,4,0,0,0,38,71,10,166,230,194,192,63,97,110,121,93,100,92,142,94,4,0,0,0,190,86,27,109,215,190,192,63,0,16,94,95,35,238,152,87,4,0,0,0,40,66,56,86,207,186,192,63,161,4,74,97,222,123,207,80,4,0,0,0,71,234,99,75,206,182,192,63,16,95,61,99,155,185,48,74,4,0,0,0,155,101,1,55,212,178,192,63,49,50,56,101,189,102,187,67,4,0,0,0,7,225,209,3,225,174,192,63,0,145,58,103,148,77,110,61,4,0,0,0,68,143,242,156,244,170,192,63,145,142,68,105,238,66,72,55,4,0,0,0,108,166,218,237,14,167,192,63,16,62,86,107,176,37,72,49,4,0,0,0,74,107,89,226,47,163,192,63,193,178,111,109,117,222,108,43,4,0,0,0,240,73,148,102,87,159,192,63,0,0,145,111,46,95,181,37,4,0,0,0,66,251,4,103,133,155,192,63,65,57,186,113,197,162,32,32,4,0,0,0,220,182,119,208,185,151,192,63,16,114,235,115,203,172,173,26,4,0,0,0,40,113,9,144,244,147,192,63,17,190,36,118,31,137,91,21,4,0,0,0,28,37,38,147,53,144,192,63,0,49,102,120,162,75,41,16,4,0,0,0,99,41,135,199,124,140,192,63,177,222,175,122,233,15,22,11,4,0,0,0,109,144,49,27,202,136,192,63,16,219,1,125,246,248,32,6,4,0,0,0,95,147,116,124,29,133,192,63,33,58,92,127,239,48,73,1,4,0,0,0,21,7,232,217,118,129,192,63,0,16,191,129,182,209,27,249,4,0,0,0,119,219,106,34,214,125,192,63,225,112,42,132,199,176,220,239,4,0,0,0,88,164,33,69,59,122,192,63,16,113,158,134,42,123,211,230,4,0,0,0,216,43,117,49,166,118,192,63,241,36,27,137,74,185,254,221,4,0,0,0,4,14,17,215,22,115,192,63,0,161,160,139,110,255,92,213,4,0,0,0,50,93,226,37,141,111,192,63,209,249,46,142,80,237,236,204,4,0,0,0,41,79,22,14,9,108,192,63,16,68,198,144,178,45,173,196,4,0,0,0,139,242,24,128,138,104,192,63,129,148,102,147,249,117,156,188,4,0,0,0,122,236,147,108,17,101,192,63,0,0,16,150,207,133,185,180,4,0,0,0,19,62,109,196,157,97,192,63,129,155,194,152,194,38,3,173,4,0,0,0,156,17,198,120,47,94,192,63,16,124,126,155,239,43,120,165,4,0,0,0,34,143,249,122,198,90,192,63,209,182,67,158,169,113,23,158,4,0,0,0,85,184,155,188,98,87,192,63,0,97,18,161,42,221,223,150,4,0,0,0,107,75,120,47,4,84,192,63,241,143,234,163,65,92,208,143,4,0,0,0,226,172,145,197,170,80,192,63,16,89,204,166,9,229,231,136,4,0,0,0,214,215,31,113,86,77,192,63,225,209,183,169,157,117,37,130,4,0,0,0,197,84,143,36,7,74,192,63,0,16,173,172,211,19,136,123,4,0,0,0,190,54,128,210,188,70,192,63,33,41,172,175,249,204,14,117,4,0,0,0,118,30,197,109,119,67,192,63,16,51,181,178,149,181,184,110,4,0,0,0,111,67,98,233,54,64,192,63,177,67,200,181,35,233,132,104,4,0,0,0,207,130,140,56,251,60,192,63,0,113,229,184,219,137,114,98,4,0,0,0,223,115,168,78,196,57,192,63,17,209,12,188,123,192,128,92,4,0,0,0,236,129,73,31,146,54,192,63,16,122,62,191,7,188,174,86,4,0,0,0,133,11,49,158,100,51,192,63,65,130,122,194,155,177,251,80,4,0,0,0,217,134,77,191,59,48,192,63,0,0,193,197,51,220,102,75,4,0,0,0,24,171,185,118,23,45,192,63,193,9,18,201,124,124,239,69,4,0,0,0,192,158,187,184,247,41,192,63,16,182,109,204,163,216,148,64,4,0,0,0,152,42,196,121,220,38,192,63,145,27,212,207,36,60,86,59,4,0,0,0,92,241,109,174,197,35,192,63,0,81,69,211,165,247,50,54,4,0,0,0,232,171,124,75,179,32,192,63,49,109,193,214,195,96,42,49,4,0,0,0,171,105,220,69,165,29,192,63,16,135,72,218,240,209,59,44,4,0,0,0,134,213,160,146,155,26,192,63,161,181,218,221,69,170,102,39,4,0,0,0,181,126,4,39,150,23,192,63,0,16,120,225,95,77,170,34,4,0,0,0,207,37,104,248,148,20,192,63,97,173,32,229,60,35,6,30,4,0,0,0,163,13,82,252,151,17,192,63,16,165,212,232,18,152,121,25,4,0,0,0,27,80,109,40,159,14,192,63,113,14,148,236,51,28,4,21,4,0,0,0,161,54,137,114,170,11,192,63,0,1,95,240,229,35,165,16,4,0,0,0,81,150,152,208,185,8,192,63,81,148,53,244,73,39,92,12,4,0,0,0,156,47,177,56,205,5,192,63,16,224,23,248,55,162,40,8,4,0,0,0,129,17,11,161,228,2,192,63,1,252,5,252,35,20,10,4,4,0,0,0,0,0,0,0,0,0,192,63,8,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5244536);
allocate([6], ["i8* (i8*, i32, i32)*",0,0,0], ALLOC_NONE, 5249676);
allocate(4, "i8", ALLOC_NONE, 5249680);
allocate([2], ["void (i8*, i32)*",0,0,0], ALLOC_NONE, 5249684);
allocate(4, "i8", ALLOC_NONE, 5249688);
allocate([3,0,0,0], "i8", ALLOC_NONE, 5249692);
allocate([1,171,205,183,57,163,197,239,241,27,61,167,41,19,53,223,225,139,173,151,25,131,165,207,209,251,29,135,9,243,21,191,193,107,141,119,249,99,133,175,177,219,253,103,233,211,245,159,161,75,109,87,217,67,101,143,145,187,221,71,201,179,213,127,129,43,77,55,185,35,69,111,113,155,189,39,169,147,181,95,97,11,45,23,153,3,37,79,81,123,157,7,137,115,149,63,65,235,13,247,121,227,5,47,49,91,125,231,105,83,117,31,33,203,237,215,89,195,229,15,17,59,93,199,73,51,85,255] /* \01\AB\CD\B79\A3\C5\ */, "i8", ALLOC_NONE, 5249696);
allocate([4], ["i8* (i32)*",0,0,0], ALLOC_NONE, 5249824);
allocate(4, "i8", ALLOC_NONE, 5249828);
allocate([102,97,99,95,115,101,116,95,98,112,0] /* fac_set_bp\00 */, "i8", ALLOC_NONE, 5249832);
allocate([102,97,99,95,114,101,109,111,118,101,95,103,99,100,0] /* fac_remove_gcd\00 */, "i8", ALLOC_NONE, 5249844);
allocate([102,97,99,95,109,117,108,50,0] /* fac_mul2\00 */, "i8", ALLOC_NONE, 5249860);

  
  var ___rusage_struct_layout={__size__:72,ru_utime:0,ru_stime:8,ru_maxrss:16,ru_ixrss:20,ru_idrss:24,ru_isrss:28,ru_minflt:32,ru_majflt:36,ru_nswap:40,ru_inblock:44,ru_oublock:48,ru_msgsnd:52,ru_msgrcv:56,ru_nsignals:60,ru_nvcsw:64,ru_nivcsw:68};function _getrusage(resource, rlp) {
      // %struct.timeval = type { i32, i32 }
      var timeval = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
  
      // int getrusage(int resource, struct rusage *rlp);
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_utime+timeval[0]))>>2)]=1
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_utime+timeval[1]))>>2)]=2
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_stime+timeval[0]))>>2)]=3
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_stime+timeval[1]))>>2)]=4
      return 0;
    }

  var _sqrt=Math.sqrt;

  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  
  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0);
      }
  
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }

  
  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
var _raise; // stub for _raise
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno=___errno_location;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', { alpha: false });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,___gmp_default_free,0,___gmp_default_allocate,0,___gmp_default_reallocate,0];

function _fac_reset($f) {
  var label = 0;


  var $1;
  $1=$f;
  var $2=$1;
  var $3=(($2)|0);
  var $4=(($3+4)|0);
  HEAP32[(($4)>>2)]=0;

  return;
}


function _fac_compact($f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $i;
      var $j;
      $1=$f;
      $i=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$1;
      var $5=(($4)|0);
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($3)>>>0) < (($7)>>>0);
      if ($8) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $10=$i;
      var $11=$1;
      var $12=(($11)|0);
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+($10<<2))|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)>>>0) > 0;
      if ($17) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $19=$j;
      var $20=$i;
      var $21=(($19)|0) < (($20)|0);
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$i;
      var $24=$1;
      var $25=(($24)|0);
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+($23<<2))|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$j;
      var $31=$1;
      var $32=(($31)|0);
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+($30<<2))|0);
      HEAP32[(($35)>>2)]=$29;
      var $36=$i;
      var $37=$1;
      var $38=(($37)|0);
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+($36<<2))|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$j;
      var $44=$1;
      var $45=(($44)|0);
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+($43<<2))|0);
      HEAP32[(($48)>>2)]=$42;
      label = 7; break;
    case 7: 
      var $50=$j;
      var $51=((($50)+(1))|0);
      $j=$51;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $54=$i;
      var $55=((($54)+(1))|0);
      $i=$55;
      label = 3; break;
    case 10: 
      var $57=$j;
      var $58=$1;
      var $59=(($58)|0);
      var $60=(($59+4)|0);
      HEAP32[(($60)>>2)]=$57;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_fac_compact["X"]=1;

function _cputime() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $rus=__stackBase__;
  var $1=_getrusage(0, $rus);
  var $2=(($rus)|0);
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=((($4)*(1000))&-1);
  var $6=(($rus)|0);
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=((((($8)|0))/(1000))&-1);
  var $10=((($5)+($9))|0);
  STACKTOP = __stackBase__;
  return $10;
}


function _my_sqrt_ui($r, $x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $prec;
      var $bits;
      var $prec0;
      var $bit;
      $1=$r;
      $2=$x;
      var $3=$1;
      var $4=___gmpf_get_prec($3);
      $prec0=$4;
      var $5=$prec0;
      var $6=(($5)>>>0) <= 53;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$1;
      var $9=$2;
      var $10=(($9)>>>0);
      var $11=Math.sqrt($10);
      ___gmpf_set_d($8, $11);
      label = 14; break;
    case 4: 
      $bits=0;
      var $13=$prec0;
      $prec=$13;
      label = 5; break;
    case 5: 
      var $15=$prec;
      var $16=(($15)>>>0) > 53;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $18=$prec;
      var $19=$18 & 1;
      $bit=$19;
      var $20=$prec;
      var $21=$bit;
      var $22=((($20)+($21))|0);
      var $23=Math.floor(((($22)>>>0))/(2));
      $prec=$23;
      var $24=$bits;
      var $25=($24<<1);
      var $26=$bit;
      var $27=((($25)+($26))|0);
      $bits=$27;
      label = 5; break;
    case 7: 
      ___gmpf_set_prec_raw(((5242900)|0), 53);
      var $29=$2;
      var $30=(($29)>>>0);
      var $31=Math.sqrt($30);
      var $32=(1)/($31);
      ___gmpf_set_d(((5242900)|0), $32);
      label = 8; break;
    case 8: 
      var $34=$prec;
      var $35=$prec0;
      var $36=(($34)>>>0) < (($35)>>>0);
      if ($36) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $38=$prec;
      var $39=($38<<1);
      $prec=$39;
      var $40=$prec;
      var $41=$prec0;
      var $42=(($40)>>>0) < (($41)>>>0);
      if ($42) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $44=$prec;
      ___gmpf_set_prec_raw(((5242884)|0), $44);
      ___gmpf_mul(((5242884)|0), ((5242900)|0), ((5242900)|0));
      var $45=$2;
      ___gmpf_mul_ui(((5242884)|0), ((5242884)|0), $45);
      ___gmpf_ui_sub(((5242884)|0), 1, ((5242884)|0));
      var $46=$prec;
      var $47=Math.floor(((($46)>>>0))/(2));
      ___gmpf_set_prec_raw(((5242884)|0), $47);
      ___gmpf_div_2exp(((5242884)|0), ((5242884)|0), 1);
      ___gmpf_mul(((5242884)|0), ((5242884)|0), ((5242900)|0));
      var $48=$prec;
      ___gmpf_set_prec_raw(((5242900)|0), $48);
      ___gmpf_add(((5242900)|0), ((5242900)|0), ((5242884)|0));
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      var $51=$bits;
      var $52=$51 & 1;
      var $53=$prec;
      var $54=((($53)-($52))|0);
      $prec=$54;
      var $55=$bits;
      var $56=Math.floor(((($55)>>>0))/(2));
      $bits=$56;
      label = 8; break;
    case 13: 
      var $58=$prec0;
      var $59=Math.floor(((($58)>>>0))/(2));
      ___gmpf_set_prec_raw(((5242884)|0), $59);
      var $60=$2;
      ___gmpf_mul_ui(((5242884)|0), ((5242900)|0), $60);
      var $61=$1;
      ___gmpf_mul($61, ((5242884)|0), ((5242884)|0));
      var $62=$1;
      var $63=$2;
      var $64=$1;
      ___gmpf_ui_sub($62, $63, $64);
      var $65=$1;
      ___gmpf_mul(((5242900)|0), ((5242900)|0), $65);
      ___gmpf_div_2exp(((5242900)|0), ((5242900)|0), 1);
      var $66=$1;
      ___gmpf_add($66, ((5242900)|0), ((5242884)|0));
      label = 14; break;
    case 14: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_my_sqrt_ui["X"]=1;

function _fac_init_size($f, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$f;
      $2=$s;
      var $3=$2;
      var $4=(($3)|0) < 32;
      if ($4) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $2=32;
      label = 4; break;
    case 4: 
      var $7=$2;
      var $8=($7<<2);
      var $9=($8<<1);
      var $10=_malloc($9);
      var $11=$10;
      var $12=$1;
      var $13=(($12)|0);
      var $14=(($13+8)|0);
      HEAP32[(($14)>>2)]=$11;
      var $15=$1;
      var $16=(($15)|0);
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($18+($19<<2))|0);
      var $21=$1;
      var $22=(($21)|0);
      var $23=(($22+12)|0);
      HEAP32[(($23)>>2)]=$20;
      var $24=$2;
      var $25=$1;
      var $26=(($25)|0);
      var $27=(($26)|0);
      HEAP32[(($27)>>2)]=$24;
      var $28=$1;
      _fac_reset($28);

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _fac_init($f) {
  var label = 0;


  var $1;
  $1=$f;
  var $2=$1;
  _fac_init_size($2, 32);

  return;
}


function _fac_clear($f) {
  var label = 0;


  var $1;
  $1=$f;
  var $2=$1;
  var $3=(($2)|0);
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  _free($6);

  return;
}


function _fac_resize($f, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$f;
      $2=$s;
      var $3=$1;
      var $4=(($3)|0);
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$2;
      var $8=(($6)>>>0) < (($7)>>>0);
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$1;
      _fac_clear($10);
      var $11=$1;
      var $12=$2;
      _fac_init_size($11, $12);
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _fac_set_bp($f, $base, $pow) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $1=$f;
      $2=$base;
      $3=$pow;
      var $4=$2;
      var $5=HEAP32[((5242916)>>2)];
      var $6=(($4)>>>0) < (($5)>>>0);
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5243932)|0), 276, ((5249832)|0), ((5243916)|0));
      label = 5; break;
    case 5: 
      $i=0;
      var $10=$2;
      var $11=Math.floor(((($10)>>>0))/(2));
      $2=$11;
      label = 6; break;
    case 6: 
      var $13=$2;
      var $14=(($13)>>>0) > 0;
      if ($14) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $16=$2;
      var $17=HEAP32[((5242920)>>2)];
      var $18=(($17+((($16)*(12))&-1))|0);
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$i;
      var $22=$1;
      var $23=(($22)|0);
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+($21<<2))|0);
      HEAP32[(($26)>>2)]=$20;
      var $27=$2;
      var $28=HEAP32[((5242920)>>2)];
      var $29=(($28+((($27)*(12))&-1))|0);
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$3;
      var $33=Math.imul($31,$32);
      var $34=$i;
      var $35=$1;
      var $36=(($35)|0);
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+($34<<2))|0);
      HEAP32[(($39)>>2)]=$33;
      label = 8; break;
    case 8: 
      var $41=$i;
      var $42=((($41)+(1))|0);
      $i=$42;
      var $43=$2;
      var $44=HEAP32[((5242920)>>2)];
      var $45=(($44+((($43)*(12))&-1))|0);
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      $2=$47;
      label = 6; break;
    case 9: 
      var $49=$i;
      var $50=$1;
      var $51=(($50)|0);
      var $52=(($51+4)|0);
      HEAP32[(($52)>>2)]=$49;
      var $53=$i;
      var $54=$1;
      var $55=(($54)|0);
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($53)>>>0) <= (($57)>>>0);
      if ($58) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      ___assert_func(((5243932)|0), 282, ((5249832)|0), ((5243588)|0));
      label = 12; break;
    case 12: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_fac_set_bp["X"]=1;

function _fac_mul2($r, $f, $g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $j;
      var $k;
      $1=$r;
      $2=$f;
      $3=$g;
      $k=0;
      $j=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $5=$i;
      var $6=$2;
      var $7=(($6)|0);
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($5)>>>0) < (($9)>>>0);
      if ($10) { label = 4; break; } else { var $19 = 0;label = 5; break; }
    case 4: 
      var $12=$j;
      var $13=$3;
      var $14=(($13)|0);
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($12)>>>0) < (($16)>>>0);
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      if ($19) { label = 6; break; } else { label = 14; break; }
    case 6: 
      var $21=$i;
      var $22=$2;
      var $23=(($22)|0);
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+($21<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$j;
      var $29=$3;
      var $30=(($29)|0);
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+($28<<2))|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($27)|0)==(($34)|0);
      if ($35) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $37=$i;
      var $38=$2;
      var $39=(($38)|0);
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+($37<<2))|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$k;
      var $45=$1;
      var $46=(($45)|0);
      var $47=(($46+8)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($44<<2))|0);
      HEAP32[(($49)>>2)]=$43;
      var $50=$i;
      var $51=$2;
      var $52=(($51)|0);
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($50<<2))|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$j;
      var $58=$3;
      var $59=(($58)|0);
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+($57<<2))|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($56)+($63))|0);
      var $65=$k;
      var $66=$1;
      var $67=(($66)|0);
      var $68=(($67+12)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+($65<<2))|0);
      HEAP32[(($70)>>2)]=$64;
      var $71=$i;
      var $72=((($71)+(1))|0);
      $i=$72;
      var $73=$j;
      var $74=((($73)+(1))|0);
      $j=$74;
      label = 12; break;
    case 8: 
      var $76=$i;
      var $77=$2;
      var $78=(($77)|0);
      var $79=(($78+8)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+($76<<2))|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$j;
      var $84=$3;
      var $85=(($84)|0);
      var $86=(($85+8)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+($83<<2))|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($82)>>>0) < (($89)>>>0);
      if ($90) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $92=$i;
      var $93=$2;
      var $94=(($93)|0);
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+($92<<2))|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$k;
      var $100=$1;
      var $101=(($100)|0);
      var $102=(($101+8)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+($99<<2))|0);
      HEAP32[(($104)>>2)]=$98;
      var $105=$i;
      var $106=$2;
      var $107=(($106)|0);
      var $108=(($107+12)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+($105<<2))|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$k;
      var $113=$1;
      var $114=(($113)|0);
      var $115=(($114+12)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+($112<<2))|0);
      HEAP32[(($117)>>2)]=$111;
      var $118=$i;
      var $119=((($118)+(1))|0);
      $i=$119;
      label = 11; break;
    case 10: 
      var $121=$j;
      var $122=$3;
      var $123=(($122)|0);
      var $124=(($123+8)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($125+($121<<2))|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$k;
      var $129=$1;
      var $130=(($129)|0);
      var $131=(($130+8)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132+($128<<2))|0);
      HEAP32[(($133)>>2)]=$127;
      var $134=$j;
      var $135=$3;
      var $136=(($135)|0);
      var $137=(($136+12)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+($134<<2))|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$k;
      var $142=$1;
      var $143=(($142)|0);
      var $144=(($143+12)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145+($141<<2))|0);
      HEAP32[(($146)>>2)]=$140;
      var $147=$j;
      var $148=((($147)+(1))|0);
      $j=$148;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $152=$k;
      var $153=((($152)+(1))|0);
      $k=$153;
      label = 3; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $156=$i;
      var $157=$2;
      var $158=(($157)|0);
      var $159=(($158+4)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($156)>>>0) < (($160)>>>0);
      if ($161) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $163=$i;
      var $164=$2;
      var $165=(($164)|0);
      var $166=(($165+8)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+($163<<2))|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$k;
      var $171=$1;
      var $172=(($171)|0);
      var $173=(($172+8)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174+($170<<2))|0);
      HEAP32[(($175)>>2)]=$169;
      var $176=$i;
      var $177=$2;
      var $178=(($177)|0);
      var $179=(($178+12)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180+($176<<2))|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$k;
      var $184=$1;
      var $185=(($184)|0);
      var $186=(($185+12)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($187+($183<<2))|0);
      HEAP32[(($188)>>2)]=$182;
      label = 17; break;
    case 17: 
      var $190=$i;
      var $191=((($190)+(1))|0);
      $i=$191;
      var $192=$k;
      var $193=((($192)+(1))|0);
      $k=$193;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $196=$j;
      var $197=$3;
      var $198=(($197)|0);
      var $199=(($198+4)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($196)>>>0) < (($200)>>>0);
      if ($201) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $203=$j;
      var $204=$3;
      var $205=(($204)|0);
      var $206=(($205+8)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=(($207+($203<<2))|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$k;
      var $211=$1;
      var $212=(($211)|0);
      var $213=(($212+8)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214+($210<<2))|0);
      HEAP32[(($215)>>2)]=$209;
      var $216=$j;
      var $217=$3;
      var $218=(($217)|0);
      var $219=(($218+12)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=(($220+($216<<2))|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=$k;
      var $224=$1;
      var $225=(($224)|0);
      var $226=(($225+12)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+($223<<2))|0);
      HEAP32[(($228)>>2)]=$222;
      label = 21; break;
    case 21: 
      var $230=$j;
      var $231=((($230)+(1))|0);
      $j=$231;
      var $232=$k;
      var $233=((($232)+(1))|0);
      $k=$233;
      label = 19; break;
    case 22: 
      var $235=$k;
      var $236=$1;
      var $237=(($236)|0);
      var $238=(($237+4)|0);
      HEAP32[(($238)>>2)]=$235;
      var $239=$k;
      var $240=$1;
      var $241=(($240)|0);
      var $242=(($241)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=(($239)>>>0) <= (($243)>>>0);
      if ($244) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      ___assert_func(((5243932)|0), 315, ((5249860)|0), ((5243324)|0));
      label = 25; break;
    case 25: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_fac_mul2["X"]=1;

function _fac_mul($f, $g) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $tmp=__stackBase__;
  $1=$f;
  $2=$g;
  var $3=$1;
  var $4=(($3)|0);
  var $5=(($4+4)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$2;
  var $8=(($7)|0);
  var $9=(($8+4)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=((($6)+($10))|0);
  _fac_resize(((5243140)|0), $11);
  var $12=$1;
  var $13=$2;
  _fac_mul2(((5243140)|0), $12, $13);
  var $14=(($tmp)|0);
  var $15=$1;
  var $16=(($15)|0);
  var $17=$14;
  var $18=$16;
  assert(16 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];HEAP32[((($17)+(12))>>2)]=HEAP32[((($18)+(12))>>2)];
  var $19=$1;
  var $20=(($19)|0);
  var $21=$20;
  assert(16 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[((5243140)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((5243144)>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((5243148)>>2)];HEAP32[((($21)+(12))>>2)]=HEAP32[((5243152)>>2)];
  var $22=(($tmp)|0);
  var $23=$22;
  assert(16 % 1 === 0);HEAP32[((5243140)>>2)]=HEAP32[(($23)>>2)];HEAP32[((5243144)>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((5243148)>>2)]=HEAP32[((($23)+(8))>>2)];HEAP32[((5243152)>>2)]=HEAP32[((($23)+(12))>>2)];
  STACKTOP = __stackBase__;
  return;
}


function _fac_mul_bp($f, $base, $pow) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  $1=$f;
  $2=$base;
  $3=$pow;
  var $4=$2;
  var $5=$3;
  _fac_set_bp(((5243120)|0), $4, $5);
  var $6=$1;
  _fac_mul($6, ((5243120)|0));

  return;
}


function _bs_mul($r, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $j;
      var $r2=__stackBase__;
      $1=$r;
      $2=$a;
      $3=$b;
      var $4=$3;
      var $5=$2;
      var $6=((($4)-($5))|0);
      var $7=(($6)|0) <= 32;
      if ($7) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $9=$1;
      ___gmpz_set_ui($9, 1);
      var $10=$2;
      $i=$10;
      label = 4; break;
    case 4: 
      var $12=$i;
      var $13=$3;
      var $14=(($12)|0) < (($13)|0);
      if ($14) { label = 5; break; } else { label = 11; break; }
    case 5: 
      $j=0;
      label = 6; break;
    case 6: 
      var $17=$j;
      var $18=$i;
      var $19=HEAP32[((((5243152)|0))>>2)];
      var $20=(($19+($18<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($17)>>>0) < (($21)>>>0);
      if ($22) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $24=$1;
      var $25=$1;
      var $26=$i;
      var $27=HEAP32[((((5243148)|0))>>2)];
      var $28=(($27+($26<<2))|0);
      var $29=HEAP32[(($28)>>2)];
      ___gmpz_mul_ui($24, $25, $29);
      label = 8; break;
    case 8: 
      var $31=$j;
      var $32=((($31)+(1))|0);
      $j=$32;
      label = 6; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $35=$i;
      var $36=((($35)+(1))|0);
      $i=$36;
      label = 4; break;
    case 11: 
      label = 13; break;
    case 12: 
      var $39=(($r2)|0);
      ___gmpz_init($39);
      var $40=(($r2)|0);
      var $41=$2;
      var $42=$2;
      var $43=$3;
      var $44=((($42)+($43))|0);
      var $45=((((($44)|0))/(2))&-1);
      _bs_mul($40, $41, $45);
      var $46=$1;
      var $47=$2;
      var $48=$3;
      var $49=((($47)+($48))|0);
      var $50=((((($49)|0))/(2))&-1);
      var $51=$3;
      _bs_mul($46, $50, $51);
      var $52=$1;
      var $53=$1;
      var $54=(($r2)|0);
      ___gmpz_mul($52, $53, $54);
      var $55=(($r2)|0);
      ___gmpz_clear($55);
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_bs_mul["X"]=1;

function _fac_remove_gcd($p, $fp, $g, $fg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $j;
      var $k;
      var $c;
      $1=$p;
      $2=$fp;
      $3=$g;
      $4=$fg;
      var $5=$2;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$4;
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)>>>0) < (($10)>>>0);
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$2;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $21 = $15;label = 5; break;
    case 4: 
      var $17=$4;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $21 = $19;label = 5; break;
    case 5: 
      var $21;
      _fac_resize(((5243140)|0), $21);
      $k=0;
      $j=0;
      $i=0;
      label = 6; break;
    case 6: 
      var $23=$i;
      var $24=$2;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)>>>0) < (($26)>>>0);
      if ($27) { label = 7; break; } else { var $35 = 0;label = 8; break; }
    case 7: 
      var $29=$j;
      var $30=$4;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($29)>>>0) < (($32)>>>0);
      var $35 = $33;label = 8; break;
    case 8: 
      var $35;
      if ($35) { label = 9; break; } else { label = 19; break; }
    case 9: 
      var $37=$i;
      var $38=$2;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+($37<<2))|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$j;
      var $44=$4;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+($43<<2))|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($42)|0)==(($48)|0);
      if ($49) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $51=$i;
      var $52=$2;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($51<<2))|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$j;
      var $58=$4;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+($57<<2))|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($56)>>>0) < (($62)>>>0);
      if ($63) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $65=$i;
      var $66=$2;
      var $67=(($66+12)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+($65<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      var $79 = $70;label = 13; break;
    case 12: 
      var $72=$j;
      var $73=$4;
      var $74=(($73+12)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+($72<<2))|0);
      var $77=HEAP32[(($76)>>2)];
      var $79 = $77;label = 13; break;
    case 13: 
      var $79;
      $c=$79;
      var $80=$c;
      var $81=$i;
      var $82=$2;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+($81<<2))|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-($80))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=$c;
      var $89=$j;
      var $90=$4;
      var $91=(($90+12)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+($89<<2))|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=((($94)-($88))|0);
      HEAP32[(($93)>>2)]=$95;
      var $96=$i;
      var $97=$2;
      var $98=(($97+8)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+($96<<2))|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$k;
      var $103=HEAP32[((((5243148)|0))>>2)];
      var $104=(($103+($102<<2))|0);
      HEAP32[(($104)>>2)]=$101;
      var $105=$c;
      var $106=$k;
      var $107=HEAP32[((((5243152)|0))>>2)];
      var $108=(($107+($106<<2))|0);
      HEAP32[(($108)>>2)]=$105;
      var $109=$i;
      var $110=((($109)+(1))|0);
      $i=$110;
      var $111=$j;
      var $112=((($111)+(1))|0);
      $j=$112;
      var $113=$k;
      var $114=((($113)+(1))|0);
      $k=$114;
      label = 18; break;
    case 14: 
      var $116=$i;
      var $117=$2;
      var $118=(($117+8)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+($116<<2))|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$j;
      var $123=$4;
      var $124=(($123+8)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($125+($122<<2))|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($121)>>>0) < (($127)>>>0);
      if ($128) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $130=$i;
      var $131=((($130)+(1))|0);
      $i=$131;
      label = 17; break;
    case 16: 
      var $133=$j;
      var $134=((($133)+(1))|0);
      $j=$134;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 6; break;
    case 19: 
      var $138=$k;
      HEAP32[((((5243144)|0))>>2)]=$138;
      var $139=$k;
      var $140=HEAP32[((((5243140)|0))>>2)];
      var $141=(($139)>>>0) <= (($140)>>>0);
      if ($141) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      ___assert_func(((5243932)|0), 404, ((5249844)|0), ((5243272)|0));
      label = 22; break;
    case 22: 
      var $145=HEAP32[((((5243144)|0))>>2)];
      var $146=(($145)|0)!=0;
      if ($146) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $148=HEAP32[((((5243144)|0))>>2)];
      _bs_mul(((5243108)|0), 0, $148);
      var $149=$1;
      var $150=$1;
      ___gmpz_divexact($149, $150, ((5243108)|0));
      var $151=$3;
      var $152=$3;
      ___gmpz_divexact($151, $152, ((5243108)|0));
      var $153=$2;
      _fac_compact($153);
      var $154=$4;
      _fac_compact($154);
      label = 24; break;
    case 24: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_fac_remove_gcd["X"]=1;

function _bs($a, $b, $gflag, $level) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $mid;
      var $ccc;
      $1=$a;
      $2=$b;
      $3=$gflag;
      $4=$level;
      var $5=$2;
      var $6=$1;
      var $7=((($5)-($6))|0);
      var $8=(($7)|0)==1;
      if ($8) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $10=HEAP32[((5242880)>>2)];
      var $11=HEAP32[((5242928)>>2)];
      var $12=(($11+((($10)*(12))&-1))|0);
      var $13=(($12)|0);
      var $14=$2;
      ___gmpz_set_ui($13, $14);
      var $15=HEAP32[((5242880)>>2)];
      var $16=HEAP32[((5242928)>>2)];
      var $17=(($16+((($15)*(12))&-1))|0);
      var $18=(($17)|0);
      var $19=HEAP32[((5242880)>>2)];
      var $20=HEAP32[((5242928)>>2)];
      var $21=(($20+((($19)*(12))&-1))|0);
      var $22=(($21)|0);
      var $23=$2;
      ___gmpz_mul_ui($18, $22, $23);
      var $24=HEAP32[((5242880)>>2)];
      var $25=HEAP32[((5242928)>>2)];
      var $26=(($25+((($24)*(12))&-1))|0);
      var $27=(($26)|0);
      var $28=HEAP32[((5242880)>>2)];
      var $29=HEAP32[((5242928)>>2)];
      var $30=(($29+((($28)*(12))&-1))|0);
      var $31=(($30)|0);
      var $32=$2;
      ___gmpz_mul_ui($27, $31, $32);
      var $33=HEAP32[((5242880)>>2)];
      var $34=HEAP32[((5242928)>>2)];
      var $35=(($34+((($33)*(12))&-1))|0);
      var $36=(($35)|0);
      var $37=HEAP32[((5242880)>>2)];
      var $38=HEAP32[((5242928)>>2)];
      var $39=(($38+((($37)*(12))&-1))|0);
      var $40=(($39)|0);
      ___gmpz_mul_ui($36, $40, 711822400);
      var $41=HEAP32[((5242880)>>2)];
      var $42=HEAP32[((5242928)>>2)];
      var $43=(($42+((($41)*(12))&-1))|0);
      var $44=(($43)|0);
      var $45=HEAP32[((5242880)>>2)];
      var $46=HEAP32[((5242928)>>2)];
      var $47=(($46+((($45)*(12))&-1))|0);
      var $48=(($47)|0);
      ___gmpz_mul_ui($44, $48, 15367680);
      var $49=HEAP32[((5242880)>>2)];
      var $50=HEAP32[((5243104)>>2)];
      var $51=(($50+((($49)*(12))&-1))|0);
      var $52=(($51)|0);
      var $53=$2;
      var $54=($53<<1);
      var $55=((($54)-(1))|0);
      ___gmpz_set_ui($52, $55);
      var $56=HEAP32[((5242880)>>2)];
      var $57=HEAP32[((5243104)>>2)];
      var $58=(($57+((($56)*(12))&-1))|0);
      var $59=(($58)|0);
      var $60=HEAP32[((5242880)>>2)];
      var $61=HEAP32[((5243104)>>2)];
      var $62=(($61+((($60)*(12))&-1))|0);
      var $63=(($62)|0);
      var $64=$2;
      var $65=((($64)*(6))&-1);
      var $66=((($65)-(1))|0);
      ___gmpz_mul_ui($59, $63, $66);
      var $67=HEAP32[((5242880)>>2)];
      var $68=HEAP32[((5243104)>>2)];
      var $69=(($68+((($67)*(12))&-1))|0);
      var $70=(($69)|0);
      var $71=HEAP32[((5242880)>>2)];
      var $72=HEAP32[((5243104)>>2)];
      var $73=(($72+((($71)*(12))&-1))|0);
      var $74=(($73)|0);
      var $75=$2;
      var $76=((($75)*(6))&-1);
      var $77=((($76)-(5))|0);
      ___gmpz_mul_ui($70, $74, $77);
      var $78=HEAP32[((5242880)>>2)];
      var $79=HEAP32[((5242924)>>2)];
      var $80=(($79+((($78)*(12))&-1))|0);
      var $81=(($80)|0);
      var $82=$2;
      ___gmpz_set_ui($81, $82);
      var $83=HEAP32[((5242880)>>2)];
      var $84=HEAP32[((5242924)>>2)];
      var $85=(($84+((($83)*(12))&-1))|0);
      var $86=(($85)|0);
      var $87=HEAP32[((5242880)>>2)];
      var $88=HEAP32[((5242924)>>2)];
      var $89=(($88+((($87)*(12))&-1))|0);
      var $90=(($89)|0);
      ___gmpz_mul_ui($86, $90, 545140134);
      var $91=HEAP32[((5242880)>>2)];
      var $92=HEAP32[((5242924)>>2)];
      var $93=(($92+((($91)*(12))&-1))|0);
      var $94=(($93)|0);
      var $95=HEAP32[((5242880)>>2)];
      var $96=HEAP32[((5242924)>>2)];
      var $97=(($96+((($95)*(12))&-1))|0);
      var $98=(($97)|0);
      ___gmpz_add_ui($94, $98, 13591409);
      var $99=HEAP32[((5242880)>>2)];
      var $100=HEAP32[((5242924)>>2)];
      var $101=(($100+((($99)*(12))&-1))|0);
      var $102=(($101)|0);
      var $103=HEAP32[((5242880)>>2)];
      var $104=HEAP32[((5242924)>>2)];
      var $105=(($104+((($103)*(12))&-1))|0);
      var $106=(($105)|0);
      var $107=HEAP32[((5242880)>>2)];
      var $108=HEAP32[((5243104)>>2)];
      var $109=(($108+((($107)*(12))&-1))|0);
      var $110=(($109)|0);
      ___gmpz_mul($102, $106, $110);
      var $111=$2;
      var $112=((($111)>>>0))%(2);
      var $113=(($112)|0)!=0;
      if ($113) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $115=HEAP32[((5242880)>>2)];
      var $116=HEAP32[((5242924)>>2)];
      var $117=(($116+((($115)*(12))&-1))|0);
      var $118=(($117)|0);
      var $119=HEAP32[((5242880)>>2)];
      var $120=HEAP32[((5242924)>>2)];
      var $121=(($120+((($119)*(12))&-1))|0);
      var $122=(($121)|0);
      ___gmpz_neg($118, $122);
      label = 5; break;
    case 5: 
      var $124=$2;
      $i=$124;
      label = 6; break;
    case 6: 
      var $126=$i;
      var $127=$126 & 1;
      var $128=(($127)|0)==0;
      if ($128) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $130=$i;
      var $131=$130 >>> 1;
      $i=$131;
      label = 6; break;
    case 8: 
      var $133=HEAP32[((5242880)>>2)];
      var $134=HEAP32[((5243136)>>2)];
      var $135=(($134+($133<<4))|0);
      var $136=(($135)|0);
      var $137=$i;
      _fac_set_bp($136, $137, 3);
      var $138=HEAP32[((5242880)>>2)];
      var $139=HEAP32[((5243136)>>2)];
      var $140=(($139+($138<<4))|0);
      var $141=(($140)|0);
      _fac_mul_bp($141, 10005, 3);
      var $142=HEAP32[((5242880)>>2)];
      var $143=HEAP32[((5243136)>>2)];
      var $144=(($143+($142<<4))|0);
      var $145=(($144)|0);
      var $146=(($145+12)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=((($149)-(1))|0);
      HEAP32[(($148)>>2)]=$150;
      var $151=HEAP32[((5242880)>>2)];
      var $152=HEAP32[((5243156)>>2)];
      var $153=(($152+($151<<4))|0);
      var $154=(($153)|0);
      var $155=$2;
      var $156=($155<<1);
      var $157=((($156)-(1))|0);
      _fac_set_bp($154, $157, 1);
      var $158=HEAP32[((5242880)>>2)];
      var $159=HEAP32[((5243156)>>2)];
      var $160=(($159+($158<<4))|0);
      var $161=(($160)|0);
      var $162=$2;
      var $163=((($162)*(6))&-1);
      var $164=((($163)-(1))|0);
      _fac_mul_bp($161, $164, 1);
      var $165=HEAP32[((5242880)>>2)];
      var $166=HEAP32[((5243156)>>2)];
      var $167=(($166+($165<<4))|0);
      var $168=(($167)|0);
      var $169=$2;
      var $170=((($169)*(6))&-1);
      var $171=((($170)-(5))|0);
      _fac_mul_bp($168, $171, 1);
      var $172=$2;
      var $173=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((5242932)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((5242936)>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $174=(($173)&-1);
      var $175=(($172)>>>0) > (($174)>>>0);
      if ($175) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $177=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((5242940)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((5242944)>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $178=($177)*(2);
      var $179=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[((5242932)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((5242936)>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $180=($179)+($178);
      (HEAPF64[(tempDoublePtr)>>3]=$180,HEAP32[((5242932)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((5242936)>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 10; break;
    case 10: 
      label = 28; break;
    case 11: 
      var $183=$1;
      var $184=(($183)>>>0);
      var $185=$2;
      var $186=$1;
      var $187=((($185)-($186))|0);
      var $188=(($187)>>>0);
      var $189=($188)*(0.5224);
      var $190=($184)+($189);
      var $191=($190>=0 ? Math.floor($190) : Math.ceil($190));
      $mid=$191;
      var $192=$1;
      var $193=$mid;
      var $194=$4;
      var $195=((($194)+(1))|0);
      _bs($192, $193, 1, $195);
      var $196=HEAP32[((5242880)>>2)];
      var $197=((($196)+(1))|0);
      HEAP32[((5242880)>>2)]=$197;
      var $198=$mid;
      var $199=$2;
      var $200=$3;
      var $201=$4;
      var $202=((($201)+(1))|0);
      _bs($198, $199, $200, $202);
      var $203=HEAP32[((5242880)>>2)];
      var $204=((($203)-(1))|0);
      HEAP32[((5242880)>>2)]=$204;
      var $205=$4;
      var $206=(($205)|0)==0;
      var $207=(($206)&1);
      $ccc=$207;
      var $208=$ccc;
      var $209=(($208)|0)!=0;
      if ($209) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $212=$4;
      var $213=(($212)|0) >= 4;
      if ($213) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $215=HEAP32[((5242880)>>2)];
      var $216=((($215)+(1))|0);
      var $217=HEAP32[((5242928)>>2)];
      var $218=(($217+((($216)*(12))&-1))|0);
      var $219=(($218)|0);
      var $220=HEAP32[((5242880)>>2)];
      var $221=((($220)+(1))|0);
      var $222=HEAP32[((5243136)>>2)];
      var $223=(($222+($221<<4))|0);
      var $224=(($223)|0);
      var $225=HEAP32[((5242880)>>2)];
      var $226=HEAP32[((5243104)>>2)];
      var $227=(($226+((($225)*(12))&-1))|0);
      var $228=(($227)|0);
      var $229=HEAP32[((5242880)>>2)];
      var $230=HEAP32[((5243156)>>2)];
      var $231=(($230+($229<<4))|0);
      var $232=(($231)|0);
      _fac_remove_gcd($219, $224, $228, $232);
      label = 15; break;
    case 15: 
      var $234=$ccc;
      var $235=(($234)|0)!=0;
      if ($235) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $238=HEAP32[((5242880)>>2)];
      var $239=HEAP32[((5242928)>>2)];
      var $240=(($239+((($238)*(12))&-1))|0);
      var $241=(($240)|0);
      var $242=HEAP32[((5242880)>>2)];
      var $243=HEAP32[((5242928)>>2)];
      var $244=(($243+((($242)*(12))&-1))|0);
      var $245=(($244)|0);
      var $246=HEAP32[((5242880)>>2)];
      var $247=((($246)+(1))|0);
      var $248=HEAP32[((5242928)>>2)];
      var $249=(($248+((($247)*(12))&-1))|0);
      var $250=(($249)|0);
      ___gmpz_mul($241, $245, $250);
      var $251=$ccc;
      var $252=(($251)|0)!=0;
      if ($252) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $255=HEAP32[((5242880)>>2)];
      var $256=HEAP32[((5242924)>>2)];
      var $257=(($256+((($255)*(12))&-1))|0);
      var $258=(($257)|0);
      var $259=HEAP32[((5242880)>>2)];
      var $260=HEAP32[((5242924)>>2)];
      var $261=(($260+((($259)*(12))&-1))|0);
      var $262=(($261)|0);
      var $263=HEAP32[((5242880)>>2)];
      var $264=((($263)+(1))|0);
      var $265=HEAP32[((5242928)>>2)];
      var $266=(($265+((($264)*(12))&-1))|0);
      var $267=(($266)|0);
      ___gmpz_mul($258, $262, $267);
      var $268=$ccc;
      var $269=(($268)|0)!=0;
      if ($269) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $272=HEAP32[((5242880)>>2)];
      var $273=((($272)+(1))|0);
      var $274=HEAP32[((5242924)>>2)];
      var $275=(($274+((($273)*(12))&-1))|0);
      var $276=(($275)|0);
      var $277=HEAP32[((5242880)>>2)];
      var $278=((($277)+(1))|0);
      var $279=HEAP32[((5242924)>>2)];
      var $280=(($279+((($278)*(12))&-1))|0);
      var $281=(($280)|0);
      var $282=HEAP32[((5242880)>>2)];
      var $283=HEAP32[((5243104)>>2)];
      var $284=(($283+((($282)*(12))&-1))|0);
      var $285=(($284)|0);
      ___gmpz_mul($276, $281, $285);
      var $286=$ccc;
      var $287=(($286)|0)!=0;
      if ($287) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $290=HEAP32[((5242880)>>2)];
      var $291=HEAP32[((5242924)>>2)];
      var $292=(($291+((($290)*(12))&-1))|0);
      var $293=(($292)|0);
      var $294=HEAP32[((5242880)>>2)];
      var $295=HEAP32[((5242924)>>2)];
      var $296=(($295+((($294)*(12))&-1))|0);
      var $297=(($296)|0);
      var $298=HEAP32[((5242880)>>2)];
      var $299=((($298)+(1))|0);
      var $300=HEAP32[((5242924)>>2)];
      var $301=(($300+((($299)*(12))&-1))|0);
      var $302=(($301)|0);
      ___gmpz_add($293, $297, $302);
      var $303=$ccc;
      var $304=(($303)|0)!=0;
      if ($304) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 25; break;
    case 25: 
      var $307=HEAP32[((5242880)>>2)];
      var $308=HEAP32[((5243136)>>2)];
      var $309=(($308+($307<<4))|0);
      var $310=(($309)|0);
      var $311=HEAP32[((5242880)>>2)];
      var $312=((($311)+(1))|0);
      var $313=HEAP32[((5243136)>>2)];
      var $314=(($313+($312<<4))|0);
      var $315=(($314)|0);
      _fac_mul($310, $315);
      var $316=$3;
      var $317=(($316)|0)!=0;
      if ($317) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $319=HEAP32[((5242880)>>2)];
      var $320=HEAP32[((5243104)>>2)];
      var $321=(($320+((($319)*(12))&-1))|0);
      var $322=(($321)|0);
      var $323=HEAP32[((5242880)>>2)];
      var $324=HEAP32[((5243104)>>2)];
      var $325=(($324+((($323)*(12))&-1))|0);
      var $326=(($325)|0);
      var $327=HEAP32[((5242880)>>2)];
      var $328=((($327)+(1))|0);
      var $329=HEAP32[((5243104)>>2)];
      var $330=(($329+((($328)*(12))&-1))|0);
      var $331=(($330)|0);
      ___gmpz_mul($322, $326, $331);
      var $332=HEAP32[((5242880)>>2)];
      var $333=HEAP32[((5243156)>>2)];
      var $334=(($333+($332<<4))|0);
      var $335=(($334)|0);
      var $336=HEAP32[((5242880)>>2)];
      var $337=((($336)+(1))|0);
      var $338=HEAP32[((5243156)>>2)];
      var $339=(($338+($337<<4))|0);
      var $340=(($339)|0);
      _fac_mul($335, $340);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_bs["X"]=1;

function _build_sieve($n, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $m;
      var $i;
      var $j;
      var $k;
      $1=$n;
      $2=$s;
      var $3=$1;
      HEAP32[((5242916)>>2)]=$3;
      var $4=$1;
      var $5=(($4)|0);
      var $6=Math.sqrt($5);
      var $7=(($6)&-1);
      $m=$7;
      var $8=$2;
      var $9=$8;
      var $10=$1;
      var $11=((($10)*(12))&-1);
      var $12=Math.floor(((($11)>>>0))/(2));
      _memset($9, 0, $12);
      var $13=$2;
      var $14=(($13)|0);
      var $15=(($14)|0);
      HEAP32[(($15)>>2)]=1;
      var $16=$2;
      var $17=(($16)|0);
      var $18=(($17+4)|0);
      HEAP32[(($18)>>2)]=1;
      $i=3;
      label = 3; break;
    case 3: 
      var $20=$i;
      var $21=$1;
      var $22=(($20)|0) <= (($21)|0);
      if ($22) { label = 4; break; } else { label = 19; break; }
    case 4: 
      var $24=$i;
      var $25=((((($24)|0))/(2))&-1);
      var $26=$2;
      var $27=(($26+((($25)*(12))&-1))|0);
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0)==0;
      if ($30) { label = 5; break; } else { label = 17; break; }
    case 5: 
      var $32=$i;
      var $33=$i;
      var $34=((((($33)|0))/(2))&-1);
      var $35=$2;
      var $36=(($35+((($34)*(12))&-1))|0);
      var $37=(($36)|0);
      HEAP32[(($37)>>2)]=$32;
      var $38=$i;
      var $39=((((($38)|0))/(2))&-1);
      var $40=$2;
      var $41=(($40+((($39)*(12))&-1))|0);
      var $42=(($41+4)|0);
      HEAP32[(($42)>>2)]=1;
      var $43=$i;
      var $44=$m;
      var $45=(($43)|0) <= (($44)|0);
      if ($45) { label = 6; break; } else { label = 16; break; }
    case 6: 
      var $47=$i;
      var $48=$i;
      var $49=Math.imul($47,$48);
      $j=$49;
      var $50=$i;
      var $51=((((($50)|0))/(2))&-1);
      $k=$51;
      label = 7; break;
    case 7: 
      var $53=$j;
      var $54=$1;
      var $55=(($53)|0) <= (($54)|0);
      if ($55) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $57=$j;
      var $58=((((($57)|0))/(2))&-1);
      var $59=$2;
      var $60=(($59+((($58)*(12))&-1))|0);
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|0)==0;
      if ($63) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $65=$i;
      var $66=$j;
      var $67=((((($66)|0))/(2))&-1);
      var $68=$2;
      var $69=(($68+((($67)*(12))&-1))|0);
      var $70=(($69)|0);
      HEAP32[(($70)>>2)]=$65;
      var $71=$k;
      var $72=$2;
      var $73=(($72+((($71)*(12))&-1))|0);
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$i;
      var $77=(($75)|0)==(($76)|0);
      if ($77) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $79=$k;
      var $80=$2;
      var $81=(($80+((($79)*(12))&-1))|0);
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=((($83)+(1))|0);
      var $85=$j;
      var $86=((((($85)|0))/(2))&-1);
      var $87=$2;
      var $88=(($87+((($86)*(12))&-1))|0);
      var $89=(($88+4)|0);
      HEAP32[(($89)>>2)]=$84;
      var $90=$k;
      var $91=$2;
      var $92=(($91+((($90)*(12))&-1))|0);
      var $93=(($92+8)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$j;
      var $96=((((($95)|0))/(2))&-1);
      var $97=$2;
      var $98=(($97+((($96)*(12))&-1))|0);
      var $99=(($98+8)|0);
      HEAP32[(($99)>>2)]=$94;
      label = 12; break;
    case 11: 
      var $101=$j;
      var $102=((((($101)|0))/(2))&-1);
      var $103=$2;
      var $104=(($103+((($102)*(12))&-1))|0);
      var $105=(($104+4)|0);
      HEAP32[(($105)>>2)]=1;
      var $106=$k;
      var $107=$j;
      var $108=((((($107)|0))/(2))&-1);
      var $109=$2;
      var $110=(($109+((($108)*(12))&-1))|0);
      var $111=(($110+8)|0);
      HEAP32[(($111)>>2)]=$106;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $115=$i;
      var $116=$i;
      var $117=((($115)+($116))|0);
      var $118=$j;
      var $119=((($118)+($117))|0);
      $j=$119;
      var $120=$k;
      var $121=((($120)+(1))|0);
      $k=$121;
      label = 7; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $126=$i;
      var $127=((($126)+(2))|0);
      $i=$127;
      label = 3; break;
    case 19: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_build_sieve["X"]=1;

function _gen_digits($po, $d) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $pi=__stackBase__;
      var $qi=(__stackBase__)+(16);
      var $i;
      var $depth;
      var $terms;
      var $psize;
      var $qsize;
      var $begin;
      var $mid0;
      var $mid1;
      var $mid2;
      var $mid3;
      var $mid4;
      var $end;
      var $exp=(__stackBase__)+(32);
      $1=$po;
      $2=$d;
      $depth=1;
      HEAP32[((5242948)>>2)]=1;
      var $3=$2;
      var $4=(($3)|0);
      var $5=($4)/(14.181647462725477);
      var $6=(($5)&-1);
      $terms=$6;
      label = 3; break;
    case 3: 
      var $8=$depth;
      var $9=1 << $8;
      var $10=$terms;
      var $11=(($9)|0) < (($10)|0);
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=$depth;
      var $14=((($13)+(1))|0);
      $depth=$14;
      label = 3; break;
    case 5: 
      var $16=$depth;
      var $17=((($16)+(1))|0);
      $depth=$17;
      var $18=$terms;
      var $19=(($18)|0);
      var $20=($19)/(100);
      (HEAPF64[(tempDoublePtr)>>3]=$20,HEAP32[((5242940)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((5242944)>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $21=_cputime();
      $begin=$21;
      var $22=$terms;
      var $23=((($22)*(6))&-1);
      var $24=10006 > (($23)|0);
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $30 = 10006;label = 8; break;
    case 7: 
      var $27=$terms;
      var $28=((($27)*(6))&-1);
      var $30 = $28;label = 8; break;
    case 8: 
      var $30;
      HEAP32[((5242916)>>2)]=$30;
      var $31=HEAP32[((5242916)>>2)];
      var $32=((($31)*(12))&-1);
      var $33=Math.floor(((($32)>>>0))/(2));
      var $34=_malloc($33);
      var $35=$34;
      HEAP32[((5242920)>>2)]=$35;
      var $36=HEAP32[((5242916)>>2)];
      var $37=HEAP32[((5242920)>>2)];
      _build_sieve($36, $37);
      var $38=_cputime();
      $mid0=$38;
      var $39=$depth;
      var $40=((($39)*(12))&-1);
      var $41=_malloc($40);
      var $42=$41;
      HEAP32[((5242928)>>2)]=$42;
      var $43=$depth;
      var $44=((($43)*(12))&-1);
      var $45=_malloc($44);
      var $46=$45;
      HEAP32[((5242924)>>2)]=$46;
      var $47=$depth;
      var $48=((($47)*(12))&-1);
      var $49=_malloc($48);
      var $50=$49;
      HEAP32[((5243104)>>2)]=$50;
      var $51=$depth;
      var $52=($51<<4);
      var $53=_malloc($52);
      var $54=$53;
      HEAP32[((5243136)>>2)]=$54;
      var $55=$depth;
      var $56=($55<<4);
      var $57=_malloc($56);
      var $58=$57;
      HEAP32[((5243156)>>2)]=$58;
      $i=0;
      label = 9; break;
    case 9: 
      var $60=$i;
      var $61=$depth;
      var $62=(($60)|0) < (($61)|0);
      if ($62) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $64=$i;
      var $65=HEAP32[((5242928)>>2)];
      var $66=(($65+((($64)*(12))&-1))|0);
      var $67=(($66)|0);
      ___gmpz_init($67);
      var $68=$i;
      var $69=HEAP32[((5242924)>>2)];
      var $70=(($69+((($68)*(12))&-1))|0);
      var $71=(($70)|0);
      ___gmpz_init($71);
      var $72=$i;
      var $73=HEAP32[((5243104)>>2)];
      var $74=(($73+((($72)*(12))&-1))|0);
      var $75=(($74)|0);
      ___gmpz_init($75);
      var $76=$i;
      var $77=HEAP32[((5243136)>>2)];
      var $78=(($77+($76<<4))|0);
      var $79=(($78)|0);
      _fac_init($79);
      var $80=$i;
      var $81=HEAP32[((5243156)>>2)];
      var $82=(($81+($80<<4))|0);
      var $83=(($82)|0);
      _fac_init($83);
      label = 11; break;
    case 11: 
      var $85=$i;
      var $86=((($85)+(1))|0);
      $i=$86;
      label = 9; break;
    case 12: 
      ___gmpz_init(((5243108)|0));
      _fac_init(((5243120)|0));
      _fac_init(((5243140)|0));
      var $88=$terms;
      var $89=(($88)|0) <= 0;
      if ($89) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $91=HEAP32[((5242880)>>2)];
      var $92=((($91)+(1))|0);
      var $93=HEAP32[((5242928)>>2)];
      var $94=(($93+((($92)*(12))&-1))|0);
      var $95=(($94)|0);
      ___gmpz_set_ui($95, 1);
      var $96=HEAP32[((5242880)>>2)];
      var $97=((($96)+(1))|0);
      var $98=HEAP32[((5242924)>>2)];
      var $99=(($98+((($97)*(12))&-1))|0);
      var $100=(($99)|0);
      ___gmpz_set_ui($100, 0);
      var $101=HEAP32[((5242880)>>2)];
      var $102=((($101)+(1))|0);
      var $103=HEAP32[((5243104)>>2)];
      var $104=(($103+((($102)*(12))&-1))|0);
      var $105=(($104)|0);
      ___gmpz_set_ui($105, 1);
      label = 15; break;
    case 14: 
      var $107=$terms;
      _bs(0, $107, 0, 0);
      label = 15; break;
    case 15: 
      var $109=_cputime();
      $mid1=$109;
      var $110=HEAP32[((5242920)>>2)];
      var $111=$110;
      _free($111);
      ___gmpz_clear(((5243108)|0));
      _fac_clear(((5243120)|0));
      _fac_clear(((5243140)|0));
      $i=1;
      label = 16; break;
    case 16: 
      var $113=$i;
      var $114=$depth;
      var $115=(($113)|0) < (($114)|0);
      if ($115) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $117=$i;
      var $118=HEAP32[((5242928)>>2)];
      var $119=(($118+((($117)*(12))&-1))|0);
      var $120=(($119)|0);
      ___gmpz_clear($120);
      var $121=$i;
      var $122=HEAP32[((5242924)>>2)];
      var $123=(($122+((($121)*(12))&-1))|0);
      var $124=(($123)|0);
      ___gmpz_clear($124);
      var $125=$i;
      var $126=HEAP32[((5243104)>>2)];
      var $127=(($126+((($125)*(12))&-1))|0);
      var $128=(($127)|0);
      ___gmpz_clear($128);
      var $129=$i;
      var $130=HEAP32[((5243136)>>2)];
      var $131=(($130+($129<<4))|0);
      var $132=(($131)|0);
      _fac_clear($132);
      var $133=$i;
      var $134=HEAP32[((5243156)>>2)];
      var $135=(($134+($133<<4))|0);
      var $136=(($135)|0);
      _fac_clear($136);
      label = 18; break;
    case 18: 
      var $138=$i;
      var $139=((($138)+(1))|0);
      $i=$139;
      label = 16; break;
    case 19: 
      var $141=HEAP32[((5243104)>>2)];
      var $142=(($141)|0);
      var $143=(($142)|0);
      ___gmpz_clear($143);
      var $144=HEAP32[((5243136)>>2)];
      var $145=(($144)|0);
      var $146=(($145)|0);
      _fac_clear($146);
      var $147=HEAP32[((5243156)>>2)];
      var $148=(($147)|0);
      var $149=(($148)|0);
      _fac_clear($149);
      var $150=HEAP32[((5243104)>>2)];
      var $151=$150;
      _free($151);
      var $152=HEAP32[((5243136)>>2)];
      var $153=$152;
      _free($153);
      var $154=HEAP32[((5243156)>>2)];
      var $155=$154;
      _free($155);
      var $156=$2;
      var $157=(($156)|0);
      var $158=($157)*(3.321928094887362);
      var $159=($158)+(16);
      var $160=(($159)&-1);
      ___gmpf_set_default_prec($160);
      var $161=HEAP32[((5242880)>>2)];
      var $162=HEAP32[((5242928)>>2)];
      var $163=(($162+((($161)*(12))&-1))|0);
      var $164=(($163)|0);
      var $165=___gmpz_sizeinbase($164, 10);
      $psize=$165;
      var $166=HEAP32[((5242880)>>2)];
      var $167=HEAP32[((5242924)>>2)];
      var $168=(($167+((($166)*(12))&-1))|0);
      var $169=(($168)|0);
      var $170=___gmpz_sizeinbase($169, 10);
      $qsize=$170;
      var $171=HEAP32[((5242880)>>2)];
      var $172=HEAP32[((5242924)>>2)];
      var $173=(($172+((($171)*(12))&-1))|0);
      var $174=(($173)|0);
      var $175=HEAP32[((5242880)>>2)];
      var $176=HEAP32[((5242928)>>2)];
      var $177=(($176+((($175)*(12))&-1))|0);
      var $178=(($177)|0);
      ___gmpz_addmul_ui($174, $178, 13591409);
      var $179=HEAP32[((5242880)>>2)];
      var $180=HEAP32[((5242928)>>2)];
      var $181=(($180+((($179)*(12))&-1))|0);
      var $182=(($181)|0);
      var $183=HEAP32[((5242880)>>2)];
      var $184=HEAP32[((5242928)>>2)];
      var $185=(($184+((($183)*(12))&-1))|0);
      var $186=(($185)|0);
      ___gmpz_mul_ui($182, $186, 53360);
      var $187=(($pi)|0);
      ___gmpf_init($187);
      var $188=(($pi)|0);
      var $189=HEAP32[((5242880)>>2)];
      var $190=HEAP32[((5242928)>>2)];
      var $191=(($190+((($189)*(12))&-1))|0);
      var $192=(($191)|0);
      ___gmpf_set_z($188, $192);
      var $193=HEAP32[((5242880)>>2)];
      var $194=HEAP32[((5242928)>>2)];
      var $195=(($194+((($193)*(12))&-1))|0);
      var $196=(($195)|0);
      ___gmpz_clear($196);
      var $197=(($qi)|0);
      ___gmpf_init($197);
      var $198=(($qi)|0);
      var $199=HEAP32[((5242880)>>2)];
      var $200=HEAP32[((5242924)>>2)];
      var $201=(($200+((($199)*(12))&-1))|0);
      var $202=(($201)|0);
      ___gmpf_set_z($198, $202);
      var $203=HEAP32[((5242880)>>2)];
      var $204=HEAP32[((5242924)>>2)];
      var $205=(($204+((($203)*(12))&-1))|0);
      var $206=(($205)|0);
      ___gmpz_clear($206);
      var $207=HEAP32[((5242928)>>2)];
      var $208=$207;
      _free($208);
      var $209=HEAP32[((5242924)>>2)];
      var $210=$209;
      _free($210);
      var $211=_cputime();
      $mid2=$211;
      ___gmpf_init(((5242900)|0));
      ___gmpf_init(((5242884)|0));
      var $212=(($qi)|0);
      var $213=(($pi)|0);
      var $214=(($qi)|0);
      ___gmpf_div($212, $213, $214);
      var $215=_cputime();
      $mid3=$215;
      var $216=(($pi)|0);
      _my_sqrt_ui($216, 640320);
      var $217=_cputime();
      $mid4=$217;
      var $218=(($qi)|0);
      var $219=(($qi)|0);
      var $220=(($pi)|0);
      ___gmpf_mul($218, $219, $220);
      var $221=_cputime();
      $end=$221;
      var $222=HEAP32[((5242948)>>2)];
      var $223=$222 & 1;
      var $224=(($223)|0)!=0;
      if ($224) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $226=$1;
      var $227=$2;
      var $228=((($227)+(2))|0);
      var $229=(($qi)|0);
      var $230=___gmpf_get_str($226, $exp, 10, $228, $229);
      label = 21; break;
    case 21: 
      var $232=(($pi)|0);
      ___gmpf_clear($232);
      var $233=(($qi)|0);
      ___gmpf_clear($233);
      ___gmpf_clear(((5242900)|0));
      ___gmpf_clear(((5242884)|0));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_gen_digits["X"]=1;

function _main($argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $d;
      var $po;
      $1=0;
      $2=$argc;
      $3=$argv;
      var $4=$2;
      var $5=(($4)|0) < 2;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((_stderr)>>2)];
      var $8=_fputs(((5243208)|0), $7);
      $1=1;
      label = 7; break;
    case 4: 
      var $10=$3;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_strtoul($12, 0, 0);
      $d=$13;
      var $14=$d;
      var $15=(($14)>>>0) < 15;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=HEAP32[((_stderr)>>2)];
      var $18=_fputs(((5243192)|0), $17);
      $1=1;
      label = 7; break;
    case 6: 
      var $20=$d;
      var $21=((($20)+(2))|0);
      var $22=((($21)+(1))|0);
      var $23=_malloc($22);
      $po=$23;
      var $24=$po;
      var $25=$d;
      _gen_digits($24, $25);
      var $26=$po;
      var $27=_printf(((5243188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$26,tempInt));
      var $28=$po;
      _free($28);
      $1=0;
      label = 7; break;
    case 7: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }

}
Module["_main"] = _main;

function ___gmpz_add($w, $u, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $vp;
      var $wp;
      var $usize;
      var $vsize;
      var $wsize;
      var $abs_usize;
      var $abs_vsize;
      var $__mpz_srcptr_swap__tmp;
      var $__mp_size_t_swap__tmp;
      var $__mp_size_t_swap__tmp1;
      var $cy_limb;
      $1=$w;
      $2=$u;
      $3=$v;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      $usize=$6;
      var $7=$3;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      $vsize=$9;
      var $10=$usize;
      var $11=(($10)|0) >= 0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$usize;
      var $18 = $13;label = 5; break;
    case 4: 
      var $15=$usize;
      var $16=(((-$15))|0);
      var $18 = $16;label = 5; break;
    case 5: 
      var $18;
      $abs_usize=$18;
      var $19=$vsize;
      var $20=(($19)|0) >= 0;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=$vsize;
      var $27 = $22;label = 8; break;
    case 7: 
      var $24=$vsize;
      var $25=(((-$24))|0);
      var $27 = $25;label = 8; break;
    case 8: 
      var $27;
      $abs_vsize=$27;
      var $28=$abs_usize;
      var $29=$abs_vsize;
      var $30=(($28)|0) < (($29)|0);
      if ($30) { label = 9; break; } else { label = 16; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $33=$2;
      $__mpz_srcptr_swap__tmp=$33;
      var $34=$3;
      $2=$34;
      var $35=$__mpz_srcptr_swap__tmp;
      $3=$35;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $38=$usize;
      $__mp_size_t_swap__tmp=$38;
      var $39=$vsize;
      $usize=$39;
      var $40=$__mp_size_t_swap__tmp;
      $vsize=$40;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $43=$abs_usize;
      $__mp_size_t_swap__tmp1=$43;
      var $44=$abs_vsize;
      $abs_usize=$44;
      var $45=$__mp_size_t_swap__tmp1;
      $abs_vsize=$45;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $48=$abs_usize;
      var $49=((($48)+(1))|0);
      $wsize=$49;
      var $50=$1;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$wsize;
      var $54=(($52)|0) < (($53)|0);
      if ($54) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $56=$1;
      var $57=$wsize;
      var $58=___gmpz_realloc($56, $57);
      label = 18; break;
    case 18: 
      var $60=$2;
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      $up=$62;
      var $63=$3;
      var $64=(($63+8)|0);
      var $65=HEAP32[(($64)>>2)];
      $vp=$65;
      var $66=$1;
      var $67=(($66+8)|0);
      var $68=HEAP32[(($67)>>2)];
      $wp=$68;
      var $69=$usize;
      var $70=$vsize;
      var $71=$69 ^ $70;
      var $72=(($71)|0) < 0;
      if ($72) { label = 19; break; } else { label = 53; break; }
    case 19: 
      var $74=$abs_usize;
      var $75=$abs_vsize;
      var $76=(($74)|0)!=(($75)|0);
      if ($76) { label = 20; break; } else { label = 30; break; }
    case 20: 
      var $78=$wp;
      var $79=$up;
      var $80=$abs_usize;
      var $81=$vp;
      var $82=$abs_vsize;
      var $83=___gmpn_sub($78, $79, $80, $81, $82);
      var $84=$abs_usize;
      $wsize=$84;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $87=$wsize;
      var $88=(($87)|0) > 0;
      if ($88) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $90=$wsize;
      var $91=((($90)-(1))|0);
      var $92=$wp;
      var $93=(($92+($91<<2))|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94)|0)!=0;
      if ($95) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $98=$wsize;
      var $99=((($98)-(1))|0);
      $wsize=$99;
      label = 22; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $102=$usize;
      var $103=(($102)|0) < 0;
      if ($103) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $105=$wsize;
      var $106=(((-$105))|0);
      $wsize=$106;
      label = 29; break;
    case 29: 
      label = 52; break;
    case 30: 
      var $109=$up;
      var $110=$vp;
      var $111=$abs_usize;
      var $112=___gmpn_cmp($109, $110, $111);
      var $113=(($112)|0) < 0;
      if ($113) { label = 31; break; } else { label = 41; break; }
    case 31: 
      var $115=$wp;
      var $116=$vp;
      var $117=$up;
      var $118=$abs_usize;
      var $119=___gmpn_sub_n($115, $116, $117, $118);
      var $120=$abs_usize;
      $wsize=$120;
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $123=$wsize;
      var $124=(($123)|0) > 0;
      if ($124) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $126=$wsize;
      var $127=((($126)-(1))|0);
      var $128=$wp;
      var $129=(($128+($127<<2))|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130)|0)!=0;
      if ($131) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 37; break;
    case 36: 
      var $134=$wsize;
      var $135=((($134)-(1))|0);
      $wsize=$135;
      label = 33; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $138=$usize;
      var $139=(($138)|0) >= 0;
      if ($139) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $141=$wsize;
      var $142=(((-$141))|0);
      $wsize=$142;
      label = 40; break;
    case 40: 
      label = 51; break;
    case 41: 
      var $145=$wp;
      var $146=$up;
      var $147=$vp;
      var $148=$abs_usize;
      var $149=___gmpn_sub_n($145, $146, $147, $148);
      var $150=$abs_usize;
      $wsize=$150;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $153=$wsize;
      var $154=(($153)|0) > 0;
      if ($154) { label = 44; break; } else { label = 47; break; }
    case 44: 
      var $156=$wsize;
      var $157=((($156)-(1))|0);
      var $158=$wp;
      var $159=(($158+($157<<2))|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160)|0)!=0;
      if ($161) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      var $164=$wsize;
      var $165=((($164)-(1))|0);
      $wsize=$165;
      label = 43; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $168=$usize;
      var $169=(($168)|0) < 0;
      if ($169) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $171=$wsize;
      var $172=(((-$171))|0);
      $wsize=$172;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 56; break;
    case 53: 
      var $177=$wp;
      var $178=$up;
      var $179=$abs_usize;
      var $180=$vp;
      var $181=$abs_vsize;
      var $182=___gmpn_add($177, $178, $179, $180, $181);
      $cy_limb=$182;
      var $183=$cy_limb;
      var $184=$abs_usize;
      var $185=$wp;
      var $186=(($185+($184<<2))|0);
      HEAP32[(($186)>>2)]=$183;
      var $187=$abs_usize;
      var $188=$cy_limb;
      var $189=((($187)+($188))|0);
      $wsize=$189;
      var $190=$usize;
      var $191=(($190)|0) < 0;
      if ($191) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $193=$wsize;
      var $194=(((-$193))|0);
      $wsize=$194;
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $197=$wsize;
      var $198=$1;
      var $199=(($198+4)|0);
      HEAP32[(($199)>>2)]=$197;

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpz_add["X"]=1;

function ___gmpz_init($x) {
  var label = 0;


  var $1;
  $1=$x;
  var $2=$1;
  var $3=(($2)|0);
  HEAP32[(($3)>>2)]=1;
  var $4=HEAP32[((5249824)>>2)];
  var $5=FUNCTION_TABLE[$4](4);
  var $6=$5;
  var $7=$1;
  var $8=(($7+8)|0);
  HEAP32[(($8)>>2)]=$6;
  var $9=$1;
  var $10=(($9+4)|0);
  HEAP32[(($10)>>2)]=0;

  return;
}


function ___gmpz_add_ui($w, $u, $vval) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $wp;
      var $usize;
      var $wsize;
      var $abs_usize;
      var $cy;
      $1=$w;
      $2=$u;
      $3=$vval;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      $usize=$6;
      var $7=$usize;
      var $8=(($7)|0) >= 0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$usize;
      var $15 = $10;label = 5; break;
    case 4: 
      var $12=$usize;
      var $13=(((-$12))|0);
      var $15 = $13;label = 5; break;
    case 5: 
      var $15;
      $abs_usize=$15;
      var $16=$abs_usize;
      var $17=((($16)+(1))|0);
      $wsize=$17;
      var $18=$1;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$wsize;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=$1;
      var $25=$wsize;
      var $26=___gmpz_realloc($24, $25);
      label = 7; break;
    case 7: 
      var $28=$2;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      $up=$30;
      var $31=$1;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      $wp=$33;
      var $34=$abs_usize;
      var $35=(($34)|0)==0;
      if ($35) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $37=$3;
      var $38=$wp;
      var $39=(($38)|0);
      HEAP32[(($39)>>2)]=$37;
      var $40=$3;
      var $41=(($40)|0)!=0;
      var $42=(($41)&1);
      var $43=$1;
      var $44=(($43+4)|0);
      HEAP32[(($44)>>2)]=$42;
      label = 17; break;
    case 9: 
      var $46=$usize;
      var $47=(($46)|0) >= 0;
      if ($47) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $49=$wp;
      var $50=$up;
      var $51=$abs_usize;
      var $52=$3;
      var $53=___gmpn_add_1($49, $50, $51, $52);
      $cy=$53;
      var $54=$cy;
      var $55=$abs_usize;
      var $56=$wp;
      var $57=(($56+($55<<2))|0);
      HEAP32[(($57)>>2)]=$54;
      var $58=$abs_usize;
      var $59=$cy;
      var $60=((($58)+($59))|0);
      $wsize=$60;
      label = 16; break;
    case 11: 
      var $62=$abs_usize;
      var $63=(($62)|0)==1;
      if ($63) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $65=$up;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$3;
      var $69=(($67)>>>0) < (($68)>>>0);
      if ($69) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $71=$3;
      var $72=$up;
      var $73=(($72)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($71)-($74))|0);
      var $76=$wp;
      var $77=(($76)|0);
      HEAP32[(($77)>>2)]=$75;
      $wsize=1;
      label = 15; break;
    case 14: 
      var $79=$wp;
      var $80=$up;
      var $81=$abs_usize;
      var $82=$3;
      var $83=___gmpn_sub_1($79, $80, $81, $82);
      var $84=$abs_usize;
      var $85=$abs_usize;
      var $86=((($85)-(1))|0);
      var $87=$wp;
      var $88=(($87+($86<<2))|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89)|0)==0;
      var $91=(($90)&1);
      var $92=((($84)-($91))|0);
      var $93=(((-$92))|0);
      $wsize=$93;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $96=$wsize;
      var $97=$1;
      var $98=(($97+4)|0);
      HEAP32[(($98)>>2)]=$96;
      label = 17; break;
    case 17: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpz_add_ui["X"]=1;

function ___gmpz_set_ui($dest, $val) {
  var label = 0;


  var $1;
  var $2;
  var $size;
  $1=$dest;
  $2=$val;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=$3;
  var $8=$2;
  var $9=(($8)|0)!=0;
  var $10=(($9)&1);
  $size=$10;
  var $11=$size;
  var $12=$1;
  var $13=(($12+4)|0);
  HEAP32[(($13)>>2)]=$11;

  return;
}


function ___gmpz_mul($w, $u, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $usize;
      var $vsize;
      var $wsize;
      var $sign_product;
      var $up;
      var $vp;
      var $wp;
      var $free_me;
      var $free_me_size;
      var $cy_limb;
      var $__tmp_marker=__stackBase__;
      var $__mpz_srcptr_swap__tmp;
      var $__mp_size_t_swap__tmp;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__n1;
      var $__dst2;
      var $__src3;
      var $__x4;
      $1=$w;
      $2=$u;
      $3=$v;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      $usize=$6;
      var $7=$3;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      $vsize=$9;
      var $10=$usize;
      var $11=$vsize;
      var $12=$10 ^ $11;
      $sign_product=$12;
      var $13=$usize;
      var $14=(($13)|0) >= 0;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$usize;
      var $21 = $16;label = 5; break;
    case 4: 
      var $18=$usize;
      var $19=(((-$18))|0);
      var $21 = $19;label = 5; break;
    case 5: 
      var $21;
      $usize=$21;
      var $22=$vsize;
      var $23=(($22)|0) >= 0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$vsize;
      var $30 = $25;label = 8; break;
    case 7: 
      var $27=$vsize;
      var $28=(((-$27))|0);
      var $30 = $28;label = 8; break;
    case 8: 
      var $30;
      $vsize=$30;
      var $31=$usize;
      var $32=$vsize;
      var $33=(($31)|0) < (($32)|0);
      if ($33) { label = 9; break; } else { label = 14; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $36=$2;
      $__mpz_srcptr_swap__tmp=$36;
      var $37=$3;
      $2=$37;
      var $38=$__mpz_srcptr_swap__tmp;
      $3=$38;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $41=$usize;
      $__mp_size_t_swap__tmp=$41;
      var $42=$vsize;
      $usize=$42;
      var $43=$__mp_size_t_swap__tmp;
      $vsize=$43;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $46=$vsize;
      var $47=(($46)|0)==0;
      if ($47) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $49=$1;
      var $50=(($49+4)|0);
      HEAP32[(($50)>>2)]=0;
      label = 90; break;
    case 16: 
      var $52=$vsize;
      var $53=(($52)|0)==1;
      if ($53) { label = 17; break; } else { label = 24; break; }
    case 17: 
      var $55=$usize;
      var $56=((($55)+(1))|0);
      var $57=$1;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($56)|0) > (($59)|0);
      if ($60) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $62=$1;
      var $63=$usize;
      var $64=((($63)+(1))|0);
      var $65=___gmpz_realloc($62, $64);
      var $66=$65;
      var $72 = $66;label = 20; break;
    case 19: 
      var $68=$1;
      var $69=(($68+8)|0);
      var $70=HEAP32[(($69)>>2)];
      var $72 = $70;label = 20; break;
    case 20: 
      var $72;
      var $73=$1;
      var $74=(($73+8)|0);
      var $75=HEAP32[(($74)>>2)];
      $wp=$75;
      var $76=$wp;
      var $77=$2;
      var $78=(($77+8)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$usize;
      var $81=$3;
      var $82=(($81+8)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=___gmpn_mul_1($76, $79, $80, $85);
      $cy_limb=$86;
      var $87=$cy_limb;
      var $88=$usize;
      var $89=$wp;
      var $90=(($89+($88<<2))|0);
      HEAP32[(($90)>>2)]=$87;
      var $91=$cy_limb;
      var $92=(($91)|0)!=0;
      var $93=(($92)&1);
      var $94=$usize;
      var $95=((($94)+($93))|0);
      $usize=$95;
      var $96=$sign_product;
      var $97=(($96)|0) >= 0;
      if ($97) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $99=$usize;
      var $104 = $99;label = 23; break;
    case 22: 
      var $101=$usize;
      var $102=(((-$101))|0);
      var $104 = $102;label = 23; break;
    case 23: 
      var $104;
      var $105=$1;
      var $106=(($105+4)|0);
      HEAP32[(($106)>>2)]=$104;
      label = 90; break;
    case 24: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      $free_me=0;
      var $108=$2;
      var $109=(($108+8)|0);
      var $110=HEAP32[(($109)>>2)];
      $up=$110;
      var $111=$3;
      var $112=(($111+8)|0);
      var $113=HEAP32[(($112)>>2)];
      $vp=$113;
      var $114=$1;
      var $115=(($114+8)|0);
      var $116=HEAP32[(($115)>>2)];
      $wp=$116;
      var $117=$usize;
      var $118=$vsize;
      var $119=((($117)+($118))|0);
      $wsize=$119;
      var $120=$1;
      var $121=(($120)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$wsize;
      var $124=(($122)|0) < (($123)|0);
      if ($124) { label = 25; break; } else { label = 30; break; }
    case 25: 
      var $126=$wp;
      var $127=$up;
      var $128=(($126)|0)==(($127)|0);
      if ($128) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $130=$wp;
      var $131=$vp;
      var $132=(($130)|0)==(($131)|0);
      if ($132) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $134=$wp;
      $free_me=$134;
      var $135=$1;
      var $136=(($135)|0);
      var $137=HEAP32[(($136)>>2)];
      $free_me_size=$137;
      label = 29; break;
    case 28: 
      var $139=HEAP32[((5249684)>>2)];
      var $140=$wp;
      var $141=$140;
      var $142=$1;
      var $143=(($142)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=($144<<2);
      FUNCTION_TABLE[$139]($141, $145);
      label = 29; break;
    case 29: 
      var $147=$wsize;
      var $148=$1;
      var $149=(($148)|0);
      HEAP32[(($149)>>2)]=$147;
      var $150=HEAP32[((5249824)>>2)];
      var $151=$wsize;
      var $152=($151<<2);
      var $153=FUNCTION_TABLE[$150]($152);
      var $154=$153;
      $wp=$154;
      var $155=$wp;
      var $156=$1;
      var $157=(($156+8)|0);
      HEAP32[(($157)>>2)]=$155;
      label = 78; break;
    case 30: 
      var $159=$wp;
      var $160=$up;
      var $161=(($159)|0)==(($160)|0);
      if ($161) { label = 31; break; } else { label = 54; break; }
    case 31: 
      var $163=$usize;
      var $164=($163<<2);
      var $165=(($164)>>>0) < 65536;
      if ($165) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $167=$usize;
      var $168=($167<<2);
      var $169=STACKTOP;STACKTOP = (STACKTOP + $168)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $175 = $169;label = 34; break;
    case 33: 
      var $171=$usize;
      var $172=($171<<2);
      var $173=___gmp_tmp_reentrant_alloc($__tmp_marker, $172);
      var $175 = $173;label = 34; break;
    case 34: 
      var $175;
      var $176=$175;
      $up=$176;
      var $177=$wp;
      var $178=$vp;
      var $179=(($177)|0)==(($178)|0);
      if ($179) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $181=$up;
      $vp=$181;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $191=$usize;
      var $192=(($191)|0)!=0;
      if ($192) { label = 45; break; } else { label = 51; break; }
    case 45: 
      var $194=$usize;
      var $195=((($194)-(1))|0);
      $__n=$195;
      var $196=$up;
      $__dst=$196;
      var $197=$wp;
      $__src=$197;
      var $198=$__src;
      var $199=(($198+4)|0);
      $__src=$199;
      var $200=HEAP32[(($198)>>2)];
      $__x=$200;
      var $201=$__n;
      var $202=(($201)|0)!=0;
      if ($202) { label = 46; break; } else { label = 50; break; }
    case 46: 
      label = 47; break;
    case 47: 
      var $205=$__x;
      var $206=$__dst;
      var $207=(($206+4)|0);
      $__dst=$207;
      HEAP32[(($206)>>2)]=$205;
      var $208=$__src;
      var $209=(($208+4)|0);
      $__src=$209;
      var $210=HEAP32[(($208)>>2)];
      $__x=$210;
      label = 48; break;
    case 48: 
      var $212=$__n;
      var $213=((($212)-(1))|0);
      $__n=$213;
      var $214=(($213)|0)!=0;
      if ($214) { label = 47; break; } else { label = 49; break; }
    case 49: 
      label = 50; break;
    case 50: 
      var $217=$__x;
      var $218=$__dst;
      var $219=(($218+4)|0);
      $__dst=$219;
      HEAP32[(($218)>>2)]=$217;
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 77; break;
    case 54: 
      var $224=$wp;
      var $225=$vp;
      var $226=(($224)|0)==(($225)|0);
      if ($226) { label = 55; break; } else { label = 76; break; }
    case 55: 
      var $228=$vsize;
      var $229=($228<<2);
      var $230=(($229)>>>0) < 65536;
      if ($230) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $232=$vsize;
      var $233=($232<<2);
      var $234=STACKTOP;STACKTOP = (STACKTOP + $233)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $240 = $234;label = 58; break;
    case 57: 
      var $236=$vsize;
      var $237=($236<<2);
      var $238=___gmp_tmp_reentrant_alloc($__tmp_marker, $237);
      var $240 = $238;label = 58; break;
    case 58: 
      var $240;
      var $241=$240;
      $vp=$241;
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $250=$vsize;
      var $251=(($250)|0)!=0;
      if ($251) { label = 67; break; } else { label = 73; break; }
    case 67: 
      var $253=$vsize;
      var $254=((($253)-(1))|0);
      $__n1=$254;
      var $255=$vp;
      $__dst2=$255;
      var $256=$wp;
      $__src3=$256;
      var $257=$__src3;
      var $258=(($257+4)|0);
      $__src3=$258;
      var $259=HEAP32[(($257)>>2)];
      $__x4=$259;
      var $260=$__n1;
      var $261=(($260)|0)!=0;
      if ($261) { label = 68; break; } else { label = 72; break; }
    case 68: 
      label = 69; break;
    case 69: 
      var $264=$__x4;
      var $265=$__dst2;
      var $266=(($265+4)|0);
      $__dst2=$266;
      HEAP32[(($265)>>2)]=$264;
      var $267=$__src3;
      var $268=(($267+4)|0);
      $__src3=$268;
      var $269=HEAP32[(($267)>>2)];
      $__x4=$269;
      label = 70; break;
    case 70: 
      var $271=$__n1;
      var $272=((($271)-(1))|0);
      $__n1=$272;
      var $273=(($272)|0)!=0;
      if ($273) { label = 69; break; } else { label = 71; break; }
    case 71: 
      label = 72; break;
    case 72: 
      var $276=$__x4;
      var $277=$__dst2;
      var $278=(($277+4)|0);
      $__dst2=$278;
      HEAP32[(($277)>>2)]=$276;
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $285=$up;
      var $286=$vp;
      var $287=(($285)|0)==(($286)|0);
      if ($287) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $289=$wp;
      var $290=$up;
      var $291=$usize;
      ___gmpn_sqr($289, $290, $291);
      var $292=$wsize;
      var $293=((($292)-(1))|0);
      var $294=$wp;
      var $295=(($294+($293<<2))|0);
      var $296=HEAP32[(($295)>>2)];
      $cy_limb=$296;
      label = 81; break;
    case 80: 
      var $298=$wp;
      var $299=$up;
      var $300=$usize;
      var $301=$vp;
      var $302=$vsize;
      var $303=___gmpn_mul($298, $299, $300, $301, $302);
      $cy_limb=$303;
      label = 81; break;
    case 81: 
      var $305=$cy_limb;
      var $306=(($305)|0)==0;
      var $307=(($306)&1);
      var $308=$wsize;
      var $309=((($308)-($307))|0);
      $wsize=$309;
      var $310=$sign_product;
      var $311=(($310)|0) < 0;
      if ($311) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $313=$wsize;
      var $314=(((-$313))|0);
      var $318 = $314;label = 84; break;
    case 83: 
      var $316=$wsize;
      var $318 = $316;label = 84; break;
    case 84: 
      var $318;
      var $319=$1;
      var $320=(($319+4)|0);
      HEAP32[(($320)>>2)]=$318;
      var $321=$free_me;
      var $322=(($321)|0)!=0;
      if ($322) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $324=HEAP32[((5249684)>>2)];
      var $325=$free_me;
      var $326=$325;
      var $327=$free_me_size;
      var $328=($327<<2);
      FUNCTION_TABLE[$324]($326, $328);
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $331=HEAP32[(($__tmp_marker)>>2)];
      var $332=(($331)|0)!=0;
      if ($332) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $334=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($334);
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpz_mul["X"]=1;

function ___gmpz_mul_ui($prod, $mult, $small_mult) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $sign_product;
      var $sml;
      var $cy;
      var $pp;
      $1=$prod;
      $2=$mult;
      $3=$small_mult;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      $size=$6;
      var $7=$size;
      $sign_product=$7;
      var $8=$size;
      var $9=(($8)|0)==0;
      if ($9) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $11=$3;
      var $12=(($11)|0)==0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$1;
      var $15=(($14+4)|0);
      HEAP32[(($15)>>2)]=0;
      label = 17; break;
    case 5: 
      var $17=$size;
      var $18=(($17)|0) >= 0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$size;
      var $25 = $20;label = 8; break;
    case 7: 
      var $22=$size;
      var $23=(((-$22))|0);
      var $25 = $23;label = 8; break;
    case 8: 
      var $25;
      $size=$25;
      var $26=$3;
      $sml=$26;
      var $27=$sml;
      var $28=(($27)>>>0) <= 4294967295;
      if ($28) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $30=$size;
      var $31=((($30)+(1))|0);
      var $32=$1;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($31)|0) > (($34)|0);
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $37=$1;
      var $38=$size;
      var $39=((($38)+(1))|0);
      var $40=___gmpz_realloc($37, $39);
      var $41=$40;
      var $47 = $41;label = 12; break;
    case 11: 
      var $43=$1;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $47 = $45;label = 12; break;
    case 12: 
      var $47;
      var $48=$1;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      $pp=$50;
      var $51=$pp;
      var $52=$2;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$size;
      var $56=$sml;
      var $57=___gmpn_mul_1($51, $54, $55, $56);
      $cy=$57;
      var $58=$cy;
      var $59=$size;
      var $60=$pp;
      var $61=(($60+($59<<2))|0);
      HEAP32[(($61)>>2)]=$58;
      var $62=$cy;
      var $63=(($62)|0)!=0;
      var $64=(($63)&1);
      var $65=$size;
      var $66=((($65)+($64))|0);
      $size=$66;
      label = 13; break;
    case 13: 
      var $68=$sign_product;
      var $69=(($68)|0) < 0;
      var $70=(($69)&1);
      var $71=$3;
      var $72=(($71)>>>0) < 0;
      var $73=(($72)&1);
      var $74=$70 ^ $73;
      var $75=(($74)|0)!=0;
      if ($75) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $77=$size;
      var $78=(((-$77))|0);
      var $82 = $78;label = 16; break;
    case 15: 
      var $80=$size;
      var $82 = $80;label = 16; break;
    case 16: 
      var $82;
      var $83=$1;
      var $84=(($83+4)|0);
      HEAP32[(($84)>>2)]=$82;
      label = 17; break;
    case 17: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpz_mul_ui["X"]=1;

function ___gmpz_neg($w, $u) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $wp;
      var $up;
      var $usize;
      var $size;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$w;
      $2=$u;
      var $3=$2;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      $usize=$5;
      var $6=$2;
      var $7=$1;
      var $8=(($6)|0)!=(($7)|0);
      if ($8) { label = 3; break; } else { label = 26; break; }
    case 3: 
      var $10=$usize;
      var $11=(($10)|0) >= 0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=$usize;
      var $18 = $13;label = 6; break;
    case 5: 
      var $15=$usize;
      var $16=(((-$15))|0);
      var $18 = $16;label = 6; break;
    case 6: 
      var $18;
      $size=$18;
      var $19=$1;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$size;
      var $23=(($21)|0) < (($22)|0);
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $25=$1;
      var $26=$size;
      var $27=___gmpz_realloc($25, $26);
      label = 8; break;
    case 8: 
      var $29=$1;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      $wp=$31;
      var $32=$2;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      $up=$34;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $43=$size;
      var $44=(($43)|0)!=0;
      if ($44) { label = 17; break; } else { label = 23; break; }
    case 17: 
      var $46=$size;
      var $47=((($46)-(1))|0);
      $__n=$47;
      var $48=$wp;
      $__dst=$48;
      var $49=$up;
      $__src=$49;
      var $50=$__src;
      var $51=(($50+4)|0);
      $__src=$51;
      var $52=HEAP32[(($50)>>2)];
      $__x=$52;
      var $53=$__n;
      var $54=(($53)|0)!=0;
      if ($54) { label = 18; break; } else { label = 22; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $57=$__x;
      var $58=$__dst;
      var $59=(($58+4)|0);
      $__dst=$59;
      HEAP32[(($58)>>2)]=$57;
      var $60=$__src;
      var $61=(($60+4)|0);
      $__src=$61;
      var $62=HEAP32[(($60)>>2)];
      $__x=$62;
      label = 20; break;
    case 20: 
      var $64=$__n;
      var $65=((($64)-(1))|0);
      $__n=$65;
      var $66=(($65)|0)!=0;
      if ($66) { label = 19; break; } else { label = 21; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $69=$__x;
      var $70=$__dst;
      var $71=(($70+4)|0);
      $__dst=$71;
      HEAP32[(($70)>>2)]=$69;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $76=$usize;
      var $77=(((-$76))|0);
      var $78=$1;
      var $79=(($78+4)|0);
      HEAP32[(($79)>>2)]=$77;

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpz_neg["X"]=1;

function ___gmpz_clear($m) {
  var label = 0;


  var $1;
  $1=$m;
  var $2=HEAP32[((5249684)>>2)];
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=$1;
  var $8=(($7)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=($9<<2);
  FUNCTION_TABLE[$2]($6, $10);

  return;
}


function ___gmpn_add($__gmp_wp, $__gmp_xp, $__gmp_xsize, $__gmp_yp, $__gmp_ysize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $__gmp_c;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_j;
      $1=$__gmp_wp;
      $2=$__gmp_xp;
      $3=$__gmp_xsize;
      $4=$__gmp_yp;
      $5=$__gmp_ysize;
      label = 3; break;
    case 3: 
      var $7=$5;
      $__gmp_i=$7;
      var $8=$__gmp_i;
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13=$4;
      var $14=$__gmp_i;
      var $15=___gmpn_add_n($11, $12, $13, $14);
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 11; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $19=$__gmp_i;
      var $20=$3;
      var $21=(($19)|0) >= (($20)|0);
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $__gmp_c=1;
      label = 21; break;
    case 8: 
      var $24=$__gmp_i;
      var $25=$2;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $__gmp_x=$27;
      label = 9; break;
    case 9: 
      var $29=$__gmp_x;
      var $30=((($29)+(1))|0);
      var $31=$__gmp_i;
      var $32=((($31)+(1))|0);
      $__gmp_i=$32;
      var $33=$1;
      var $34=(($33+($31<<2))|0);
      HEAP32[(($34)>>2)]=$30;
      var $35=(($30)|0)==0;
      if ($35) { label = 6; break; } else { label = 10; break; }
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $39=$1;
      var $40=$2;
      var $41=(($39)|0)!=(($40)|0);
      if ($41) { label = 13; break; } else { label = 20; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$__gmp_i;
      $__gmp_j=$44;
      label = 15; break;
    case 15: 
      var $46=$__gmp_j;
      var $47=$3;
      var $48=(($46)|0) < (($47)|0);
      if ($48) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $50=$__gmp_j;
      var $51=$2;
      var $52=(($51+($50<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$__gmp_j;
      var $55=$1;
      var $56=(($55+($54<<2))|0);
      HEAP32[(($56)>>2)]=$53;
      label = 17; break;
    case 17: 
      var $58=$__gmp_j;
      var $59=((($58)+(1))|0);
      $__gmp_j=$59;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      $__gmp_c=0;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $65=$__gmp_c;

      return $65;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_add["X"]=1;

function ___gmpn_sub($__gmp_wp, $__gmp_xp, $__gmp_xsize, $__gmp_yp, $__gmp_ysize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $__gmp_c;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_j;
      $1=$__gmp_wp;
      $2=$__gmp_xp;
      $3=$__gmp_xsize;
      $4=$__gmp_yp;
      $5=$__gmp_ysize;
      label = 3; break;
    case 3: 
      var $7=$5;
      $__gmp_i=$7;
      var $8=$__gmp_i;
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13=$4;
      var $14=$__gmp_i;
      var $15=___gmpn_sub_n($11, $12, $13, $14);
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 11; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $19=$__gmp_i;
      var $20=$3;
      var $21=(($19)|0) >= (($20)|0);
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $__gmp_c=1;
      label = 21; break;
    case 8: 
      var $24=$__gmp_i;
      var $25=$2;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $__gmp_x=$27;
      label = 9; break;
    case 9: 
      var $29=$__gmp_x;
      var $30=((($29)-(1))|0);
      var $31=$__gmp_i;
      var $32=((($31)+(1))|0);
      $__gmp_i=$32;
      var $33=$1;
      var $34=(($33+($31<<2))|0);
      HEAP32[(($34)>>2)]=$30;
      var $35=$__gmp_x;
      var $36=(($35)|0)==0;
      if ($36) { label = 6; break; } else { label = 10; break; }
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $40=$1;
      var $41=$2;
      var $42=(($40)|0)!=(($41)|0);
      if ($42) { label = 13; break; } else { label = 20; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $45=$__gmp_i;
      $__gmp_j=$45;
      label = 15; break;
    case 15: 
      var $47=$__gmp_j;
      var $48=$3;
      var $49=(($47)|0) < (($48)|0);
      if ($49) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $51=$__gmp_j;
      var $52=$2;
      var $53=(($52+($51<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$__gmp_j;
      var $56=$1;
      var $57=(($56+($55<<2))|0);
      HEAP32[(($57)>>2)]=$54;
      label = 17; break;
    case 17: 
      var $59=$__gmp_j;
      var $60=((($59)+(1))|0);
      $__gmp_j=$60;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      $__gmp_c=0;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $66=$__gmp_c;

      return $66;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sub["X"]=1;

function ___gmpn_mul($prodp, $up, $un, $vp, $vn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $tp=__stackBase__;
      var $cy;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__x1;
      var $__p;
      var $__n2;
      var $__dst3;
      var $__src4;
      var $__x5;
      var $__x6;
      var $__p7;
      var $scratch;
      var $cy8;
      var $ws;
      var $__n9;
      var $__dst10;
      var $__src11;
      var $__x12;
      var $__x13;
      var $__p14;
      var $__n15;
      var $__dst16;
      var $__src17;
      var $__x18;
      var $__x19;
      var $__p20;
      var $scratch21;
      var $cy22;
      var $ws23;
      var $__n24;
      var $__dst25;
      var $__src26;
      var $__x27;
      var $__x28;
      var $__p29;
      var $__n30;
      var $__dst31;
      var $__src32;
      var $__x33;
      var $__x34;
      var $__p35;
      var $scratch36;
      var $__tmp_marker=(__stackBase__)+(120);
      var $cy37;
      var $ws38;
      var $__tmp_marker39=(__stackBase__)+(124);
      var $__n40;
      var $__dst41;
      var $__src42;
      var $__x43;
      var $__x44;
      var $__p45;
      var $__n46;
      var $__dst47;
      var $__src48;
      var $__x49;
      var $__x50;
      var $__p51;
      $1=$prodp;
      $2=$up;
      $3=$un;
      $4=$vp;
      $5=$vn;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$3;
      var $15=$5;
      var $16=(($14)|0)==(($15)|0);
      if ($16) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $18=$2;
      var $19=$4;
      var $20=(($18)|0)==(($19)|0);
      if ($20) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $22=$1;
      var $23=$2;
      var $24=$3;
      ___gmpn_sqr($22, $23, $24);
      label = 14; break;
    case 13: 
      var $26=$1;
      var $27=$2;
      var $28=$4;
      var $29=$3;
      ___gmpn_mul_n($26, $27, $28, $29);
      label = 14; break;
    case 14: 
      label = 325; break;
    case 15: 
      var $32=$5;
      var $33=(($32)|0) < 30;
      if ($33) { label = 16; break; } else { label = 79; break; }
    case 16: 
      var $35=$3;
      var $36=(($35)|0) <= 500;
      if ($36) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $38=$5;
      var $39=(($38)|0)==1;
      if ($39) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $41=$1;
      var $42=$2;
      var $43=$3;
      var $44=$4;
      var $45=$5;
      ___gmpn_mul_basecase($41, $42, $43, $44, $45);
      label = 78; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $49=$1;
      var $50=$2;
      var $51=$4;
      var $52=$5;
      ___gmpn_mul_basecase($49, $50, 500, $51, $52);
      var $53=$1;
      var $54=(($53+2000)|0);
      $1=$54;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $63=$5;
      var $64=(($63)|0)!=0;
      if ($64) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $66=$5;
      var $67=((($66)-(1))|0);
      $__n=$67;
      var $68=(($tp)|0);
      $__dst=$68;
      var $69=$1;
      $__src=$69;
      var $70=$__src;
      var $71=(($70+4)|0);
      $__src=$71;
      var $72=HEAP32[(($70)>>2)];
      $__x=$72;
      var $73=$__n;
      var $74=(($73)|0)!=0;
      if ($74) { label = 31; break; } else { label = 35; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $77=$__x;
      var $78=$__dst;
      var $79=(($78+4)|0);
      $__dst=$79;
      HEAP32[(($78)>>2)]=$77;
      var $80=$__src;
      var $81=(($80+4)|0);
      $__src=$81;
      var $82=HEAP32[(($80)>>2)];
      $__x=$82;
      label = 33; break;
    case 33: 
      var $84=$__n;
      var $85=((($84)-(1))|0);
      $__n=$85;
      var $86=(($85)|0)!=0;
      if ($86) { label = 32; break; } else { label = 34; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $89=$__x;
      var $90=$__dst;
      var $91=(($90+4)|0);
      $__dst=$91;
      HEAP32[(($90)>>2)]=$89;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $95=$2;
      var $96=(($95+2000)|0);
      $2=$96;
      var $97=$3;
      var $98=((($97)-(500))|0);
      $3=$98;
      label = 39; break;
    case 39: 
      var $100=$3;
      var $101=(($100)|0) > 500;
      if ($101) { label = 40; break; } else { label = 65; break; }
    case 40: 
      var $103=$1;
      var $104=$2;
      var $105=$4;
      var $106=$5;
      ___gmpn_mul_basecase($103, $104, 500, $105, $106);
      var $107=$1;
      var $108=$1;
      var $109=(($tp)|0);
      var $110=$5;
      var $111=___gmpn_add_n($107, $108, $109, $110);
      $cy=$111;
      label = 41; break;
    case 41: 
      var $113=$1;
      var $114=$5;
      var $115=(($113+($114<<2))|0);
      $__p=$115;
      var $116=$__p;
      var $117=HEAP32[(($116)>>2)];
      var $118=$cy;
      var $119=((($117)+($118))|0);
      $__x1=$119;
      var $120=$__x1;
      var $121=$__p;
      HEAP32[(($121)>>2)]=$120;
      var $122=$__x1;
      var $123=$cy;
      var $124=(($122)>>>0) < (($123)>>>0);
      if ($124) { label = 42; break; } else { label = 46; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $127=$__p;
      var $128=(($127+4)|0);
      $__p=$128;
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129)+(1))|0);
      HEAP32[(($128)>>2)]=$130;
      var $131=(($130)|0)==0;
      if ($131) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 43; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $136=$1;
      var $137=(($136+2000)|0);
      $1=$137;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $146=$5;
      var $147=(($146)|0)!=0;
      if ($147) { label = 56; break; } else { label = 62; break; }
    case 56: 
      var $149=$5;
      var $150=((($149)-(1))|0);
      $__n2=$150;
      var $151=(($tp)|0);
      $__dst3=$151;
      var $152=$1;
      $__src4=$152;
      var $153=$__src4;
      var $154=(($153+4)|0);
      $__src4=$154;
      var $155=HEAP32[(($153)>>2)];
      $__x5=$155;
      var $156=$__n2;
      var $157=(($156)|0)!=0;
      if ($157) { label = 57; break; } else { label = 61; break; }
    case 57: 
      label = 58; break;
    case 58: 
      var $160=$__x5;
      var $161=$__dst3;
      var $162=(($161+4)|0);
      $__dst3=$162;
      HEAP32[(($161)>>2)]=$160;
      var $163=$__src4;
      var $164=(($163+4)|0);
      $__src4=$164;
      var $165=HEAP32[(($163)>>2)];
      $__x5=$165;
      label = 59; break;
    case 59: 
      var $167=$__n2;
      var $168=((($167)-(1))|0);
      $__n2=$168;
      var $169=(($168)|0)!=0;
      if ($169) { label = 58; break; } else { label = 60; break; }
    case 60: 
      label = 61; break;
    case 61: 
      var $172=$__x5;
      var $173=$__dst3;
      var $174=(($173+4)|0);
      $__dst3=$174;
      HEAP32[(($173)>>2)]=$172;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $178=$2;
      var $179=(($178+2000)|0);
      $2=$179;
      var $180=$3;
      var $181=((($180)-(500))|0);
      $3=$181;
      label = 39; break;
    case 65: 
      var $183=$3;
      var $184=$5;
      var $185=(($183)|0) > (($184)|0);
      if ($185) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $187=$1;
      var $188=$2;
      var $189=$3;
      var $190=$4;
      var $191=$5;
      ___gmpn_mul_basecase($187, $188, $189, $190, $191);
      label = 70; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $195=$1;
      var $196=$4;
      var $197=$5;
      var $198=$2;
      var $199=$3;
      ___gmpn_mul_basecase($195, $196, $197, $198, $199);
      label = 70; break;
    case 70: 
      var $201=$1;
      var $202=$1;
      var $203=(($tp)|0);
      var $204=$5;
      var $205=___gmpn_add_n($201, $202, $203, $204);
      $cy=$205;
      label = 71; break;
    case 71: 
      var $207=$1;
      var $208=$5;
      var $209=(($207+($208<<2))|0);
      $__p7=$209;
      var $210=$__p7;
      var $211=HEAP32[(($210)>>2)];
      var $212=$cy;
      var $213=((($211)+($212))|0);
      $__x6=$213;
      var $214=$__x6;
      var $215=$__p7;
      HEAP32[(($215)>>2)]=$214;
      var $216=$__x6;
      var $217=$cy;
      var $218=(($216)>>>0) < (($217)>>>0);
      if ($218) { label = 72; break; } else { label = 76; break; }
    case 72: 
      label = 73; break;
    case 73: 
      var $221=$__p7;
      var $222=(($221+4)|0);
      $__p7=$222;
      var $223=HEAP32[(($222)>>2)];
      var $224=((($223)+(1))|0);
      HEAP32[(($222)>>2)]=$224;
      var $225=(($224)|0)==0;
      if ($225) { label = 74; break; } else { label = 75; break; }
    case 74: 
      label = 73; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 324; break;
    case 79: 
      var $232=$5;
      var $233=(($232)|0) >= 100;
      if ($233) { label = 147; break; } else { label = 80; break; }
    case 80: 
      var $235=$5;
      var $236=($235<<4);
      var $237=((($236)+(100))|0);
      var $238=($237<<2);
      var $239=STACKTOP;STACKTOP = (STACKTOP + $238)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $240=$239;
      $scratch=$240;
      var $241=$3;
      var $242=$5;
      var $243=((($242)*(3))&-1);
      var $244=(($241)|0) >= (($243)|0);
      if ($244) { label = 81; break; } else { label = 139; break; }
    case 81: 
      var $246=$5;
      var $247=($246<<2);
      var $248=($247<<2);
      var $249=STACKTOP;STACKTOP = (STACKTOP + $248)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $250=$249;
      $ws=$250;
      var $251=$1;
      var $252=$2;
      var $253=$5;
      var $254=($253<<1);
      var $255=$4;
      var $256=$5;
      var $257=$scratch;
      ___gmpn_toom42_mul($251, $252, $254, $255, $256, $257);
      var $258=$5;
      var $259=($258<<1);
      var $260=$3;
      var $261=((($260)-($259))|0);
      $3=$261;
      var $262=$5;
      var $263=($262<<1);
      var $264=$2;
      var $265=(($264+($263<<2))|0);
      $2=$265;
      var $266=$5;
      var $267=($266<<1);
      var $268=$1;
      var $269=(($268+($267<<2))|0);
      $1=$269;
      label = 82; break;
    case 82: 
      var $271=$3;
      var $272=$5;
      var $273=((($272)*(3))&-1);
      var $274=(($271)|0) >= (($273)|0);
      if ($274) { label = 83; break; } else { label = 108; break; }
    case 83: 
      var $276=$ws;
      var $277=$2;
      var $278=$5;
      var $279=($278<<1);
      var $280=$4;
      var $281=$5;
      var $282=$scratch;
      ___gmpn_toom42_mul($276, $277, $279, $280, $281, $282);
      var $283=$5;
      var $284=($283<<1);
      var $285=$3;
      var $286=((($285)-($284))|0);
      $3=$286;
      var $287=$5;
      var $288=($287<<1);
      var $289=$2;
      var $290=(($289+($288<<2))|0);
      $2=$290;
      var $291=$1;
      var $292=$1;
      var $293=$ws;
      var $294=$5;
      var $295=___gmpn_add_n($291, $292, $293, $294);
      $cy8=$295;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $304=$5;
      var $305=($304<<1);
      var $306=(($305)|0)!=0;
      if ($306) { label = 92; break; } else { label = 98; break; }
    case 92: 
      var $308=$5;
      var $309=($308<<1);
      var $310=((($309)-(1))|0);
      $__n9=$310;
      var $311=$1;
      var $312=$5;
      var $313=(($311+($312<<2))|0);
      $__dst10=$313;
      var $314=$ws;
      var $315=$5;
      var $316=(($314+($315<<2))|0);
      $__src11=$316;
      var $317=$__src11;
      var $318=(($317+4)|0);
      $__src11=$318;
      var $319=HEAP32[(($317)>>2)];
      $__x12=$319;
      var $320=$__n9;
      var $321=(($320)|0)!=0;
      if ($321) { label = 93; break; } else { label = 97; break; }
    case 93: 
      label = 94; break;
    case 94: 
      var $324=$__x12;
      var $325=$__dst10;
      var $326=(($325+4)|0);
      $__dst10=$326;
      HEAP32[(($325)>>2)]=$324;
      var $327=$__src11;
      var $328=(($327+4)|0);
      $__src11=$328;
      var $329=HEAP32[(($327)>>2)];
      $__x12=$329;
      label = 95; break;
    case 95: 
      var $331=$__n9;
      var $332=((($331)-(1))|0);
      $__n9=$332;
      var $333=(($332)|0)!=0;
      if ($333) { label = 94; break; } else { label = 96; break; }
    case 96: 
      label = 97; break;
    case 97: 
      var $336=$__x12;
      var $337=$__dst10;
      var $338=(($337+4)|0);
      $__dst10=$338;
      HEAP32[(($337)>>2)]=$336;
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $343=$1;
      var $344=$5;
      var $345=(($343+($344<<2))|0);
      $__p14=$345;
      var $346=$__p14;
      var $347=HEAP32[(($346)>>2)];
      var $348=$cy8;
      var $349=((($347)+($348))|0);
      $__x13=$349;
      var $350=$__x13;
      var $351=$__p14;
      HEAP32[(($351)>>2)]=$350;
      var $352=$__x13;
      var $353=$cy8;
      var $354=(($352)>>>0) < (($353)>>>0);
      if ($354) { label = 102; break; } else { label = 106; break; }
    case 102: 
      label = 103; break;
    case 103: 
      var $357=$__p14;
      var $358=(($357+4)|0);
      $__p14=$358;
      var $359=HEAP32[(($358)>>2)];
      var $360=((($359)+(1))|0);
      HEAP32[(($358)>>2)]=$360;
      var $361=(($360)|0)==0;
      if ($361) { label = 104; break; } else { label = 105; break; }
    case 104: 
      label = 103; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $366=$5;
      var $367=($366<<1);
      var $368=$1;
      var $369=(($368+($367<<2))|0);
      $1=$369;
      label = 82; break;
    case 108: 
      var $371=$3;
      var $372=($371<<2);
      var $373=$5;
      var $374=((($373)*(5))&-1);
      var $375=(($372)|0) < (($374)|0);
      if ($375) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $377=$ws;
      var $378=$2;
      var $379=$3;
      var $380=$4;
      var $381=$5;
      var $382=$scratch;
      ___gmpn_toom22_mul($377, $378, $379, $380, $381, $382);
      label = 114; break;
    case 110: 
      var $384=$3;
      var $385=($384<<2);
      var $386=$5;
      var $387=((($386)*(7))&-1);
      var $388=(($385)|0) < (($387)|0);
      if ($388) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $390=$ws;
      var $391=$2;
      var $392=$3;
      var $393=$4;
      var $394=$5;
      var $395=$scratch;
      ___gmpn_toom32_mul($390, $391, $392, $393, $394, $395);
      label = 113; break;
    case 112: 
      var $397=$ws;
      var $398=$2;
      var $399=$3;
      var $400=$4;
      var $401=$5;
      var $402=$scratch;
      ___gmpn_toom42_mul($397, $398, $399, $400, $401, $402);
      label = 113; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $405=$1;
      var $406=$1;
      var $407=$ws;
      var $408=$5;
      var $409=___gmpn_add_n($405, $406, $407, $408);
      $cy8=$409;
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      var $418=$3;
      var $419=(($418)|0)!=0;
      if ($419) { label = 123; break; } else { label = 129; break; }
    case 123: 
      var $421=$3;
      var $422=((($421)-(1))|0);
      $__n15=$422;
      var $423=$1;
      var $424=$5;
      var $425=(($423+($424<<2))|0);
      $__dst16=$425;
      var $426=$ws;
      var $427=$5;
      var $428=(($426+($427<<2))|0);
      $__src17=$428;
      var $429=$__src17;
      var $430=(($429+4)|0);
      $__src17=$430;
      var $431=HEAP32[(($429)>>2)];
      $__x18=$431;
      var $432=$__n15;
      var $433=(($432)|0)!=0;
      if ($433) { label = 124; break; } else { label = 128; break; }
    case 124: 
      label = 125; break;
    case 125: 
      var $436=$__x18;
      var $437=$__dst16;
      var $438=(($437+4)|0);
      $__dst16=$438;
      HEAP32[(($437)>>2)]=$436;
      var $439=$__src17;
      var $440=(($439+4)|0);
      $__src17=$440;
      var $441=HEAP32[(($439)>>2)];
      $__x18=$441;
      label = 126; break;
    case 126: 
      var $443=$__n15;
      var $444=((($443)-(1))|0);
      $__n15=$444;
      var $445=(($444)|0)!=0;
      if ($445) { label = 125; break; } else { label = 127; break; }
    case 127: 
      label = 128; break;
    case 128: 
      var $448=$__x18;
      var $449=$__dst16;
      var $450=(($449+4)|0);
      $__dst16=$450;
      HEAP32[(($449)>>2)]=$448;
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      var $455=$1;
      var $456=$5;
      var $457=(($455+($456<<2))|0);
      $__p20=$457;
      var $458=$__p20;
      var $459=HEAP32[(($458)>>2)];
      var $460=$cy8;
      var $461=((($459)+($460))|0);
      $__x19=$461;
      var $462=$__x19;
      var $463=$__p20;
      HEAP32[(($463)>>2)]=$462;
      var $464=$__x19;
      var $465=$cy8;
      var $466=(($464)>>>0) < (($465)>>>0);
      if ($466) { label = 133; break; } else { label = 137; break; }
    case 133: 
      label = 134; break;
    case 134: 
      var $469=$__p20;
      var $470=(($469+4)|0);
      $__p20=$470;
      var $471=HEAP32[(($470)>>2)];
      var $472=((($471)+(1))|0);
      HEAP32[(($470)>>2)]=$472;
      var $473=(($472)|0)==0;
      if ($473) { label = 135; break; } else { label = 136; break; }
    case 135: 
      label = 134; break;
    case 136: 
      label = 137; break;
    case 137: 
      label = 138; break;
    case 138: 
      label = 146; break;
    case 139: 
      var $479=$3;
      var $480=($479<<2);
      var $481=$5;
      var $482=((($481)*(5))&-1);
      var $483=(($480)|0) < (($482)|0);
      if ($483) { label = 140; break; } else { label = 141; break; }
    case 140: 
      var $485=$1;
      var $486=$2;
      var $487=$3;
      var $488=$4;
      var $489=$5;
      var $490=$scratch;
      ___gmpn_toom22_mul($485, $486, $487, $488, $489, $490);
      label = 145; break;
    case 141: 
      var $492=$3;
      var $493=($492<<2);
      var $494=$5;
      var $495=((($494)*(7))&-1);
      var $496=(($493)|0) < (($495)|0);
      if ($496) { label = 142; break; } else { label = 143; break; }
    case 142: 
      var $498=$1;
      var $499=$2;
      var $500=$3;
      var $501=$4;
      var $502=$5;
      var $503=$scratch;
      ___gmpn_toom32_mul($498, $499, $500, $501, $502, $503);
      label = 144; break;
    case 143: 
      var $505=$1;
      var $506=$2;
      var $507=$3;
      var $508=$4;
      var $509=$5;
      var $510=$scratch;
      ___gmpn_toom42_mul($505, $506, $507, $508, $509, $510);
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 323; break;
    case 147: 
      var $515=$3;
      var $516=$5;
      var $517=((($515)+($516))|0);
      var $518=$517 >> 1;
      var $519=(($518)|0) >= 3000;
      if ($519) { label = 148; break; } else { label = 149; break; }
    case 148: 
      var $521=$5;
      var $522=((($521)*(3))&-1);
      var $523=(($522)|0) >= 3000;
      if ($523) { label = 260; break; } else { label = 149; break; }
    case 149: 
      var $525=$5;
      var $526=(($525)|0) >= 300;
      if ($526) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $528=$3;
      var $529=((($528)*(3))&-1);
      var $530=((($529)+(12))|0);
      var $531=$5;
      var $532=($531<<2);
      var $533=(($530)|0) < (($532)|0);
      if ($533) { label = 239; break; } else { label = 151; break; }
    case 151: 
      var $535=$5;
      var $536=($535<<4);
      var $537=((($536)+(100))|0);
      var $538=($537<<2);
      var $539=STACKTOP;STACKTOP = (STACKTOP + $538)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $540=$539;
      $scratch21=$540;
      var $541=$3;
      var $542=($541<<1);
      var $543=$5;
      var $544=((($543)*(5))&-1);
      var $545=(($542)|0) >= (($544)|0);
      if ($545) { label = 152; break; } else { label = 213; break; }
    case 152: 
      var $547=$5;
      var $548=((($547)*(7))&-1);
      var $549=$548 >> 1;
      var $550=($549<<2);
      var $551=STACKTOP;STACKTOP = (STACKTOP + $550)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $552=$551;
      $ws23=$552;
      var $553=$5;
      var $554=(($553)|0) >= 110;
      if ($554) { label = 154; break; } else { label = 153; break; }
    case 153: 
      var $556=$1;
      var $557=$2;
      var $558=$5;
      var $559=($558<<1);
      var $560=$4;
      var $561=$5;
      var $562=$scratch21;
      ___gmpn_toom42_mul($556, $557, $559, $560, $561, $562);
      label = 155; break;
    case 154: 
      var $564=$1;
      var $565=$2;
      var $566=$5;
      var $567=($566<<1);
      var $568=$4;
      var $569=$5;
      var $570=$scratch21;
      ___gmpn_toom63_mul($564, $565, $567, $568, $569, $570);
      label = 155; break;
    case 155: 
      var $572=$5;
      var $573=($572<<1);
      var $574=$3;
      var $575=((($574)-($573))|0);
      $3=$575;
      var $576=$5;
      var $577=($576<<1);
      var $578=$2;
      var $579=(($578+($577<<2))|0);
      $2=$579;
      var $580=$5;
      var $581=($580<<1);
      var $582=$1;
      var $583=(($582+($581<<2))|0);
      $1=$583;
      label = 156; break;
    case 156: 
      var $585=$3;
      var $586=($585<<1);
      var $587=$5;
      var $588=((($587)*(5))&-1);
      var $589=(($586)|0) >= (($588)|0);
      if ($589) { label = 157; break; } else { label = 185; break; }
    case 157: 
      var $591=$5;
      var $592=(($591)|0) >= 110;
      if ($592) { label = 159; break; } else { label = 158; break; }
    case 158: 
      var $594=$ws23;
      var $595=$2;
      var $596=$5;
      var $597=($596<<1);
      var $598=$4;
      var $599=$5;
      var $600=$scratch21;
      ___gmpn_toom42_mul($594, $595, $597, $598, $599, $600);
      label = 160; break;
    case 159: 
      var $602=$ws23;
      var $603=$2;
      var $604=$5;
      var $605=($604<<1);
      var $606=$4;
      var $607=$5;
      var $608=$scratch21;
      ___gmpn_toom63_mul($602, $603, $605, $606, $607, $608);
      label = 160; break;
    case 160: 
      var $610=$5;
      var $611=($610<<1);
      var $612=$3;
      var $613=((($612)-($611))|0);
      $3=$613;
      var $614=$5;
      var $615=($614<<1);
      var $616=$2;
      var $617=(($616+($615<<2))|0);
      $2=$617;
      var $618=$1;
      var $619=$1;
      var $620=$ws23;
      var $621=$5;
      var $622=___gmpn_add_n($618, $619, $620, $621);
      $cy22=$622;
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      var $631=$5;
      var $632=($631<<1);
      var $633=(($632)|0)!=0;
      if ($633) { label = 169; break; } else { label = 175; break; }
    case 169: 
      var $635=$5;
      var $636=($635<<1);
      var $637=((($636)-(1))|0);
      $__n24=$637;
      var $638=$1;
      var $639=$5;
      var $640=(($638+($639<<2))|0);
      $__dst25=$640;
      var $641=$ws23;
      var $642=$5;
      var $643=(($641+($642<<2))|0);
      $__src26=$643;
      var $644=$__src26;
      var $645=(($644+4)|0);
      $__src26=$645;
      var $646=HEAP32[(($644)>>2)];
      $__x27=$646;
      var $647=$__n24;
      var $648=(($647)|0)!=0;
      if ($648) { label = 170; break; } else { label = 174; break; }
    case 170: 
      label = 171; break;
    case 171: 
      var $651=$__x27;
      var $652=$__dst25;
      var $653=(($652+4)|0);
      $__dst25=$653;
      HEAP32[(($652)>>2)]=$651;
      var $654=$__src26;
      var $655=(($654+4)|0);
      $__src26=$655;
      var $656=HEAP32[(($654)>>2)];
      $__x27=$656;
      label = 172; break;
    case 172: 
      var $658=$__n24;
      var $659=((($658)-(1))|0);
      $__n24=$659;
      var $660=(($659)|0)!=0;
      if ($660) { label = 171; break; } else { label = 173; break; }
    case 173: 
      label = 174; break;
    case 174: 
      var $663=$__x27;
      var $664=$__dst25;
      var $665=(($664+4)|0);
      $__dst25=$665;
      HEAP32[(($664)>>2)]=$663;
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      label = 178; break;
    case 178: 
      var $670=$1;
      var $671=$5;
      var $672=(($670+($671<<2))|0);
      $__p29=$672;
      var $673=$__p29;
      var $674=HEAP32[(($673)>>2)];
      var $675=$cy22;
      var $676=((($674)+($675))|0);
      $__x28=$676;
      var $677=$__x28;
      var $678=$__p29;
      HEAP32[(($678)>>2)]=$677;
      var $679=$__x28;
      var $680=$cy22;
      var $681=(($679)>>>0) < (($680)>>>0);
      if ($681) { label = 179; break; } else { label = 183; break; }
    case 179: 
      label = 180; break;
    case 180: 
      var $684=$__p29;
      var $685=(($684+4)|0);
      $__p29=$685;
      var $686=HEAP32[(($685)>>2)];
      var $687=((($686)+(1))|0);
      HEAP32[(($685)>>2)]=$687;
      var $688=(($687)|0)==0;
      if ($688) { label = 181; break; } else { label = 182; break; }
    case 181: 
      label = 180; break;
    case 182: 
      label = 183; break;
    case 183: 
      label = 184; break;
    case 184: 
      var $693=$5;
      var $694=($693<<1);
      var $695=$1;
      var $696=(($695+($694<<2))|0);
      $1=$696;
      label = 156; break;
    case 185: 
      var $698=$3;
      var $699=$5;
      var $700=(($698)|0) < (($699)|0);
      if ($700) { label = 186; break; } else { label = 187; break; }
    case 186: 
      var $702=$ws23;
      var $703=$4;
      var $704=$5;
      var $705=$2;
      var $706=$3;
      var $707=___gmpn_mul($702, $703, $704, $705, $706);
      label = 188; break;
    case 187: 
      var $709=$ws23;
      var $710=$2;
      var $711=$3;
      var $712=$4;
      var $713=$5;
      var $714=___gmpn_mul($709, $710, $711, $712, $713);
      label = 188; break;
    case 188: 
      var $716=$1;
      var $717=$1;
      var $718=$ws23;
      var $719=$5;
      var $720=___gmpn_add_n($716, $717, $718, $719);
      $cy22=$720;
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 193; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      label = 196; break;
    case 196: 
      var $729=$3;
      var $730=(($729)|0)!=0;
      if ($730) { label = 197; break; } else { label = 203; break; }
    case 197: 
      var $732=$3;
      var $733=((($732)-(1))|0);
      $__n30=$733;
      var $734=$1;
      var $735=$5;
      var $736=(($734+($735<<2))|0);
      $__dst31=$736;
      var $737=$ws23;
      var $738=$5;
      var $739=(($737+($738<<2))|0);
      $__src32=$739;
      var $740=$__src32;
      var $741=(($740+4)|0);
      $__src32=$741;
      var $742=HEAP32[(($740)>>2)];
      $__x33=$742;
      var $743=$__n30;
      var $744=(($743)|0)!=0;
      if ($744) { label = 198; break; } else { label = 202; break; }
    case 198: 
      label = 199; break;
    case 199: 
      var $747=$__x33;
      var $748=$__dst31;
      var $749=(($748+4)|0);
      $__dst31=$749;
      HEAP32[(($748)>>2)]=$747;
      var $750=$__src32;
      var $751=(($750+4)|0);
      $__src32=$751;
      var $752=HEAP32[(($750)>>2)];
      $__x33=$752;
      label = 200; break;
    case 200: 
      var $754=$__n30;
      var $755=((($754)-(1))|0);
      $__n30=$755;
      var $756=(($755)|0)!=0;
      if ($756) { label = 199; break; } else { label = 201; break; }
    case 201: 
      label = 202; break;
    case 202: 
      var $759=$__x33;
      var $760=$__dst31;
      var $761=(($760+4)|0);
      $__dst31=$761;
      HEAP32[(($760)>>2)]=$759;
      label = 203; break;
    case 203: 
      label = 204; break;
    case 204: 
      label = 205; break;
    case 205: 
      label = 206; break;
    case 206: 
      var $766=$1;
      var $767=$5;
      var $768=(($766+($767<<2))|0);
      $__p35=$768;
      var $769=$__p35;
      var $770=HEAP32[(($769)>>2)];
      var $771=$cy22;
      var $772=((($770)+($771))|0);
      $__x34=$772;
      var $773=$__x34;
      var $774=$__p35;
      HEAP32[(($774)>>2)]=$773;
      var $775=$__x34;
      var $776=$cy22;
      var $777=(($775)>>>0) < (($776)>>>0);
      if ($777) { label = 207; break; } else { label = 211; break; }
    case 207: 
      label = 208; break;
    case 208: 
      var $780=$__p35;
      var $781=(($780+4)|0);
      $__p35=$781;
      var $782=HEAP32[(($781)>>2)];
      var $783=((($782)+(1))|0);
      HEAP32[(($781)>>2)]=$783;
      var $784=(($783)|0)==0;
      if ($784) { label = 209; break; } else { label = 210; break; }
    case 209: 
      label = 208; break;
    case 210: 
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      label = 238; break;
    case 213: 
      var $790=$3;
      var $791=((($790)*(6))&-1);
      var $792=$5;
      var $793=((($792)*(7))&-1);
      var $794=(($791)|0) < (($793)|0);
      if ($794) { label = 214; break; } else { label = 215; break; }
    case 214: 
      var $796=$1;
      var $797=$2;
      var $798=$3;
      var $799=$4;
      var $800=$5;
      var $801=$scratch21;
      ___gmpn_toom33_mul($796, $797, $798, $799, $800, $801);
      label = 237; break;
    case 215: 
      var $803=$3;
      var $804=($803<<1);
      var $805=$5;
      var $806=((($805)*(3))&-1);
      var $807=(($804)|0) < (($806)|0);
      if ($807) { label = 216; break; } else { label = 220; break; }
    case 216: 
      var $809=$5;
      var $810=(($809)|0) >= 100;
      if ($810) { label = 218; break; } else { label = 217; break; }
    case 217: 
      var $812=$1;
      var $813=$2;
      var $814=$3;
      var $815=$4;
      var $816=$5;
      var $817=$scratch21;
      ___gmpn_toom32_mul($812, $813, $814, $815, $816, $817);
      label = 219; break;
    case 218: 
      var $819=$1;
      var $820=$2;
      var $821=$3;
      var $822=$4;
      var $823=$5;
      var $824=$scratch21;
      ___gmpn_toom43_mul($819, $820, $821, $822, $823, $824);
      label = 219; break;
    case 219: 
      label = 236; break;
    case 220: 
      var $827=$3;
      var $828=((($827)*(6))&-1);
      var $829=$5;
      var $830=((($829)*(11))&-1);
      var $831=(($828)|0) < (($830)|0);
      if ($831) { label = 221; break; } else { label = 231; break; }
    case 221: 
      var $833=$3;
      var $834=($833<<2);
      var $835=$5;
      var $836=((($835)*(7))&-1);
      var $837=(($834)|0) < (($836)|0);
      if ($837) { label = 222; break; } else { label = 226; break; }
    case 222: 
      var $839=$5;
      var $840=(($839)|0) >= 110;
      if ($840) { label = 224; break; } else { label = 223; break; }
    case 223: 
      var $842=$1;
      var $843=$2;
      var $844=$3;
      var $845=$4;
      var $846=$5;
      var $847=$scratch21;
      ___gmpn_toom32_mul($842, $843, $844, $845, $846, $847);
      label = 225; break;
    case 224: 
      var $849=$1;
      var $850=$2;
      var $851=$3;
      var $852=$4;
      var $853=$5;
      var $854=$scratch21;
      ___gmpn_toom53_mul($849, $850, $851, $852, $853, $854);
      label = 225; break;
    case 225: 
      label = 230; break;
    case 226: 
      var $857=$5;
      var $858=(($857)|0) >= 100;
      if ($858) { label = 228; break; } else { label = 227; break; }
    case 227: 
      var $860=$1;
      var $861=$2;
      var $862=$3;
      var $863=$4;
      var $864=$5;
      var $865=$scratch21;
      ___gmpn_toom42_mul($860, $861, $862, $863, $864, $865);
      label = 229; break;
    case 228: 
      var $867=$1;
      var $868=$2;
      var $869=$3;
      var $870=$4;
      var $871=$5;
      var $872=$scratch21;
      ___gmpn_toom53_mul($867, $868, $869, $870, $871, $872);
      label = 229; break;
    case 229: 
      label = 230; break;
    case 230: 
      label = 235; break;
    case 231: 
      var $876=$5;
      var $877=(($876)|0) >= 110;
      if ($877) { label = 233; break; } else { label = 232; break; }
    case 232: 
      var $879=$1;
      var $880=$2;
      var $881=$3;
      var $882=$4;
      var $883=$5;
      var $884=$scratch21;
      ___gmpn_toom42_mul($879, $880, $881, $882, $883, $884);
      label = 234; break;
    case 233: 
      var $886=$1;
      var $887=$2;
      var $888=$3;
      var $889=$4;
      var $890=$5;
      var $891=$scratch21;
      ___gmpn_toom63_mul($886, $887, $888, $889, $890, $891);
      label = 234; break;
    case 234: 
      label = 235; break;
    case 235: 
      label = 236; break;
    case 236: 
      label = 237; break;
    case 237: 
      label = 238; break;
    case 238: 
      label = 259; break;
    case 239: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $898=$5;
      var $899=(($898)|0) >= 350;
      if ($899) { label = 244; break; } else { label = 240; break; }
    case 240: 
      var $901=$3;
      var $902=((($901)*(3))&-1);
      var $903=((($902)+(32))|0);
      var $904=($903<<2);
      var $905=(($904)>>>0) < 65536;
      if ($905) { label = 241; break; } else { label = 242; break; }
    case 241: 
      var $907=$3;
      var $908=((($907)*(3))&-1);
      var $909=((($908)+(32))|0);
      var $910=($909<<2);
      var $911=STACKTOP;STACKTOP = (STACKTOP + $910)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $919 = $911;label = 243; break;
    case 242: 
      var $913=$3;
      var $914=((($913)*(3))&-1);
      var $915=((($914)+(32))|0);
      var $916=($915<<2);
      var $917=___gmp_tmp_reentrant_alloc($__tmp_marker, $916);
      var $919 = $917;label = 243; break;
    case 243: 
      var $919;
      var $920=$919;
      $scratch36=$920;
      var $921=$1;
      var $922=$2;
      var $923=$3;
      var $924=$4;
      var $925=$5;
      var $926=$scratch36;
      ___gmpn_toom44_mul($921, $922, $923, $924, $925, $926);
      label = 254; break;
    case 244: 
      var $928=$5;
      var $929=(($928)|0) >= 450;
      if ($929) { label = 249; break; } else { label = 245; break; }
    case 245: 
      var $931=$3;
      var $932=$5;
      var $933=_mpn_toom6h_mul_itch($931, $932);
      var $934=($933<<2);
      var $935=(($934)>>>0) < 65536;
      if ($935) { label = 246; break; } else { label = 247; break; }
    case 246: 
      var $937=$3;
      var $938=$5;
      var $939=_mpn_toom6h_mul_itch($937, $938);
      var $940=($939<<2);
      var $941=STACKTOP;STACKTOP = (STACKTOP + $940)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $949 = $941;label = 248; break;
    case 247: 
      var $943=$3;
      var $944=$5;
      var $945=_mpn_toom6h_mul_itch($943, $944);
      var $946=($945<<2);
      var $947=___gmp_tmp_reentrant_alloc($__tmp_marker, $946);
      var $949 = $947;label = 248; break;
    case 248: 
      var $949;
      var $950=$949;
      $scratch36=$950;
      var $951=$1;
      var $952=$2;
      var $953=$3;
      var $954=$4;
      var $955=$5;
      var $956=$scratch36;
      ___gmpn_toom6h_mul($951, $952, $953, $954, $955, $956);
      label = 253; break;
    case 249: 
      var $958=$3;
      var $959=$5;
      var $960=_mpn_toom8h_mul_itch($958, $959);
      var $961=($960<<2);
      var $962=(($961)>>>0) < 65536;
      if ($962) { label = 250; break; } else { label = 251; break; }
    case 250: 
      var $964=$3;
      var $965=$5;
      var $966=_mpn_toom8h_mul_itch($964, $965);
      var $967=($966<<2);
      var $968=STACKTOP;STACKTOP = (STACKTOP + $967)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $976 = $968;label = 252; break;
    case 251: 
      var $970=$3;
      var $971=$5;
      var $972=_mpn_toom8h_mul_itch($970, $971);
      var $973=($972<<2);
      var $974=___gmp_tmp_reentrant_alloc($__tmp_marker, $973);
      var $976 = $974;label = 252; break;
    case 252: 
      var $976;
      var $977=$976;
      $scratch36=$977;
      var $978=$1;
      var $979=$2;
      var $980=$3;
      var $981=$4;
      var $982=$5;
      var $983=$scratch36;
      ___gmpn_toom8h_mul($978, $979, $980, $981, $982, $983);
      label = 253; break;
    case 253: 
      label = 254; break;
    case 254: 
      label = 255; break;
    case 255: 
      var $987=HEAP32[(($__tmp_marker)>>2)];
      var $988=(($987)|0)!=0;
      if ($988) { label = 256; break; } else { label = 257; break; }
    case 256: 
      var $990=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($990);
      label = 257; break;
    case 257: 
      label = 258; break;
    case 258: 
      label = 259; break;
    case 259: 
      label = 322; break;
    case 260: 
      var $995=$3;
      var $996=$5;
      var $997=($996<<3);
      var $998=(($995)|0) >= (($997)|0);
      if ($998) { label = 261; break; } else { label = 320; break; }
    case 261: 
      HEAP32[(($__tmp_marker39)>>2)]=0;
      var $1000=$5;
      var $1001=((($1000)*(9))&-1);
      var $1002=$1001 >> 1;
      var $1003=($1002<<2);
      var $1004=___gmp_tmp_reentrant_alloc($__tmp_marker39, $1003);
      var $1005=$1004;
      $ws38=$1005;
      var $1006=$1;
      var $1007=$2;
      var $1008=$5;
      var $1009=((($1008)*(3))&-1);
      var $1010=$4;
      var $1011=$5;
      ___gmpn_nussbaumer_mul($1006, $1007, $1009, $1010, $1011);
      var $1012=$5;
      var $1013=((($1012)*(3))&-1);
      var $1014=$3;
      var $1015=((($1014)-($1013))|0);
      $3=$1015;
      var $1016=$5;
      var $1017=((($1016)*(3))&-1);
      var $1018=$2;
      var $1019=(($1018+($1017<<2))|0);
      $2=$1019;
      var $1020=$5;
      var $1021=((($1020)*(3))&-1);
      var $1022=$1;
      var $1023=(($1022+($1021<<2))|0);
      $1=$1023;
      label = 262; break;
    case 262: 
      var $1025=$3;
      var $1026=($1025<<1);
      var $1027=$5;
      var $1028=((($1027)*(7))&-1);
      var $1029=(($1026)|0) >= (($1028)|0);
      if ($1029) { label = 263; break; } else { label = 288; break; }
    case 263: 
      var $1031=$ws38;
      var $1032=$2;
      var $1033=$5;
      var $1034=((($1033)*(3))&-1);
      var $1035=$4;
      var $1036=$5;
      ___gmpn_nussbaumer_mul($1031, $1032, $1034, $1035, $1036);
      var $1037=$5;
      var $1038=((($1037)*(3))&-1);
      var $1039=$3;
      var $1040=((($1039)-($1038))|0);
      $3=$1040;
      var $1041=$5;
      var $1042=((($1041)*(3))&-1);
      var $1043=$2;
      var $1044=(($1043+($1042<<2))|0);
      $2=$1044;
      var $1045=$1;
      var $1046=$1;
      var $1047=$ws38;
      var $1048=$5;
      var $1049=___gmpn_add_n($1045, $1046, $1047, $1048);
      $cy37=$1049;
      label = 264; break;
    case 264: 
      label = 265; break;
    case 265: 
      label = 266; break;
    case 266: 
      label = 267; break;
    case 267: 
      label = 268; break;
    case 268: 
      label = 269; break;
    case 269: 
      label = 270; break;
    case 270: 
      label = 271; break;
    case 271: 
      var $1058=$5;
      var $1059=((($1058)*(3))&-1);
      var $1060=(($1059)|0)!=0;
      if ($1060) { label = 272; break; } else { label = 278; break; }
    case 272: 
      var $1062=$5;
      var $1063=((($1062)*(3))&-1);
      var $1064=((($1063)-(1))|0);
      $__n40=$1064;
      var $1065=$1;
      var $1066=$5;
      var $1067=(($1065+($1066<<2))|0);
      $__dst41=$1067;
      var $1068=$ws38;
      var $1069=$5;
      var $1070=(($1068+($1069<<2))|0);
      $__src42=$1070;
      var $1071=$__src42;
      var $1072=(($1071+4)|0);
      $__src42=$1072;
      var $1073=HEAP32[(($1071)>>2)];
      $__x43=$1073;
      var $1074=$__n40;
      var $1075=(($1074)|0)!=0;
      if ($1075) { label = 273; break; } else { label = 277; break; }
    case 273: 
      label = 274; break;
    case 274: 
      var $1078=$__x43;
      var $1079=$__dst41;
      var $1080=(($1079+4)|0);
      $__dst41=$1080;
      HEAP32[(($1079)>>2)]=$1078;
      var $1081=$__src42;
      var $1082=(($1081+4)|0);
      $__src42=$1082;
      var $1083=HEAP32[(($1081)>>2)];
      $__x43=$1083;
      label = 275; break;
    case 275: 
      var $1085=$__n40;
      var $1086=((($1085)-(1))|0);
      $__n40=$1086;
      var $1087=(($1086)|0)!=0;
      if ($1087) { label = 274; break; } else { label = 276; break; }
    case 276: 
      label = 277; break;
    case 277: 
      var $1090=$__x43;
      var $1091=$__dst41;
      var $1092=(($1091+4)|0);
      $__dst41=$1092;
      HEAP32[(($1091)>>2)]=$1090;
      label = 278; break;
    case 278: 
      label = 279; break;
    case 279: 
      label = 280; break;
    case 280: 
      label = 281; break;
    case 281: 
      var $1097=$1;
      var $1098=$5;
      var $1099=(($1097+($1098<<2))|0);
      $__p45=$1099;
      var $1100=$__p45;
      var $1101=HEAP32[(($1100)>>2)];
      var $1102=$cy37;
      var $1103=((($1101)+($1102))|0);
      $__x44=$1103;
      var $1104=$__x44;
      var $1105=$__p45;
      HEAP32[(($1105)>>2)]=$1104;
      var $1106=$__x44;
      var $1107=$cy37;
      var $1108=(($1106)>>>0) < (($1107)>>>0);
      if ($1108) { label = 282; break; } else { label = 286; break; }
    case 282: 
      label = 283; break;
    case 283: 
      var $1111=$__p45;
      var $1112=(($1111+4)|0);
      $__p45=$1112;
      var $1113=HEAP32[(($1112)>>2)];
      var $1114=((($1113)+(1))|0);
      HEAP32[(($1112)>>2)]=$1114;
      var $1115=(($1114)|0)==0;
      if ($1115) { label = 284; break; } else { label = 285; break; }
    case 284: 
      label = 283; break;
    case 285: 
      label = 286; break;
    case 286: 
      label = 287; break;
    case 287: 
      var $1120=$5;
      var $1121=((($1120)*(3))&-1);
      var $1122=$1;
      var $1123=(($1122+($1121<<2))|0);
      $1=$1123;
      label = 262; break;
    case 288: 
      var $1125=$3;
      var $1126=$5;
      var $1127=(($1125)|0) < (($1126)|0);
      if ($1127) { label = 289; break; } else { label = 290; break; }
    case 289: 
      var $1129=$ws38;
      var $1130=$4;
      var $1131=$5;
      var $1132=$2;
      var $1133=$3;
      var $1134=___gmpn_mul($1129, $1130, $1131, $1132, $1133);
      label = 291; break;
    case 290: 
      var $1136=$ws38;
      var $1137=$2;
      var $1138=$3;
      var $1139=$4;
      var $1140=$5;
      var $1141=___gmpn_mul($1136, $1137, $1138, $1139, $1140);
      label = 291; break;
    case 291: 
      var $1143=$1;
      var $1144=$1;
      var $1145=$ws38;
      var $1146=$5;
      var $1147=___gmpn_add_n($1143, $1144, $1145, $1146);
      $cy37=$1147;
      label = 292; break;
    case 292: 
      label = 293; break;
    case 293: 
      label = 294; break;
    case 294: 
      label = 295; break;
    case 295: 
      label = 296; break;
    case 296: 
      label = 297; break;
    case 297: 
      label = 298; break;
    case 298: 
      label = 299; break;
    case 299: 
      var $1156=$3;
      var $1157=(($1156)|0)!=0;
      if ($1157) { label = 300; break; } else { label = 306; break; }
    case 300: 
      var $1159=$3;
      var $1160=((($1159)-(1))|0);
      $__n46=$1160;
      var $1161=$1;
      var $1162=$5;
      var $1163=(($1161+($1162<<2))|0);
      $__dst47=$1163;
      var $1164=$ws38;
      var $1165=$5;
      var $1166=(($1164+($1165<<2))|0);
      $__src48=$1166;
      var $1167=$__src48;
      var $1168=(($1167+4)|0);
      $__src48=$1168;
      var $1169=HEAP32[(($1167)>>2)];
      $__x49=$1169;
      var $1170=$__n46;
      var $1171=(($1170)|0)!=0;
      if ($1171) { label = 301; break; } else { label = 305; break; }
    case 301: 
      label = 302; break;
    case 302: 
      var $1174=$__x49;
      var $1175=$__dst47;
      var $1176=(($1175+4)|0);
      $__dst47=$1176;
      HEAP32[(($1175)>>2)]=$1174;
      var $1177=$__src48;
      var $1178=(($1177+4)|0);
      $__src48=$1178;
      var $1179=HEAP32[(($1177)>>2)];
      $__x49=$1179;
      label = 303; break;
    case 303: 
      var $1181=$__n46;
      var $1182=((($1181)-(1))|0);
      $__n46=$1182;
      var $1183=(($1182)|0)!=0;
      if ($1183) { label = 302; break; } else { label = 304; break; }
    case 304: 
      label = 305; break;
    case 305: 
      var $1186=$__x49;
      var $1187=$__dst47;
      var $1188=(($1187+4)|0);
      $__dst47=$1188;
      HEAP32[(($1187)>>2)]=$1186;
      label = 306; break;
    case 306: 
      label = 307; break;
    case 307: 
      label = 308; break;
    case 308: 
      label = 309; break;
    case 309: 
      var $1193=$1;
      var $1194=$5;
      var $1195=(($1193+($1194<<2))|0);
      $__p51=$1195;
      var $1196=$__p51;
      var $1197=HEAP32[(($1196)>>2)];
      var $1198=$cy37;
      var $1199=((($1197)+($1198))|0);
      $__x50=$1199;
      var $1200=$__x50;
      var $1201=$__p51;
      HEAP32[(($1201)>>2)]=$1200;
      var $1202=$__x50;
      var $1203=$cy37;
      var $1204=(($1202)>>>0) < (($1203)>>>0);
      if ($1204) { label = 310; break; } else { label = 314; break; }
    case 310: 
      label = 311; break;
    case 311: 
      var $1207=$__p51;
      var $1208=(($1207+4)|0);
      $__p51=$1208;
      var $1209=HEAP32[(($1208)>>2)];
      var $1210=((($1209)+(1))|0);
      HEAP32[(($1208)>>2)]=$1210;
      var $1211=(($1210)|0)==0;
      if ($1211) { label = 312; break; } else { label = 313; break; }
    case 312: 
      label = 311; break;
    case 313: 
      label = 314; break;
    case 314: 
      label = 315; break;
    case 315: 
      label = 316; break;
    case 316: 
      var $1217=HEAP32[(($__tmp_marker39)>>2)];
      var $1218=(($1217)|0)!=0;
      if ($1218) { label = 317; break; } else { label = 318; break; }
    case 317: 
      var $1220=HEAP32[(($__tmp_marker39)>>2)];
      ___gmp_tmp_reentrant_free($1220);
      label = 318; break;
    case 318: 
      label = 319; break;
    case 319: 
      label = 321; break;
    case 320: 
      var $1224=$1;
      var $1225=$2;
      var $1226=$3;
      var $1227=$4;
      var $1228=$5;
      ___gmpn_nussbaumer_mul($1224, $1225, $1226, $1227, $1228);
      label = 321; break;
    case 321: 
      label = 322; break;
    case 322: 
      label = 323; break;
    case 323: 
      label = 324; break;
    case 324: 
      label = 325; break;
    case 325: 
      var $1234=$3;
      var $1235=$5;
      var $1236=((($1234)+($1235))|0);
      var $1237=((($1236)-(1))|0);
      var $1238=$1;
      var $1239=(($1238+($1237<<2))|0);
      var $1240=HEAP32[(($1239)>>2)];
      STACKTOP = __stackBase__;
      return $1240;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul["X"]=1;

function _mpn_toom6h_mul_itch($an, $bn) {
  var label = 0;


  var $1;
  var $2;
  var $estimatedN;
  $1=$an;
  $2=$bn;
  var $3=$1;
  var $4=$2;
  var $5=((($3)+($4))|0);
  var $6=Math.floor(((($5)>>>0))/(10));
  var $7=((($6)+(1))|0);
  $estimatedN=$7;
  var $8=$estimatedN;
  var $9=((($8)*(6))&-1);
  var $10=((($9)-(350))|0);
  var $11=($10<<1);
  var $12=((($11)+(1082))|0);

  return $12;
}


function _mpn_toom8h_mul_itch($an, $bn) {
  var label = 0;


  var $1;
  var $2;
  var $estimatedN;
  $1=$an;
  $2=$bn;
  var $3=$1;
  var $4=$2;
  var $5=((($3)+($4))|0);
  var $6=Math.floor(((($5)>>>0))/(14));
  var $7=((($6)+(1))|0);
  $estimatedN=$7;
  var $8=$estimatedN;
  var $9=($8<<3);
  var $10=((($9)*(15))&-1);
  var $11=$10 >> 3;
  var $12=((($11)-(843))|0);
  var $13=((($12)+(1282))|0);

  return $13;
}


function ___gmpn_cmp($__gmp_xp, $__gmp_yp, $__gmp_size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $__gmp_result;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_y;
      $1=$__gmp_xp;
      $2=$__gmp_yp;
      $3=$__gmp_size;
      label = 3; break;
    case 3: 
      $__gmp_result=0;
      var $5=$3;
      $__gmp_i=$5;
      label = 4; break;
    case 4: 
      var $7=$__gmp_i;
      var $8=((($7)-(1))|0);
      $__gmp_i=$8;
      var $9=(($8)|0) >= 0;
      if ($9) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $11=$__gmp_i;
      var $12=$1;
      var $13=(($12+($11<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      $__gmp_x=$14;
      var $15=$__gmp_i;
      var $16=$2;
      var $17=(($16+($15<<2))|0);
      var $18=HEAP32[(($17)>>2)];
      $__gmp_y=$18;
      var $19=$__gmp_x;
      var $20=$__gmp_y;
      var $21=(($19)|0)!=(($20)|0);
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$__gmp_x;
      var $24=$__gmp_y;
      var $25=(($23)>>>0) > (($24)>>>0);
      var $26=$25 ? 1 : -1;
      $__gmp_result=$26;
      label = 8; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $30=$__gmp_result;

      return $30;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmp_default_free($blk_ptr, $blk_size) {
  var label = 0;


  var $1;
  var $2;
  $1=$blk_ptr;
  $2=$blk_size;
  var $3=$1;
  _free($3);

  return;
}


function ___gmp_default_allocate($size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $ret;
      $1=$size;
      var $2=$1;
      var $3=_malloc($2);
      $ret=$3;
      var $4=$ret;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((_stderr)>>2)];
      var $8=$1;
      var $9=_fprintf($7, ((5243368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 4: 
      var $11=$ret;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmp_default_reallocate($oldptr, $old_size, $new_size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$oldptr;
      $2=$old_size;
      $3=$new_size;
      var $4=$1;
      var $5=$3;
      var $6=_realloc($4, $5);
      $ret=$6;
      var $7=$ret;
      var $8=(($7)|0)==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=HEAP32[((_stderr)>>2)];
      var $11=$2;
      var $12=$3;
      var $13=_fprintf($10, ((5243688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 4: 
      var $15=$ret;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpf_add($r, $u, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $vp;
      var $rp;
      var $tp;
      var $usize;
      var $vsize;
      var $rsize;
      var $prec;
      var $uexp;
      var $ediff;
      var $cy;
      var $negate;
      var $__tmp_marker=__stackBase__;
      var $v_negated=(__stackBase__)+(4);
      var $t;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $size;
      var $__n1;
      var $__dst2;
      var $__src3;
      var $__x4;
      var $size5;
      var $__n6;
      var $__dst7;
      var $__src8;
      var $__x9;
      var $size10;
      var $__n11;
      var $__dst12;
      var $__src13;
      var $__x14;
      var $__dst15;
      var $__n16;
      var $__n17;
      var $__dst18;
      var $__src19;
      var $__x20;
      var $__n21;
      var $__dst22;
      var $__src23;
      var $__x24;
      $1=$r;
      $2=$u;
      $3=$v;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      $usize=$6;
      var $7=$3;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      $vsize=$9;
      var $10=$usize;
      var $11=(($10)|0)==0;
      if ($11) { label = 3; break; } else { label = 7; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $14=$1;
      var $15=$3;
      var $16=(($14)|0)!=(($15)|0);
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$1;
      var $19=$3;
      ___gmpf_set($18, $19);
      label = 6; break;
    case 6: 
      label = 151; break;
    case 7: 
      var $22=$vsize;
      var $23=(($22)|0)==0;
      if ($23) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $25=$2;
      $3=$25;
      label = 4; break;
    case 9: 
      var $27=$usize;
      var $28=$vsize;
      var $29=$27 ^ $28;
      var $30=(($29)|0) < 0;
      if ($30) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $32=$vsize;
      var $33=(((-$32))|0);
      var $34=(($v_negated+4)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=$3;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($v_negated+8)|0);
      HEAP32[(($38)>>2)]=$37;
      var $39=$3;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($v_negated+12)|0);
      HEAP32[(($42)>>2)]=$41;
      var $43=$1;
      var $44=$2;
      ___gmpf_sub($43, $44, $v_negated);
      label = 151; break;
    case 11: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $46=$usize;
      var $47=(($46)|0) < 0;
      var $48=(($47)&1);
      $negate=$48;
      var $49=$2;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$3;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($51)|0) < (($54)|0);
      if ($55) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $57=$2;
      $t=$57;
      var $58=$3;
      $2=$58;
      var $59=$t;
      $3=$59;
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      $usize=$62;
      var $63=$3;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      $vsize=$65;
      label = 13; break;
    case 13: 
      var $67=$usize;
      var $68=(($67)|0) >= 0;
      if ($68) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $70=$usize;
      var $75 = $70;label = 16; break;
    case 15: 
      var $72=$usize;
      var $73=(((-$72))|0);
      var $75 = $73;label = 16; break;
    case 16: 
      var $75;
      $usize=$75;
      var $76=$vsize;
      var $77=(($76)|0) >= 0;
      if ($77) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $79=$vsize;
      var $84 = $79;label = 19; break;
    case 18: 
      var $81=$vsize;
      var $82=(((-$81))|0);
      var $84 = $82;label = 19; break;
    case 19: 
      var $84;
      $vsize=$84;
      var $85=$2;
      var $86=(($85+12)|0);
      var $87=HEAP32[(($86)>>2)];
      $up=$87;
      var $88=$3;
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      $vp=$90;
      var $91=$1;
      var $92=(($91+12)|0);
      var $93=HEAP32[(($92)>>2)];
      $rp=$93;
      var $94=$1;
      var $95=(($94)|0);
      var $96=HEAP32[(($95)>>2)];
      $prec=$96;
      var $97=$2;
      var $98=(($97+8)|0);
      var $99=HEAP32[(($98)>>2)];
      $uexp=$99;
      var $100=$2;
      var $101=(($100+8)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$3;
      var $104=(($103+8)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($102)-($105))|0);
      $ediff=$106;
      var $107=$usize;
      var $108=$prec;
      var $109=(($107)|0) > (($108)|0);
      if ($109) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $111=$usize;
      var $112=$prec;
      var $113=((($111)-($112))|0);
      var $114=$up;
      var $115=(($114+($113<<2))|0);
      $up=$115;
      var $116=$prec;
      $usize=$116;
      label = 21; break;
    case 21: 
      var $118=$vsize;
      var $119=$ediff;
      var $120=((($118)+($119))|0);
      var $121=$prec;
      var $122=(($120)|0) > (($121)|0);
      if ($122) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $124=$vsize;
      var $125=$ediff;
      var $126=((($124)+($125))|0);
      var $127=$prec;
      var $128=((($126)-($127))|0);
      var $129=$vp;
      var $130=(($129+($128<<2))|0);
      $vp=$130;
      var $131=$prec;
      var $132=$ediff;
      var $133=((($131)-($132))|0);
      $vsize=$133;
      label = 23; break;
    case 23: 
      var $135=$prec;
      var $136=($135<<2);
      var $137=(($136)>>>0) < 65536;
      if ($137) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $139=$prec;
      var $140=($139<<2);
      var $141=STACKTOP;STACKTOP = (STACKTOP + $140)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $147 = $141;label = 26; break;
    case 25: 
      var $143=$prec;
      var $144=($143<<2);
      var $145=___gmp_tmp_reentrant_alloc($__tmp_marker, $144);
      var $147 = $145;label = 26; break;
    case 26: 
      var $147;
      var $148=$147;
      $tp=$148;
      var $149=$ediff;
      var $150=$prec;
      var $151=(($149)|0) >= (($150)|0);
      if ($151) { label = 27; break; } else { label = 43; break; }
    case 27: 
      var $153=$rp;
      var $154=$up;
      var $155=(($153)|0)!=(($154)|0);
      if ($155) { label = 28; break; } else { label = 42; break; }
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $162=$usize;
      var $163=(($162)|0)!=0;
      if ($163) { label = 34; break; } else { label = 40; break; }
    case 34: 
      var $165=$usize;
      var $166=((($165)-(1))|0);
      $__n=$166;
      var $167=$rp;
      $__dst=$167;
      var $168=$up;
      $__src=$168;
      var $169=$__src;
      var $170=(($169+4)|0);
      $__src=$170;
      var $171=HEAP32[(($169)>>2)];
      $__x=$171;
      var $172=$__n;
      var $173=(($172)|0)!=0;
      if ($173) { label = 35; break; } else { label = 39; break; }
    case 35: 
      label = 36; break;
    case 36: 
      var $176=$__x;
      var $177=$__dst;
      var $178=(($177+4)|0);
      $__dst=$178;
      HEAP32[(($177)>>2)]=$176;
      var $179=$__src;
      var $180=(($179+4)|0);
      $__src=$180;
      var $181=HEAP32[(($179)>>2)];
      $__x=$181;
      label = 37; break;
    case 37: 
      var $183=$__n;
      var $184=((($183)-(1))|0);
      $__n=$184;
      var $185=(($184)|0)!=0;
      if ($185) { label = 36; break; } else { label = 38; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $188=$__x;
      var $189=$__dst;
      var $190=(($189+4)|0);
      $__dst=$190;
      HEAP32[(($189)>>2)]=$188;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $194=$usize;
      $rsize=$194;
      label = 144; break;
    case 43: 
      var $196=$usize;
      var $197=$ediff;
      var $198=(($196)|0) > (($197)|0);
      if ($198) { label = 44; break; } else { label = 82; break; }
    case 44: 
      var $200=$vsize;
      var $201=$ediff;
      var $202=((($200)+($201))|0);
      var $203=$usize;
      var $204=(($202)|0) <= (($203)|0);
      if ($204) { label = 45; break; } else { label = 63; break; }
    case 45: 
      var $206=$usize;
      var $207=$ediff;
      var $208=((($206)-($207))|0);
      var $209=$vsize;
      var $210=((($208)-($209))|0);
      $size=$210;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $219=$size;
      var $220=(($219)|0)!=0;
      if ($220) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $222=$size;
      var $223=((($222)-(1))|0);
      $__n1=$223;
      var $224=$tp;
      $__dst2=$224;
      var $225=$up;
      $__src3=$225;
      var $226=$__src3;
      var $227=(($226+4)|0);
      $__src3=$227;
      var $228=HEAP32[(($226)>>2)];
      $__x4=$228;
      var $229=$__n1;
      var $230=(($229)|0)!=0;
      if ($230) { label = 55; break; } else { label = 59; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $233=$__x4;
      var $234=$__dst2;
      var $235=(($234+4)|0);
      $__dst2=$235;
      HEAP32[(($234)>>2)]=$233;
      var $236=$__src3;
      var $237=(($236+4)|0);
      $__src3=$237;
      var $238=HEAP32[(($236)>>2)];
      $__x4=$238;
      label = 57; break;
    case 57: 
      var $240=$__n1;
      var $241=((($240)-(1))|0);
      $__n1=$241;
      var $242=(($241)|0)!=0;
      if ($242) { label = 56; break; } else { label = 58; break; }
    case 58: 
      label = 59; break;
    case 59: 
      var $245=$__x4;
      var $246=$__dst2;
      var $247=(($246+4)|0);
      $__dst2=$247;
      HEAP32[(($246)>>2)]=$245;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $251=$tp;
      var $252=$size;
      var $253=(($251+($252<<2))|0);
      var $254=$up;
      var $255=$size;
      var $256=(($254+($255<<2))|0);
      var $257=$usize;
      var $258=$size;
      var $259=((($257)-($258))|0);
      var $260=$vp;
      var $261=$vsize;
      var $262=___gmpn_add($253, $256, $259, $260, $261);
      $cy=$262;
      var $263=$usize;
      $rsize=$263;
      label = 81; break;
    case 63: 
      var $265=$vsize;
      var $266=$ediff;
      var $267=((($265)+($266))|0);
      var $268=$usize;
      var $269=((($267)-($268))|0);
      $size5=$269;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $278=$size5;
      var $279=(($278)|0)!=0;
      if ($279) { label = 72; break; } else { label = 78; break; }
    case 72: 
      var $281=$size5;
      var $282=((($281)-(1))|0);
      $__n6=$282;
      var $283=$tp;
      $__dst7=$283;
      var $284=$vp;
      $__src8=$284;
      var $285=$__src8;
      var $286=(($285+4)|0);
      $__src8=$286;
      var $287=HEAP32[(($285)>>2)];
      $__x9=$287;
      var $288=$__n6;
      var $289=(($288)|0)!=0;
      if ($289) { label = 73; break; } else { label = 77; break; }
    case 73: 
      label = 74; break;
    case 74: 
      var $292=$__x9;
      var $293=$__dst7;
      var $294=(($293+4)|0);
      $__dst7=$294;
      HEAP32[(($293)>>2)]=$292;
      var $295=$__src8;
      var $296=(($295+4)|0);
      $__src8=$296;
      var $297=HEAP32[(($295)>>2)];
      $__x9=$297;
      label = 75; break;
    case 75: 
      var $299=$__n6;
      var $300=((($299)-(1))|0);
      $__n6=$300;
      var $301=(($300)|0)!=0;
      if ($301) { label = 74; break; } else { label = 76; break; }
    case 76: 
      label = 77; break;
    case 77: 
      var $304=$__x9;
      var $305=$__dst7;
      var $306=(($305+4)|0);
      $__dst7=$306;
      HEAP32[(($305)>>2)]=$304;
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $310=$tp;
      var $311=$size5;
      var $312=(($310+($311<<2))|0);
      var $313=$up;
      var $314=$usize;
      var $315=$vp;
      var $316=$size5;
      var $317=(($315+($316<<2))|0);
      var $318=$usize;
      var $319=$ediff;
      var $320=((($318)-($319))|0);
      var $321=___gmpn_add($312, $313, $314, $317, $320);
      $cy=$321;
      var $322=$vsize;
      var $323=$ediff;
      var $324=((($322)+($323))|0);
      $rsize=$324;
      label = 81; break;
    case 81: 
      label = 126; break;
    case 82: 
      var $327=$vsize;
      var $328=$ediff;
      var $329=((($327)+($328))|0);
      var $330=$usize;
      var $331=((($329)-($330))|0);
      $size10=$331;
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $340=$vsize;
      var $341=(($340)|0)!=0;
      if ($341) { label = 91; break; } else { label = 97; break; }
    case 91: 
      var $343=$vsize;
      var $344=((($343)-(1))|0);
      $__n11=$344;
      var $345=$tp;
      $__dst12=$345;
      var $346=$vp;
      $__src13=$346;
      var $347=$__src13;
      var $348=(($347+4)|0);
      $__src13=$348;
      var $349=HEAP32[(($347)>>2)];
      $__x14=$349;
      var $350=$__n11;
      var $351=(($350)|0)!=0;
      if ($351) { label = 92; break; } else { label = 96; break; }
    case 92: 
      label = 93; break;
    case 93: 
      var $354=$__x14;
      var $355=$__dst12;
      var $356=(($355+4)|0);
      $__dst12=$356;
      HEAP32[(($355)>>2)]=$354;
      var $357=$__src13;
      var $358=(($357+4)|0);
      $__src13=$358;
      var $359=HEAP32[(($357)>>2)];
      $__x14=$359;
      label = 94; break;
    case 94: 
      var $361=$__n11;
      var $362=((($361)-(1))|0);
      $__n11=$362;
      var $363=(($362)|0)!=0;
      if ($363) { label = 93; break; } else { label = 95; break; }
    case 95: 
      label = 96; break;
    case 96: 
      var $366=$__x14;
      var $367=$__dst12;
      var $368=(($367+4)|0);
      $__dst12=$368;
      HEAP32[(($367)>>2)]=$366;
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $375=$ediff;
      var $376=$usize;
      var $377=((($375)-($376))|0);
      var $378=(($377)|0)!=0;
      if ($378) { label = 103; break; } else { label = 107; break; }
    case 103: 
      var $380=$tp;
      var $381=$vsize;
      var $382=(($380+($381<<2))|0);
      $__dst15=$382;
      var $383=$ediff;
      var $384=$usize;
      var $385=((($383)-($384))|0);
      $__n16=$385;
      label = 104; break;
    case 104: 
      var $387=$__dst15;
      var $388=(($387+4)|0);
      $__dst15=$388;
      HEAP32[(($387)>>2)]=0;
      label = 105; break;
    case 105: 
      var $390=$__n16;
      var $391=((($390)-(1))|0);
      $__n16=$391;
      var $392=(($391)|0)!=0;
      if ($392) { label = 104; break; } else { label = 106; break; }
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      label = 114; break;
    case 114: 
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      var $404=$usize;
      var $405=(($404)|0)!=0;
      if ($405) { label = 117; break; } else { label = 123; break; }
    case 117: 
      var $407=$usize;
      var $408=((($407)-(1))|0);
      $__n17=$408;
      var $409=$tp;
      var $410=$size10;
      var $411=(($409+($410<<2))|0);
      $__dst18=$411;
      var $412=$up;
      $__src19=$412;
      var $413=$__src19;
      var $414=(($413+4)|0);
      $__src19=$414;
      var $415=HEAP32[(($413)>>2)];
      $__x20=$415;
      var $416=$__n17;
      var $417=(($416)|0)!=0;
      if ($417) { label = 118; break; } else { label = 122; break; }
    case 118: 
      label = 119; break;
    case 119: 
      var $420=$__x20;
      var $421=$__dst18;
      var $422=(($421+4)|0);
      $__dst18=$422;
      HEAP32[(($421)>>2)]=$420;
      var $423=$__src19;
      var $424=(($423+4)|0);
      $__src19=$424;
      var $425=HEAP32[(($423)>>2)];
      $__x20=$425;
      label = 120; break;
    case 120: 
      var $427=$__n17;
      var $428=((($427)-(1))|0);
      $__n17=$428;
      var $429=(($428)|0)!=0;
      if ($429) { label = 119; break; } else { label = 121; break; }
    case 121: 
      label = 122; break;
    case 122: 
      var $432=$__x20;
      var $433=$__dst18;
      var $434=(($433+4)|0);
      $__dst18=$434;
      HEAP32[(($433)>>2)]=$432;
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      $cy=0;
      var $438=$size10;
      var $439=$usize;
      var $440=((($438)+($439))|0);
      $rsize=$440;
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      var $450=$rsize;
      var $451=(($450)|0)!=0;
      if ($451) { label = 135; break; } else { label = 141; break; }
    case 135: 
      var $453=$rsize;
      var $454=((($453)-(1))|0);
      $__n21=$454;
      var $455=$rp;
      $__dst22=$455;
      var $456=$tp;
      $__src23=$456;
      var $457=$__src23;
      var $458=(($457+4)|0);
      $__src23=$458;
      var $459=HEAP32[(($457)>>2)];
      $__x24=$459;
      var $460=$__n21;
      var $461=(($460)|0)!=0;
      if ($461) { label = 136; break; } else { label = 140; break; }
    case 136: 
      label = 137; break;
    case 137: 
      var $464=$__x24;
      var $465=$__dst22;
      var $466=(($465+4)|0);
      $__dst22=$466;
      HEAP32[(($465)>>2)]=$464;
      var $467=$__src23;
      var $468=(($467+4)|0);
      $__src23=$468;
      var $469=HEAP32[(($467)>>2)];
      $__x24=$469;
      label = 138; break;
    case 138: 
      var $471=$__n21;
      var $472=((($471)-(1))|0);
      $__n21=$472;
      var $473=(($472)|0)!=0;
      if ($473) { label = 137; break; } else { label = 139; break; }
    case 139: 
      label = 140; break;
    case 140: 
      var $476=$__x24;
      var $477=$__dst22;
      var $478=(($477+4)|0);
      $__dst22=$478;
      HEAP32[(($477)>>2)]=$476;
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      label = 143; break;
    case 143: 
      var $482=$cy;
      var $483=$rsize;
      var $484=$rp;
      var $485=(($484+($483<<2))|0);
      HEAP32[(($485)>>2)]=$482;
      var $486=$cy;
      var $487=$rsize;
      var $488=((($487)+($486))|0);
      $rsize=$488;
      var $489=$cy;
      var $490=$uexp;
      var $491=((($490)+($489))|0);
      $uexp=$491;
      label = 144; break;
    case 144: 
      var $493=$negate;
      var $494=(($493)|0)!=0;
      if ($494) { label = 145; break; } else { label = 146; break; }
    case 145: 
      var $496=$rsize;
      var $497=(((-$496))|0);
      var $501 = $497;label = 147; break;
    case 146: 
      var $499=$rsize;
      var $501 = $499;label = 147; break;
    case 147: 
      var $501;
      var $502=$1;
      var $503=(($502+4)|0);
      HEAP32[(($503)>>2)]=$501;
      var $504=$uexp;
      var $505=$1;
      var $506=(($505+8)|0);
      HEAP32[(($506)>>2)]=$504;
      label = 148; break;
    case 148: 
      var $508=HEAP32[(($__tmp_marker)>>2)];
      var $509=(($508)|0)!=0;
      if ($509) { label = 149; break; } else { label = 150; break; }
    case 149: 
      var $511=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($511);
      label = 150; break;
    case 150: 
      label = 151; break;
    case 151: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_add["X"]=1;

function ___gmpf_clear($m) {
  var label = 0;


  var $1;
  $1=$m;
  var $2=HEAP32[((5249684)>>2)];
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=$1;
  var $8=(($7)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=((($9)+(1))|0);
  var $11=($10<<2);
  FUNCTION_TABLE[$2]($6, $11);

  return;
}


function ___gmpf_get_prec($x) {
  var label = 0;


  var $1;
  $1=$x;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=($4<<5);
  var $6=((($5)-(32))|0);

  return $6;
}


function ___gmpf_div_2exp($r, $u, $exp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $rp;
      var $usize;
      var $abs_usize;
      var $prec;
      var $uexp;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $cy_limb;
      var $adj;
      $1=$r;
      $2=$u;
      $3=$exp;
      var $4=$1;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      $rp=$6;
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      $prec=$9;
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $uexp=$12;
      var $13=$2;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      $usize=$15;
      var $16=$usize;
      var $17=(($16)|0)==0;
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $19=$1;
      var $20=(($19+4)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=$1;
      var $22=(($21+8)|0);
      HEAP32[(($22)>>2)]=0;
      label = 34; break;
    case 4: 
      var $24=$usize;
      var $25=(($24)|0) >= 0;
      if ($25) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $27=$usize;
      var $32 = $27;label = 7; break;
    case 6: 
      var $29=$usize;
      var $30=(((-$29))|0);
      var $32 = $30;label = 7; break;
    case 7: 
      var $32;
      $abs_usize=$32;
      var $33=$2;
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      $up=$35;
      var $36=$3;
      var $37=((($36)>>>0))%(32);
      var $38=(($37)|0)==0;
      if ($38) { label = 8; break; } else { label = 26; break; }
    case 8: 
      var $40=$prec;
      var $41=((($40)+(1))|0);
      $prec=$41;
      var $42=$abs_usize;
      var $43=$prec;
      var $44=(($42)|0) > (($43)|0);
      if ($44) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $46=$abs_usize;
      var $47=$prec;
      var $48=((($46)-($47))|0);
      var $49=$up;
      var $50=(($49+($48<<2))|0);
      $up=$50;
      var $51=$prec;
      $abs_usize=$51;
      label = 10; break;
    case 10: 
      var $53=$rp;
      var $54=$up;
      var $55=(($53)|0)!=(($54)|0);
      if ($55) { label = 11; break; } else { label = 25; break; }
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $62=$abs_usize;
      var $63=(($62)|0)!=0;
      if ($63) { label = 17; break; } else { label = 23; break; }
    case 17: 
      var $65=$abs_usize;
      var $66=((($65)-(1))|0);
      $__n=$66;
      var $67=$rp;
      $__dst=$67;
      var $68=$up;
      $__src=$68;
      var $69=$__src;
      var $70=(($69+4)|0);
      $__src=$70;
      var $71=HEAP32[(($69)>>2)];
      $__x=$71;
      var $72=$__n;
      var $73=(($72)|0)!=0;
      if ($73) { label = 18; break; } else { label = 22; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $76=$__x;
      var $77=$__dst;
      var $78=(($77+4)|0);
      $__dst=$78;
      HEAP32[(($77)>>2)]=$76;
      var $79=$__src;
      var $80=(($79+4)|0);
      $__src=$80;
      var $81=HEAP32[(($79)>>2)];
      $__x=$81;
      label = 20; break;
    case 20: 
      var $83=$__n;
      var $84=((($83)-(1))|0);
      $__n=$84;
      var $85=(($84)|0)!=0;
      if ($85) { label = 19; break; } else { label = 21; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $88=$__x;
      var $89=$__dst;
      var $90=(($89+4)|0);
      $__dst=$90;
      HEAP32[(($89)>>2)]=$88;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $94=$uexp;
      var $95=$3;
      var $96=Math.floor(((($95)>>>0))/(32));
      var $97=((($94)-($96))|0);
      var $98=$1;
      var $99=(($98+8)|0);
      HEAP32[(($99)>>2)]=$97;
      label = 30; break;
    case 26: 
      var $101=$abs_usize;
      var $102=$prec;
      var $103=(($101)|0) > (($102)|0);
      if ($103) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $105=$abs_usize;
      var $106=$prec;
      var $107=((($105)-($106))|0);
      var $108=$up;
      var $109=(($108+($107<<2))|0);
      $up=$109;
      var $110=$prec;
      $abs_usize=$110;
      var $111=$rp;
      var $112=(($111+4)|0);
      var $113=$up;
      var $114=$abs_usize;
      var $115=$3;
      var $116=((($115)>>>0))%(32);
      var $117=___gmpn_rshift($112, $113, $114, $116);
      $cy_limb=$117;
      var $118=$cy_limb;
      var $119=$rp;
      var $120=(($119)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=$abs_usize;
      var $122=$rp;
      var $123=(($122+($121<<2))|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124)|0)!=0;
      var $126=(($125)&1);
      $adj=$126;
      label = 29; break;
    case 28: 
      var $128=$rp;
      var $129=$up;
      var $130=$abs_usize;
      var $131=$3;
      var $132=((($131)>>>0))%(32);
      var $133=(((32)-($132))|0);
      var $134=___gmpn_lshift($128, $129, $130, $133);
      $cy_limb=$134;
      var $135=$cy_limb;
      var $136=$abs_usize;
      var $137=$rp;
      var $138=(($137+($136<<2))|0);
      HEAP32[(($138)>>2)]=$135;
      var $139=$cy_limb;
      var $140=(($139)|0)!=0;
      var $141=(($140)&1);
      $adj=$141;
      label = 29; break;
    case 29: 
      var $143=$adj;
      var $144=$abs_usize;
      var $145=((($144)+($143))|0);
      $abs_usize=$145;
      var $146=$uexp;
      var $147=$3;
      var $148=Math.floor(((($147)>>>0))/(32));
      var $149=((($146)-($148))|0);
      var $150=((($149)-(1))|0);
      var $151=$adj;
      var $152=((($150)+($151))|0);
      var $153=$1;
      var $154=(($153+8)|0);
      HEAP32[(($154)>>2)]=$152;
      label = 30; break;
    case 30: 
      var $156=$usize;
      var $157=(($156)|0) >= 0;
      if ($157) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $159=$abs_usize;
      var $164 = $159;label = 33; break;
    case 32: 
      var $161=$abs_usize;
      var $162=(((-$161))|0);
      var $164 = $162;label = 33; break;
    case 33: 
      var $164;
      var $165=$1;
      var $166=(($165+4)|0);
      HEAP32[(($166)>>2)]=$164;
      label = 34; break;
    case 34: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_div_2exp["X"]=1;

function ___gmpf_div($r, $u, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $vp;
      var $rp;
      var $tp;
      var $new_vp;
      var $usize;
      var $vsize;
      var $rsize;
      var $prospective_rsize;
      var $tsize;
      var $zeros;
      var $sign_quotient;
      var $prec;
      var $high_zero;
      var $chop;
      var $rexp;
      var $copy_u;
      var $__tmp_marker=__stackBase__;
      var $__dst;
      var $__n;
      var $__n1;
      var $__dst2;
      var $__src;
      var $__x;
      var $__n3;
      var $__dst4;
      var $__src5;
      var $__x6;
      $1=$r;
      $2=$u;
      $3=$v;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      $usize=$6;
      var $7=$3;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      $vsize=$9;
      var $10=$usize;
      var $11=$vsize;
      var $12=$10 ^ $11;
      $sign_quotient=$12;
      var $13=$usize;
      var $14=(($13)|0) >= 0;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$usize;
      var $21 = $16;label = 5; break;
    case 4: 
      var $18=$usize;
      var $19=(((-$18))|0);
      var $21 = $19;label = 5; break;
    case 5: 
      var $21;
      $usize=$21;
      var $22=$vsize;
      var $23=(($22)|0) >= 0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$vsize;
      var $30 = $25;label = 8; break;
    case 7: 
      var $27=$vsize;
      var $28=(((-$27))|0);
      var $30 = $28;label = 8; break;
    case 8: 
      var $30;
      $vsize=$30;
      var $31=$1;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      $prec=$33;
      var $34=$vsize;
      var $35=(($34)|0)==0;
      if ($35) { label = 9; break; } else { label = 10; break; }
    case 9: 
      ___gmp_divide_by_zero();
      throw "Reached an unreachable!"
    case 10: 
      var $38=$usize;
      var $39=(($38)|0)==0;
      if ($39) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $41=$1;
      var $42=(($41+4)|0);
      HEAP32[(($42)>>2)]=0;
      var $43=$1;
      var $44=(($43+8)|0);
      HEAP32[(($44)>>2)]=0;
      label = 83; break;
    case 12: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $46=$2;
      var $47=(($46+8)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$3;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($48)-($51))|0);
      var $53=((($52)+(1))|0);
      $rexp=$53;
      var $54=$1;
      var $55=(($54+12)|0);
      var $56=HEAP32[(($55)>>2)];
      $rp=$56;
      var $57=$2;
      var $58=(($57+12)|0);
      var $59=HEAP32[(($58)>>2)];
      $up=$59;
      var $60=$3;
      var $61=(($60+12)|0);
      var $62=HEAP32[(($61)>>2)];
      $vp=$62;
      var $63=$usize;
      var $64=$vsize;
      var $65=((($63)-($64))|0);
      var $66=((($65)+(1))|0);
      $prospective_rsize=$66;
      var $67=$prec;
      var $68=((($67)+(1))|0);
      $rsize=$68;
      var $69=$rsize;
      var $70=$prospective_rsize;
      var $71=((($69)-($70))|0);
      $zeros=$71;
      var $72=$zeros;
      var $73=(($72)|0) > 0;
      if ($73) { var $79 = 1;label = 14; break; } else { label = 13; break; }
    case 13: 
      var $75=$rp;
      var $76=$up;
      var $77=(($75)|0)==(($76)|0);
      var $79 = $77;label = 14; break;
    case 14: 
      var $79;
      var $80=(($79)&1);
      $copy_u=$80;
      var $81=$zeros;
      var $82=(((-$81))|0);
      var $83=(($82)|0) > 0;
      if ($83) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $85=$zeros;
      var $86=(((-$85))|0);
      var $89 = $86;label = 17; break;
    case 16: 
      var $89 = 0;label = 17; break;
    case 17: 
      var $89;
      $chop=$89;
      var $90=$chop;
      var $91=$up;
      var $92=(($91+($90<<2))|0);
      $up=$92;
      var $93=$chop;
      var $94=$usize;
      var $95=((($94)-($93))|0);
      $usize=$95;
      var $96=$chop;
      var $97=$zeros;
      var $98=((($97)+($96))|0);
      $zeros=$98;
      var $99=$usize;
      var $100=$zeros;
      var $101=((($99)+($100))|0);
      $tsize=$101;
      var $102=$copy_u;
      var $103=(($102)|0)!=0;
      if ($103) { label = 18; break; } else { label = 48; break; }
    case 18: 
      var $105=$tsize;
      var $106=((($105)+(1))|0);
      var $107=($106<<2);
      var $108=(($107)>>>0) < 65536;
      if ($108) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $110=$tsize;
      var $111=((($110)+(1))|0);
      var $112=($111<<2);
      var $113=STACKTOP;STACKTOP = (STACKTOP + $112)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $120 = $113;label = 21; break;
    case 20: 
      var $115=$tsize;
      var $116=((($115)+(1))|0);
      var $117=($116<<2);
      var $118=___gmp_tmp_reentrant_alloc($__tmp_marker, $117);
      var $120 = $118;label = 21; break;
    case 21: 
      var $120;
      var $121=$120;
      $tp=$121;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $125=$zeros;
      var $126=(($125)|0)!=0;
      if ($126) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $128=$tp;
      $__dst=$128;
      var $129=$zeros;
      $__n=$129;
      label = 26; break;
    case 26: 
      var $131=$__dst;
      var $132=(($131+4)|0);
      $__dst=$132;
      HEAP32[(($131)>>2)]=0;
      label = 27; break;
    case 27: 
      var $134=$__n;
      var $135=((($134)-(1))|0);
      $__n=$135;
      var $136=(($135)|0)!=0;
      if ($136) { label = 26; break; } else { label = 28; break; }
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $148=$usize;
      var $149=(($148)|0)!=0;
      if ($149) { label = 39; break; } else { label = 45; break; }
    case 39: 
      var $151=$usize;
      var $152=((($151)-(1))|0);
      $__n1=$152;
      var $153=$tp;
      var $154=$zeros;
      var $155=(($153+($154<<2))|0);
      $__dst2=$155;
      var $156=$up;
      $__src=$156;
      var $157=$__src;
      var $158=(($157+4)|0);
      $__src=$158;
      var $159=HEAP32[(($157)>>2)];
      $__x=$159;
      var $160=$__n1;
      var $161=(($160)|0)!=0;
      if ($161) { label = 40; break; } else { label = 44; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $164=$__x;
      var $165=$__dst2;
      var $166=(($165+4)|0);
      $__dst2=$166;
      HEAP32[(($165)>>2)]=$164;
      var $167=$__src;
      var $168=(($167+4)|0);
      $__src=$168;
      var $169=HEAP32[(($167)>>2)];
      $__x=$169;
      label = 42; break;
    case 42: 
      var $171=$__n1;
      var $172=((($171)-(1))|0);
      $__n1=$172;
      var $173=(($172)|0)!=0;
      if ($173) { label = 41; break; } else { label = 43; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $176=$__x;
      var $177=$__dst2;
      var $178=(($177+4)|0);
      $__dst2=$178;
      HEAP32[(($177)>>2)]=$176;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $182=$tp;
      $up=$182;
      var $183=$tsize;
      $usize=$183;
      label = 52; break;
    case 48: 
      var $185=$usize;
      var $186=((($185)+(1))|0);
      var $187=($186<<2);
      var $188=(($187)>>>0) < 65536;
      if ($188) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $190=$usize;
      var $191=((($190)+(1))|0);
      var $192=($191<<2);
      var $193=STACKTOP;STACKTOP = (STACKTOP + $192)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $200 = $193;label = 51; break;
    case 50: 
      var $195=$usize;
      var $196=((($195)+(1))|0);
      var $197=($196<<2);
      var $198=___gmp_tmp_reentrant_alloc($__tmp_marker, $197);
      var $200 = $198;label = 51; break;
    case 51: 
      var $200;
      var $201=$200;
      $tp=$201;
      label = 52; break;
    case 52: 
      var $203=$rp;
      var $204=$vp;
      var $205=(($203)|0)==(($204)|0);
      if ($205) { label = 53; break; } else { label = 74; break; }
    case 53: 
      var $207=$vsize;
      var $208=($207<<2);
      var $209=(($208)>>>0) < 65536;
      if ($209) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $211=$vsize;
      var $212=($211<<2);
      var $213=STACKTOP;STACKTOP = (STACKTOP + $212)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $219 = $213;label = 56; break;
    case 55: 
      var $215=$vsize;
      var $216=($215<<2);
      var $217=___gmp_tmp_reentrant_alloc($__tmp_marker, $216);
      var $219 = $217;label = 56; break;
    case 56: 
      var $219;
      var $220=$219;
      $new_vp=$220;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $229=$vsize;
      var $230=(($229)|0)!=0;
      if ($230) { label = 65; break; } else { label = 71; break; }
    case 65: 
      var $232=$vsize;
      var $233=((($232)-(1))|0);
      $__n3=$233;
      var $234=$new_vp;
      $__dst4=$234;
      var $235=$vp;
      $__src5=$235;
      var $236=$__src5;
      var $237=(($236+4)|0);
      $__src5=$237;
      var $238=HEAP32[(($236)>>2)];
      $__x6=$238;
      var $239=$__n3;
      var $240=(($239)|0)!=0;
      if ($240) { label = 66; break; } else { label = 70; break; }
    case 66: 
      label = 67; break;
    case 67: 
      var $243=$__x6;
      var $244=$__dst4;
      var $245=(($244+4)|0);
      $__dst4=$245;
      HEAP32[(($244)>>2)]=$243;
      var $246=$__src5;
      var $247=(($246+4)|0);
      $__src5=$247;
      var $248=HEAP32[(($246)>>2)];
      $__x6=$248;
      label = 68; break;
    case 68: 
      var $250=$__n3;
      var $251=((($250)-(1))|0);
      $__n3=$251;
      var $252=(($251)|0)!=0;
      if ($252) { label = 67; break; } else { label = 69; break; }
    case 69: 
      label = 70; break;
    case 70: 
      var $255=$__x6;
      var $256=$__dst4;
      var $257=(($256+4)|0);
      $__dst4=$257;
      HEAP32[(($256)>>2)]=$255;
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $261=$new_vp;
      $vp=$261;
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $265=$rp;
      var $266=$up;
      var $267=$usize;
      var $268=$vp;
      var $269=$vsize;
      var $270=$tp;
      ___gmpn_div_q($265, $266, $267, $268, $269, $270);
      var $271=$rsize;
      var $272=((($271)-(1))|0);
      var $273=$rp;
      var $274=(($273+($272<<2))|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($275)|0)==0;
      var $277=(($276)&1);
      $high_zero=$277;
      var $278=$high_zero;
      var $279=$rsize;
      var $280=((($279)-($278))|0);
      $rsize=$280;
      var $281=$high_zero;
      var $282=$rexp;
      var $283=((($282)-($281))|0);
      $rexp=$283;
      var $284=$sign_quotient;
      var $285=(($284)|0) >= 0;
      if ($285) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $287=$rsize;
      var $292 = $287;label = 79; break;
    case 78: 
      var $289=$rsize;
      var $290=(((-$289))|0);
      var $292 = $290;label = 79; break;
    case 79: 
      var $292;
      var $293=$1;
      var $294=(($293+4)|0);
      HEAP32[(($294)>>2)]=$292;
      var $295=$rexp;
      var $296=$1;
      var $297=(($296+8)|0);
      HEAP32[(($297)>>2)]=$295;
      label = 80; break;
    case 80: 
      var $299=HEAP32[(($__tmp_marker)>>2)];
      var $300=(($299)|0)!=0;
      if ($300) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $302=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($302);
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_div["X"]=1;

function ___gmpf_get_str($dbuf, $exp, $base, $n_digits, $u) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $ue;
      var $n_limbs_needed;
      var $max_digits;
      var $up;
      var $pp;
      var $tp;
      var $un;
      var $pn;
      var $tn;
      var $tstr;
      var $exp_in_base;
      var $n_digits_computed;
      var $i;
      var $num_to_text;
      var $alloc_size;
      var $dp;
      var $__tmp_marker=__stackBase__;
      var $n_more_limbs_needed;
      var $ign=(__stackBase__)+(4);
      var $off;
      var $e;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__dst1;
      var $__n2;
      var $n_less_limbs_needed;
      var $ign3=(__stackBase__)+(8);
      var $off4;
      var $xn;
      var $e5;
      var $dummyp;
      var $xp;
      var $__dst6;
      var $__n7;
      var $__n8;
      var $__dst9;
      var $__src10;
      var $__x11;
      var $i12;
      var $x;
      $2=$dbuf;
      $3=$exp;
      $4=$base;
      $5=$n_digits;
      $6=$u;
      $alloc_size=0;
      var $7=$6;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      $up=$9;
      var $10=$6;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0) >= 0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=$6;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $24 = $17;label = 5; break;
    case 4: 
      var $19=$6;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(((-$21))|0);
      var $24 = $22;label = 5; break;
    case 5: 
      var $24;
      $un=$24;
      var $25=$6;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      $ue=$27;
      var $28=$4;
      var $29=(($28)|0) >= 0;
      if ($29) { label = 6; break; } else { label = 14; break; }
    case 6: 
      $num_to_text=((5243232)|0);
      var $31=$4;
      var $32=(($31)|0)==0;
      if ($32) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $4=10;
      label = 13; break;
    case 8: 
      var $35=$4;
      var $36=(($35)|0) > 36;
      if ($36) { label = 9; break; } else { label = 12; break; }
    case 9: 
      $num_to_text=((5243624)|0);
      var $38=$4;
      var $39=(($38)|0) > 62;
      if ($39) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 143; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 15; break;
    case 14: 
      var $45=$4;
      var $46=(((-$45))|0);
      $4=$46;
      $num_to_text=((5243424)|0);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $51=$6;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      var $55=($54<<5);
      var $56=(($55)>>>0);
      var $57=$4;
      var $58=((5244536+((($57)*(20))&-1))|0);
      var $59=(($58+4)|0);
      var $60=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($59)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($59)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $61=($56)*($60);
      var $62=($61>=0 ? Math.floor($61) : Math.ceil($61));
      var $63=((($62)+(2))|0);
      $max_digits=$63;
      label = 19; break;
    case 19: 
      var $65=$5;
      var $66=(($65)|0)==0;
      if ($66) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $68=$5;
      var $69=$max_digits;
      var $70=(($68)>>>0) > (($69)>>>0);
      if ($70) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $72=$max_digits;
      $5=$72;
      label = 22; break;
    case 22: 
      var $74=$2;
      var $75=(($74)|0)==0;
      if ($75) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $77=$5;
      var $78=((($77)+(2))|0);
      $alloc_size=$78;
      var $79=HEAP32[((5249824)>>2)];
      var $80=$5;
      var $81=((($80)+(2))|0);
      var $82=FUNCTION_TABLE[$79]($81);
      $2=$82;
      label = 24; break;
    case 24: 
      var $84=$un;
      var $85=(($84)|0)==0;
      if ($85) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $87=$3;
      HEAP32[(($87)>>2)]=0;
      var $88=$2;
      HEAP8[($88)]=0;
      $5=0;
      label = 136; break;
    case 26: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $90=$5;
      var $91=((($90)+(64))|0);
      var $92=((($91)+(3))|0);
      var $93=(($92)>>>0) < 65536;
      if ($93) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $95=$5;
      var $96=((($95)+(64))|0);
      var $97=((($96)+(3))|0);
      var $98=STACKTOP;STACKTOP = (STACKTOP + $97)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $105 = $98;label = 29; break;
    case 28: 
      var $100=$5;
      var $101=((($100)+(64))|0);
      var $102=((($101)+(3))|0);
      var $103=___gmp_tmp_reentrant_alloc($__tmp_marker, $102);
      var $105 = $103;label = 29; break;
    case 29: 
      var $105;
      $tstr=$105;
      var $106=$5;
      var $107=(($106)>>>0);
      var $108=$4;
      var $109=((5244536+((($108)*(20))&-1))|0);
      var $110=(($109+4)|0);
      var $111=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($110)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($110)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $112=($111)*(32);
      var $113=($107)/($112);
      var $114=(($113)&-1);
      var $115=((($114)+(2))|0);
      $n_limbs_needed=$115;
      var $116=$ue;
      var $117=$n_limbs_needed;
      var $118=(($116)|0) <= (($117)|0);
      if ($118) { label = 30; break; } else { label = 66; break; }
    case 30: 
      var $120=$n_limbs_needed;
      var $121=$ue;
      var $122=((($120)-($121))|0);
      $n_more_limbs_needed=$122;
      var $123=$n_more_limbs_needed;
      var $124=(($123)>>>0);
      var $125=$4;
      var $126=((5244536+((($125)*(20))&-1))|0);
      var $127=(($126+4)|0);
      var $128=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($127)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($127)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $129=($128)*(32);
      var $130=($124)*($129);
      var $131=($130>=0 ? Math.floor($130) : Math.ceil($130));
      $e=$131;
      var $132=$un;
      var $133=$n_limbs_needed;
      var $134=(($132)|0) > (($133)|0);
      if ($134) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $136=$un;
      var $137=$n_limbs_needed;
      var $138=((($136)-($137))|0);
      var $139=$up;
      var $140=(($139+($138<<2))|0);
      $up=$140;
      var $141=$n_limbs_needed;
      $un=$141;
      label = 32; break;
    case 32: 
      var $143=$n_limbs_needed;
      var $144=($143<<1);
      var $145=((($144)+(2))|0);
      var $146=($145<<2);
      var $147=(($146)>>>0) < 65536;
      if ($147) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $149=$n_limbs_needed;
      var $150=($149<<1);
      var $151=((($150)+(2))|0);
      var $152=($151<<2);
      var $153=STACKTOP;STACKTOP = (STACKTOP + $152)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $161 = $153;label = 35; break;
    case 34: 
      var $155=$n_limbs_needed;
      var $156=($155<<1);
      var $157=((($156)+(2))|0);
      var $158=($157<<2);
      var $159=___gmp_tmp_reentrant_alloc($__tmp_marker, $158);
      var $161 = $159;label = 35; break;
    case 35: 
      var $161;
      var $162=$161;
      $pp=$162;
      var $163=$n_limbs_needed;
      var $164=($163<<1);
      var $165=((($164)+(2))|0);
      var $166=($165<<2);
      var $167=(($166)>>>0) < 65536;
      if ($167) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $169=$n_limbs_needed;
      var $170=($169<<1);
      var $171=((($170)+(2))|0);
      var $172=($171<<2);
      var $173=STACKTOP;STACKTOP = (STACKTOP + $172)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $181 = $173;label = 38; break;
    case 37: 
      var $175=$n_limbs_needed;
      var $176=($175<<1);
      var $177=((($176)+(2))|0);
      var $178=($177<<2);
      var $179=___gmp_tmp_reentrant_alloc($__tmp_marker, $178);
      var $181 = $179;label = 38; break;
    case 38: 
      var $181;
      var $182=$181;
      $tp=$182;
      var $183=$pp;
      var $184=$4;
      var $185=$e;
      var $186=$n_limbs_needed;
      var $187=$tp;
      var $188=_mpn_pow_1_highpart($183, $ign, $184, $185, $186, $187);
      $pn=$188;
      var $189=$un;
      var $190=$pn;
      var $191=(($189)|0) > (($190)|0);
      if ($191) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $193=$tp;
      var $194=$up;
      var $195=$un;
      var $196=$pp;
      var $197=$pn;
      var $198=___gmpn_mul($193, $194, $195, $196, $197);
      label = 41; break;
    case 40: 
      var $200=$tp;
      var $201=$pp;
      var $202=$pn;
      var $203=$up;
      var $204=$un;
      var $205=___gmpn_mul($200, $201, $202, $203, $204);
      label = 41; break;
    case 41: 
      var $207=$un;
      var $208=$pn;
      var $209=((($207)+($208))|0);
      $tn=$209;
      var $210=$tn;
      var $211=((($210)-(1))|0);
      var $212=$tp;
      var $213=(($212+($211<<2))|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214)|0)==0;
      var $216=(($215)&1);
      var $217=$tn;
      var $218=((($217)-($216))|0);
      $tn=$218;
      var $219=$un;
      var $220=$ue;
      var $221=((($219)-($220))|0);
      var $222=HEAP32[(($ign)>>2)];
      var $223=((($221)-($222))|0);
      $off=$223;
      var $224=$off;
      var $225=(($224)|0) < 0;
      if ($225) { label = 42; break; } else { label = 65; break; }
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $232=$tn;
      var $233=(($232)|0)!=0;
      if ($233) { label = 48; break; } else { label = 54; break; }
    case 48: 
      var $235=$tn;
      var $236=((($235)-(1))|0);
      $__n=$236;
      var $237=$tp;
      var $238=$off;
      var $239=(((-$238))|0);
      var $240=(($237+($239<<2))|0);
      var $241=$__n;
      var $242=(($240+($241<<2))|0);
      $__dst=$242;
      var $243=$tp;
      var $244=$__n;
      var $245=(($243+($244<<2))|0);
      $__src=$245;
      var $246=$__src;
      var $247=((($246)-(4))|0);
      $__src=$247;
      var $248=HEAP32[(($246)>>2)];
      $__x=$248;
      var $249=$__n;
      var $250=(($249)|0)!=0;
      if ($250) { label = 49; break; } else { label = 53; break; }
    case 49: 
      label = 50; break;
    case 50: 
      var $253=$__x;
      var $254=$__dst;
      var $255=((($254)-(4))|0);
      $__dst=$255;
      HEAP32[(($254)>>2)]=$253;
      var $256=$__src;
      var $257=((($256)-(4))|0);
      $__src=$257;
      var $258=HEAP32[(($256)>>2)];
      $__x=$258;
      label = 51; break;
    case 51: 
      var $260=$__n;
      var $261=((($260)-(1))|0);
      $__n=$261;
      var $262=(($261)|0)!=0;
      if ($262) { label = 50; break; } else { label = 52; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $265=$__x;
      var $266=$__dst;
      var $267=((($266)-(4))|0);
      $__dst=$267;
      HEAP32[(($266)>>2)]=$265;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $273=$off;
      var $274=(((-$273))|0);
      var $275=(($274)|0)!=0;
      if ($275) { label = 59; break; } else { label = 63; break; }
    case 59: 
      var $277=$tp;
      $__dst1=$277;
      var $278=$off;
      var $279=(((-$278))|0);
      $__n2=$279;
      label = 60; break;
    case 60: 
      var $281=$__dst1;
      var $282=(($281+4)|0);
      $__dst1=$282;
      HEAP32[(($281)>>2)]=0;
      label = 61; break;
    case 61: 
      var $284=$__n2;
      var $285=((($284)-(1))|0);
      $__n2=$285;
      var $286=(($285)|0)!=0;
      if ($286) { label = 60; break; } else { label = 62; break; }
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $290=$off;
      var $291=$tn;
      var $292=((($291)-($290))|0);
      $tn=$292;
      $off=0;
      label = 65; break;
    case 65: 
      var $294=$tstr;
      var $295=$4;
      var $296=$tp;
      var $297=$off;
      var $298=(($296+($297<<2))|0);
      var $299=$tn;
      var $300=$off;
      var $301=((($299)-($300))|0);
      var $302=___gmpn_get_str($294, $295, $298, $301);
      $n_digits_computed=$302;
      var $303=$n_digits_computed;
      var $304=$e;
      var $305=((($303)-($304))|0);
      $exp_in_base=$305;
      label = 107; break;
    case 66: 
      var $307=$ue;
      var $308=$n_limbs_needed;
      var $309=((($307)-($308))|0);
      $n_less_limbs_needed=$309;
      var $310=$n_less_limbs_needed;
      var $311=(($310)>>>0);
      var $312=$4;
      var $313=((5244536+((($312)*(20))&-1))|0);
      var $314=(($313+4)|0);
      var $315=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($314)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($314)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $316=($315)*(32);
      var $317=($311)*($316);
      var $318=($317>=0 ? Math.floor($317) : Math.ceil($317));
      $e5=$318;
      var $319=$un;
      var $320=$n_limbs_needed;
      var $321=(($319)|0) > (($320)|0);
      if ($321) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $323=$un;
      var $324=$n_limbs_needed;
      var $325=((($323)-($324))|0);
      var $326=$up;
      var $327=(($326+($325<<2))|0);
      $up=$327;
      var $328=$n_limbs_needed;
      $un=$328;
      label = 68; break;
    case 68: 
      var $330=$n_limbs_needed;
      var $331=($330<<1);
      var $332=((($331)+(2))|0);
      var $333=($332<<2);
      var $334=(($333)>>>0) < 65536;
      if ($334) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $336=$n_limbs_needed;
      var $337=($336<<1);
      var $338=((($337)+(2))|0);
      var $339=($338<<2);
      var $340=STACKTOP;STACKTOP = (STACKTOP + $339)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $348 = $340;label = 71; break;
    case 70: 
      var $342=$n_limbs_needed;
      var $343=($342<<1);
      var $344=((($343)+(2))|0);
      var $345=($344<<2);
      var $346=___gmp_tmp_reentrant_alloc($__tmp_marker, $345);
      var $348 = $346;label = 71; break;
    case 71: 
      var $348;
      var $349=$348;
      $pp=$349;
      var $350=$n_limbs_needed;
      var $351=($350<<1);
      var $352=((($351)+(2))|0);
      var $353=($352<<2);
      var $354=(($353)>>>0) < 65536;
      if ($354) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $356=$n_limbs_needed;
      var $357=($356<<1);
      var $358=((($357)+(2))|0);
      var $359=($358<<2);
      var $360=STACKTOP;STACKTOP = (STACKTOP + $359)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $368 = $360;label = 74; break;
    case 73: 
      var $362=$n_limbs_needed;
      var $363=($362<<1);
      var $364=((($363)+(2))|0);
      var $365=($364<<2);
      var $366=___gmp_tmp_reentrant_alloc($__tmp_marker, $365);
      var $368 = $366;label = 74; break;
    case 74: 
      var $368;
      var $369=$368;
      $tp=$369;
      var $370=$pp;
      var $371=$4;
      var $372=$e5;
      var $373=$n_limbs_needed;
      var $374=$tp;
      var $375=_mpn_pow_1_highpart($370, $ign3, $371, $372, $373, $374);
      $pn=$375;
      var $376=$n_limbs_needed;
      var $377=$n_less_limbs_needed;
      var $378=HEAP32[(($ign3)>>2)];
      var $379=((($377)-($378))|0);
      var $380=((($376)+($379))|0);
      $xn=$380;
      var $381=$xn;
      var $382=($381<<2);
      var $383=(($382)>>>0) < 65536;
      if ($383) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $385=$xn;
      var $386=($385<<2);
      var $387=STACKTOP;STACKTOP = (STACKTOP + $386)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $393 = $387;label = 77; break;
    case 76: 
      var $389=$xn;
      var $390=($389<<2);
      var $391=___gmp_tmp_reentrant_alloc($__tmp_marker, $390);
      var $393 = $391;label = 77; break;
    case 77: 
      var $393;
      var $394=$393;
      $xp=$394;
      var $395=$xn;
      var $396=$un;
      var $397=((($395)-($396))|0);
      $off4=$397;
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $401=$off4;
      var $402=(($401)|0)!=0;
      if ($402) { label = 81; break; } else { label = 85; break; }
    case 81: 
      var $404=$xp;
      $__dst6=$404;
      var $405=$off4;
      $__n7=$405;
      label = 82; break;
    case 82: 
      var $407=$__dst6;
      var $408=(($407+4)|0);
      $__dst6=$408;
      HEAP32[(($407)>>2)]=0;
      label = 83; break;
    case 83: 
      var $410=$__n7;
      var $411=((($410)-(1))|0);
      $__n7=$411;
      var $412=(($411)|0)!=0;
      if ($412) { label = 82; break; } else { label = 84; break; }
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      var $424=$un;
      var $425=(($424)|0)!=0;
      if ($425) { label = 95; break; } else { label = 101; break; }
    case 95: 
      var $427=$un;
      var $428=((($427)-(1))|0);
      $__n8=$428;
      var $429=$xp;
      var $430=$off4;
      var $431=(($429+($430<<2))|0);
      $__dst9=$431;
      var $432=$up;
      $__src10=$432;
      var $433=$__src10;
      var $434=(($433+4)|0);
      $__src10=$434;
      var $435=HEAP32[(($433)>>2)];
      $__x11=$435;
      var $436=$__n8;
      var $437=(($436)|0)!=0;
      if ($437) { label = 96; break; } else { label = 100; break; }
    case 96: 
      label = 97; break;
    case 97: 
      var $440=$__x11;
      var $441=$__dst9;
      var $442=(($441+4)|0);
      $__dst9=$442;
      HEAP32[(($441)>>2)]=$440;
      var $443=$__src10;
      var $444=(($443+4)|0);
      $__src10=$444;
      var $445=HEAP32[(($443)>>2)];
      $__x11=$445;
      label = 98; break;
    case 98: 
      var $447=$__n8;
      var $448=((($447)-(1))|0);
      $__n8=$448;
      var $449=(($448)|0)!=0;
      if ($449) { label = 97; break; } else { label = 99; break; }
    case 99: 
      label = 100; break;
    case 100: 
      var $452=$__x11;
      var $453=$__dst9;
      var $454=(($453+4)|0);
      $__dst9=$454;
      HEAP32[(($453)>>2)]=$452;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $458=$pn;
      var $459=($458<<2);
      var $460=(($459)>>>0) < 65536;
      if ($460) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $462=$pn;
      var $463=($462<<2);
      var $464=STACKTOP;STACKTOP = (STACKTOP + $463)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $470 = $464;label = 106; break;
    case 105: 
      var $466=$pn;
      var $467=($466<<2);
      var $468=___gmp_tmp_reentrant_alloc($__tmp_marker, $467);
      var $470 = $468;label = 106; break;
    case 106: 
      var $470;
      var $471=$470;
      $dummyp=$471;
      var $472=$tp;
      var $473=$dummyp;
      var $474=$xp;
      var $475=$xn;
      var $476=$pp;
      var $477=$pn;
      ___gmpn_tdiv_qr($472, $473, 0, $474, $475, $476, $477);
      var $478=$xn;
      var $479=$pn;
      var $480=((($478)-($479))|0);
      var $481=((($480)+(1))|0);
      $tn=$481;
      var $482=$tn;
      var $483=((($482)-(1))|0);
      var $484=$tp;
      var $485=(($484+($483<<2))|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=(($486)|0)==0;
      var $488=(($487)&1);
      var $489=$tn;
      var $490=((($489)-($488))|0);
      $tn=$490;
      var $491=$tstr;
      var $492=$4;
      var $493=$tp;
      var $494=$tn;
      var $495=___gmpn_get_str($491, $492, $493, $494);
      $n_digits_computed=$495;
      var $496=$n_digits_computed;
      var $497=$e5;
      var $498=((($496)+($497))|0);
      $exp_in_base=$498;
      label = 107; break;
    case 107: 
      var $500=$n_digits_computed;
      var $501=$5;
      var $502=(($500)>>>0) > (($501)>>>0);
      if ($502) { label = 108; break; } else { label = 118; break; }
    case 108: 
      var $504=$5;
      var $505=$tstr;
      var $506=(($505+$504)|0);
      var $507=HEAP8[($506)];
      var $508=(($507)&255);
      var $509=($508<<1);
      var $510=$4;
      var $511=(($509)|0) >= (($510)|0);
      if ($511) { label = 109; break; } else { label = 117; break; }
    case 109: 
      var $513=$5;
      $n_digits_computed=$513;
      var $514=$5;
      var $515=((($514)-(1))|0);
      $i12=$515;
      label = 110; break;
    case 110: 
      var $517=$i12;
      var $518=$tstr;
      var $519=(($518+$517)|0);
      var $520=HEAP8[($519)];
      var $521=((($520)+(1))&255);
      HEAP8[($519)]=$521;
      var $522=(($521)&255);
      $x=$522;
      var $523=$x;
      var $524=$4;
      var $525=(($523)|0)!=(($524)|0);
      if ($525) { label = 111; break; } else { label = 112; break; }
    case 111: 
      label = 116; break;
    case 112: 
      var $528=$n_digits_computed;
      var $529=((($528)-(1))|0);
      $n_digits_computed=$529;
      var $530=$i12;
      var $531=(($530)|0)==0;
      if ($531) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $533=$tstr;
      var $534=(($533)|0);
      HEAP8[($534)]=1;
      $n_digits_computed=1;
      var $535=$exp_in_base;
      var $536=((($535)+(1))|0);
      $exp_in_base=$536;
      label = 116; break;
    case 114: 
      label = 115; break;
    case 115: 
      var $539=$i12;
      var $540=((($539)-(1))|0);
      $i12=$540;
      label = 110; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      var $544=$5;
      var $545=$n_digits_computed;
      var $546=(($544)>>>0) > (($545)>>>0);
      if ($546) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $548=$n_digits_computed;
      $5=$548;
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      var $551=$5;
      var $552=(($551)|0)!=0;
      if ($552) { label = 122; break; } else { var $562 = 0;label = 123; break; }
    case 122: 
      var $554=$5;
      var $555=((($554)-(1))|0);
      var $556=$tstr;
      var $557=(($556+$555)|0);
      var $558=HEAP8[($557)];
      var $559=(($558)&255);
      var $560=(($559)|0)==0;
      var $562 = $560;label = 123; break;
    case 123: 
      var $562;
      if ($562) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $564=$5;
      var $565=((($564)-(1))|0);
      $5=$565;
      label = 121; break;
    case 125: 
      var $567=$2;
      var $568=$6;
      var $569=(($568+4)|0);
      var $570=HEAP32[(($569)>>2)];
      var $571=(($570)|0) < 0;
      var $572=(($571)&1);
      var $573=(($567+$572)|0);
      $dp=$573;
      $i=0;
      label = 126; break;
    case 126: 
      var $575=$i;
      var $576=$5;
      var $577=(($575)>>>0) < (($576)>>>0);
      if ($577) { label = 127; break; } else { label = 129; break; }
    case 127: 
      var $579=$i;
      var $580=$tstr;
      var $581=(($580+$579)|0);
      var $582=HEAP8[($581)];
      var $583=(($582)&255);
      var $584=$num_to_text;
      var $585=(($584+$583)|0);
      var $586=HEAP8[($585)];
      var $587=$i;
      var $588=$dp;
      var $589=(($588+$587)|0);
      HEAP8[($589)]=$586;
      label = 128; break;
    case 128: 
      var $591=$i;
      var $592=((($591)+(1))|0);
      $i=$592;
      label = 126; break;
    case 129: 
      var $594=$5;
      var $595=$dp;
      var $596=(($595+$594)|0);
      HEAP8[($596)]=0;
      var $597=$exp_in_base;
      var $598=$3;
      HEAP32[(($598)>>2)]=$597;
      var $599=$6;
      var $600=(($599+4)|0);
      var $601=HEAP32[(($600)>>2)];
      var $602=(($601)|0) < 0;
      if ($602) { label = 130; break; } else { label = 131; break; }
    case 130: 
      var $604=$2;
      var $605=(($604)|0);
      HEAP8[($605)]=45;
      var $606=$5;
      var $607=((($606)+(1))|0);
      $5=$607;
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      var $610=HEAP32[(($__tmp_marker)>>2)];
      var $611=(($610)|0)!=0;
      if ($611) { label = 133; break; } else { label = 134; break; }
    case 133: 
      var $613=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($613);
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      label = 136; break;
    case 136: 
      var $617=$alloc_size;
      var $618=(($617)|0)!=0;
      if ($618) { label = 137; break; } else { label = 142; break; }
    case 137: 
      label = 138; break;
    case 138: 
      var $621=$alloc_size;
      var $622=$5;
      var $623=((($622)+(1))|0);
      var $624=(($621)|0)!=(($623)|0);
      if ($624) { label = 139; break; } else { label = 140; break; }
    case 139: 
      var $626=HEAP32[((5249676)>>2)];
      var $627=$2;
      var $628=$alloc_size;
      var $629=$628;
      var $630=$5;
      var $631=((($630)+(1))|0);
      var $632=$631;
      var $633=FUNCTION_TABLE[$626]($627, $629, $632);
      $2=$633;
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      var $637=$2;
      $1=$637;
      label = 143; break;
    case 143: 
      var $639=$1;
      STACKTOP = __stackBase__;
      return $639;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_get_str["X"]=1;

function _mpn_pow_1_highpart($rp, $ignp, $base, $exp, $prec, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ign;
      var $off;
      var $passed_rp;
      var $rn;
      var $cnt;
      var $i;
      var $__xr;
      var $__a;
      var $__mp_ptr_swap__tmp;
      var $cy;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $2=$rp;
      $3=$ignp;
      $4=$base;
      $5=$exp;
      $6=$prec;
      $7=$tp;
      var $8=$2;
      $passed_rp=$8;
      var $9=$5;
      var $10=(($9)|0)==0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$2;
      var $13=(($12)|0);
      HEAP32[(($13)>>2)]=1;
      var $14=$3;
      HEAP32[(($14)>>2)]=0;
      $1=1;
      label = 39; break;
    case 4: 
      var $16=$4;
      var $17=$2;
      var $18=(($17)|0);
      HEAP32[(($18)>>2)]=$16;
      $rn=1;
      $off=0;
      $ign=0;
      label = 5; break;
    case 5: 
      var $20=$5;
      $__xr=$20;
      var $21=$__xr;
      var $22=(($21)>>>0) < 65536;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=$__xr;
      var $25=(($24)>>>0) < 256;
      var $26=$25 ? 1 : 9;
      var $32 = $26;label = 8; break;
    case 7: 
      var $28=$__xr;
      var $29=(($28)>>>0) < 16777216;
      var $30=$29 ? 17 : 25;
      var $32 = $30;label = 8; break;
    case 8: 
      var $32;
      $__a=$32;
      var $33=$__a;
      var $34=(((33)-($33))|0);
      var $35=$__xr;
      var $36=$__a;
      var $37=$35 >>> (($36)>>>0);
      var $38=((5244408+$37)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&255);
      var $41=((($34)-($40))|0);
      $cnt=$41;
      label = 9; break;
    case 9: 
      var $43=$cnt;
      var $44=(((32)-($43))|0);
      var $45=((($44)-(2))|0);
      $i=$45;
      label = 10; break;
    case 10: 
      var $47=$i;
      var $48=(($47)|0) >= 0;
      if ($48) { label = 11; break; } else { label = 19; break; }
    case 11: 
      var $50=$7;
      var $51=$2;
      var $52=$off;
      var $53=(($51+($52<<2))|0);
      var $54=$rn;
      ___gmpn_sqr($50, $53, $54);
      var $55=$rn;
      var $56=($55<<1);
      $rn=$56;
      var $57=$rn;
      var $58=((($57)-(1))|0);
      var $59=$7;
      var $60=(($59+($58<<2))|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|0)==0;
      var $63=(($62)&1);
      var $64=$rn;
      var $65=((($64)-($63))|0);
      $rn=$65;
      var $66=$ign;
      var $67=$66 << 1;
      $ign=$67;
      $off=0;
      var $68=$rn;
      var $69=$6;
      var $70=(($68)|0) > (($69)|0);
      if ($70) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $72=$rn;
      var $73=$6;
      var $74=((($72)-($73))|0);
      var $75=$ign;
      var $76=((($75)+($74))|0);
      $ign=$76;
      var $77=$rn;
      var $78=$6;
      var $79=((($77)-($78))|0);
      $off=$79;
      var $80=$6;
      $rn=$80;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $83=$2;
      $__mp_ptr_swap__tmp=$83;
      var $84=$7;
      $2=$84;
      var $85=$__mp_ptr_swap__tmp;
      $7=$85;
      label = 15; break;
    case 15: 
      var $87=$5;
      var $88=$i;
      var $89=$87 >>> (($88)>>>0);
      var $90=$89 & 1;
      var $91=(($90)|0)!=0;
      if ($91) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $93=$2;
      var $94=$2;
      var $95=$off;
      var $96=(($94+($95<<2))|0);
      var $97=$rn;
      var $98=$4;
      var $99=___gmpn_mul_1($93, $96, $97, $98);
      $cy=$99;
      var $100=$cy;
      var $101=$rn;
      var $102=$2;
      var $103=(($102+($101<<2))|0);
      HEAP32[(($103)>>2)]=$100;
      var $104=$cy;
      var $105=(($104)|0)!=0;
      var $106=(($105)&1);
      var $107=$rn;
      var $108=((($107)+($106))|0);
      $rn=$108;
      $off=0;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $111=$i;
      var $112=((($111)-(1))|0);
      $i=$112;
      label = 10; break;
    case 19: 
      var $114=$rn;
      var $115=$6;
      var $116=(($114)|0) > (($115)|0);
      if ($116) { label = 20; break; } else { label = 23; break; }
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $120=$rn;
      var $121=$6;
      var $122=((($120)-($121))|0);
      var $123=$ign;
      var $124=((($123)+($122))|0);
      $ign=$124;
      var $125=$rn;
      var $126=$6;
      var $127=((($125)-($126))|0);
      var $128=$2;
      var $129=(($128+($127<<2))|0);
      $2=$129;
      var $130=$6;
      $rn=$130;
      label = 23; break;
    case 23: 
      var $132=$passed_rp;
      var $133=$2;
      var $134=$off;
      var $135=(($133+($134<<2))|0);
      var $136=(($132)|0)!=(($135)|0);
      if ($136) { label = 24; break; } else { label = 38; break; }
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $143=$rn;
      var $144=(($143)|0)!=0;
      if ($144) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $146=$rn;
      var $147=((($146)-(1))|0);
      $__n=$147;
      var $148=$passed_rp;
      $__dst=$148;
      var $149=$2;
      var $150=$off;
      var $151=(($149+($150<<2))|0);
      $__src=$151;
      var $152=$__src;
      var $153=(($152+4)|0);
      $__src=$153;
      var $154=HEAP32[(($152)>>2)];
      $__x=$154;
      var $155=$__n;
      var $156=(($155)|0)!=0;
      if ($156) { label = 31; break; } else { label = 35; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $159=$__x;
      var $160=$__dst;
      var $161=(($160+4)|0);
      $__dst=$161;
      HEAP32[(($160)>>2)]=$159;
      var $162=$__src;
      var $163=(($162+4)|0);
      $__src=$163;
      var $164=HEAP32[(($162)>>2)];
      $__x=$164;
      label = 33; break;
    case 33: 
      var $166=$__n;
      var $167=((($166)-(1))|0);
      $__n=$167;
      var $168=(($167)|0)!=0;
      if ($168) { label = 32; break; } else { label = 34; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $171=$__x;
      var $172=$__dst;
      var $173=(($172+4)|0);
      $__dst=$173;
      HEAP32[(($172)>>2)]=$171;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $177=$ign;
      var $178=$3;
      HEAP32[(($178)>>2)]=$177;
      var $179=$rn;
      $1=$179;
      label = 39; break;
    case 39: 
      var $181=$1;

      return $181;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_pow_1_highpart["X"]=1;

function ___gmpf_init($r) {
  var label = 0;


  var $1;
  var $prec;
  $1=$r;
  var $2=HEAP32[((5249692)>>2)];
  $prec=$2;
  var $3=$1;
  var $4=(($3+4)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=$1;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=$prec;
  var $8=$1;
  var $9=(($8)|0);
  HEAP32[(($9)>>2)]=$7;
  var $10=HEAP32[((5249824)>>2)];
  var $11=$prec;
  var $12=((($11)+(1))|0);
  var $13=($12<<2);
  var $14=FUNCTION_TABLE[$10]($13);
  var $15=$14;
  var $16=$1;
  var $17=(($16+12)|0);
  HEAP32[(($17)>>2)]=$15;

  return;
}


function ___gmpf_mul($r, $u, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $vp;
      var $usize;
      var $vsize;
      var $sign_product;
      var $prec;
      var $__tmp_marker=__stackBase__;
      var $rsize;
      var $cy_limb;
      var $rp;
      var $tp;
      var $adj;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$r;
      $2=$u;
      $3=$v;
      var $4=$1;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      $prec=$6;
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      $usize=$9;
      var $10=$3;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      $vsize=$12;
      var $13=$usize;
      var $14=$vsize;
      var $15=$13 ^ $14;
      $sign_product=$15;
      var $16=$usize;
      var $17=(($16)|0) >= 0;
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $19=$usize;
      var $24 = $19;label = 5; break;
    case 4: 
      var $21=$usize;
      var $22=(((-$21))|0);
      var $24 = $22;label = 5; break;
    case 5: 
      var $24;
      $usize=$24;
      var $25=$vsize;
      var $26=(($25)|0) >= 0;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=$vsize;
      var $33 = $28;label = 8; break;
    case 7: 
      var $30=$vsize;
      var $31=(((-$30))|0);
      var $33 = $31;label = 8; break;
    case 8: 
      var $33;
      $vsize=$33;
      var $34=$2;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      $up=$36;
      var $37=$3;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      $vp=$39;
      var $40=$usize;
      var $41=$prec;
      var $42=(($40)|0) > (($41)|0);
      if ($42) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $44=$usize;
      var $45=$prec;
      var $46=((($44)-($45))|0);
      var $47=$up;
      var $48=(($47+($46<<2))|0);
      $up=$48;
      var $49=$prec;
      $usize=$49;
      label = 10; break;
    case 10: 
      var $51=$vsize;
      var $52=$prec;
      var $53=(($51)|0) > (($52)|0);
      if ($53) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $55=$vsize;
      var $56=$prec;
      var $57=((($55)-($56))|0);
      var $58=$vp;
      var $59=(($58+($57<<2))|0);
      $vp=$59;
      var $60=$prec;
      $vsize=$60;
      label = 12; break;
    case 12: 
      var $62=$usize;
      var $63=(($62)|0)==0;
      if ($63) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $65=$vsize;
      var $66=(($65)|0)==0;
      if ($66) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $68=$1;
      var $69=(($68+4)|0);
      HEAP32[(($69)>>2)]=0;
      var $70=$1;
      var $71=(($70+8)|0);
      HEAP32[(($71)>>2)]=0;
      label = 44; break;
    case 15: 
      var $73=$usize;
      var $74=$vsize;
      var $75=((($73)+($74))|0);
      $rsize=$75;
      var $76=$rsize;
      var $77=($76<<2);
      var $78=(($77)>>>0) < 65536;
      if ($78) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $80=$rsize;
      var $81=($80<<2);
      var $82=STACKTOP;STACKTOP = (STACKTOP + $81)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $88 = $82;label = 18; break;
    case 17: 
      var $84=$rsize;
      var $85=($84<<2);
      var $86=___gmp_tmp_reentrant_alloc($__tmp_marker, $85);
      var $88 = $86;label = 18; break;
    case 18: 
      var $88;
      var $89=$88;
      $tp=$89;
      var $90=$usize;
      var $91=$vsize;
      var $92=(($90)|0) >= (($91)|0);
      if ($92) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $94=$tp;
      var $95=$up;
      var $96=$usize;
      var $97=$vp;
      var $98=$vsize;
      var $99=___gmpn_mul($94, $95, $96, $97, $98);
      var $108 = $99;label = 21; break;
    case 20: 
      var $101=$tp;
      var $102=$vp;
      var $103=$vsize;
      var $104=$up;
      var $105=$usize;
      var $106=___gmpn_mul($101, $102, $103, $104, $105);
      var $108 = $106;label = 21; break;
    case 21: 
      var $108;
      $cy_limb=$108;
      var $109=$cy_limb;
      var $110=(($109)|0)==0;
      var $111=(($110)&1);
      $adj=$111;
      var $112=$adj;
      var $113=$rsize;
      var $114=((($113)-($112))|0);
      $rsize=$114;
      var $115=$prec;
      var $116=((($115)+(1))|0);
      $prec=$116;
      var $117=$rsize;
      var $118=$prec;
      var $119=(($117)|0) > (($118)|0);
      if ($119) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $121=$rsize;
      var $122=$prec;
      var $123=((($121)-($122))|0);
      var $124=$tp;
      var $125=(($124+($123<<2))|0);
      $tp=$125;
      var $126=$prec;
      $rsize=$126;
      label = 23; break;
    case 23: 
      var $128=$1;
      var $129=(($128+12)|0);
      var $130=HEAP32[(($129)>>2)];
      $rp=$130;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $139=$rsize;
      var $140=(($139)|0)!=0;
      if ($140) { label = 32; break; } else { label = 38; break; }
    case 32: 
      var $142=$rsize;
      var $143=((($142)-(1))|0);
      $__n=$143;
      var $144=$rp;
      $__dst=$144;
      var $145=$tp;
      $__src=$145;
      var $146=$__src;
      var $147=(($146+4)|0);
      $__src=$147;
      var $148=HEAP32[(($146)>>2)];
      $__x=$148;
      var $149=$__n;
      var $150=(($149)|0)!=0;
      if ($150) { label = 33; break; } else { label = 37; break; }
    case 33: 
      label = 34; break;
    case 34: 
      var $153=$__x;
      var $154=$__dst;
      var $155=(($154+4)|0);
      $__dst=$155;
      HEAP32[(($154)>>2)]=$153;
      var $156=$__src;
      var $157=(($156+4)|0);
      $__src=$157;
      var $158=HEAP32[(($156)>>2)];
      $__x=$158;
      label = 35; break;
    case 35: 
      var $160=$__n;
      var $161=((($160)-(1))|0);
      $__n=$161;
      var $162=(($161)|0)!=0;
      if ($162) { label = 34; break; } else { label = 36; break; }
    case 36: 
      label = 37; break;
    case 37: 
      var $165=$__x;
      var $166=$__dst;
      var $167=(($166+4)|0);
      $__dst=$167;
      HEAP32[(($166)>>2)]=$165;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $171=$2;
      var $172=(($171+8)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=$3;
      var $175=(($174+8)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=((($173)+($176))|0);
      var $178=$adj;
      var $179=((($177)-($178))|0);
      var $180=$1;
      var $181=(($180+8)|0);
      HEAP32[(($181)>>2)]=$179;
      var $182=$sign_product;
      var $183=(($182)|0) >= 0;
      if ($183) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $185=$rsize;
      var $190 = $185;label = 43; break;
    case 42: 
      var $187=$rsize;
      var $188=(((-$187))|0);
      var $190 = $188;label = 43; break;
    case 43: 
      var $190;
      var $191=$1;
      var $192=(($191+4)|0);
      HEAP32[(($192)>>2)]=$190;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $195=HEAP32[(($__tmp_marker)>>2)];
      var $196=(($195)|0)!=0;
      if ($196) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $198=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($198);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_mul["X"]=1;

function ___gmpf_set_default_prec($prec_in_bits) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      $1=$prec_in_bits;
      var $2=$1;
      var $3=53 > (($2)>>>0);
      if ($3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8 = 53;label = 5; break;
    case 4: 
      var $6=$1;
      var $8 = $6;label = 5; break;
    case 5: 
      var $8;
      var $9=((($8)+(64))|0);
      var $10=((($9)-(1))|0);
      var $11=Math.floor(((($10)>>>0))/(32));
      HEAP32[((5249692)>>2)]=$11;

      return;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpf_set($r, $u) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $rp;
      var $up;
      var $size;
      var $asize;
      var $prec;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$r;
      $2=$u;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=((($5)+(1))|0);
      $prec=$6;
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      $size=$9;
      var $10=$size;
      var $11=(($10)|0) >= 0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$size;
      var $18 = $13;label = 5; break;
    case 4: 
      var $15=$size;
      var $16=(((-$15))|0);
      var $18 = $16;label = 5; break;
    case 5: 
      var $18;
      $asize=$18;
      var $19=$1;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      $rp=$21;
      var $22=$2;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      $up=$24;
      var $25=$asize;
      var $26=$prec;
      var $27=(($25)|0) > (($26)|0);
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$asize;
      var $30=$prec;
      var $31=((($29)-($30))|0);
      var $32=$up;
      var $33=(($32+($31<<2))|0);
      $up=$33;
      var $34=$prec;
      $asize=$34;
      label = 7; break;
    case 7: 
      var $36=$2;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$1;
      var $40=(($39+8)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$size;
      var $42=(($41)|0) >= 0;
      if ($42) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$asize;
      var $49 = $44;label = 10; break;
    case 9: 
      var $46=$asize;
      var $47=(((-$46))|0);
      var $49 = $47;label = 10; break;
    case 10: 
      var $49;
      var $50=$1;
      var $51=(($50+4)|0);
      HEAP32[(($51)>>2)]=$49;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $57=$asize;
      var $58=(($57)|0)!=0;
      if ($58) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $60=$asize;
      var $61=((($60)-(1))|0);
      $__n=$61;
      var $62=$rp;
      $__dst=$62;
      var $63=$up;
      $__src=$63;
      var $64=$__src;
      var $65=(($64+4)|0);
      $__src=$65;
      var $66=HEAP32[(($64)>>2)];
      $__x=$66;
      var $67=$__n;
      var $68=(($67)|0)!=0;
      if ($68) { label = 17; break; } else { label = 21; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $71=$__x;
      var $72=$__dst;
      var $73=(($72+4)|0);
      $__dst=$73;
      HEAP32[(($72)>>2)]=$71;
      var $74=$__src;
      var $75=(($74+4)|0);
      $__src=$75;
      var $76=HEAP32[(($74)>>2)];
      $__x=$76;
      label = 19; break;
    case 19: 
      var $78=$__n;
      var $79=((($78)-(1))|0);
      $__n=$79;
      var $80=(($79)|0)!=0;
      if ($80) { label = 18; break; } else { label = 20; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $83=$__x;
      var $84=$__dst;
      var $85=(($84+4)|0);
      $__dst=$85;
      HEAP32[(($84)>>2)]=$83;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_set["X"]=1;

function ___gmpf_set_prec_raw($x, $prec_in_bits) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$x;
      $2=$prec_in_bits;
      var $3=$2;
      var $4=53 > (($3)>>>0);
      if ($4) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9 = 53;label = 5; break;
    case 4: 
      var $7=$2;
      var $9 = $7;label = 5; break;
    case 5: 
      var $9;
      var $10=((($9)+(64))|0);
      var $11=((($10)-(1))|0);
      var $12=Math.floor(((($11)>>>0))/(32));
      var $13=$1;
      var $14=(($13)|0);
      HEAP32[(($14)>>2)]=$12;

      return;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpf_mul_ui($r, $u, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $usize;
      var $size;
      var $prec;
      var $excess;
      var $cy_limb;
      var $vl;
      var $cbit;
      var $cin;
      var $rp;
      var $vl_shifted;
      var $hi;
      var $lo;
      var $next_lo;
      var $sum;
      var $i;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x01;
      var $__x12;
      var $__x23;
      var $__x34;
      var $__ul5;
      var $__vl6;
      var $__uh7;
      var $__vh8;
      var $__u9;
      var $__v10;
      var $__x;
      var $__y;
      var $__w;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_r;
      var $__gmp_j;
      var $__gmp_j11;
      $1=$r;
      $2=$u;
      $3=$v;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      $usize=$6;
      var $7=$3;
      var $8=(($7)|0)==0;
      if ($8) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $10=$usize;
      var $11=(($10)|0)==0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=$1;
      var $14=(($13+4)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=$1;
      var $16=(($15+8)|0);
      HEAP32[(($16)>>2)]=0;
      label = 56; break;
    case 5: 
      var $18=$usize;
      var $19=(($18)|0) >= 0;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $21=$usize;
      var $26 = $21;label = 8; break;
    case 7: 
      var $23=$usize;
      var $24=(((-$23))|0);
      var $26 = $24;label = 8; break;
    case 8: 
      var $26;
      $size=$26;
      var $27=$1;
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      $prec=$29;
      var $30=$2;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      $up=$32;
      var $33=$3;
      $vl=$33;
      var $34=$size;
      var $35=$prec;
      var $36=((($34)-($35))|0);
      $excess=$36;
      $cin=0;
      var $37=$excess;
      var $38=(($37)|0) > 0;
      if ($38) { label = 9; break; } else { label = 26; break; }
    case 9: 
      var $40=$vl;
      var $41=$40 << 0;
      $vl_shifted=$41;
      var $42=$excess;
      var $43=((($42)-(1))|0);
      $i=$43;
      label = 10; break;
    case 10: 
      var $45=$i;
      var $46=$up;
      var $47=(($46+($45<<2))|0);
      var $48=HEAP32[(($47)>>2)];
      $__u=$48;
      var $49=$vl_shifted;
      $__v=$49;
      var $50=$__u;
      var $51=$50 & 65535;
      $__ul=$51;
      var $52=$__u;
      var $53=$52 >>> 16;
      $__uh=$53;
      var $54=$__v;
      var $55=$54 & 65535;
      $__vl=$55;
      var $56=$__v;
      var $57=$56 >>> 16;
      $__vh=$57;
      var $58=$__ul;
      var $59=$__vl;
      var $60=Math.imul($58,$59);
      $__x0=$60;
      var $61=$__ul;
      var $62=$__vh;
      var $63=Math.imul($61,$62);
      $__x1=$63;
      var $64=$__uh;
      var $65=$__vl;
      var $66=Math.imul($64,$65);
      $__x2=$66;
      var $67=$__uh;
      var $68=$__vh;
      var $69=Math.imul($67,$68);
      $__x3=$69;
      var $70=$__x0;
      var $71=$70 >>> 16;
      var $72=$__x1;
      var $73=((($72)+($71))|0);
      $__x1=$73;
      var $74=$__x2;
      var $75=$__x1;
      var $76=((($75)+($74))|0);
      $__x1=$76;
      var $77=$__x1;
      var $78=$__x2;
      var $79=(($77)>>>0) < (($78)>>>0);
      if ($79) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $81=$__x3;
      var $82=((($81)+(65536))|0);
      $__x3=$82;
      label = 12; break;
    case 12: 
      var $84=$__x3;
      var $85=$__x1;
      var $86=$85 >>> 16;
      var $87=((($84)+($86))|0);
      $cin=$87;
      var $88=$__x1;
      var $89=$88 << 16;
      var $90=$__x0;
      var $91=$90 & 65535;
      var $92=((($89)+($91))|0);
      $lo=$92;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $95=$i;
      var $96=((($95)-(1))|0);
      $i=$96;
      var $97=$i;
      var $98=(($97)|0) < 0;
      if ($98) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 25; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $102=$i;
      var $103=$up;
      var $104=(($103+($102<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      $__u9=$105;
      var $106=$vl_shifted;
      $__v10=$106;
      var $107=$__u9;
      var $108=$107 & 65535;
      $__ul5=$108;
      var $109=$__u9;
      var $110=$109 >>> 16;
      $__uh7=$110;
      var $111=$__v10;
      var $112=$111 & 65535;
      $__vl6=$112;
      var $113=$__v10;
      var $114=$113 >>> 16;
      $__vh8=$114;
      var $115=$__ul5;
      var $116=$__vl6;
      var $117=Math.imul($115,$116);
      $__x01=$117;
      var $118=$__ul5;
      var $119=$__vh8;
      var $120=Math.imul($118,$119);
      $__x12=$120;
      var $121=$__uh7;
      var $122=$__vl6;
      var $123=Math.imul($121,$122);
      $__x23=$123;
      var $124=$__uh7;
      var $125=$__vh8;
      var $126=Math.imul($124,$125);
      $__x34=$126;
      var $127=$__x01;
      var $128=$127 >>> 16;
      var $129=$__x12;
      var $130=((($129)+($128))|0);
      $__x12=$130;
      var $131=$__x23;
      var $132=$__x12;
      var $133=((($132)+($131))|0);
      $__x12=$133;
      var $134=$__x12;
      var $135=$__x23;
      var $136=(($134)>>>0) < (($135)>>>0);
      if ($136) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $138=$__x34;
      var $139=((($138)+(65536))|0);
      $__x34=$139;
      label = 19; break;
    case 19: 
      var $141=$__x34;
      var $142=$__x12;
      var $143=$142 >>> 16;
      var $144=((($141)+($143))|0);
      $hi=$144;
      var $145=$__x12;
      var $146=$145 << 16;
      var $147=$__x01;
      var $148=$147 & 65535;
      var $149=((($146)+($148))|0);
      $next_lo=$149;
      label = 20; break;
    case 20: 
      var $151=$lo;
      var $152=$151 >>> 0;
      $lo=$152;
      label = 21; break;
    case 21: 
      var $154=$hi;
      $__x=$154;
      var $155=$lo;
      $__y=$155;
      var $156=$__x;
      var $157=$__y;
      var $158=((($156)+($157))|0);
      $__w=$158;
      var $159=$__w;
      $sum=$159;
      var $160=$__w;
      var $161=$__x;
      var $162=(($160)>>>0) < (($161)>>>0);
      var $163=(($162)&1);
      $cbit=$163;
      label = 22; break;
    case 22: 
      var $165=$cbit;
      var $166=$cin;
      var $167=((($166)+($165))|0);
      $cin=$167;
      var $168=$next_lo;
      $lo=$168;
      var $169=$sum;
      var $170=(($169)|0)!=-1;
      if ($170) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      label = 14; break;
    case 25: 
      var $174=$excess;
      var $175=$up;
      var $176=(($175+($174<<2))|0);
      $up=$176;
      var $177=$prec;
      $size=$177;
      label = 26; break;
    case 26: 
      var $179=$1;
      var $180=(($179+12)|0);
      var $181=HEAP32[(($180)>>2)];
      $rp=$181;
      var $182=$rp;
      var $183=$up;
      var $184=$size;
      var $185=$vl;
      var $186=___gmpn_mul_1($182, $183, $184, $185);
      $cy_limb=$186;
      label = 27; break;
    case 27: 
      var $188=$rp;
      var $189=(($188)|0);
      var $190=HEAP32[(($189)>>2)];
      $__gmp_x=$190;
      var $191=$__gmp_x;
      var $192=$cin;
      var $193=((($191)+($192))|0);
      $__gmp_r=$193;
      var $194=$__gmp_r;
      var $195=$rp;
      var $196=(($195)|0);
      HEAP32[(($196)>>2)]=$194;
      var $197=$__gmp_r;
      var $198=$cin;
      var $199=(($197)>>>0) < (($198)>>>0);
      if ($199) { label = 28; break; } else { label = 42; break; }
    case 28: 
      $cbit=1;
      $__gmp_i=1;
      label = 29; break;
    case 29: 
      var $202=$__gmp_i;
      var $203=$size;
      var $204=(($202)|0) < (($203)|0);
      if ($204) { label = 30; break; } else { label = 41; break; }
    case 30: 
      var $206=$__gmp_i;
      var $207=$rp;
      var $208=(($207+($206<<2))|0);
      var $209=HEAP32[(($208)>>2)];
      $__gmp_x=$209;
      var $210=$__gmp_x;
      var $211=((($210)+(1))|0);
      $__gmp_r=$211;
      var $212=$__gmp_r;
      var $213=$__gmp_i;
      var $214=$rp;
      var $215=(($214+($213<<2))|0);
      HEAP32[(($215)>>2)]=$212;
      var $216=$__gmp_i;
      var $217=((($216)+(1))|0);
      $__gmp_i=$217;
      var $218=$__gmp_r;
      var $219=(($218)>>>0) < 1;
      if ($219) { label = 40; break; } else { label = 31; break; }
    case 31: 
      var $221=$rp;
      var $222=$rp;
      var $223=(($221)|0)!=(($222)|0);
      if ($223) { label = 32; break; } else { label = 39; break; }
    case 32: 
      label = 33; break;
    case 33: 
      var $226=$__gmp_i;
      $__gmp_j=$226;
      label = 34; break;
    case 34: 
      var $228=$__gmp_j;
      var $229=$size;
      var $230=(($228)|0) < (($229)|0);
      if ($230) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $232=$__gmp_j;
      var $233=$rp;
      var $234=(($233+($232<<2))|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=$__gmp_j;
      var $237=$rp;
      var $238=(($237+($236<<2))|0);
      HEAP32[(($238)>>2)]=$235;
      label = 36; break;
    case 36: 
      var $240=$__gmp_j;
      var $241=((($240)+(1))|0);
      $__gmp_j=$241;
      label = 34; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      $cbit=0;
      label = 41; break;
    case 40: 
      label = 29; break;
    case 41: 
      label = 51; break;
    case 42: 
      var $248=$rp;
      var $249=$rp;
      var $250=(($248)|0)!=(($249)|0);
      if ($250) { label = 43; break; } else { label = 50; break; }
    case 43: 
      label = 44; break;
    case 44: 
      $__gmp_j11=1;
      label = 45; break;
    case 45: 
      var $254=$__gmp_j11;
      var $255=$size;
      var $256=(($254)|0) < (($255)|0);
      if ($256) { label = 46; break; } else { label = 48; break; }
    case 46: 
      var $258=$__gmp_j11;
      var $259=$rp;
      var $260=(($259+($258<<2))|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=$__gmp_j11;
      var $263=$rp;
      var $264=(($263+($262<<2))|0);
      HEAP32[(($264)>>2)]=$261;
      label = 47; break;
    case 47: 
      var $266=$__gmp_j11;
      var $267=((($266)+(1))|0);
      $__gmp_j11=$267;
      label = 45; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      $cbit=0;
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $273=$cbit;
      var $274=$cy_limb;
      var $275=((($274)+($273))|0);
      $cy_limb=$275;
      var $276=$cy_limb;
      var $277=$size;
      var $278=$rp;
      var $279=(($278+($277<<2))|0);
      HEAP32[(($279)>>2)]=$276;
      var $280=$cy_limb;
      var $281=(($280)|0)!=0;
      var $282=(($281)&1);
      $cy_limb=$282;
      var $283=$2;
      var $284=(($283+8)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=$cy_limb;
      var $287=((($285)+($286))|0);
      var $288=$1;
      var $289=(($288+8)|0);
      HEAP32[(($289)>>2)]=$287;
      var $290=$cy_limb;
      var $291=$size;
      var $292=((($291)+($290))|0);
      $size=$292;
      var $293=$usize;
      var $294=(($293)|0) >= 0;
      if ($294) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $296=$size;
      var $301 = $296;label = 55; break;
    case 54: 
      var $298=$size;
      var $299=(((-$298))|0);
      var $301 = $299;label = 55; break;
    case 55: 
      var $301;
      var $302=$1;
      var $303=(($302+4)|0);
      HEAP32[(($303)>>2)]=$301;
      label = 56; break;
    case 56: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_mul_ui["X"]=1;

function ___gmpf_set_d($r, $d) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $negative;
      var $u=__stackBase__;
      $1=$r;
      $2=$d;
      label = 3; break;
    case 3: 
      var $4=$2;
      var $5=$u;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($5)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($5)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $6=$u;
      var $7=$6;
      var $8=(($7+4)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 20;
      var $12=$11 & 2047;
      var $13=(($12)|0)==2047;
      if ($13) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $15=$u;
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)==0;
      if ($18) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $20=$u;
      var $21=$20;
      var $22=(($21+4)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & 1048575;
      var $26=(($25)|0)==0;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      ___gmp_invalid_operation();
      throw "Reached an unreachable!"
    case 7: 
      ___gmp_invalid_operation();
      throw "Reached an unreachable!"
    case 8: 
      label = 9; break;
    case 9: 
      var $31=$2;
      var $32=$31 == 0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $34=$1;
      var $35=(($34+4)|0);
      HEAP32[(($35)>>2)]=0;
      var $36=$1;
      var $37=(($36+8)|0);
      HEAP32[(($37)>>2)]=0;
      label = 15; break;
    case 11: 
      var $39=$2;
      var $40=$39 < 0;
      var $41=(($40)&1);
      $negative=$41;
      var $42=$2;
      var $43=$42 >= 0;
      if ($43) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $45=$2;
      var $50 = $45;label = 14; break;
    case 13: 
      var $47=$2;
      var $48=(-$47);
      var $50 = $48;label = 14; break;
    case 14: 
      var $50;
      $2=$50;
      var $51=$negative;
      var $52=(($51)|0)!=0;
      var $53=$52 ? -3 : 3;
      var $54=$1;
      var $55=(($54+4)|0);
      HEAP32[(($55)>>2)]=$53;
      var $56=$1;
      var $57=(($56+12)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$2;
      var $60=___gmp_extract_double($58, $59);
      var $61=$1;
      var $62=(($61+8)|0);
      HEAP32[(($62)>>2)]=$60;
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_set_d["X"]=1;

function ___gmpf_set_z($r, $u) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $rp;
      var $up;
      var $size;
      var $asize;
      var $prec;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$r;
      $2=$u;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=((($5)+(1))|0);
      $prec=$6;
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      $size=$9;
      var $10=$size;
      var $11=(($10)|0) >= 0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$size;
      var $18 = $13;label = 5; break;
    case 4: 
      var $15=$size;
      var $16=(((-$15))|0);
      var $18 = $16;label = 5; break;
    case 5: 
      var $18;
      $asize=$18;
      var $19=$1;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      $rp=$21;
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      $up=$24;
      var $25=$asize;
      var $26=$1;
      var $27=(($26+8)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$asize;
      var $29=$prec;
      var $30=(($28)|0) > (($29)|0);
      if ($30) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $32=$asize;
      var $33=$prec;
      var $34=((($32)-($33))|0);
      var $35=$up;
      var $36=(($35+($34<<2))|0);
      $up=$36;
      var $37=$prec;
      $asize=$37;
      label = 7; break;
    case 7: 
      var $39=$size;
      var $40=(($39)|0) >= 0;
      if ($40) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $42=$asize;
      var $47 = $42;label = 10; break;
    case 9: 
      var $44=$asize;
      var $45=(((-$44))|0);
      var $47 = $45;label = 10; break;
    case 10: 
      var $47;
      var $48=$1;
      var $49=(($48+4)|0);
      HEAP32[(($49)>>2)]=$47;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $58=$asize;
      var $59=(($58)|0)!=0;
      if ($59) { label = 19; break; } else { label = 25; break; }
    case 19: 
      var $61=$asize;
      var $62=((($61)-(1))|0);
      $__n=$62;
      var $63=$rp;
      $__dst=$63;
      var $64=$up;
      $__src=$64;
      var $65=$__src;
      var $66=(($65+4)|0);
      $__src=$66;
      var $67=HEAP32[(($65)>>2)];
      $__x=$67;
      var $68=$__n;
      var $69=(($68)|0)!=0;
      if ($69) { label = 20; break; } else { label = 24; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $72=$__x;
      var $73=$__dst;
      var $74=(($73+4)|0);
      $__dst=$74;
      HEAP32[(($73)>>2)]=$72;
      var $75=$__src;
      var $76=(($75+4)|0);
      $__src=$76;
      var $77=HEAP32[(($75)>>2)];
      $__x=$77;
      label = 22; break;
    case 22: 
      var $79=$__n;
      var $80=((($79)-(1))|0);
      $__n=$80;
      var $81=(($80)|0)!=0;
      if ($81) { label = 21; break; } else { label = 23; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $84=$__x;
      var $85=$__dst;
      var $86=(($85+4)|0);
      $__dst=$86;
      HEAP32[(($85)>>2)]=$84;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_set_z["X"]=1;

function ___gmpf_sub($r, $u, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $vp;
      var $rp;
      var $tp;
      var $usize;
      var $vsize;
      var $rsize;
      var $prec;
      var $exp;
      var $ediff;
      var $negate;
      var $__tmp_marker=__stackBase__;
      var $v_negated=(__stackBase__)+(4);
      var $t;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__mp_srcptr_swap__tmp;
      var $__mp_size_t_swap__tmp;
      var $cy_limb;
      var $size;
      var $i;
      var $size1;
      var $i2;
      var $size3;
      var $__n4;
      var $__dst5;
      var $__src6;
      var $__x7;
      var $size8;
      var $i9;
      var $__n10;
      var $__dst11;
      var $__src12;
      var $__x13;
      var $__n14;
      var $__dst15;
      var $__src16;
      var $__x17;
      var $__n18;
      var $__dst19;
      var $__src20;
      var $__x21;
      var $size22;
      var $__n23;
      var $__dst24;
      var $__src25;
      var $__x26;
      var $size27;
      var $i28;
      var $size29;
      var $__n30;
      var $__dst31;
      var $__src32;
      var $__x33;
      var $size34;
      var $i35;
      var $size36;
      var $i37;
      var $__n38;
      var $__dst39;
      var $__src40;
      var $__x41;
      $1=$r;
      $2=$u;
      $3=$v;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      $usize=$6;
      var $7=$3;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      $vsize=$9;
      var $10=$usize;
      var $11=(($10)|0)==0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$1;
      var $14=$3;
      ___gmpf_neg($13, $14);
      label = 300; break;
    case 4: 
      var $16=$vsize;
      var $17=(($16)|0)==0;
      if ($17) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $19=$1;
      var $20=$2;
      var $21=(($19)|0)!=(($20)|0);
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$1;
      var $24=$2;
      ___gmpf_set($23, $24);
      label = 7; break;
    case 7: 
      label = 300; break;
    case 8: 
      var $27=$usize;
      var $28=$vsize;
      var $29=$27 ^ $28;
      var $30=(($29)|0) < 0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$vsize;
      var $33=(((-$32))|0);
      var $34=(($v_negated+4)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=$3;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($v_negated+8)|0);
      HEAP32[(($38)>>2)]=$37;
      var $39=$3;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($v_negated+12)|0);
      HEAP32[(($42)>>2)]=$41;
      var $43=$1;
      var $44=$2;
      ___gmpf_add($43, $44, $v_negated);
      label = 300; break;
    case 10: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $46=$usize;
      var $47=(($46)|0) < 0;
      var $48=(($47)&1);
      $negate=$48;
      var $49=$2;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$3;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($51)|0) < (($54)|0);
      if ($55) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $57=$2;
      $t=$57;
      var $58=$3;
      $2=$58;
      var $59=$t;
      $3=$59;
      var $60=$negate;
      var $61=$60 ^ 1;
      $negate=$61;
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      $usize=$64;
      var $65=$3;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      $vsize=$67;
      label = 12; break;
    case 12: 
      var $69=$usize;
      var $70=(($69)|0) >= 0;
      if ($70) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $72=$usize;
      var $77 = $72;label = 15; break;
    case 14: 
      var $74=$usize;
      var $75=(((-$74))|0);
      var $77 = $75;label = 15; break;
    case 15: 
      var $77;
      $usize=$77;
      var $78=$vsize;
      var $79=(($78)|0) >= 0;
      if ($79) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $81=$vsize;
      var $86 = $81;label = 18; break;
    case 17: 
      var $83=$vsize;
      var $84=(((-$83))|0);
      var $86 = $84;label = 18; break;
    case 18: 
      var $86;
      $vsize=$86;
      var $87=$2;
      var $88=(($87+12)|0);
      var $89=HEAP32[(($88)>>2)];
      $up=$89;
      var $90=$3;
      var $91=(($90+12)|0);
      var $92=HEAP32[(($91)>>2)];
      $vp=$92;
      var $93=$1;
      var $94=(($93+12)|0);
      var $95=HEAP32[(($94)>>2)];
      $rp=$95;
      var $96=$1;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=((($98)+(1))|0);
      $prec=$99;
      var $100=$2;
      var $101=(($100+8)|0);
      var $102=HEAP32[(($101)>>2)];
      $exp=$102;
      var $103=$2;
      var $104=(($103+8)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$3;
      var $107=(($106+8)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($105)-($108))|0);
      $ediff=$109;
      var $110=$ediff;
      var $111=(($110)|0) <= 1;
      if ($111) { label = 19; break; } else { label = 129; break; }
    case 19: 
      var $113=$ediff;
      var $114=(($113)|0)==0;
      if ($114) { label = 20; break; } else { label = 61; break; }
    case 20: 
      var $116=$usize;
      var $117=((($116)-(1))|0);
      var $118=$up;
      var $119=(($118+($117<<2))|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$vsize;
      var $122=((($121)-(1))|0);
      var $123=$vp;
      var $124=(($123+($122<<2))|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($120)|0)==(($125)|0);
      if ($126) { label = 21; break; } else { label = 50; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $129=$usize;
      var $130=((($129)-(1))|0);
      $usize=$130;
      var $131=$vsize;
      var $132=((($131)-(1))|0);
      $vsize=$132;
      var $133=$exp;
      var $134=((($133)-(1))|0);
      $exp=$134;
      var $135=$usize;
      var $136=(($135)|0)==0;
      if ($136) { label = 23; break; } else { label = 45; break; }
    case 23: 
      var $138=$negate;
      var $139=$138 ^ 1;
      $negate=$139;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $142=$vsize;
      var $143=(($142)|0)!=0;
      if ($143) { label = 26; break; } else { var $152 = 0;label = 27; break; }
    case 26: 
      var $145=$vsize;
      var $146=((($145)-(1))|0);
      var $147=$vp;
      var $148=(($147+($146<<2))|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149)|0)==0;
      var $152 = $150;label = 27; break;
    case 27: 
      var $152;
      if ($152) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $154=$vsize;
      var $155=((($154)-(1))|0);
      $vsize=$155;
      var $156=$exp;
      var $157=((($156)-(1))|0);
      $exp=$157;
      label = 25; break;
    case 29: 
      var $159=$vsize;
      var $160=$prec;
      var $161=(($159)|0) > (($160)|0);
      if ($161) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $163=$vsize;
      var $164=$prec;
      var $165=((($163)-($164))|0);
      var $166=$vp;
      var $167=(($166+($165<<2))|0);
      $vp=$167;
      var $168=$prec;
      $vsize=$168;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $175=$vsize;
      var $176=(($175)|0)!=0;
      if ($176) { label = 37; break; } else { label = 43; break; }
    case 37: 
      var $178=$vsize;
      var $179=((($178)-(1))|0);
      $__n=$179;
      var $180=$rp;
      $__dst=$180;
      var $181=$vp;
      $__src=$181;
      var $182=$__src;
      var $183=(($182+4)|0);
      $__src=$183;
      var $184=HEAP32[(($182)>>2)];
      $__x=$184;
      var $185=$__n;
      var $186=(($185)|0)!=0;
      if ($186) { label = 38; break; } else { label = 42; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $189=$__x;
      var $190=$__dst;
      var $191=(($190+4)|0);
      $__dst=$191;
      HEAP32[(($190)>>2)]=$189;
      var $192=$__src;
      var $193=(($192+4)|0);
      $__src=$193;
      var $194=HEAP32[(($192)>>2)];
      $__x=$194;
      label = 40; break;
    case 40: 
      var $196=$__n;
      var $197=((($196)-(1))|0);
      $__n=$197;
      var $198=(($197)|0)!=0;
      if ($198) { label = 39; break; } else { label = 41; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $201=$__x;
      var $202=$__dst;
      var $203=(($202+4)|0);
      $__dst=$203;
      HEAP32[(($202)>>2)]=$201;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $206=$vsize;
      $rsize=$206;
      label = 291; break;
    case 45: 
      var $208=$vsize;
      var $209=(($208)|0)==0;
      if ($209) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $211=$up;
      $vp=$211;
      var $212=$usize;
      $vsize=$212;
      label = 24; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $215=$usize;
      var $216=((($215)-(1))|0);
      var $217=$up;
      var $218=(($217+($216<<2))|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=$vsize;
      var $221=((($220)-(1))|0);
      var $222=$vp;
      var $223=(($222+($221<<2))|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=(($219)|0)==(($224)|0);
      if ($225) { label = 22; break; } else { label = 49; break; }
    case 49: 
      label = 50; break;
    case 50: 
      var $228=$usize;
      var $229=((($228)-(1))|0);
      var $230=$up;
      var $231=(($230+($229<<2))|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=$vsize;
      var $234=((($233)-(1))|0);
      var $235=$vp;
      var $236=(($235+($234<<2))|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($232)>>>0) < (($237)>>>0);
      if ($238) { label = 51; break; } else { label = 58; break; }
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $242=$up;
      $__mp_srcptr_swap__tmp=$242;
      var $243=$vp;
      $up=$243;
      var $244=$__mp_srcptr_swap__tmp;
      $vp=$244;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $247=$usize;
      $__mp_size_t_swap__tmp=$247;
      var $248=$vsize;
      $usize=$248;
      var $249=$__mp_size_t_swap__tmp;
      $vsize=$249;
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $252=$negate;
      var $253=$252 ^ 1;
      $negate=$253;
      label = 58; break;
    case 58: 
      var $255=$usize;
      var $256=((($255)-(1))|0);
      var $257=$up;
      var $258=(($257+($256<<2))|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=$vsize;
      var $261=((($260)-(1))|0);
      var $262=$vp;
      var $263=(($262+($261<<2))|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=((($264)+(1))|0);
      var $266=(($259)|0)!=(($265)|0);
      if ($266) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 130; break;
    case 60: 
      var $269=$usize;
      var $270=((($269)-(1))|0);
      $usize=$270;
      var $271=$vsize;
      var $272=((($271)-(1))|0);
      $vsize=$272;
      var $273=$exp;
      var $274=((($273)-(1))|0);
      $exp=$274;
      label = 67; break;
    case 61: 
      var $276=$usize;
      var $277=((($276)-(1))|0);
      var $278=$up;
      var $279=(($278+($277<<2))|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280)|0)!=1;
      if ($281) { label = 65; break; } else { label = 62; break; }
    case 62: 
      var $283=$vsize;
      var $284=((($283)-(1))|0);
      var $285=$vp;
      var $286=(($285+($284<<2))|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=(($287)|0)!=-1;
      if ($288) { label = 65; break; } else { label = 63; break; }
    case 63: 
      var $290=$usize;
      var $291=(($290)|0) >= 2;
      if ($291) { label = 64; break; } else { label = 66; break; }
    case 64: 
      var $293=$usize;
      var $294=((($293)-(2))|0);
      var $295=$up;
      var $296=(($295+($294<<2))|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=(($297)|0)!=0;
      if ($298) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 130; break;
    case 66: 
      var $301=$usize;
      var $302=((($301)-(1))|0);
      $usize=$302;
      var $303=$exp;
      var $304=((($303)-(1))|0);
      $exp=$304;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $307=$vsize;
      var $308=(($307)|0)!=0;
      if ($308) { label = 69; break; } else { var $327 = 0;label = 72; break; }
    case 69: 
      var $310=$usize;
      var $311=(($310)|0)!=0;
      if ($311) { label = 70; break; } else { var $327 = 0;label = 72; break; }
    case 70: 
      var $313=$usize;
      var $314=((($313)-(1))|0);
      var $315=$up;
      var $316=(($315+($314<<2))|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317)|0)==0;
      if ($318) { label = 71; break; } else { var $327 = 0;label = 72; break; }
    case 71: 
      var $320=$vsize;
      var $321=((($320)-(1))|0);
      var $322=$vp;
      var $323=(($322+($321<<2))|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=(($324)|0)==-1;
      var $327 = $325;label = 72; break;
    case 72: 
      var $327;
      if ($327) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $329=$usize;
      var $330=((($329)-(1))|0);
      $usize=$330;
      var $331=$vsize;
      var $332=((($331)-(1))|0);
      $vsize=$332;
      var $333=$exp;
      var $334=((($333)-(1))|0);
      $exp=$334;
      label = 68; break;
    case 74: 
      var $336=$usize;
      var $337=(($336)|0)==0;
      if ($337) { label = 75; break; } else { label = 81; break; }
    case 75: 
      label = 76; break;
    case 76: 
      var $340=$vsize;
      var $341=(($340)|0)!=0;
      if ($341) { label = 77; break; } else { var $350 = 0;label = 78; break; }
    case 77: 
      var $343=$vsize;
      var $344=((($343)-(1))|0);
      var $345=$vp;
      var $346=(($345+($344<<2))|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=(($347)|0)==-1;
      var $350 = $348;label = 78; break;
    case 78: 
      var $350;
      if ($350) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $352=$vsize;
      var $353=((($352)-(1))|0);
      $vsize=$353;
      var $354=$exp;
      var $355=((($354)-(1))|0);
      $exp=$355;
      label = 76; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $358=$usize;
      var $359=$prec;
      var $360=((($359)-(1))|0);
      var $361=(($358)|0) > (($360)|0);
      if ($361) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $363=$usize;
      var $364=$prec;
      var $365=((($364)-(1))|0);
      var $366=((($363)-($365))|0);
      var $367=$up;
      var $368=(($367+($366<<2))|0);
      $up=$368;
      var $369=$prec;
      var $370=((($369)-(1))|0);
      $usize=$370;
      label = 83; break;
    case 83: 
      var $372=$vsize;
      var $373=$prec;
      var $374=((($373)-(1))|0);
      var $375=(($372)|0) > (($374)|0);
      if ($375) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $377=$vsize;
      var $378=$prec;
      var $379=((($378)-(1))|0);
      var $380=((($377)-($379))|0);
      var $381=$vp;
      var $382=(($381+($380<<2))|0);
      $vp=$382;
      var $383=$prec;
      var $384=((($383)-(1))|0);
      $vsize=$384;
      label = 85; break;
    case 85: 
      var $386=$prec;
      var $387=($386<<2);
      var $388=(($387)>>>0) < 65536;
      if ($388) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $390=$prec;
      var $391=($390<<2);
      var $392=STACKTOP;STACKTOP = (STACKTOP + $391)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $398 = $392;label = 88; break;
    case 87: 
      var $394=$prec;
      var $395=($394<<2);
      var $396=___gmp_tmp_reentrant_alloc($__tmp_marker, $395);
      var $398 = $396;label = 88; break;
    case 88: 
      var $398;
      var $399=$398;
      $tp=$399;
      var $400=$vsize;
      var $401=(($400)|0)==0;
      if ($401) { label = 89; break; } else { label = 94; break; }
    case 89: 
      var $403=$usize;
      $size=$403;
      $i=0;
      label = 90; break;
    case 90: 
      var $405=$i;
      var $406=$size;
      var $407=(($405)|0) < (($406)|0);
      if ($407) { label = 91; break; } else { label = 93; break; }
    case 91: 
      var $409=$i;
      var $410=$up;
      var $411=(($410+($409<<2))|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$i;
      var $414=$tp;
      var $415=(($414+($413<<2))|0);
      HEAP32[(($415)>>2)]=$412;
      label = 92; break;
    case 92: 
      var $417=$i;
      var $418=((($417)+(1))|0);
      $i=$418;
      label = 90; break;
    case 93: 
      var $420=$size;
      var $421=$tp;
      var $422=(($421+($420<<2))|0);
      HEAP32[(($422)>>2)]=1;
      var $423=$size;
      var $424=((($423)+(1))|0);
      $rsize=$424;
      var $425=$exp;
      var $426=((($425)+(1))|0);
      $exp=$426;
      label = 267; break;
    case 94: 
      var $428=$usize;
      var $429=(($428)|0)==0;
      if ($429) { label = 95; break; } else { label = 102; break; }
    case 95: 
      var $431=$vsize;
      $size1=$431;
      $i2=0;
      label = 96; break;
    case 96: 
      var $433=$i2;
      var $434=$size1;
      var $435=(($433)|0) < (($434)|0);
      if ($435) { label = 97; break; } else { label = 99; break; }
    case 97: 
      var $437=$i2;
      var $438=$vp;
      var $439=(($438+($437<<2))|0);
      var $440=HEAP32[(($439)>>2)];
      var $441=$440 ^ -1;
      var $442=$i2;
      var $443=$tp;
      var $444=(($443+($442<<2))|0);
      HEAP32[(($444)>>2)]=$441;
      label = 98; break;
    case 98: 
      var $446=$i2;
      var $447=((($446)+(1))|0);
      $i2=$447;
      label = 96; break;
    case 99: 
      var $449=$tp;
      var $450=$tp;
      var $451=$vsize;
      var $452=___gmpn_add_1($449, $450, $451, 1);
      var $453=(((1)-($452))|0);
      $cy_limb=$453;
      var $454=$vsize;
      $rsize=$454;
      var $455=$cy_limb;
      var $456=(($455)|0)==0;
      if ($456) { label = 100; break; } else { label = 101; break; }
    case 100: 
      var $458=$rsize;
      var $459=$tp;
      var $460=(($459+($458<<2))|0);
      HEAP32[(($460)>>2)]=1;
      var $461=$rsize;
      var $462=((($461)+(1))|0);
      $rsize=$462;
      var $463=$exp;
      var $464=((($463)+(1))|0);
      $exp=$464;
      label = 101; break;
    case 101: 
      label = 267; break;
    case 102: 
      var $467=$usize;
      var $468=$vsize;
      var $469=(($467)|0) >= (($468)|0);
      if ($469) { label = 103; break; } else { label = 121; break; }
    case 103: 
      var $471=$usize;
      var $472=$vsize;
      var $473=((($471)-($472))|0);
      $size3=$473;
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $482=$size3;
      var $483=(($482)|0)!=0;
      if ($483) { label = 112; break; } else { label = 118; break; }
    case 112: 
      var $485=$size3;
      var $486=((($485)-(1))|0);
      $__n4=$486;
      var $487=$tp;
      $__dst5=$487;
      var $488=$up;
      $__src6=$488;
      var $489=$__src6;
      var $490=(($489+4)|0);
      $__src6=$490;
      var $491=HEAP32[(($489)>>2)];
      $__x7=$491;
      var $492=$__n4;
      var $493=(($492)|0)!=0;
      if ($493) { label = 113; break; } else { label = 117; break; }
    case 113: 
      label = 114; break;
    case 114: 
      var $496=$__x7;
      var $497=$__dst5;
      var $498=(($497+4)|0);
      $__dst5=$498;
      HEAP32[(($497)>>2)]=$496;
      var $499=$__src6;
      var $500=(($499+4)|0);
      $__src6=$500;
      var $501=HEAP32[(($499)>>2)];
      $__x7=$501;
      label = 115; break;
    case 115: 
      var $503=$__n4;
      var $504=((($503)-(1))|0);
      $__n4=$504;
      var $505=(($504)|0)!=0;
      if ($505) { label = 114; break; } else { label = 116; break; }
    case 116: 
      label = 117; break;
    case 117: 
      var $508=$__x7;
      var $509=$__dst5;
      var $510=(($509+4)|0);
      $__dst5=$510;
      HEAP32[(($509)>>2)]=$508;
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $514=$tp;
      var $515=$size3;
      var $516=(($514+($515<<2))|0);
      var $517=$up;
      var $518=$size3;
      var $519=(($517+($518<<2))|0);
      var $520=$vp;
      var $521=$vsize;
      var $522=___gmpn_sub_n($516, $519, $520, $521);
      $cy_limb=$522;
      var $523=$usize;
      $rsize=$523;
      label = 126; break;
    case 121: 
      var $525=$vsize;
      var $526=$usize;
      var $527=((($525)-($526))|0);
      $size8=$527;
      $i9=0;
      label = 122; break;
    case 122: 
      var $529=$i9;
      var $530=$size8;
      var $531=(($529)|0) < (($530)|0);
      if ($531) { label = 123; break; } else { label = 125; break; }
    case 123: 
      var $533=$i9;
      var $534=$vp;
      var $535=(($534+($533<<2))|0);
      var $536=HEAP32[(($535)>>2)];
      var $537=$536 ^ -1;
      var $538=$i9;
      var $539=$tp;
      var $540=(($539+($538<<2))|0);
      HEAP32[(($540)>>2)]=$537;
      label = 124; break;
    case 124: 
      var $542=$i9;
      var $543=((($542)+(1))|0);
      $i9=$543;
      label = 122; break;
    case 125: 
      var $545=$tp;
      var $546=$size8;
      var $547=(($545+($546<<2))|0);
      var $548=$up;
      var $549=$vp;
      var $550=$size8;
      var $551=(($549+($550<<2))|0);
      var $552=$usize;
      var $553=___gmpn_sub_n($547, $548, $551, $552);
      $cy_limb=$553;
      var $554=$tp;
      var $555=$size8;
      var $556=(($554+($555<<2))|0);
      var $557=$tp;
      var $558=$size8;
      var $559=(($557+($558<<2))|0);
      var $560=$usize;
      var $561=___gmpn_sub_1($556, $559, $560, 1);
      var $562=$cy_limb;
      var $563=((($562)+($561))|0);
      $cy_limb=$563;
      var $564=$tp;
      var $565=$tp;
      var $566=$vsize;
      var $567=___gmpn_add_1($564, $565, $566, 1);
      var $568=$cy_limb;
      var $569=((($568)-($567))|0);
      $cy_limb=$569;
      var $570=$vsize;
      $rsize=$570;
      label = 126; break;
    case 126: 
      var $572=$cy_limb;
      var $573=(($572)|0)==0;
      if ($573) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $575=$rsize;
      var $576=$tp;
      var $577=(($576+($575<<2))|0);
      HEAP32[(($577)>>2)]=1;
      var $578=$rsize;
      var $579=((($578)+(1))|0);
      $rsize=$579;
      var $580=$exp;
      var $581=((($580)+(1))|0);
      $exp=$581;
      label = 128; break;
    case 128: 
      label = 267; break;
    case 129: 
      label = 130; break;
    case 130: 
      var $585=$usize;
      var $586=$prec;
      var $587=(($585)|0) > (($586)|0);
      if ($587) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $589=$usize;
      var $590=$prec;
      var $591=((($589)-($590))|0);
      var $592=$up;
      var $593=(($592+($591<<2))|0);
      $up=$593;
      var $594=$prec;
      $usize=$594;
      label = 132; break;
    case 132: 
      var $596=$vsize;
      var $597=$ediff;
      var $598=((($596)+($597))|0);
      var $599=$prec;
      var $600=(($598)|0) > (($599)|0);
      if ($600) { label = 133; break; } else { label = 134; break; }
    case 133: 
      var $602=$vsize;
      var $603=$ediff;
      var $604=((($602)+($603))|0);
      var $605=$prec;
      var $606=((($604)-($605))|0);
      var $607=$vp;
      var $608=(($607+($606<<2))|0);
      $vp=$608;
      var $609=$prec;
      var $610=$ediff;
      var $611=((($609)-($610))|0);
      $vsize=$611;
      label = 134; break;
    case 134: 
      var $613=$prec;
      var $614=($613<<2);
      var $615=(($614)>>>0) < 65536;
      if ($615) { label = 135; break; } else { label = 136; break; }
    case 135: 
      var $617=$prec;
      var $618=($617<<2);
      var $619=STACKTOP;STACKTOP = (STACKTOP + $618)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $625 = $619;label = 137; break;
    case 136: 
      var $621=$prec;
      var $622=($621<<2);
      var $623=___gmp_tmp_reentrant_alloc($__tmp_marker, $622);
      var $625 = $623;label = 137; break;
    case 137: 
      var $625;
      var $626=$625;
      $tp=$626;
      var $627=$ediff;
      var $628=$prec;
      var $629=(($627)|0) >= (($628)|0);
      if ($629) { label = 138; break; } else { label = 158; break; }
    case 138: 
      var $631=$tp;
      var $632=$up;
      var $633=(($631)|0)!=(($632)|0);
      if ($633) { label = 139; break; } else { label = 157; break; }
    case 139: 
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 147; break;
    case 147: 
      var $643=$usize;
      var $644=(($643)|0)!=0;
      if ($644) { label = 148; break; } else { label = 154; break; }
    case 148: 
      var $646=$usize;
      var $647=((($646)-(1))|0);
      $__n10=$647;
      var $648=$rp;
      $__dst11=$648;
      var $649=$up;
      $__src12=$649;
      var $650=$__src12;
      var $651=(($650+4)|0);
      $__src12=$651;
      var $652=HEAP32[(($650)>>2)];
      $__x13=$652;
      var $653=$__n10;
      var $654=(($653)|0)!=0;
      if ($654) { label = 149; break; } else { label = 153; break; }
    case 149: 
      label = 150; break;
    case 150: 
      var $657=$__x13;
      var $658=$__dst11;
      var $659=(($658+4)|0);
      $__dst11=$659;
      HEAP32[(($658)>>2)]=$657;
      var $660=$__src12;
      var $661=(($660+4)|0);
      $__src12=$661;
      var $662=HEAP32[(($660)>>2)];
      $__x13=$662;
      label = 151; break;
    case 151: 
      var $664=$__n10;
      var $665=((($664)-(1))|0);
      $__n10=$665;
      var $666=(($665)|0)!=0;
      if ($666) { label = 150; break; } else { label = 152; break; }
    case 152: 
      label = 153; break;
    case 153: 
      var $669=$__x13;
      var $670=$__dst11;
      var $671=(($670+4)|0);
      $__dst11=$671;
      HEAP32[(($670)>>2)]=$669;
      label = 154; break;
    case 154: 
      label = 155; break;
    case 155: 
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      var $676=$usize;
      $rsize=$676;
      label = 290; break;
    case 158: 
      label = 159; break;
    case 159: 
      var $679=$vsize;
      var $680=(($679)|0)==0;
      if ($680) { label = 160; break; } else { label = 178; break; }
    case 160: 
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      var $690=$usize;
      var $691=(($690)|0)!=0;
      if ($691) { label = 169; break; } else { label = 175; break; }
    case 169: 
      var $693=$usize;
      var $694=((($693)-(1))|0);
      $__n14=$694;
      var $695=$rp;
      $__dst15=$695;
      var $696=$up;
      $__src16=$696;
      var $697=$__src16;
      var $698=(($697+4)|0);
      $__src16=$698;
      var $699=HEAP32[(($697)>>2)];
      $__x17=$699;
      var $700=$__n14;
      var $701=(($700)|0)!=0;
      if ($701) { label = 170; break; } else { label = 174; break; }
    case 170: 
      label = 171; break;
    case 171: 
      var $704=$__x17;
      var $705=$__dst15;
      var $706=(($705+4)|0);
      $__dst15=$706;
      HEAP32[(($705)>>2)]=$704;
      var $707=$__src16;
      var $708=(($707+4)|0);
      $__src16=$708;
      var $709=HEAP32[(($707)>>2)];
      $__x17=$709;
      label = 172; break;
    case 172: 
      var $711=$__n14;
      var $712=((($711)-(1))|0);
      $__n14=$712;
      var $713=(($712)|0)!=0;
      if ($713) { label = 171; break; } else { label = 173; break; }
    case 173: 
      label = 174; break;
    case 174: 
      var $716=$__x17;
      var $717=$__dst15;
      var $718=(($717+4)|0);
      $__dst15=$718;
      HEAP32[(($717)>>2)]=$716;
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      var $722=$usize;
      $rsize=$722;
      label = 291; break;
    case 178: 
      var $724=$vp;
      var $725=(($724)|0);
      var $726=HEAP32[(($725)>>2)];
      var $727=(($726)|0)!=0;
      if ($727) { label = 179; break; } else { label = 180; break; }
    case 179: 
      label = 181; break;
    case 180: 
      var $730=$vp;
      var $731=(($730+4)|0);
      $vp=$731;
      var $732=$vsize;
      var $733=((($732)-(1))|0);
      $vsize=$733;
      label = 159; break;
    case 181: 
      label = 182; break;
    case 182: 
      var $736=$usize;
      var $737=(($736)|0)==0;
      if ($737) { label = 183; break; } else { label = 201; break; }
    case 183: 
      label = 184; break;
    case 184: 
      label = 185; break;
    case 185: 
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      label = 188; break;
    case 188: 
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      var $747=$vsize;
      var $748=(($747)|0)!=0;
      if ($748) { label = 192; break; } else { label = 198; break; }
    case 192: 
      var $750=$vsize;
      var $751=((($750)-(1))|0);
      $__n18=$751;
      var $752=$rp;
      $__dst19=$752;
      var $753=$vp;
      $__src20=$753;
      var $754=$__src20;
      var $755=(($754+4)|0);
      $__src20=$755;
      var $756=HEAP32[(($754)>>2)];
      $__x21=$756;
      var $757=$__n18;
      var $758=(($757)|0)!=0;
      if ($758) { label = 193; break; } else { label = 197; break; }
    case 193: 
      label = 194; break;
    case 194: 
      var $761=$__x21;
      var $762=$__dst19;
      var $763=(($762+4)|0);
      $__dst19=$763;
      HEAP32[(($762)>>2)]=$761;
      var $764=$__src20;
      var $765=(($764+4)|0);
      $__src20=$765;
      var $766=HEAP32[(($764)>>2)];
      $__x21=$766;
      label = 195; break;
    case 195: 
      var $768=$__n18;
      var $769=((($768)-(1))|0);
      $__n18=$769;
      var $770=(($769)|0)!=0;
      if ($770) { label = 194; break; } else { label = 196; break; }
    case 196: 
      label = 197; break;
    case 197: 
      var $773=$__x21;
      var $774=$__dst19;
      var $775=(($774+4)|0);
      $__dst19=$775;
      HEAP32[(($774)>>2)]=$773;
      label = 198; break;
    case 198: 
      label = 199; break;
    case 199: 
      label = 200; break;
    case 200: 
      var $779=$vsize;
      $rsize=$779;
      var $780=$negate;
      var $781=$780 ^ 1;
      $negate=$781;
      label = 291; break;
    case 201: 
      var $783=$up;
      var $784=(($783)|0);
      var $785=HEAP32[(($784)>>2)];
      var $786=(($785)|0)!=0;
      if ($786) { label = 202; break; } else { label = 203; break; }
    case 202: 
      label = 204; break;
    case 203: 
      var $789=$up;
      var $790=(($789+4)|0);
      $up=$790;
      var $791=$usize;
      var $792=((($791)-(1))|0);
      $usize=$792;
      label = 182; break;
    case 204: 
      var $794=$usize;
      var $795=$ediff;
      var $796=(($794)|0) > (($795)|0);
      if ($796) { label = 205; break; } else { label = 257; break; }
    case 205: 
      var $798=$ediff;
      var $799=(($798)|0)==0;
      if ($799) { label = 206; break; } else { label = 231; break; }
    case 206: 
      var $801=$usize;
      var $802=$vsize;
      var $803=(($801)|0) >= (($802)|0);
      if ($803) { label = 207; break; } else { label = 225; break; }
    case 207: 
      var $805=$usize;
      var $806=$vsize;
      var $807=((($805)-($806))|0);
      $size22=$807;
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      label = 210; break;
    case 210: 
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      label = 214; break;
    case 214: 
      label = 215; break;
    case 215: 
      var $816=$size22;
      var $817=(($816)|0)!=0;
      if ($817) { label = 216; break; } else { label = 222; break; }
    case 216: 
      var $819=$size22;
      var $820=((($819)-(1))|0);
      $__n23=$820;
      var $821=$tp;
      $__dst24=$821;
      var $822=$up;
      $__src25=$822;
      var $823=$__src25;
      var $824=(($823+4)|0);
      $__src25=$824;
      var $825=HEAP32[(($823)>>2)];
      $__x26=$825;
      var $826=$__n23;
      var $827=(($826)|0)!=0;
      if ($827) { label = 217; break; } else { label = 221; break; }
    case 217: 
      label = 218; break;
    case 218: 
      var $830=$__x26;
      var $831=$__dst24;
      var $832=(($831+4)|0);
      $__dst24=$832;
      HEAP32[(($831)>>2)]=$830;
      var $833=$__src25;
      var $834=(($833+4)|0);
      $__src25=$834;
      var $835=HEAP32[(($833)>>2)];
      $__x26=$835;
      label = 219; break;
    case 219: 
      var $837=$__n23;
      var $838=((($837)-(1))|0);
      $__n23=$838;
      var $839=(($838)|0)!=0;
      if ($839) { label = 218; break; } else { label = 220; break; }
    case 220: 
      label = 221; break;
    case 221: 
      var $842=$__x26;
      var $843=$__dst24;
      var $844=(($843+4)|0);
      $__dst24=$844;
      HEAP32[(($843)>>2)]=$842;
      label = 222; break;
    case 222: 
      label = 223; break;
    case 223: 
      label = 224; break;
    case 224: 
      var $848=$tp;
      var $849=$size22;
      var $850=(($848+($849<<2))|0);
      var $851=$up;
      var $852=$size22;
      var $853=(($851+($852<<2))|0);
      var $854=$vp;
      var $855=$vsize;
      var $856=___gmpn_sub_n($850, $853, $854, $855);
      var $857=$usize;
      $rsize=$857;
      label = 230; break;
    case 225: 
      var $859=$vsize;
      var $860=$usize;
      var $861=((($859)-($860))|0);
      $size27=$861;
      var $862=$vp;
      var $863=(($862)|0);
      var $864=HEAP32[(($863)>>2)];
      var $865=(((-$864))|0);
      var $866=$tp;
      var $867=(($866)|0);
      HEAP32[(($867)>>2)]=$865;
      $i28=1;
      label = 226; break;
    case 226: 
      var $869=$i28;
      var $870=$size27;
      var $871=(($869)|0) < (($870)|0);
      if ($871) { label = 227; break; } else { label = 229; break; }
    case 227: 
      var $873=$i28;
      var $874=$vp;
      var $875=(($874+($873<<2))|0);
      var $876=HEAP32[(($875)>>2)];
      var $877=$876 ^ -1;
      var $878=$i28;
      var $879=$tp;
      var $880=(($879+($878<<2))|0);
      HEAP32[(($880)>>2)]=$877;
      label = 228; break;
    case 228: 
      var $882=$i28;
      var $883=((($882)+(1))|0);
      $i28=$883;
      label = 226; break;
    case 229: 
      var $885=$tp;
      var $886=$size27;
      var $887=(($885+($886<<2))|0);
      var $888=$up;
      var $889=$vp;
      var $890=$size27;
      var $891=(($889+($890<<2))|0);
      var $892=$usize;
      var $893=___gmpn_sub_n($887, $888, $891, $892);
      var $894=$tp;
      var $895=$size27;
      var $896=(($894+($895<<2))|0);
      var $897=$tp;
      var $898=$size27;
      var $899=(($897+($898<<2))|0);
      var $900=$usize;
      var $901=___gmpn_sub_1($896, $899, $900, 1);
      var $902=$vsize;
      $rsize=$902;
      label = 230; break;
    case 230: 
      label = 256; break;
    case 231: 
      var $905=$vsize;
      var $906=$ediff;
      var $907=((($905)+($906))|0);
      var $908=$usize;
      var $909=(($907)|0) <= (($908)|0);
      if ($909) { label = 232; break; } else { label = 250; break; }
    case 232: 
      var $911=$usize;
      var $912=$ediff;
      var $913=((($911)-($912))|0);
      var $914=$vsize;
      var $915=((($913)-($914))|0);
      $size29=$915;
      label = 233; break;
    case 233: 
      label = 234; break;
    case 234: 
      label = 235; break;
    case 235: 
      label = 236; break;
    case 236: 
      label = 237; break;
    case 237: 
      label = 238; break;
    case 238: 
      label = 239; break;
    case 239: 
      label = 240; break;
    case 240: 
      var $924=$size29;
      var $925=(($924)|0)!=0;
      if ($925) { label = 241; break; } else { label = 247; break; }
    case 241: 
      var $927=$size29;
      var $928=((($927)-(1))|0);
      $__n30=$928;
      var $929=$tp;
      $__dst31=$929;
      var $930=$up;
      $__src32=$930;
      var $931=$__src32;
      var $932=(($931+4)|0);
      $__src32=$932;
      var $933=HEAP32[(($931)>>2)];
      $__x33=$933;
      var $934=$__n30;
      var $935=(($934)|0)!=0;
      if ($935) { label = 242; break; } else { label = 246; break; }
    case 242: 
      label = 243; break;
    case 243: 
      var $938=$__x33;
      var $939=$__dst31;
      var $940=(($939+4)|0);
      $__dst31=$940;
      HEAP32[(($939)>>2)]=$938;
      var $941=$__src32;
      var $942=(($941+4)|0);
      $__src32=$942;
      var $943=HEAP32[(($941)>>2)];
      $__x33=$943;
      label = 244; break;
    case 244: 
      var $945=$__n30;
      var $946=((($945)-(1))|0);
      $__n30=$946;
      var $947=(($946)|0)!=0;
      if ($947) { label = 243; break; } else { label = 245; break; }
    case 245: 
      label = 246; break;
    case 246: 
      var $950=$__x33;
      var $951=$__dst31;
      var $952=(($951+4)|0);
      $__dst31=$952;
      HEAP32[(($951)>>2)]=$950;
      label = 247; break;
    case 247: 
      label = 248; break;
    case 248: 
      label = 249; break;
    case 249: 
      var $956=$tp;
      var $957=$size29;
      var $958=(($956+($957<<2))|0);
      var $959=$up;
      var $960=$size29;
      var $961=(($959+($960<<2))|0);
      var $962=$usize;
      var $963=$size29;
      var $964=((($962)-($963))|0);
      var $965=$vp;
      var $966=$vsize;
      var $967=___gmpn_sub($958, $961, $964, $965, $966);
      var $968=$usize;
      $rsize=$968;
      label = 255; break;
    case 250: 
      var $970=$vsize;
      var $971=$ediff;
      var $972=((($970)+($971))|0);
      var $973=$usize;
      var $974=((($972)-($973))|0);
      $size34=$974;
      var $975=$vp;
      var $976=(($975)|0);
      var $977=HEAP32[(($976)>>2)];
      var $978=(((-$977))|0);
      var $979=$tp;
      var $980=(($979)|0);
      HEAP32[(($980)>>2)]=$978;
      $i35=1;
      label = 251; break;
    case 251: 
      var $982=$i35;
      var $983=$size34;
      var $984=(($982)|0) < (($983)|0);
      if ($984) { label = 252; break; } else { label = 254; break; }
    case 252: 
      var $986=$i35;
      var $987=$vp;
      var $988=(($987+($986<<2))|0);
      var $989=HEAP32[(($988)>>2)];
      var $990=$989 ^ -1;
      var $991=$i35;
      var $992=$tp;
      var $993=(($992+($991<<2))|0);
      HEAP32[(($993)>>2)]=$990;
      label = 253; break;
    case 253: 
      var $995=$i35;
      var $996=((($995)+(1))|0);
      $i35=$996;
      label = 251; break;
    case 254: 
      var $998=$tp;
      var $999=$size34;
      var $1000=(($998+($999<<2))|0);
      var $1001=$up;
      var $1002=$usize;
      var $1003=$vp;
      var $1004=$size34;
      var $1005=(($1003+($1004<<2))|0);
      var $1006=$usize;
      var $1007=$ediff;
      var $1008=((($1006)-($1007))|0);
      var $1009=___gmpn_sub($1000, $1001, $1002, $1005, $1008);
      var $1010=$tp;
      var $1011=$size34;
      var $1012=(($1010+($1011<<2))|0);
      var $1013=$tp;
      var $1014=$size34;
      var $1015=(($1013+($1014<<2))|0);
      var $1016=$usize;
      var $1017=___gmpn_sub_1($1012, $1015, $1016, 1);
      var $1018=$vsize;
      var $1019=$ediff;
      var $1020=((($1018)+($1019))|0);
      $rsize=$1020;
      label = 255; break;
    case 255: 
      label = 256; break;
    case 256: 
      label = 266; break;
    case 257: 
      var $1024=$vsize;
      var $1025=$ediff;
      var $1026=((($1024)+($1025))|0);
      var $1027=$usize;
      var $1028=((($1026)-($1027))|0);
      $size36=$1028;
      var $1029=$vp;
      var $1030=(($1029)|0);
      var $1031=HEAP32[(($1030)>>2)];
      var $1032=(((-$1031))|0);
      var $1033=$tp;
      var $1034=(($1033)|0);
      HEAP32[(($1034)>>2)]=$1032;
      $i37=1;
      label = 258; break;
    case 258: 
      var $1036=$i37;
      var $1037=$vsize;
      var $1038=(($1036)|0) < (($1037)|0);
      if ($1038) { label = 259; break; } else { label = 261; break; }
    case 259: 
      var $1040=$i37;
      var $1041=$vp;
      var $1042=(($1041+($1040<<2))|0);
      var $1043=HEAP32[(($1042)>>2)];
      var $1044=$1043 ^ -1;
      var $1045=$i37;
      var $1046=$tp;
      var $1047=(($1046+($1045<<2))|0);
      HEAP32[(($1047)>>2)]=$1044;
      label = 260; break;
    case 260: 
      var $1049=$i37;
      var $1050=((($1049)+(1))|0);
      $i37=$1050;
      label = 258; break;
    case 261: 
      var $1052=$vsize;
      $i37=$1052;
      label = 262; break;
    case 262: 
      var $1054=$i37;
      var $1055=$size36;
      var $1056=(($1054)|0) < (($1055)|0);
      if ($1056) { label = 263; break; } else { label = 265; break; }
    case 263: 
      var $1058=$i37;
      var $1059=$tp;
      var $1060=(($1059+($1058<<2))|0);
      HEAP32[(($1060)>>2)]=-1;
      label = 264; break;
    case 264: 
      var $1062=$i37;
      var $1063=((($1062)+(1))|0);
      $i37=$1063;
      label = 262; break;
    case 265: 
      var $1065=$tp;
      var $1066=$size36;
      var $1067=(($1065+($1066<<2))|0);
      var $1068=$up;
      var $1069=$usize;
      var $1070=___gmpn_sub_1($1067, $1068, $1069, 1);
      var $1071=$size36;
      var $1072=$usize;
      var $1073=((($1071)+($1072))|0);
      $rsize=$1073;
      label = 266; break;
    case 266: 
      label = 267; break;
    case 267: 
      label = 268; break;
    case 268: 
      var $1077=$rsize;
      var $1078=(($1077)|0)!=0;
      if ($1078) { label = 269; break; } else { var $1087 = 0;label = 270; break; }
    case 269: 
      var $1080=$rsize;
      var $1081=((($1080)-(1))|0);
      var $1082=$tp;
      var $1083=(($1082+($1081<<2))|0);
      var $1084=HEAP32[(($1083)>>2)];
      var $1085=(($1084)|0)==0;
      var $1087 = $1085;label = 270; break;
    case 270: 
      var $1087;
      if ($1087) { label = 271; break; } else { label = 272; break; }
    case 271: 
      var $1089=$rsize;
      var $1090=((($1089)-(1))|0);
      $rsize=$1090;
      var $1091=$exp;
      var $1092=((($1091)-(1))|0);
      $exp=$1092;
      label = 268; break;
    case 272: 
      label = 273; break;
    case 273: 
      label = 274; break;
    case 274: 
      label = 275; break;
    case 275: 
      label = 276; break;
    case 276: 
      label = 277; break;
    case 277: 
      label = 278; break;
    case 278: 
      label = 279; break;
    case 279: 
      label = 280; break;
    case 280: 
      var $1102=$rsize;
      var $1103=(($1102)|0)!=0;
      if ($1103) { label = 281; break; } else { label = 287; break; }
    case 281: 
      var $1105=$rsize;
      var $1106=((($1105)-(1))|0);
      $__n38=$1106;
      var $1107=$rp;
      $__dst39=$1107;
      var $1108=$tp;
      $__src40=$1108;
      var $1109=$__src40;
      var $1110=(($1109+4)|0);
      $__src40=$1110;
      var $1111=HEAP32[(($1109)>>2)];
      $__x41=$1111;
      var $1112=$__n38;
      var $1113=(($1112)|0)!=0;
      if ($1113) { label = 282; break; } else { label = 286; break; }
    case 282: 
      label = 283; break;
    case 283: 
      var $1116=$__x41;
      var $1117=$__dst39;
      var $1118=(($1117+4)|0);
      $__dst39=$1118;
      HEAP32[(($1117)>>2)]=$1116;
      var $1119=$__src40;
      var $1120=(($1119+4)|0);
      $__src40=$1120;
      var $1121=HEAP32[(($1119)>>2)];
      $__x41=$1121;
      label = 284; break;
    case 284: 
      var $1123=$__n38;
      var $1124=((($1123)-(1))|0);
      $__n38=$1124;
      var $1125=(($1124)|0)!=0;
      if ($1125) { label = 283; break; } else { label = 285; break; }
    case 285: 
      label = 286; break;
    case 286: 
      var $1128=$__x41;
      var $1129=$__dst39;
      var $1130=(($1129+4)|0);
      $__dst39=$1130;
      HEAP32[(($1129)>>2)]=$1128;
      label = 287; break;
    case 287: 
      label = 288; break;
    case 288: 
      label = 289; break;
    case 289: 
      label = 290; break;
    case 290: 
      label = 291; break;
    case 291: 
      var $1136=$negate;
      var $1137=(($1136)|0)!=0;
      if ($1137) { label = 292; break; } else { label = 293; break; }
    case 292: 
      var $1139=$rsize;
      var $1140=(((-$1139))|0);
      var $1144 = $1140;label = 294; break;
    case 293: 
      var $1142=$rsize;
      var $1144 = $1142;label = 294; break;
    case 294: 
      var $1144;
      var $1145=$1;
      var $1146=(($1145+4)|0);
      HEAP32[(($1146)>>2)]=$1144;
      var $1147=$rsize;
      var $1148=(($1147)|0)==0;
      if ($1148) { label = 295; break; } else { label = 296; break; }
    case 295: 
      $exp=0;
      label = 296; break;
    case 296: 
      var $1151=$exp;
      var $1152=$1;
      var $1153=(($1152+8)|0);
      HEAP32[(($1153)>>2)]=$1151;
      label = 297; break;
    case 297: 
      var $1155=HEAP32[(($__tmp_marker)>>2)];
      var $1156=(($1155)|0)!=0;
      if ($1156) { label = 298; break; } else { label = 299; break; }
    case 298: 
      var $1158=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($1158);
      label = 299; break;
    case 299: 
      label = 300; break;
    case 300: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_sub["X"]=1;

function ___gmpf_ui_sub($r, $u, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $vp;
      var $rp;
      var $tp;
      var $usize;
      var $vsize;
      var $rsize;
      var $prec;
      var $uexp;
      var $ediff;
      var $negate;
      var $ulimb=__stackBase__;
      var $__tmp_marker=(__stackBase__)+(4);
      var $v_negated=(__stackBase__)+(8);
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__n1;
      var $__dst2;
      var $__src3;
      var $__x4;
      var $__n5;
      var $__dst6;
      var $__src7;
      var $__x8;
      var $cmp;
      var $size;
      var $__n9;
      var $__dst10;
      var $__src11;
      var $__x12;
      var $size13;
      var $i;
      var $cmp14;
      var $size15;
      var $i16;
      var $size17;
      var $__n18;
      var $__dst19;
      var $__src20;
      var $__x21;
      var $cmp22;
      var $size23;
      var $__n24;
      var $__dst25;
      var $__src26;
      var $__x27;
      var $size28;
      var $i29;
      var $size30;
      var $i31;
      var $__n32;
      var $__dst33;
      var $__src34;
      var $__x35;
      $1=$r;
      $2=$u;
      $3=$v;
      var $4=$3;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      $vsize=$6;
      var $7=$2;
      var $8=(($7)|0)==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$1;
      var $11=$3;
      ___gmpf_neg($10, $11);
      label = 243; break;
    case 4: 
      var $13=$vsize;
      var $14=(($13)|0)==0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$1;
      var $17=$2;
      ___gmpf_set_ui($16, $17);
      label = 243; break;
    case 6: 
      var $19=$vsize;
      var $20=(($19)|0) < 0;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $22=$vsize;
      var $23=(((-$22))|0);
      var $24=(($v_negated+4)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=$3;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($v_negated+8)|0);
      HEAP32[(($28)>>2)]=$27;
      var $29=$3;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($v_negated+12)|0);
      HEAP32[(($32)>>2)]=$31;
      var $33=$1;
      var $34=$2;
      ___gmpf_add_ui($33, $v_negated, $34);
      label = 243; break;
    case 8: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $36=$2;
      HEAP32[(($ulimb)>>2)]=$36;
      var $37=$3;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=1 < (($39)|0);
      if ($40) { label = 9; break; } else { label = 13; break; }
    case 9: 
      $negate=1;
      var $42=$vsize;
      var $43=(($42)|0) >= 0;
      if ($43) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $45=$vsize;
      var $50 = $45;label = 12; break;
    case 11: 
      var $47=$vsize;
      var $48=(((-$47))|0);
      var $50 = $48;label = 12; break;
    case 12: 
      var $50;
      $usize=$50;
      $vsize=1;
      var $51=$3;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      $up=$53;
      $vp=$ulimb;
      var $54=$1;
      var $55=(($54+12)|0);
      var $56=HEAP32[(($55)>>2)];
      $rp=$56;
      var $57=$1;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)+(1))|0);
      $prec=$60;
      var $61=$3;
      var $62=(($61+8)|0);
      var $63=HEAP32[(($62)>>2)];
      $uexp=$63;
      var $64=$uexp;
      var $65=((($64)-(1))|0);
      $ediff=$65;
      label = 17; break;
    case 13: 
      $negate=0;
      $usize=1;
      var $67=$vsize;
      var $68=(($67)|0) >= 0;
      if ($68) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $70=$vsize;
      var $75 = $70;label = 16; break;
    case 15: 
      var $72=$vsize;
      var $73=(((-$72))|0);
      var $75 = $73;label = 16; break;
    case 16: 
      var $75;
      $vsize=$75;
      $up=$ulimb;
      var $76=$3;
      var $77=(($76+12)|0);
      var $78=HEAP32[(($77)>>2)];
      $vp=$78;
      var $79=$1;
      var $80=(($79+12)|0);
      var $81=HEAP32[(($80)>>2)];
      $rp=$81;
      var $82=$1;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      $prec=$84;
      $uexp=1;
      var $85=$3;
      var $86=(($85+8)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(((1)-($87))|0);
      $ediff=$88;
      label = 17; break;
    case 17: 
      var $90=$ediff;
      var $91=(($90)|0)==0;
      if ($91) { label = 18; break; } else { label = 43; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $94=$usize;
      var $95=((($94)-(1))|0);
      $usize=$95;
      var $96=$vsize;
      var $97=((($96)-(1))|0);
      $vsize=$97;
      var $98=$usize;
      var $99=$up;
      var $100=(($99+($98<<2))|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$vsize;
      var $103=$vp;
      var $104=(($103+($102<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($101)|0)!=(($105)|0);
      if ($106) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 26; break;
    case 21: 
      var $109=$uexp;
      var $110=((($109)-(1))|0);
      $uexp=$110;
      var $111=$usize;
      var $112=(($111)|0)==0;
      if ($112) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 36; break;
    case 23: 
      var $115=$vsize;
      var $116=(($115)|0)==0;
      if ($116) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 28; break;
    case 25: 
      label = 19; break;
    case 26: 
      var $120=$usize;
      var $121=((($120)+(1))|0);
      $usize=$121;
      var $122=$vsize;
      var $123=((($122)+(1))|0);
      $vsize=$123;
      var $124=$vsize;
      var $125=(($124)|0)==0;
      if ($125) { label = 27; break; } else { label = 34; break; }
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $129=$usize;
      var $130=(($129)|0)!=0;
      if ($130) { label = 30; break; } else { var $139 = 0;label = 31; break; }
    case 30: 
      var $132=$usize;
      var $133=((($132)-(1))|0);
      var $134=$up;
      var $135=(($134+($133<<2))|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136)|0)==0;
      var $139 = $137;label = 31; break;
    case 31: 
      var $139;
      if ($139) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $141=$usize;
      var $142=((($141)-(1))|0);
      $usize=$142;
      var $143=$uexp;
      var $144=((($143)-(1))|0);
      $uexp=$144;
      label = 29; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $147=$usize;
      var $148=(($147)|0)==0;
      if ($148) { label = 35; break; } else { label = 42; break; }
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $152=$vsize;
      var $153=(($152)|0)!=0;
      if ($153) { label = 38; break; } else { var $162 = 0;label = 39; break; }
    case 38: 
      var $155=$vsize;
      var $156=((($155)-(1))|0);
      var $157=$vp;
      var $158=(($157+($156<<2))|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=(($159)|0)==0;
      var $162 = $160;label = 39; break;
    case 39: 
      var $162;
      if ($162) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $164=$vsize;
      var $165=((($164)-(1))|0);
      $vsize=$165;
      var $166=$uexp;
      var $167=((($166)-(1))|0);
      $uexp=$167;
      label = 37; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $171=$usize;
      var $172=$prec;
      var $173=(($171)|0) > (($172)|0);
      if ($173) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $175=$usize;
      var $176=$prec;
      var $177=((($175)-($176))|0);
      var $178=$up;
      var $179=(($178+($177<<2))|0);
      $up=$179;
      var $180=$prec;
      $usize=$180;
      label = 45; break;
    case 45: 
      var $182=$vsize;
      var $183=$ediff;
      var $184=((($182)+($183))|0);
      var $185=$prec;
      var $186=(($184)|0) > (($185)|0);
      if ($186) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $188=$vsize;
      var $189=$ediff;
      var $190=((($188)+($189))|0);
      var $191=$prec;
      var $192=((($190)-($191))|0);
      var $193=$vp;
      var $194=(($193+($192<<2))|0);
      $vp=$194;
      var $195=$prec;
      var $196=$ediff;
      var $197=((($195)-($196))|0);
      $vsize=$197;
      label = 47; break;
    case 47: 
      var $199=$prec;
      var $200=($199<<2);
      var $201=(($200)>>>0) < 65536;
      if ($201) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $203=$prec;
      var $204=($203<<2);
      var $205=STACKTOP;STACKTOP = (STACKTOP + $204)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $211 = $205;label = 50; break;
    case 49: 
      var $207=$prec;
      var $208=($207<<2);
      var $209=___gmp_tmp_reentrant_alloc($__tmp_marker, $208);
      var $211 = $209;label = 50; break;
    case 50: 
      var $211;
      var $212=$211;
      $tp=$212;
      var $213=$ediff;
      var $214=$prec;
      var $215=(($213)|0) >= (($214)|0);
      if ($215) { label = 51; break; } else { label = 71; break; }
    case 51: 
      var $217=$tp;
      var $218=$up;
      var $219=(($217)|0)!=(($218)|0);
      if ($219) { label = 52; break; } else { label = 70; break; }
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $229=$usize;
      var $230=(($229)|0)!=0;
      if ($230) { label = 61; break; } else { label = 67; break; }
    case 61: 
      var $232=$usize;
      var $233=((($232)-(1))|0);
      $__n=$233;
      var $234=$rp;
      $__dst=$234;
      var $235=$up;
      $__src=$235;
      var $236=$__src;
      var $237=(($236+4)|0);
      $__src=$237;
      var $238=HEAP32[(($236)>>2)];
      $__x=$238;
      var $239=$__n;
      var $240=(($239)|0)!=0;
      if ($240) { label = 62; break; } else { label = 66; break; }
    case 62: 
      label = 63; break;
    case 63: 
      var $243=$__x;
      var $244=$__dst;
      var $245=(($244+4)|0);
      $__dst=$245;
      HEAP32[(($244)>>2)]=$243;
      var $246=$__src;
      var $247=(($246+4)|0);
      $__src=$247;
      var $248=HEAP32[(($246)>>2)];
      $__x=$248;
      label = 64; break;
    case 64: 
      var $250=$__n;
      var $251=((($250)-(1))|0);
      $__n=$251;
      var $252=(($251)|0)!=0;
      if ($252) { label = 63; break; } else { label = 65; break; }
    case 65: 
      label = 66; break;
    case 66: 
      var $255=$__x;
      var $256=$__dst;
      var $257=(($256+4)|0);
      $__dst=$257;
      HEAP32[(($256)>>2)]=$255;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $262=$usize;
      $rsize=$262;
      label = 235; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $265=$vsize;
      var $266=(($265)|0)==0;
      if ($266) { label = 73; break; } else { label = 91; break; }
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $276=$usize;
      var $277=(($276)|0)!=0;
      if ($277) { label = 82; break; } else { label = 88; break; }
    case 82: 
      var $279=$usize;
      var $280=((($279)-(1))|0);
      $__n1=$280;
      var $281=$rp;
      $__dst2=$281;
      var $282=$up;
      $__src3=$282;
      var $283=$__src3;
      var $284=(($283+4)|0);
      $__src3=$284;
      var $285=HEAP32[(($283)>>2)];
      $__x4=$285;
      var $286=$__n1;
      var $287=(($286)|0)!=0;
      if ($287) { label = 83; break; } else { label = 87; break; }
    case 83: 
      label = 84; break;
    case 84: 
      var $290=$__x4;
      var $291=$__dst2;
      var $292=(($291+4)|0);
      $__dst2=$292;
      HEAP32[(($291)>>2)]=$290;
      var $293=$__src3;
      var $294=(($293+4)|0);
      $__src3=$294;
      var $295=HEAP32[(($293)>>2)];
      $__x4=$295;
      label = 85; break;
    case 85: 
      var $297=$__n1;
      var $298=((($297)-(1))|0);
      $__n1=$298;
      var $299=(($298)|0)!=0;
      if ($299) { label = 84; break; } else { label = 86; break; }
    case 86: 
      label = 87; break;
    case 87: 
      var $302=$__x4;
      var $303=$__dst2;
      var $304=(($303+4)|0);
      $__dst2=$304;
      HEAP32[(($303)>>2)]=$302;
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $308=$usize;
      $rsize=$308;
      label = 236; break;
    case 91: 
      var $310=$vp;
      var $311=(($310)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($312)|0)!=0;
      if ($313) { label = 92; break; } else { label = 93; break; }
    case 92: 
      label = 94; break;
    case 93: 
      var $316=$vp;
      var $317=(($316+4)|0);
      $vp=$317;
      var $318=$vsize;
      var $319=((($318)-(1))|0);
      $vsize=$319;
      label = 72; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $322=$usize;
      var $323=(($322)|0)==0;
      if ($323) { label = 96; break; } else { label = 114; break; }
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $333=$vsize;
      var $334=(($333)|0)!=0;
      if ($334) { label = 105; break; } else { label = 111; break; }
    case 105: 
      var $336=$vsize;
      var $337=((($336)-(1))|0);
      $__n5=$337;
      var $338=$rp;
      $__dst6=$338;
      var $339=$vp;
      $__src7=$339;
      var $340=$__src7;
      var $341=(($340+4)|0);
      $__src7=$341;
      var $342=HEAP32[(($340)>>2)];
      $__x8=$342;
      var $343=$__n5;
      var $344=(($343)|0)!=0;
      if ($344) { label = 106; break; } else { label = 110; break; }
    case 106: 
      label = 107; break;
    case 107: 
      var $347=$__x8;
      var $348=$__dst6;
      var $349=(($348+4)|0);
      $__dst6=$349;
      HEAP32[(($348)>>2)]=$347;
      var $350=$__src7;
      var $351=(($350+4)|0);
      $__src7=$351;
      var $352=HEAP32[(($350)>>2)];
      $__x8=$352;
      label = 108; break;
    case 108: 
      var $354=$__n5;
      var $355=((($354)-(1))|0);
      $__n5=$355;
      var $356=(($355)|0)!=0;
      if ($356) { label = 107; break; } else { label = 109; break; }
    case 109: 
      label = 110; break;
    case 110: 
      var $359=$__x8;
      var $360=$__dst6;
      var $361=(($360+4)|0);
      $__dst6=$361;
      HEAP32[(($360)>>2)]=$359;
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      var $365=$vsize;
      $rsize=$365;
      var $366=$negate;
      var $367=$366 ^ 1;
      $negate=$367;
      label = 236; break;
    case 114: 
      var $369=$up;
      var $370=(($369)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=(($371)|0)!=0;
      if ($372) { label = 115; break; } else { label = 116; break; }
    case 115: 
      label = 117; break;
    case 116: 
      var $375=$up;
      var $376=(($375+4)|0);
      $up=$376;
      var $377=$usize;
      var $378=((($377)-(1))|0);
      $usize=$378;
      label = 95; break;
    case 117: 
      var $380=$usize;
      var $381=$ediff;
      var $382=(($380)|0) > (($381)|0);
      if ($382) { label = 118; break; } else { label = 203; break; }
    case 118: 
      var $384=$ediff;
      var $385=(($384)|0)==0;
      if ($385) { label = 119; break; } else { label = 177; break; }
    case 119: 
      var $387=$usize;
      var $388=$vsize;
      var $389=(($387)|0) > (($388)|0);
      if ($389) { label = 120; break; } else { label = 145; break; }
    case 120: 
      var $391=$up;
      var $392=$usize;
      var $393=(($391+($392<<2))|0);
      var $394=$vsize;
      var $395=(((-$394))|0);
      var $396=(($393+($395<<2))|0);
      var $397=$vp;
      var $398=$vsize;
      var $399=___gmpn_cmp($396, $397, $398);
      $cmp=$399;
      var $400=$cmp;
      var $401=(($400)|0) >= 0;
      if ($401) { label = 121; break; } else { label = 139; break; }
    case 121: 
      var $403=$usize;
      var $404=$vsize;
      var $405=((($403)-($404))|0);
      $size=$405;
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $414=$size;
      var $415=(($414)|0)!=0;
      if ($415) { label = 130; break; } else { label = 136; break; }
    case 130: 
      var $417=$size;
      var $418=((($417)-(1))|0);
      $__n9=$418;
      var $419=$tp;
      $__dst10=$419;
      var $420=$up;
      $__src11=$420;
      var $421=$__src11;
      var $422=(($421+4)|0);
      $__src11=$422;
      var $423=HEAP32[(($421)>>2)];
      $__x12=$423;
      var $424=$__n9;
      var $425=(($424)|0)!=0;
      if ($425) { label = 131; break; } else { label = 135; break; }
    case 131: 
      label = 132; break;
    case 132: 
      var $428=$__x12;
      var $429=$__dst10;
      var $430=(($429+4)|0);
      $__dst10=$430;
      HEAP32[(($429)>>2)]=$428;
      var $431=$__src11;
      var $432=(($431+4)|0);
      $__src11=$432;
      var $433=HEAP32[(($431)>>2)];
      $__x12=$433;
      label = 133; break;
    case 133: 
      var $435=$__n9;
      var $436=((($435)-(1))|0);
      $__n9=$436;
      var $437=(($436)|0)!=0;
      if ($437) { label = 132; break; } else { label = 134; break; }
    case 134: 
      label = 135; break;
    case 135: 
      var $440=$__x12;
      var $441=$__dst10;
      var $442=(($441+4)|0);
      $__dst10=$442;
      HEAP32[(($441)>>2)]=$440;
      label = 136; break;
    case 136: 
      label = 137; break;
    case 137: 
      label = 138; break;
    case 138: 
      var $446=$tp;
      var $447=$size;
      var $448=(($446+($447<<2))|0);
      var $449=$up;
      var $450=$size;
      var $451=(($449+($450<<2))|0);
      var $452=$vp;
      var $453=$vsize;
      var $454=___gmpn_sub_n($448, $451, $452, $453);
      var $455=$usize;
      $rsize=$455;
      label = 144; break;
    case 139: 
      var $457=$usize;
      var $458=$vsize;
      var $459=((($457)-($458))|0);
      $size13=$459;
      var $460=$up;
      var $461=(($460)|0);
      var $462=HEAP32[(($461)>>2)];
      var $463=(((-$462))|0);
      var $464=$tp;
      var $465=(($464)|0);
      HEAP32[(($465)>>2)]=$463;
      $i=1;
      label = 140; break;
    case 140: 
      var $467=$i;
      var $468=$size13;
      var $469=(($467)|0) < (($468)|0);
      if ($469) { label = 141; break; } else { label = 143; break; }
    case 141: 
      var $471=$i;
      var $472=$up;
      var $473=(($472+($471<<2))|0);
      var $474=HEAP32[(($473)>>2)];
      var $475=$474 ^ -1;
      var $476=$i;
      var $477=$tp;
      var $478=(($477+($476<<2))|0);
      HEAP32[(($478)>>2)]=$475;
      label = 142; break;
    case 142: 
      var $480=$i;
      var $481=((($480)+(1))|0);
      $i=$481;
      label = 140; break;
    case 143: 
      var $483=$tp;
      var $484=$size13;
      var $485=(($483+($484<<2))|0);
      var $486=$vp;
      var $487=$up;
      var $488=$size13;
      var $489=(($487+($488<<2))|0);
      var $490=$vsize;
      var $491=___gmpn_sub_n($485, $486, $489, $490);
      var $492=$tp;
      var $493=$size13;
      var $494=(($492+($493<<2))|0);
      var $495=$tp;
      var $496=$size13;
      var $497=(($495+($496<<2))|0);
      var $498=$vsize;
      var $499=___gmpn_sub_1($494, $497, $498, 1);
      var $500=$negate;
      var $501=$500 ^ 1;
      $negate=$501;
      var $502=$usize;
      $rsize=$502;
      label = 144; break;
    case 144: 
      label = 176; break;
    case 145: 
      var $505=$usize;
      var $506=$vsize;
      var $507=(($505)|0) < (($506)|0);
      if ($507) { label = 146; break; } else { label = 171; break; }
    case 146: 
      var $509=$up;
      var $510=$vp;
      var $511=$vsize;
      var $512=(($510+($511<<2))|0);
      var $513=$usize;
      var $514=(((-$513))|0);
      var $515=(($512+($514<<2))|0);
      var $516=$usize;
      var $517=___gmpn_cmp($509, $515, $516);
      $cmp14=$517;
      var $518=$cmp14;
      var $519=(($518)|0) > 0;
      if ($519) { label = 147; break; } else { label = 152; break; }
    case 147: 
      var $521=$vsize;
      var $522=$usize;
      var $523=((($521)-($522))|0);
      $size15=$523;
      var $524=$vp;
      var $525=(($524)|0);
      var $526=HEAP32[(($525)>>2)];
      var $527=(((-$526))|0);
      var $528=$tp;
      var $529=(($528)|0);
      HEAP32[(($529)>>2)]=$527;
      $i16=1;
      label = 148; break;
    case 148: 
      var $531=$i16;
      var $532=$size15;
      var $533=(($531)|0) < (($532)|0);
      if ($533) { label = 149; break; } else { label = 151; break; }
    case 149: 
      var $535=$i16;
      var $536=$vp;
      var $537=(($536+($535<<2))|0);
      var $538=HEAP32[(($537)>>2)];
      var $539=$538 ^ -1;
      var $540=$i16;
      var $541=$tp;
      var $542=(($541+($540<<2))|0);
      HEAP32[(($542)>>2)]=$539;
      label = 150; break;
    case 150: 
      var $544=$i16;
      var $545=((($544)+(1))|0);
      $i16=$545;
      label = 148; break;
    case 151: 
      var $547=$tp;
      var $548=$size15;
      var $549=(($547+($548<<2))|0);
      var $550=$up;
      var $551=$vp;
      var $552=$size15;
      var $553=(($551+($552<<2))|0);
      var $554=$usize;
      var $555=___gmpn_sub_n($549, $550, $553, $554);
      var $556=$tp;
      var $557=$size15;
      var $558=(($556+($557<<2))|0);
      var $559=$tp;
      var $560=$size15;
      var $561=(($559+($560<<2))|0);
      var $562=$usize;
      var $563=___gmpn_sub_1($558, $561, $562, 1);
      var $564=$vsize;
      $rsize=$564;
      label = 170; break;
    case 152: 
      var $566=$vsize;
      var $567=$usize;
      var $568=((($566)-($567))|0);
      $size17=$568;
      label = 153; break;
    case 153: 
      label = 154; break;
    case 154: 
      label = 155; break;
    case 155: 
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      var $577=$size17;
      var $578=(($577)|0)!=0;
      if ($578) { label = 161; break; } else { label = 167; break; }
    case 161: 
      var $580=$size17;
      var $581=((($580)-(1))|0);
      $__n18=$581;
      var $582=$tp;
      $__dst19=$582;
      var $583=$vp;
      $__src20=$583;
      var $584=$__src20;
      var $585=(($584+4)|0);
      $__src20=$585;
      var $586=HEAP32[(($584)>>2)];
      $__x21=$586;
      var $587=$__n18;
      var $588=(($587)|0)!=0;
      if ($588) { label = 162; break; } else { label = 166; break; }
    case 162: 
      label = 163; break;
    case 163: 
      var $591=$__x21;
      var $592=$__dst19;
      var $593=(($592+4)|0);
      $__dst19=$593;
      HEAP32[(($592)>>2)]=$591;
      var $594=$__src20;
      var $595=(($594+4)|0);
      $__src20=$595;
      var $596=HEAP32[(($594)>>2)];
      $__x21=$596;
      label = 164; break;
    case 164: 
      var $598=$__n18;
      var $599=((($598)-(1))|0);
      $__n18=$599;
      var $600=(($599)|0)!=0;
      if ($600) { label = 163; break; } else { label = 165; break; }
    case 165: 
      label = 166; break;
    case 166: 
      var $603=$__x21;
      var $604=$__dst19;
      var $605=(($604+4)|0);
      $__dst19=$605;
      HEAP32[(($604)>>2)]=$603;
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $609=$tp;
      var $610=$size17;
      var $611=(($609+($610<<2))|0);
      var $612=$vp;
      var $613=$size17;
      var $614=(($612+($613<<2))|0);
      var $615=$up;
      var $616=$usize;
      var $617=___gmpn_sub_n($611, $614, $615, $616);
      var $618=$negate;
      var $619=$618 ^ 1;
      $negate=$619;
      var $620=$vsize;
      $rsize=$620;
      label = 170; break;
    case 170: 
      label = 175; break;
    case 171: 
      var $623=$up;
      var $624=$vp;
      var $625=$vsize;
      var $626=(($624+($625<<2))|0);
      var $627=$usize;
      var $628=(((-$627))|0);
      var $629=(($626+($628<<2))|0);
      var $630=$usize;
      var $631=___gmpn_cmp($623, $629, $630);
      $cmp22=$631;
      var $632=$cmp22;
      var $633=(($632)|0) > 0;
      if ($633) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $635=$tp;
      var $636=$up;
      var $637=$vp;
      var $638=$usize;
      var $639=___gmpn_sub_n($635, $636, $637, $638);
      var $640=$usize;
      $rsize=$640;
      label = 174; break;
    case 173: 
      var $642=$tp;
      var $643=$vp;
      var $644=$up;
      var $645=$usize;
      var $646=___gmpn_sub_n($642, $643, $644, $645);
      var $647=$negate;
      var $648=$647 ^ 1;
      $negate=$648;
      var $649=$usize;
      $rsize=$649;
      label = 174; break;
    case 174: 
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      label = 202; break;
    case 177: 
      var $654=$vsize;
      var $655=$ediff;
      var $656=((($654)+($655))|0);
      var $657=$usize;
      var $658=(($656)|0) <= (($657)|0);
      if ($658) { label = 178; break; } else { label = 196; break; }
    case 178: 
      var $660=$usize;
      var $661=$ediff;
      var $662=((($660)-($661))|0);
      var $663=$vsize;
      var $664=((($662)-($663))|0);
      $size23=$664;
      label = 179; break;
    case 179: 
      label = 180; break;
    case 180: 
      label = 181; break;
    case 181: 
      label = 182; break;
    case 182: 
      label = 183; break;
    case 183: 
      label = 184; break;
    case 184: 
      label = 185; break;
    case 185: 
      label = 186; break;
    case 186: 
      var $673=$size23;
      var $674=(($673)|0)!=0;
      if ($674) { label = 187; break; } else { label = 193; break; }
    case 187: 
      var $676=$size23;
      var $677=((($676)-(1))|0);
      $__n24=$677;
      var $678=$tp;
      $__dst25=$678;
      var $679=$up;
      $__src26=$679;
      var $680=$__src26;
      var $681=(($680+4)|0);
      $__src26=$681;
      var $682=HEAP32[(($680)>>2)];
      $__x27=$682;
      var $683=$__n24;
      var $684=(($683)|0)!=0;
      if ($684) { label = 188; break; } else { label = 192; break; }
    case 188: 
      label = 189; break;
    case 189: 
      var $687=$__x27;
      var $688=$__dst25;
      var $689=(($688+4)|0);
      $__dst25=$689;
      HEAP32[(($688)>>2)]=$687;
      var $690=$__src26;
      var $691=(($690+4)|0);
      $__src26=$691;
      var $692=HEAP32[(($690)>>2)];
      $__x27=$692;
      label = 190; break;
    case 190: 
      var $694=$__n24;
      var $695=((($694)-(1))|0);
      $__n24=$695;
      var $696=(($695)|0)!=0;
      if ($696) { label = 189; break; } else { label = 191; break; }
    case 191: 
      label = 192; break;
    case 192: 
      var $699=$__x27;
      var $700=$__dst25;
      var $701=(($700+4)|0);
      $__dst25=$701;
      HEAP32[(($700)>>2)]=$699;
      label = 193; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      var $705=$tp;
      var $706=$size23;
      var $707=(($705+($706<<2))|0);
      var $708=$up;
      var $709=$size23;
      var $710=(($708+($709<<2))|0);
      var $711=$usize;
      var $712=$size23;
      var $713=((($711)-($712))|0);
      var $714=$vp;
      var $715=$vsize;
      var $716=___gmpn_sub($707, $710, $713, $714, $715);
      var $717=$usize;
      $rsize=$717;
      label = 201; break;
    case 196: 
      var $719=$vsize;
      var $720=$ediff;
      var $721=((($719)+($720))|0);
      var $722=$usize;
      var $723=((($721)-($722))|0);
      $size28=$723;
      var $724=$vp;
      var $725=(($724)|0);
      var $726=HEAP32[(($725)>>2)];
      var $727=(((-$726))|0);
      var $728=$tp;
      var $729=(($728)|0);
      HEAP32[(($729)>>2)]=$727;
      $i29=1;
      label = 197; break;
    case 197: 
      var $731=$i29;
      var $732=$size28;
      var $733=(($731)|0) < (($732)|0);
      if ($733) { label = 198; break; } else { label = 200; break; }
    case 198: 
      var $735=$i29;
      var $736=$vp;
      var $737=(($736+($735<<2))|0);
      var $738=HEAP32[(($737)>>2)];
      var $739=$738 ^ -1;
      var $740=$i29;
      var $741=$tp;
      var $742=(($741+($740<<2))|0);
      HEAP32[(($742)>>2)]=$739;
      label = 199; break;
    case 199: 
      var $744=$i29;
      var $745=((($744)+(1))|0);
      $i29=$745;
      label = 197; break;
    case 200: 
      var $747=$tp;
      var $748=$size28;
      var $749=(($747+($748<<2))|0);
      var $750=$up;
      var $751=$usize;
      var $752=$vp;
      var $753=$size28;
      var $754=(($752+($753<<2))|0);
      var $755=$usize;
      var $756=$ediff;
      var $757=((($755)-($756))|0);
      var $758=___gmpn_sub($749, $750, $751, $754, $757);
      var $759=$tp;
      var $760=$size28;
      var $761=(($759+($760<<2))|0);
      var $762=$tp;
      var $763=$size28;
      var $764=(($762+($763<<2))|0);
      var $765=$usize;
      var $766=___gmpn_sub_1($761, $764, $765, 1);
      var $767=$vsize;
      var $768=$ediff;
      var $769=((($767)+($768))|0);
      $rsize=$769;
      label = 201; break;
    case 201: 
      label = 202; break;
    case 202: 
      label = 212; break;
    case 203: 
      var $773=$vsize;
      var $774=$ediff;
      var $775=((($773)+($774))|0);
      var $776=$usize;
      var $777=((($775)-($776))|0);
      $size30=$777;
      var $778=$vp;
      var $779=(($778)|0);
      var $780=HEAP32[(($779)>>2)];
      var $781=(((-$780))|0);
      var $782=$tp;
      var $783=(($782)|0);
      HEAP32[(($783)>>2)]=$781;
      $i31=1;
      label = 204; break;
    case 204: 
      var $785=$i31;
      var $786=$vsize;
      var $787=(($785)|0) < (($786)|0);
      if ($787) { label = 205; break; } else { label = 207; break; }
    case 205: 
      var $789=$i31;
      var $790=$vp;
      var $791=(($790+($789<<2))|0);
      var $792=HEAP32[(($791)>>2)];
      var $793=$792 ^ -1;
      var $794=$i31;
      var $795=$tp;
      var $796=(($795+($794<<2))|0);
      HEAP32[(($796)>>2)]=$793;
      label = 206; break;
    case 206: 
      var $798=$i31;
      var $799=((($798)+(1))|0);
      $i31=$799;
      label = 204; break;
    case 207: 
      var $801=$vsize;
      $i31=$801;
      label = 208; break;
    case 208: 
      var $803=$i31;
      var $804=$size30;
      var $805=(($803)|0) < (($804)|0);
      if ($805) { label = 209; break; } else { label = 211; break; }
    case 209: 
      var $807=$i31;
      var $808=$tp;
      var $809=(($808+($807<<2))|0);
      HEAP32[(($809)>>2)]=-1;
      label = 210; break;
    case 210: 
      var $811=$i31;
      var $812=((($811)+(1))|0);
      $i31=$812;
      label = 208; break;
    case 211: 
      var $814=$tp;
      var $815=$size30;
      var $816=(($814+($815<<2))|0);
      var $817=$up;
      var $818=$usize;
      var $819=___gmpn_sub_1($816, $817, $818, 1);
      var $820=$size30;
      var $821=$usize;
      var $822=((($820)+($821))|0);
      $rsize=$822;
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      var $825=$rsize;
      var $826=(($825)|0)!=0;
      if ($826) { label = 214; break; } else { var $835 = 0;label = 215; break; }
    case 214: 
      var $828=$rsize;
      var $829=((($828)-(1))|0);
      var $830=$tp;
      var $831=(($830+($829<<2))|0);
      var $832=HEAP32[(($831)>>2)];
      var $833=(($832)|0)==0;
      var $835 = $833;label = 215; break;
    case 215: 
      var $835;
      if ($835) { label = 216; break; } else { label = 217; break; }
    case 216: 
      var $837=$rsize;
      var $838=((($837)-(1))|0);
      $rsize=$838;
      var $839=$uexp;
      var $840=((($839)-(1))|0);
      $uexp=$840;
      label = 213; break;
    case 217: 
      label = 218; break;
    case 218: 
      label = 219; break;
    case 219: 
      label = 220; break;
    case 220: 
      label = 221; break;
    case 221: 
      label = 222; break;
    case 222: 
      label = 223; break;
    case 223: 
      label = 224; break;
    case 224: 
      label = 225; break;
    case 225: 
      var $850=$rsize;
      var $851=(($850)|0)!=0;
      if ($851) { label = 226; break; } else { label = 232; break; }
    case 226: 
      var $853=$rsize;
      var $854=((($853)-(1))|0);
      $__n32=$854;
      var $855=$rp;
      $__dst33=$855;
      var $856=$tp;
      $__src34=$856;
      var $857=$__src34;
      var $858=(($857+4)|0);
      $__src34=$858;
      var $859=HEAP32[(($857)>>2)];
      $__x35=$859;
      var $860=$__n32;
      var $861=(($860)|0)!=0;
      if ($861) { label = 227; break; } else { label = 231; break; }
    case 227: 
      label = 228; break;
    case 228: 
      var $864=$__x35;
      var $865=$__dst33;
      var $866=(($865+4)|0);
      $__dst33=$866;
      HEAP32[(($865)>>2)]=$864;
      var $867=$__src34;
      var $868=(($867+4)|0);
      $__src34=$868;
      var $869=HEAP32[(($867)>>2)];
      $__x35=$869;
      label = 229; break;
    case 229: 
      var $871=$__n32;
      var $872=((($871)-(1))|0);
      $__n32=$872;
      var $873=(($872)|0)!=0;
      if ($873) { label = 228; break; } else { label = 230; break; }
    case 230: 
      label = 231; break;
    case 231: 
      var $876=$__x35;
      var $877=$__dst33;
      var $878=(($877+4)|0);
      $__dst33=$878;
      HEAP32[(($877)>>2)]=$876;
      label = 232; break;
    case 232: 
      label = 233; break;
    case 233: 
      label = 234; break;
    case 234: 
      label = 235; break;
    case 235: 
      label = 236; break;
    case 236: 
      var $884=$negate;
      var $885=(($884)|0)!=0;
      if ($885) { label = 237; break; } else { label = 238; break; }
    case 237: 
      var $887=$rsize;
      var $888=(((-$887))|0);
      var $892 = $888;label = 239; break;
    case 238: 
      var $890=$rsize;
      var $892 = $890;label = 239; break;
    case 239: 
      var $892;
      var $893=$1;
      var $894=(($893+4)|0);
      HEAP32[(($894)>>2)]=$892;
      var $895=$uexp;
      var $896=$1;
      var $897=(($896+8)|0);
      HEAP32[(($897)>>2)]=$895;
      label = 240; break;
    case 240: 
      var $899=HEAP32[(($__tmp_marker)>>2)];
      var $900=(($899)|0)!=0;
      if ($900) { label = 241; break; } else { label = 242; break; }
    case 241: 
      var $902=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($902);
      label = 242; break;
    case 242: 
      label = 243; break;
    case 243: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_ui_sub["X"]=1;

function ___gmpn_add_1($__gmp_dst, $__gmp_src, $__gmp_size, $__gmp_n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $__gmp_c;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_r;
      var $__gmp_j;
      var $__gmp_j1;
      $1=$__gmp_dst;
      $2=$__gmp_src;
      $3=$__gmp_size;
      $4=$__gmp_n;
      label = 3; break;
    case 3: 
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $__gmp_x=$8;
      var $9=$__gmp_x;
      var $10=$4;
      var $11=((($9)+($10))|0);
      $__gmp_r=$11;
      var $12=$__gmp_r;
      var $13=$1;
      var $14=(($13)|0);
      HEAP32[(($14)>>2)]=$12;
      var $15=$__gmp_r;
      var $16=$4;
      var $17=(($15)>>>0) < (($16)>>>0);
      if ($17) { label = 4; break; } else { label = 18; break; }
    case 4: 
      $__gmp_c=1;
      $__gmp_i=1;
      label = 5; break;
    case 5: 
      var $20=$__gmp_i;
      var $21=$3;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { label = 6; break; } else { label = 17; break; }
    case 6: 
      var $24=$__gmp_i;
      var $25=$2;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $__gmp_x=$27;
      var $28=$__gmp_x;
      var $29=((($28)+(1))|0);
      $__gmp_r=$29;
      var $30=$__gmp_r;
      var $31=$__gmp_i;
      var $32=$1;
      var $33=(($32+($31<<2))|0);
      HEAP32[(($33)>>2)]=$30;
      var $34=$__gmp_i;
      var $35=((($34)+(1))|0);
      $__gmp_i=$35;
      var $36=$__gmp_r;
      var $37=(($36)>>>0) < 1;
      if ($37) { label = 16; break; } else { label = 7; break; }
    case 7: 
      var $39=$2;
      var $40=$1;
      var $41=(($39)|0)!=(($40)|0);
      if ($41) { label = 8; break; } else { label = 15; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $44=$__gmp_i;
      $__gmp_j=$44;
      label = 10; break;
    case 10: 
      var $46=$__gmp_j;
      var $47=$3;
      var $48=(($46)|0) < (($47)|0);
      if ($48) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $50=$__gmp_j;
      var $51=$2;
      var $52=(($51+($50<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$__gmp_j;
      var $55=$1;
      var $56=(($55+($54<<2))|0);
      HEAP32[(($56)>>2)]=$53;
      label = 12; break;
    case 12: 
      var $58=$__gmp_j;
      var $59=((($58)+(1))|0);
      $__gmp_j=$59;
      label = 10; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $__gmp_c=0;
      label = 17; break;
    case 16: 
      label = 5; break;
    case 17: 
      label = 27; break;
    case 18: 
      var $66=$2;
      var $67=$1;
      var $68=(($66)|0)!=(($67)|0);
      if ($68) { label = 19; break; } else { label = 26; break; }
    case 19: 
      label = 20; break;
    case 20: 
      $__gmp_j1=1;
      label = 21; break;
    case 21: 
      var $72=$__gmp_j1;
      var $73=$3;
      var $74=(($72)|0) < (($73)|0);
      if ($74) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $76=$__gmp_j1;
      var $77=$2;
      var $78=(($77+($76<<2))|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$__gmp_j1;
      var $81=$1;
      var $82=(($81+($80<<2))|0);
      HEAP32[(($82)>>2)]=$79;
      label = 23; break;
    case 23: 
      var $84=$__gmp_j1;
      var $85=((($84)+(1))|0);
      $__gmp_j1=$85;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $__gmp_c=0;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $91=$__gmp_c;

      return $91;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_add_1["X"]=1;

function ___gmpn_add_n($rp, $up, $vp, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $vl;
      var $sl;
      var $rl;
      var $cy;
      var $cy1;
      var $cy2;
      $1=$rp;
      $2=$up;
      $3=$vp;
      $4=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      $cy=0;
      label = 9; break;
    case 9: 
      var $12=$2;
      var $13=(($12+4)|0);
      $2=$13;
      var $14=HEAP32[(($12)>>2)];
      $ul=$14;
      var $15=$3;
      var $16=(($15+4)|0);
      $3=$16;
      var $17=HEAP32[(($15)>>2)];
      $vl=$17;
      var $18=$ul;
      var $19=$vl;
      var $20=((($18)+($19))|0);
      $sl=$20;
      var $21=$sl;
      var $22=$ul;
      var $23=(($21)>>>0) < (($22)>>>0);
      var $24=(($23)&1);
      $cy1=$24;
      var $25=$sl;
      var $26=$cy;
      var $27=((($25)+($26))|0);
      $rl=$27;
      var $28=$rl;
      var $29=$sl;
      var $30=(($28)>>>0) < (($29)>>>0);
      var $31=(($30)&1);
      $cy2=$31;
      var $32=$cy1;
      var $33=$cy2;
      var $34=$32 | $33;
      $cy=$34;
      var $35=$rl;
      var $36=$1;
      var $37=(($36+4)|0);
      $1=$37;
      HEAP32[(($36)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $39=$4;
      var $40=((($39)-(1))|0);
      $4=$40;
      var $41=(($40)|0)!=0;
      if ($41) { label = 9; break; } else { label = 11; break; }
    case 11: 
      var $43=$cy;

      return $43;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_add_n["X"]=1;

function ___gmpn_div_q($qp, $np, $nn, $dp, $dn, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $new_dp;
      var $new_np;
      var $tp;
      var $rp;
      var $cy;
      var $dh;
      var $qh;
      var $new_nn;
      var $qn;
      var $dinv=__stackBase__;
      var $cnt;
      var $__tmp_marker=(__stackBase__)+(4);
      var $__xr;
      var $__a;
      var $v;
      var $p;
      var $t1;
      var $t0;
      var $mask;
      var $dummy;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $v1;
      var $p2;
      var $t13;
      var $t04;
      var $mask5;
      var $dummy6;
      var $__d17;
      var $__d08;
      var $__q19;
      var $__q010;
      var $__r111;
      var $__r012;
      var $__m13;
      var $__x014;
      var $__x115;
      var $__x216;
      var $__x317;
      var $__ul18;
      var $__vl19;
      var $__uh20;
      var $__vh21;
      var $__u22;
      var $__v23;
      var $itch;
      var $scratch24;
      var $i;
      var $n;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $v25;
      var $p26;
      var $t127;
      var $t028;
      var $mask29;
      var $dummy30;
      var $__d131;
      var $__d032;
      var $__q133;
      var $__q034;
      var $__r135;
      var $__r036;
      var $__m37;
      var $__x038;
      var $__x139;
      var $__x240;
      var $__x341;
      var $__ul42;
      var $__vl43;
      var $__uh44;
      var $__vh45;
      var $__u46;
      var $__v47;
      var $v48;
      var $p49;
      var $t150;
      var $t051;
      var $mask52;
      var $dummy53;
      var $__d154;
      var $__d055;
      var $__q156;
      var $__q057;
      var $__r158;
      var $__r059;
      var $__m60;
      var $__x061;
      var $__x162;
      var $__x263;
      var $__x364;
      var $__ul65;
      var $__vl66;
      var $__uh67;
      var $__vh68;
      var $__u69;
      var $__v70;
      var $itch71;
      var $scratch72;
      var $__xr73;
      var $__a74;
      var $v75;
      var $p76;
      var $t177;
      var $t078;
      var $mask79;
      var $dummy80;
      var $__d181;
      var $__d082;
      var $__q183;
      var $__q084;
      var $__r185;
      var $__r086;
      var $__m87;
      var $__x088;
      var $__x189;
      var $__x290;
      var $__x391;
      var $__ul92;
      var $__vl93;
      var $__uh94;
      var $__vh95;
      var $__u96;
      var $__v97;
      var $v98;
      var $p99;
      var $t1100;
      var $t0101;
      var $mask102;
      var $dummy103;
      var $__d1104;
      var $__d0105;
      var $__q1106;
      var $__q0107;
      var $__r1108;
      var $__r0109;
      var $__m110;
      var $__x0111;
      var $__x1112;
      var $__x2113;
      var $__x3114;
      var $__ul115;
      var $__vl116;
      var $__uh117;
      var $__vh118;
      var $__u119;
      var $__v120;
      var $itch121;
      var $scratch122;
      var $i123;
      var $n124;
      var $__n125;
      var $__dst126;
      var $__src127;
      var $__x128;
      var $v129;
      var $p130;
      var $t1131;
      var $t0132;
      var $mask133;
      var $dummy134;
      var $__d1135;
      var $__d0136;
      var $__q1137;
      var $__q0138;
      var $__r1139;
      var $__r0140;
      var $__m141;
      var $__x0142;
      var $__x1143;
      var $__x2144;
      var $__x3145;
      var $__ul146;
      var $__vl147;
      var $__uh148;
      var $__vh149;
      var $__u150;
      var $__v151;
      var $v152;
      var $p153;
      var $t1154;
      var $t0155;
      var $mask156;
      var $dummy157;
      var $__d1158;
      var $__d0159;
      var $__q1160;
      var $__q0161;
      var $__r1162;
      var $__r0163;
      var $__m164;
      var $__x0165;
      var $__x1166;
      var $__x2167;
      var $__x3168;
      var $__ul169;
      var $__vl170;
      var $__uh171;
      var $__vh172;
      var $__u173;
      var $__v174;
      var $itch175;
      var $scratch176;
      var $__n177;
      var $__dst178;
      var $__src179;
      var $__x180;
      var $rn;
      var $__x181;
      var $__p;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$scratch;
      HEAP32[(($__tmp_marker)>>2)]=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $21=$5;
      var $22=(($21)|0)==1;
      if ($22) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $24=$1;
      var $25=$2;
      var $26=$3;
      var $27=$5;
      var $28=((($27)-(1))|0);
      var $29=$4;
      var $30=(($29+($28<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=___gmpn_divrem_1($24, 0, $25, $26, $31);
      label = 489; break;
    case 18: 
      var $34=$3;
      var $35=$5;
      var $36=((($34)-($35))|0);
      var $37=((($36)+(1))|0);
      $qn=$37;
      var $38=$qn;
      var $39=((($38)+(5))|0);
      var $40=$5;
      var $41=(($39)|0) >= (($40)|0);
      if ($41) { label = 19; break; } else { label = 237; break; }
    case 19: 
      var $43=$6;
      $new_np=$43;
      var $44=$5;
      var $45=((($44)-(1))|0);
      var $46=$4;
      var $47=(($46+($45<<2))|0);
      var $48=HEAP32[(($47)>>2)];
      $dh=$48;
      var $49=$dh;
      var $50=$49 & -2147483648;
      var $51=(($50)|0)==0;
      if ($51) { label = 20; break; } else { label = 127; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $54=$dh;
      $__xr=$54;
      var $55=$__xr;
      var $56=(($55)>>>0) < 65536;
      if ($56) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $58=$__xr;
      var $59=(($58)>>>0) < 256;
      var $60=$59 ? 1 : 9;
      var $66 = $60;label = 24; break;
    case 23: 
      var $62=$__xr;
      var $63=(($62)>>>0) < 16777216;
      var $64=$63 ? 17 : 25;
      var $66 = $64;label = 24; break;
    case 24: 
      var $66;
      $__a=$66;
      var $67=$__a;
      var $68=(((33)-($67))|0);
      var $69=$__xr;
      var $70=$__a;
      var $71=$69 >>> (($70)>>>0);
      var $72=((5244408+$71)|0);
      var $73=HEAP8[($72)];
      var $74=(($73)&255);
      var $75=((($68)-($74))|0);
      $cnt=$75;
      label = 25; break;
    case 25: 
      var $77=$new_np;
      var $78=$2;
      var $79=$3;
      var $80=$cnt;
      var $81=___gmpn_lshift($77, $78, $79, $80);
      $cy=$81;
      var $82=$cy;
      var $83=$3;
      var $84=$new_np;
      var $85=(($84+($83<<2))|0);
      HEAP32[(($85)>>2)]=$82;
      var $86=$3;
      var $87=$cy;
      var $88=(($87)|0)!=0;
      var $89=(($88)&1);
      var $90=((($86)+($89))|0);
      $new_nn=$90;
      var $91=$5;
      var $92=($91<<2);
      var $93=(($92)>>>0) < 65536;
      if ($93) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $95=$5;
      var $96=($95<<2);
      var $97=STACKTOP;STACKTOP = (STACKTOP + $96)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $103 = $97;label = 28; break;
    case 27: 
      var $99=$5;
      var $100=($99<<2);
      var $101=___gmp_tmp_reentrant_alloc($__tmp_marker, $100);
      var $103 = $101;label = 28; break;
    case 28: 
      var $103;
      var $104=$103;
      $new_dp=$104;
      var $105=$new_dp;
      var $106=$4;
      var $107=$5;
      var $108=$cnt;
      var $109=___gmpn_lshift($105, $106, $107, $108);
      var $110=$5;
      var $111=(($110)|0)==2;
      if ($111) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $113=$1;
      var $114=$new_np;
      var $115=$new_nn;
      var $116=$new_dp;
      var $117=___gmpn_divrem_2($113, 0, $114, $115, $116);
      $qh=$117;
      label = 117; break;
    case 30: 
      var $119=$5;
      var $120=(($119)|0) >= 200;
      if ($120) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $122=$new_nn;
      var $123=$5;
      var $124=((($122)-($123))|0);
      var $125=(($124)|0) >= 200;
      if ($125) { label = 70; break; } else { label = 32; break; }
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $136=$5;
      var $137=((($136)-(1))|0);
      var $138=$new_dp;
      var $139=(($138+($137<<2))|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$140 >>> 16;
      $__d1=$141;
      var $142=$5;
      var $143=((($142)-(1))|0);
      var $144=$new_dp;
      var $145=(($144+($143<<2))|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$146 & 65535;
      $__d0=$147;
      var $148=$5;
      var $149=((($148)-(1))|0);
      var $150=$new_dp;
      var $151=(($150+($149<<2))|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$152 ^ -1;
      var $154=$__d1;
      var $155=Math.floor(((($153)>>>0))/((($154)>>>0)));
      $__q1=$155;
      var $156=$5;
      var $157=((($156)-(1))|0);
      var $158=$new_dp;
      var $159=(($158+($157<<2))|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=$160 ^ -1;
      var $162=$__q1;
      var $163=$__d1;
      var $164=Math.imul($162,$163);
      var $165=((($161)-($164))|0);
      $__r1=$165;
      var $166=$__q1;
      var $167=$__d0;
      var $168=Math.imul($166,$167);
      $__m=$168;
      var $169=$__r1;
      var $170=($169<<16);
      var $171=$170 | 65535;
      $__r1=$171;
      var $172=$__r1;
      var $173=$__m;
      var $174=(($172)>>>0) < (($173)>>>0);
      if ($174) { label = 42; break; } else { label = 47; break; }
    case 42: 
      var $176=$__q1;
      var $177=((($176)-(1))|0);
      $__q1=$177;
      var $178=$5;
      var $179=((($178)-(1))|0);
      var $180=$new_dp;
      var $181=(($180+($179<<2))|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$__r1;
      var $184=((($183)+($182))|0);
      $__r1=$184;
      var $185=$__r1;
      var $186=$5;
      var $187=((($186)-(1))|0);
      var $188=$new_dp;
      var $189=(($188+($187<<2))|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($185)>>>0) >= (($190)>>>0);
      if ($191) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $193=$__r1;
      var $194=$__m;
      var $195=(($193)>>>0) < (($194)>>>0);
      if ($195) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $197=$__q1;
      var $198=((($197)-(1))|0);
      $__q1=$198;
      var $199=$5;
      var $200=((($199)-(1))|0);
      var $201=$new_dp;
      var $202=(($201+($200<<2))|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$__r1;
      var $205=((($204)+($203))|0);
      $__r1=$205;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $209=$__m;
      var $210=$__r1;
      var $211=((($210)-($209))|0);
      $__r1=$211;
      var $212=$__r1;
      var $213=$__d1;
      var $214=Math.floor(((($212)>>>0))/((($213)>>>0)));
      $__q0=$214;
      var $215=$__r1;
      var $216=$__q0;
      var $217=$__d1;
      var $218=Math.imul($216,$217);
      var $219=((($215)-($218))|0);
      $__r0=$219;
      var $220=$__q0;
      var $221=$__d0;
      var $222=Math.imul($220,$221);
      $__m=$222;
      var $223=$__r0;
      var $224=($223<<16);
      var $225=$224 | 65535;
      $__r0=$225;
      var $226=$__r0;
      var $227=$__m;
      var $228=(($226)>>>0) < (($227)>>>0);
      if ($228) { label = 48; break; } else { label = 53; break; }
    case 48: 
      var $230=$__q0;
      var $231=((($230)-(1))|0);
      $__q0=$231;
      var $232=$5;
      var $233=((($232)-(1))|0);
      var $234=$new_dp;
      var $235=(($234+($233<<2))|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=$__r0;
      var $238=((($237)+($236))|0);
      $__r0=$238;
      var $239=$__r0;
      var $240=$5;
      var $241=((($240)-(1))|0);
      var $242=$new_dp;
      var $243=(($242+($241<<2))|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($239)>>>0) >= (($244)>>>0);
      if ($245) { label = 49; break; } else { label = 52; break; }
    case 49: 
      var $247=$__r0;
      var $248=$__m;
      var $249=(($247)>>>0) < (($248)>>>0);
      if ($249) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $251=$__q0;
      var $252=((($251)-(1))|0);
      $__q0=$252;
      var $253=$5;
      var $254=((($253)-(1))|0);
      var $255=$new_dp;
      var $256=(($255+($254<<2))|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=$__r0;
      var $259=((($258)+($257))|0);
      $__r0=$259;
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $263=$__m;
      var $264=$__r0;
      var $265=((($264)-($263))|0);
      $__r0=$265;
      var $266=$__q1;
      var $267=($266<<16);
      var $268=$__q0;
      var $269=$267 | $268;
      $v=$269;
      var $270=$__r0;
      $dummy=$270;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $273=$5;
      var $274=((($273)-(1))|0);
      var $275=$new_dp;
      var $276=(($275+($274<<2))|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=$v;
      var $279=Math.imul($277,$278);
      $p=$279;
      var $280=$5;
      var $281=((($280)-(2))|0);
      var $282=$new_dp;
      var $283=(($282+($281<<2))|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$p;
      var $286=((($285)+($284))|0);
      $p=$286;
      var $287=$p;
      var $288=$5;
      var $289=((($288)-(2))|0);
      var $290=$new_dp;
      var $291=(($290+($289<<2))|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=(($287)>>>0) < (($292)>>>0);
      if ($293) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $295=$v;
      var $296=((($295)-(1))|0);
      $v=$296;
      var $297=$p;
      var $298=$5;
      var $299=((($298)-(1))|0);
      var $300=$new_dp;
      var $301=(($300+($299<<2))|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($297)>>>0) >= (($302)>>>0);
      var $304=(($303)&1);
      var $305=(((-$304))|0);
      $mask=$305;
      var $306=$5;
      var $307=((($306)-(1))|0);
      var $308=$new_dp;
      var $309=(($308+($307<<2))|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=$p;
      var $312=((($311)-($310))|0);
      $p=$312;
      var $313=$mask;
      var $314=$v;
      var $315=((($314)+($313))|0);
      $v=$315;
      var $316=$mask;
      var $317=$5;
      var $318=((($317)-(1))|0);
      var $319=$new_dp;
      var $320=(($319+($318<<2))|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=$316 & $321;
      var $323=$p;
      var $324=((($323)-($322))|0);
      $p=$324;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $327=$5;
      var $328=((($327)-(2))|0);
      var $329=$new_dp;
      var $330=(($329+($328<<2))|0);
      var $331=HEAP32[(($330)>>2)];
      $__u=$331;
      var $332=$v;
      $__v=$332;
      var $333=$__u;
      var $334=$333 & 65535;
      $__ul=$334;
      var $335=$__u;
      var $336=$335 >>> 16;
      $__uh=$336;
      var $337=$__v;
      var $338=$337 & 65535;
      $__vl=$338;
      var $339=$__v;
      var $340=$339 >>> 16;
      $__vh=$340;
      var $341=$__ul;
      var $342=$__vl;
      var $343=Math.imul($341,$342);
      $__x0=$343;
      var $344=$__ul;
      var $345=$__vh;
      var $346=Math.imul($344,$345);
      $__x1=$346;
      var $347=$__uh;
      var $348=$__vl;
      var $349=Math.imul($347,$348);
      $__x2=$349;
      var $350=$__uh;
      var $351=$__vh;
      var $352=Math.imul($350,$351);
      $__x3=$352;
      var $353=$__x0;
      var $354=$353 >>> 16;
      var $355=$__x1;
      var $356=((($355)+($354))|0);
      $__x1=$356;
      var $357=$__x2;
      var $358=$__x1;
      var $359=((($358)+($357))|0);
      $__x1=$359;
      var $360=$__x1;
      var $361=$__x2;
      var $362=(($360)>>>0) < (($361)>>>0);
      if ($362) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $364=$__x3;
      var $365=((($364)+(65536))|0);
      $__x3=$365;
      label = 60; break;
    case 60: 
      var $367=$__x3;
      var $368=$__x1;
      var $369=$368 >>> 16;
      var $370=((($367)+($369))|0);
      $t1=$370;
      var $371=$__x1;
      var $372=$371 << 16;
      var $373=$__x0;
      var $374=$373 & 65535;
      var $375=((($372)+($374))|0);
      $t0=$375;
      label = 61; break;
    case 61: 
      var $377=$t1;
      var $378=$p;
      var $379=((($378)+($377))|0);
      $p=$379;
      var $380=$p;
      var $381=$t1;
      var $382=(($380)>>>0) < (($381)>>>0);
      if ($382) { label = 62; break; } else { label = 68; break; }
    case 62: 
      var $384=$v;
      var $385=((($384)-(1))|0);
      $v=$385;
      var $386=$p;
      var $387=$5;
      var $388=((($387)-(1))|0);
      var $389=$new_dp;
      var $390=(($389+($388<<2))|0);
      var $391=HEAP32[(($390)>>2)];
      var $392=(($386)>>>0) >= (($391)>>>0);
      if ($392) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $394=$p;
      var $395=$5;
      var $396=((($395)-(1))|0);
      var $397=$new_dp;
      var $398=(($397+($396<<2))|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=(($394)>>>0) > (($399)>>>0);
      if ($400) { label = 65; break; } else { label = 64; break; }
    case 64: 
      var $402=$t0;
      var $403=$5;
      var $404=((($403)-(2))|0);
      var $405=$new_dp;
      var $406=(($405+($404<<2))|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=(($402)>>>0) >= (($407)>>>0);
      if ($408) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $410=$v;
      var $411=((($410)-(1))|0);
      $v=$411;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $415=$v;
      var $416=(($dinv)|0);
      HEAP32[(($416)>>2)]=$415;
      label = 69; break;
    case 69: 
      var $418=$1;
      var $419=$new_np;
      var $420=$new_nn;
      var $421=$new_dp;
      var $422=$5;
      var $423=(($dinv)|0);
      var $424=HEAP32[(($423)>>2)];
      var $425=___gmpn_sbpi1_div_q($418, $419, $420, $421, $422, $424);
      $qh=$425;
      label = 116; break;
    case 70: 
      var $427=$5;
      var $428=(($427)|0) >= 200;
      if ($428) { label = 71; break; } else { label = 73; break; }
    case 71: 
      var $430=$3;
      var $431=(($430)|0) >= 4000;
      if ($431) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $433=$5;
      var $434=(($433)|0);
      var $435=($434)*(3600);
      var $436=$3;
      var $437=(($436)|0);
      var $438=($437)*(200);
      var $439=($435)+($438);
      var $440=$5;
      var $441=(($440)|0);
      var $442=$3;
      var $443=(($442)|0);
      var $444=($441)*($443);
      var $445=$439 > $444;
      if ($445) { label = 73; break; } else { label = 111; break; }
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $456=$5;
      var $457=((($456)-(1))|0);
      var $458=$new_dp;
      var $459=(($458+($457<<2))|0);
      var $460=HEAP32[(($459)>>2)];
      var $461=$460 >>> 16;
      $__d17=$461;
      var $462=$5;
      var $463=((($462)-(1))|0);
      var $464=$new_dp;
      var $465=(($464+($463<<2))|0);
      var $466=HEAP32[(($465)>>2)];
      var $467=$466 & 65535;
      $__d08=$467;
      var $468=$5;
      var $469=((($468)-(1))|0);
      var $470=$new_dp;
      var $471=(($470+($469<<2))|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=$472 ^ -1;
      var $474=$__d17;
      var $475=Math.floor(((($473)>>>0))/((($474)>>>0)));
      $__q19=$475;
      var $476=$5;
      var $477=((($476)-(1))|0);
      var $478=$new_dp;
      var $479=(($478+($477<<2))|0);
      var $480=HEAP32[(($479)>>2)];
      var $481=$480 ^ -1;
      var $482=$__q19;
      var $483=$__d17;
      var $484=Math.imul($482,$483);
      var $485=((($481)-($484))|0);
      $__r111=$485;
      var $486=$__q19;
      var $487=$__d08;
      var $488=Math.imul($486,$487);
      $__m13=$488;
      var $489=$__r111;
      var $490=($489<<16);
      var $491=$490 | 65535;
      $__r111=$491;
      var $492=$__r111;
      var $493=$__m13;
      var $494=(($492)>>>0) < (($493)>>>0);
      if ($494) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $496=$__q19;
      var $497=((($496)-(1))|0);
      $__q19=$497;
      var $498=$5;
      var $499=((($498)-(1))|0);
      var $500=$new_dp;
      var $501=(($500+($499<<2))|0);
      var $502=HEAP32[(($501)>>2)];
      var $503=$__r111;
      var $504=((($503)+($502))|0);
      $__r111=$504;
      var $505=$__r111;
      var $506=$5;
      var $507=((($506)-(1))|0);
      var $508=$new_dp;
      var $509=(($508+($507<<2))|0);
      var $510=HEAP32[(($509)>>2)];
      var $511=(($505)>>>0) >= (($510)>>>0);
      if ($511) { label = 84; break; } else { label = 87; break; }
    case 84: 
      var $513=$__r111;
      var $514=$__m13;
      var $515=(($513)>>>0) < (($514)>>>0);
      if ($515) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $517=$__q19;
      var $518=((($517)-(1))|0);
      $__q19=$518;
      var $519=$5;
      var $520=((($519)-(1))|0);
      var $521=$new_dp;
      var $522=(($521+($520<<2))|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=$__r111;
      var $525=((($524)+($523))|0);
      $__r111=$525;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $529=$__m13;
      var $530=$__r111;
      var $531=((($530)-($529))|0);
      $__r111=$531;
      var $532=$__r111;
      var $533=$__d17;
      var $534=Math.floor(((($532)>>>0))/((($533)>>>0)));
      $__q010=$534;
      var $535=$__r111;
      var $536=$__q010;
      var $537=$__d17;
      var $538=Math.imul($536,$537);
      var $539=((($535)-($538))|0);
      $__r012=$539;
      var $540=$__q010;
      var $541=$__d08;
      var $542=Math.imul($540,$541);
      $__m13=$542;
      var $543=$__r012;
      var $544=($543<<16);
      var $545=$544 | 65535;
      $__r012=$545;
      var $546=$__r012;
      var $547=$__m13;
      var $548=(($546)>>>0) < (($547)>>>0);
      if ($548) { label = 89; break; } else { label = 94; break; }
    case 89: 
      var $550=$__q010;
      var $551=((($550)-(1))|0);
      $__q010=$551;
      var $552=$5;
      var $553=((($552)-(1))|0);
      var $554=$new_dp;
      var $555=(($554+($553<<2))|0);
      var $556=HEAP32[(($555)>>2)];
      var $557=$__r012;
      var $558=((($557)+($556))|0);
      $__r012=$558;
      var $559=$__r012;
      var $560=$5;
      var $561=((($560)-(1))|0);
      var $562=$new_dp;
      var $563=(($562+($561<<2))|0);
      var $564=HEAP32[(($563)>>2)];
      var $565=(($559)>>>0) >= (($564)>>>0);
      if ($565) { label = 90; break; } else { label = 93; break; }
    case 90: 
      var $567=$__r012;
      var $568=$__m13;
      var $569=(($567)>>>0) < (($568)>>>0);
      if ($569) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $571=$__q010;
      var $572=((($571)-(1))|0);
      $__q010=$572;
      var $573=$5;
      var $574=((($573)-(1))|0);
      var $575=$new_dp;
      var $576=(($575+($574<<2))|0);
      var $577=HEAP32[(($576)>>2)];
      var $578=$__r012;
      var $579=((($578)+($577))|0);
      $__r012=$579;
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      var $583=$__m13;
      var $584=$__r012;
      var $585=((($584)-($583))|0);
      $__r012=$585;
      var $586=$__q19;
      var $587=($586<<16);
      var $588=$__q010;
      var $589=$587 | $588;
      $v1=$589;
      var $590=$__r012;
      $dummy6=$590;
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      var $593=$5;
      var $594=((($593)-(1))|0);
      var $595=$new_dp;
      var $596=(($595+($594<<2))|0);
      var $597=HEAP32[(($596)>>2)];
      var $598=$v1;
      var $599=Math.imul($597,$598);
      $p2=$599;
      var $600=$5;
      var $601=((($600)-(2))|0);
      var $602=$new_dp;
      var $603=(($602+($601<<2))|0);
      var $604=HEAP32[(($603)>>2)];
      var $605=$p2;
      var $606=((($605)+($604))|0);
      $p2=$606;
      var $607=$p2;
      var $608=$5;
      var $609=((($608)-(2))|0);
      var $610=$new_dp;
      var $611=(($610+($609<<2))|0);
      var $612=HEAP32[(($611)>>2)];
      var $613=(($607)>>>0) < (($612)>>>0);
      if ($613) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $615=$v1;
      var $616=((($615)-(1))|0);
      $v1=$616;
      var $617=$p2;
      var $618=$5;
      var $619=((($618)-(1))|0);
      var $620=$new_dp;
      var $621=(($620+($619<<2))|0);
      var $622=HEAP32[(($621)>>2)];
      var $623=(($617)>>>0) >= (($622)>>>0);
      var $624=(($623)&1);
      var $625=(((-$624))|0);
      $mask5=$625;
      var $626=$5;
      var $627=((($626)-(1))|0);
      var $628=$new_dp;
      var $629=(($628+($627<<2))|0);
      var $630=HEAP32[(($629)>>2)];
      var $631=$p2;
      var $632=((($631)-($630))|0);
      $p2=$632;
      var $633=$mask5;
      var $634=$v1;
      var $635=((($634)+($633))|0);
      $v1=$635;
      var $636=$mask5;
      var $637=$5;
      var $638=((($637)-(1))|0);
      var $639=$new_dp;
      var $640=(($639+($638<<2))|0);
      var $641=HEAP32[(($640)>>2)];
      var $642=$636 & $641;
      var $643=$p2;
      var $644=((($643)-($642))|0);
      $p2=$644;
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $647=$5;
      var $648=((($647)-(2))|0);
      var $649=$new_dp;
      var $650=(($649+($648<<2))|0);
      var $651=HEAP32[(($650)>>2)];
      $__u22=$651;
      var $652=$v1;
      $__v23=$652;
      var $653=$__u22;
      var $654=$653 & 65535;
      $__ul18=$654;
      var $655=$__u22;
      var $656=$655 >>> 16;
      $__uh20=$656;
      var $657=$__v23;
      var $658=$657 & 65535;
      $__vl19=$658;
      var $659=$__v23;
      var $660=$659 >>> 16;
      $__vh21=$660;
      var $661=$__ul18;
      var $662=$__vl19;
      var $663=Math.imul($661,$662);
      $__x014=$663;
      var $664=$__ul18;
      var $665=$__vh21;
      var $666=Math.imul($664,$665);
      $__x115=$666;
      var $667=$__uh20;
      var $668=$__vl19;
      var $669=Math.imul($667,$668);
      $__x216=$669;
      var $670=$__uh20;
      var $671=$__vh21;
      var $672=Math.imul($670,$671);
      $__x317=$672;
      var $673=$__x014;
      var $674=$673 >>> 16;
      var $675=$__x115;
      var $676=((($675)+($674))|0);
      $__x115=$676;
      var $677=$__x216;
      var $678=$__x115;
      var $679=((($678)+($677))|0);
      $__x115=$679;
      var $680=$__x115;
      var $681=$__x216;
      var $682=(($680)>>>0) < (($681)>>>0);
      if ($682) { label = 100; break; } else { label = 101; break; }
    case 100: 
      var $684=$__x317;
      var $685=((($684)+(65536))|0);
      $__x317=$685;
      label = 101; break;
    case 101: 
      var $687=$__x317;
      var $688=$__x115;
      var $689=$688 >>> 16;
      var $690=((($687)+($689))|0);
      $t13=$690;
      var $691=$__x115;
      var $692=$691 << 16;
      var $693=$__x014;
      var $694=$693 & 65535;
      var $695=((($692)+($694))|0);
      $t04=$695;
      label = 102; break;
    case 102: 
      var $697=$t13;
      var $698=$p2;
      var $699=((($698)+($697))|0);
      $p2=$699;
      var $700=$p2;
      var $701=$t13;
      var $702=(($700)>>>0) < (($701)>>>0);
      if ($702) { label = 103; break; } else { label = 109; break; }
    case 103: 
      var $704=$v1;
      var $705=((($704)-(1))|0);
      $v1=$705;
      var $706=$p2;
      var $707=$5;
      var $708=((($707)-(1))|0);
      var $709=$new_dp;
      var $710=(($709+($708<<2))|0);
      var $711=HEAP32[(($710)>>2)];
      var $712=(($706)>>>0) >= (($711)>>>0);
      if ($712) { label = 104; break; } else { label = 108; break; }
    case 104: 
      var $714=$p2;
      var $715=$5;
      var $716=((($715)-(1))|0);
      var $717=$new_dp;
      var $718=(($717+($716<<2))|0);
      var $719=HEAP32[(($718)>>2)];
      var $720=(($714)>>>0) > (($719)>>>0);
      if ($720) { label = 106; break; } else { label = 105; break; }
    case 105: 
      var $722=$t04;
      var $723=$5;
      var $724=((($723)-(2))|0);
      var $725=$new_dp;
      var $726=(($725+($724<<2))|0);
      var $727=HEAP32[(($726)>>2)];
      var $728=(($722)>>>0) >= (($727)>>>0);
      if ($728) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $730=$v1;
      var $731=((($730)-(1))|0);
      $v1=$731;
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      var $735=$v1;
      var $736=(($dinv)|0);
      HEAP32[(($736)>>2)]=$735;
      label = 110; break;
    case 110: 
      var $738=$1;
      var $739=$new_np;
      var $740=$new_nn;
      var $741=$new_dp;
      var $742=$5;
      var $743=___gmpn_dcpi1_div_q($738, $739, $740, $741, $742, $dinv);
      $qh=$743;
      label = 115; break;
    case 111: 
      var $745=$new_nn;
      var $746=$5;
      var $747=___gmpn_mu_div_q_itch($745, $746, 0);
      $itch=$747;
      var $748=$itch;
      var $749=($748<<2);
      var $750=(($749)>>>0) < 65536;
      if ($750) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $752=$itch;
      var $753=($752<<2);
      var $754=STACKTOP;STACKTOP = (STACKTOP + $753)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $760 = $754;label = 114; break;
    case 113: 
      var $756=$itch;
      var $757=($756<<2);
      var $758=___gmp_tmp_reentrant_alloc($__tmp_marker, $757);
      var $760 = $758;label = 114; break;
    case 114: 
      var $760;
      var $761=$760;
      $scratch24=$761;
      var $762=$1;
      var $763=$new_np;
      var $764=$new_nn;
      var $765=$new_dp;
      var $766=$5;
      var $767=$scratch24;
      var $768=___gmpn_mu_div_q($762, $763, $764, $765, $766, $767);
      $qh=$768;
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $772=$cy;
      var $773=(($772)|0)==0;
      if ($773) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $775=$qh;
      var $776=$qn;
      var $777=((($776)-(1))|0);
      var $778=$1;
      var $779=(($778+($777<<2))|0);
      HEAP32[(($779)>>2)]=$775;
      label = 126; break;
    case 119: 
      var $781=$qh;
      var $782=(($781)|0)!=0;
      if ($782) { label = 120; break; } else { label = 125; break; }
    case 120: 
      var $784=$new_nn;
      var $785=$5;
      var $786=((($784)-($785))|0);
      $n=$786;
      $i=0;
      label = 121; break;
    case 121: 
      var $788=$i;
      var $789=$n;
      var $790=(($788)|0) < (($789)|0);
      if ($790) { label = 122; break; } else { label = 124; break; }
    case 122: 
      var $792=$i;
      var $793=$1;
      var $794=(($793+($792<<2))|0);
      HEAP32[(($794)>>2)]=-1;
      label = 123; break;
    case 123: 
      var $796=$i;
      var $797=((($796)+(1))|0);
      $i=$797;
      label = 121; break;
    case 124: 
      $qh=0;
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      label = 236; break;
    case 127: 
      var $802=$new_np;
      var $803=$2;
      var $804=(($802)|0)!=(($803)|0);
      if ($804) { label = 128; break; } else { label = 146; break; }
    case 128: 
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      label = 136; break;
    case 136: 
      var $814=$3;
      var $815=(($814)|0)!=0;
      if ($815) { label = 137; break; } else { label = 143; break; }
    case 137: 
      var $817=$3;
      var $818=((($817)-(1))|0);
      $__n=$818;
      var $819=$new_np;
      $__dst=$819;
      var $820=$2;
      $__src=$820;
      var $821=$__src;
      var $822=(($821+4)|0);
      $__src=$822;
      var $823=HEAP32[(($821)>>2)];
      $__x=$823;
      var $824=$__n;
      var $825=(($824)|0)!=0;
      if ($825) { label = 138; break; } else { label = 142; break; }
    case 138: 
      label = 139; break;
    case 139: 
      var $828=$__x;
      var $829=$__dst;
      var $830=(($829+4)|0);
      $__dst=$830;
      HEAP32[(($829)>>2)]=$828;
      var $831=$__src;
      var $832=(($831+4)|0);
      $__src=$832;
      var $833=HEAP32[(($831)>>2)];
      $__x=$833;
      label = 140; break;
    case 140: 
      var $835=$__n;
      var $836=((($835)-(1))|0);
      $__n=$836;
      var $837=(($836)|0)!=0;
      if ($837) { label = 139; break; } else { label = 141; break; }
    case 141: 
      label = 142; break;
    case 142: 
      var $840=$__x;
      var $841=$__dst;
      var $842=(($841+4)|0);
      $__dst=$842;
      HEAP32[(($841)>>2)]=$840;
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      var $847=$5;
      var $848=(($847)|0)==2;
      if ($848) { label = 147; break; } else { label = 148; break; }
    case 147: 
      var $850=$1;
      var $851=$new_np;
      var $852=$3;
      var $853=$4;
      var $854=___gmpn_divrem_2($850, 0, $851, $852, $853);
      $qh=$854;
      label = 235; break;
    case 148: 
      var $856=$5;
      var $857=(($856)|0) >= 200;
      if ($857) { label = 149; break; } else { label = 150; break; }
    case 149: 
      var $859=$3;
      var $860=$5;
      var $861=((($859)-($860))|0);
      var $862=(($861)|0) >= 200;
      if ($862) { label = 188; break; } else { label = 150; break; }
    case 150: 
      label = 151; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 154; break;
    case 154: 
      label = 155; break;
    case 155: 
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      var $873=$dh;
      var $874=$873 >>> 16;
      $__d131=$874;
      var $875=$dh;
      var $876=$875 & 65535;
      $__d032=$876;
      var $877=$dh;
      var $878=$877 ^ -1;
      var $879=$__d131;
      var $880=Math.floor(((($878)>>>0))/((($879)>>>0)));
      $__q133=$880;
      var $881=$dh;
      var $882=$881 ^ -1;
      var $883=$__q133;
      var $884=$__d131;
      var $885=Math.imul($883,$884);
      var $886=((($882)-($885))|0);
      $__r135=$886;
      var $887=$__q133;
      var $888=$__d032;
      var $889=Math.imul($887,$888);
      $__m37=$889;
      var $890=$__r135;
      var $891=($890<<16);
      var $892=$891 | 65535;
      $__r135=$892;
      var $893=$__r135;
      var $894=$__m37;
      var $895=(($893)>>>0) < (($894)>>>0);
      if ($895) { label = 160; break; } else { label = 165; break; }
    case 160: 
      var $897=$__q133;
      var $898=((($897)-(1))|0);
      $__q133=$898;
      var $899=$dh;
      var $900=$__r135;
      var $901=((($900)+($899))|0);
      $__r135=$901;
      var $902=$__r135;
      var $903=$dh;
      var $904=(($902)>>>0) >= (($903)>>>0);
      if ($904) { label = 161; break; } else { label = 164; break; }
    case 161: 
      var $906=$__r135;
      var $907=$__m37;
      var $908=(($906)>>>0) < (($907)>>>0);
      if ($908) { label = 162; break; } else { label = 163; break; }
    case 162: 
      var $910=$__q133;
      var $911=((($910)-(1))|0);
      $__q133=$911;
      var $912=$dh;
      var $913=$__r135;
      var $914=((($913)+($912))|0);
      $__r135=$914;
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      var $918=$__m37;
      var $919=$__r135;
      var $920=((($919)-($918))|0);
      $__r135=$920;
      var $921=$__r135;
      var $922=$__d131;
      var $923=Math.floor(((($921)>>>0))/((($922)>>>0)));
      $__q034=$923;
      var $924=$__r135;
      var $925=$__q034;
      var $926=$__d131;
      var $927=Math.imul($925,$926);
      var $928=((($924)-($927))|0);
      $__r036=$928;
      var $929=$__q034;
      var $930=$__d032;
      var $931=Math.imul($929,$930);
      $__m37=$931;
      var $932=$__r036;
      var $933=($932<<16);
      var $934=$933 | 65535;
      $__r036=$934;
      var $935=$__r036;
      var $936=$__m37;
      var $937=(($935)>>>0) < (($936)>>>0);
      if ($937) { label = 166; break; } else { label = 171; break; }
    case 166: 
      var $939=$__q034;
      var $940=((($939)-(1))|0);
      $__q034=$940;
      var $941=$dh;
      var $942=$__r036;
      var $943=((($942)+($941))|0);
      $__r036=$943;
      var $944=$__r036;
      var $945=$dh;
      var $946=(($944)>>>0) >= (($945)>>>0);
      if ($946) { label = 167; break; } else { label = 170; break; }
    case 167: 
      var $948=$__r036;
      var $949=$__m37;
      var $950=(($948)>>>0) < (($949)>>>0);
      if ($950) { label = 168; break; } else { label = 169; break; }
    case 168: 
      var $952=$__q034;
      var $953=((($952)-(1))|0);
      $__q034=$953;
      var $954=$dh;
      var $955=$__r036;
      var $956=((($955)+($954))|0);
      $__r036=$956;
      label = 169; break;
    case 169: 
      label = 170; break;
    case 170: 
      label = 171; break;
    case 171: 
      var $960=$__m37;
      var $961=$__r036;
      var $962=((($961)-($960))|0);
      $__r036=$962;
      var $963=$__q133;
      var $964=($963<<16);
      var $965=$__q034;
      var $966=$964 | $965;
      $v25=$966;
      var $967=$__r036;
      $dummy30=$967;
      label = 172; break;
    case 172: 
      label = 173; break;
    case 173: 
      var $970=$dh;
      var $971=$v25;
      var $972=Math.imul($970,$971);
      $p26=$972;
      var $973=$5;
      var $974=((($973)-(2))|0);
      var $975=$4;
      var $976=(($975+($974<<2))|0);
      var $977=HEAP32[(($976)>>2)];
      var $978=$p26;
      var $979=((($978)+($977))|0);
      $p26=$979;
      var $980=$p26;
      var $981=$5;
      var $982=((($981)-(2))|0);
      var $983=$4;
      var $984=(($983+($982<<2))|0);
      var $985=HEAP32[(($984)>>2)];
      var $986=(($980)>>>0) < (($985)>>>0);
      if ($986) { label = 174; break; } else { label = 175; break; }
    case 174: 
      var $988=$v25;
      var $989=((($988)-(1))|0);
      $v25=$989;
      var $990=$p26;
      var $991=$dh;
      var $992=(($990)>>>0) >= (($991)>>>0);
      var $993=(($992)&1);
      var $994=(((-$993))|0);
      $mask29=$994;
      var $995=$dh;
      var $996=$p26;
      var $997=((($996)-($995))|0);
      $p26=$997;
      var $998=$mask29;
      var $999=$v25;
      var $1000=((($999)+($998))|0);
      $v25=$1000;
      var $1001=$mask29;
      var $1002=$dh;
      var $1003=$1001 & $1002;
      var $1004=$p26;
      var $1005=((($1004)-($1003))|0);
      $p26=$1005;
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      var $1008=$5;
      var $1009=((($1008)-(2))|0);
      var $1010=$4;
      var $1011=(($1010+($1009<<2))|0);
      var $1012=HEAP32[(($1011)>>2)];
      $__u46=$1012;
      var $1013=$v25;
      $__v47=$1013;
      var $1014=$__u46;
      var $1015=$1014 & 65535;
      $__ul42=$1015;
      var $1016=$__u46;
      var $1017=$1016 >>> 16;
      $__uh44=$1017;
      var $1018=$__v47;
      var $1019=$1018 & 65535;
      $__vl43=$1019;
      var $1020=$__v47;
      var $1021=$1020 >>> 16;
      $__vh45=$1021;
      var $1022=$__ul42;
      var $1023=$__vl43;
      var $1024=Math.imul($1022,$1023);
      $__x038=$1024;
      var $1025=$__ul42;
      var $1026=$__vh45;
      var $1027=Math.imul($1025,$1026);
      $__x139=$1027;
      var $1028=$__uh44;
      var $1029=$__vl43;
      var $1030=Math.imul($1028,$1029);
      $__x240=$1030;
      var $1031=$__uh44;
      var $1032=$__vh45;
      var $1033=Math.imul($1031,$1032);
      $__x341=$1033;
      var $1034=$__x038;
      var $1035=$1034 >>> 16;
      var $1036=$__x139;
      var $1037=((($1036)+($1035))|0);
      $__x139=$1037;
      var $1038=$__x240;
      var $1039=$__x139;
      var $1040=((($1039)+($1038))|0);
      $__x139=$1040;
      var $1041=$__x139;
      var $1042=$__x240;
      var $1043=(($1041)>>>0) < (($1042)>>>0);
      if ($1043) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $1045=$__x341;
      var $1046=((($1045)+(65536))|0);
      $__x341=$1046;
      label = 178; break;
    case 178: 
      var $1048=$__x341;
      var $1049=$__x139;
      var $1050=$1049 >>> 16;
      var $1051=((($1048)+($1050))|0);
      $t127=$1051;
      var $1052=$__x139;
      var $1053=$1052 << 16;
      var $1054=$__x038;
      var $1055=$1054 & 65535;
      var $1056=((($1053)+($1055))|0);
      $t028=$1056;
      label = 179; break;
    case 179: 
      var $1058=$t127;
      var $1059=$p26;
      var $1060=((($1059)+($1058))|0);
      $p26=$1060;
      var $1061=$p26;
      var $1062=$t127;
      var $1063=(($1061)>>>0) < (($1062)>>>0);
      if ($1063) { label = 180; break; } else { label = 186; break; }
    case 180: 
      var $1065=$v25;
      var $1066=((($1065)-(1))|0);
      $v25=$1066;
      var $1067=$p26;
      var $1068=$dh;
      var $1069=(($1067)>>>0) >= (($1068)>>>0);
      if ($1069) { label = 181; break; } else { label = 185; break; }
    case 181: 
      var $1071=$p26;
      var $1072=$dh;
      var $1073=(($1071)>>>0) > (($1072)>>>0);
      if ($1073) { label = 183; break; } else { label = 182; break; }
    case 182: 
      var $1075=$t028;
      var $1076=$5;
      var $1077=((($1076)-(2))|0);
      var $1078=$4;
      var $1079=(($1078+($1077<<2))|0);
      var $1080=HEAP32[(($1079)>>2)];
      var $1081=(($1075)>>>0) >= (($1080)>>>0);
      if ($1081) { label = 183; break; } else { label = 184; break; }
    case 183: 
      var $1083=$v25;
      var $1084=((($1083)-(1))|0);
      $v25=$1084;
      label = 184; break;
    case 184: 
      label = 185; break;
    case 185: 
      label = 186; break;
    case 186: 
      var $1088=$v25;
      var $1089=(($dinv)|0);
      HEAP32[(($1089)>>2)]=$1088;
      label = 187; break;
    case 187: 
      var $1091=$1;
      var $1092=$new_np;
      var $1093=$3;
      var $1094=$4;
      var $1095=$5;
      var $1096=(($dinv)|0);
      var $1097=HEAP32[(($1096)>>2)];
      var $1098=___gmpn_sbpi1_div_q($1091, $1092, $1093, $1094, $1095, $1097);
      $qh=$1098;
      label = 234; break;
    case 188: 
      var $1100=$5;
      var $1101=(($1100)|0) >= 200;
      if ($1101) { label = 189; break; } else { label = 191; break; }
    case 189: 
      var $1103=$3;
      var $1104=(($1103)|0) >= 4000;
      if ($1104) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $1106=$5;
      var $1107=(($1106)|0);
      var $1108=($1107)*(3600);
      var $1109=$3;
      var $1110=(($1109)|0);
      var $1111=($1110)*(200);
      var $1112=($1108)+($1111);
      var $1113=$5;
      var $1114=(($1113)|0);
      var $1115=$3;
      var $1116=(($1115)|0);
      var $1117=($1114)*($1116);
      var $1118=$1112 > $1117;
      if ($1118) { label = 191; break; } else { label = 229; break; }
    case 191: 
      label = 192; break;
    case 192: 
      label = 193; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      label = 196; break;
    case 196: 
      label = 197; break;
    case 197: 
      label = 198; break;
    case 198: 
      label = 199; break;
    case 199: 
      label = 200; break;
    case 200: 
      var $1129=$dh;
      var $1130=$1129 >>> 16;
      $__d154=$1130;
      var $1131=$dh;
      var $1132=$1131 & 65535;
      $__d055=$1132;
      var $1133=$dh;
      var $1134=$1133 ^ -1;
      var $1135=$__d154;
      var $1136=Math.floor(((($1134)>>>0))/((($1135)>>>0)));
      $__q156=$1136;
      var $1137=$dh;
      var $1138=$1137 ^ -1;
      var $1139=$__q156;
      var $1140=$__d154;
      var $1141=Math.imul($1139,$1140);
      var $1142=((($1138)-($1141))|0);
      $__r158=$1142;
      var $1143=$__q156;
      var $1144=$__d055;
      var $1145=Math.imul($1143,$1144);
      $__m60=$1145;
      var $1146=$__r158;
      var $1147=($1146<<16);
      var $1148=$1147 | 65535;
      $__r158=$1148;
      var $1149=$__r158;
      var $1150=$__m60;
      var $1151=(($1149)>>>0) < (($1150)>>>0);
      if ($1151) { label = 201; break; } else { label = 206; break; }
    case 201: 
      var $1153=$__q156;
      var $1154=((($1153)-(1))|0);
      $__q156=$1154;
      var $1155=$dh;
      var $1156=$__r158;
      var $1157=((($1156)+($1155))|0);
      $__r158=$1157;
      var $1158=$__r158;
      var $1159=$dh;
      var $1160=(($1158)>>>0) >= (($1159)>>>0);
      if ($1160) { label = 202; break; } else { label = 205; break; }
    case 202: 
      var $1162=$__r158;
      var $1163=$__m60;
      var $1164=(($1162)>>>0) < (($1163)>>>0);
      if ($1164) { label = 203; break; } else { label = 204; break; }
    case 203: 
      var $1166=$__q156;
      var $1167=((($1166)-(1))|0);
      $__q156=$1167;
      var $1168=$dh;
      var $1169=$__r158;
      var $1170=((($1169)+($1168))|0);
      $__r158=$1170;
      label = 204; break;
    case 204: 
      label = 205; break;
    case 205: 
      label = 206; break;
    case 206: 
      var $1174=$__m60;
      var $1175=$__r158;
      var $1176=((($1175)-($1174))|0);
      $__r158=$1176;
      var $1177=$__r158;
      var $1178=$__d154;
      var $1179=Math.floor(((($1177)>>>0))/((($1178)>>>0)));
      $__q057=$1179;
      var $1180=$__r158;
      var $1181=$__q057;
      var $1182=$__d154;
      var $1183=Math.imul($1181,$1182);
      var $1184=((($1180)-($1183))|0);
      $__r059=$1184;
      var $1185=$__q057;
      var $1186=$__d055;
      var $1187=Math.imul($1185,$1186);
      $__m60=$1187;
      var $1188=$__r059;
      var $1189=($1188<<16);
      var $1190=$1189 | 65535;
      $__r059=$1190;
      var $1191=$__r059;
      var $1192=$__m60;
      var $1193=(($1191)>>>0) < (($1192)>>>0);
      if ($1193) { label = 207; break; } else { label = 212; break; }
    case 207: 
      var $1195=$__q057;
      var $1196=((($1195)-(1))|0);
      $__q057=$1196;
      var $1197=$dh;
      var $1198=$__r059;
      var $1199=((($1198)+($1197))|0);
      $__r059=$1199;
      var $1200=$__r059;
      var $1201=$dh;
      var $1202=(($1200)>>>0) >= (($1201)>>>0);
      if ($1202) { label = 208; break; } else { label = 211; break; }
    case 208: 
      var $1204=$__r059;
      var $1205=$__m60;
      var $1206=(($1204)>>>0) < (($1205)>>>0);
      if ($1206) { label = 209; break; } else { label = 210; break; }
    case 209: 
      var $1208=$__q057;
      var $1209=((($1208)-(1))|0);
      $__q057=$1209;
      var $1210=$dh;
      var $1211=$__r059;
      var $1212=((($1211)+($1210))|0);
      $__r059=$1212;
      label = 210; break;
    case 210: 
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      var $1216=$__m60;
      var $1217=$__r059;
      var $1218=((($1217)-($1216))|0);
      $__r059=$1218;
      var $1219=$__q156;
      var $1220=($1219<<16);
      var $1221=$__q057;
      var $1222=$1220 | $1221;
      $v48=$1222;
      var $1223=$__r059;
      $dummy53=$1223;
      label = 213; break;
    case 213: 
      label = 214; break;
    case 214: 
      var $1226=$dh;
      var $1227=$v48;
      var $1228=Math.imul($1226,$1227);
      $p49=$1228;
      var $1229=$5;
      var $1230=((($1229)-(2))|0);
      var $1231=$4;
      var $1232=(($1231+($1230<<2))|0);
      var $1233=HEAP32[(($1232)>>2)];
      var $1234=$p49;
      var $1235=((($1234)+($1233))|0);
      $p49=$1235;
      var $1236=$p49;
      var $1237=$5;
      var $1238=((($1237)-(2))|0);
      var $1239=$4;
      var $1240=(($1239+($1238<<2))|0);
      var $1241=HEAP32[(($1240)>>2)];
      var $1242=(($1236)>>>0) < (($1241)>>>0);
      if ($1242) { label = 215; break; } else { label = 216; break; }
    case 215: 
      var $1244=$v48;
      var $1245=((($1244)-(1))|0);
      $v48=$1245;
      var $1246=$p49;
      var $1247=$dh;
      var $1248=(($1246)>>>0) >= (($1247)>>>0);
      var $1249=(($1248)&1);
      var $1250=(((-$1249))|0);
      $mask52=$1250;
      var $1251=$dh;
      var $1252=$p49;
      var $1253=((($1252)-($1251))|0);
      $p49=$1253;
      var $1254=$mask52;
      var $1255=$v48;
      var $1256=((($1255)+($1254))|0);
      $v48=$1256;
      var $1257=$mask52;
      var $1258=$dh;
      var $1259=$1257 & $1258;
      var $1260=$p49;
      var $1261=((($1260)-($1259))|0);
      $p49=$1261;
      label = 216; break;
    case 216: 
      label = 217; break;
    case 217: 
      var $1264=$5;
      var $1265=((($1264)-(2))|0);
      var $1266=$4;
      var $1267=(($1266+($1265<<2))|0);
      var $1268=HEAP32[(($1267)>>2)];
      $__u69=$1268;
      var $1269=$v48;
      $__v70=$1269;
      var $1270=$__u69;
      var $1271=$1270 & 65535;
      $__ul65=$1271;
      var $1272=$__u69;
      var $1273=$1272 >>> 16;
      $__uh67=$1273;
      var $1274=$__v70;
      var $1275=$1274 & 65535;
      $__vl66=$1275;
      var $1276=$__v70;
      var $1277=$1276 >>> 16;
      $__vh68=$1277;
      var $1278=$__ul65;
      var $1279=$__vl66;
      var $1280=Math.imul($1278,$1279);
      $__x061=$1280;
      var $1281=$__ul65;
      var $1282=$__vh68;
      var $1283=Math.imul($1281,$1282);
      $__x162=$1283;
      var $1284=$__uh67;
      var $1285=$__vl66;
      var $1286=Math.imul($1284,$1285);
      $__x263=$1286;
      var $1287=$__uh67;
      var $1288=$__vh68;
      var $1289=Math.imul($1287,$1288);
      $__x364=$1289;
      var $1290=$__x061;
      var $1291=$1290 >>> 16;
      var $1292=$__x162;
      var $1293=((($1292)+($1291))|0);
      $__x162=$1293;
      var $1294=$__x263;
      var $1295=$__x162;
      var $1296=((($1295)+($1294))|0);
      $__x162=$1296;
      var $1297=$__x162;
      var $1298=$__x263;
      var $1299=(($1297)>>>0) < (($1298)>>>0);
      if ($1299) { label = 218; break; } else { label = 219; break; }
    case 218: 
      var $1301=$__x364;
      var $1302=((($1301)+(65536))|0);
      $__x364=$1302;
      label = 219; break;
    case 219: 
      var $1304=$__x364;
      var $1305=$__x162;
      var $1306=$1305 >>> 16;
      var $1307=((($1304)+($1306))|0);
      $t150=$1307;
      var $1308=$__x162;
      var $1309=$1308 << 16;
      var $1310=$__x061;
      var $1311=$1310 & 65535;
      var $1312=((($1309)+($1311))|0);
      $t051=$1312;
      label = 220; break;
    case 220: 
      var $1314=$t150;
      var $1315=$p49;
      var $1316=((($1315)+($1314))|0);
      $p49=$1316;
      var $1317=$p49;
      var $1318=$t150;
      var $1319=(($1317)>>>0) < (($1318)>>>0);
      if ($1319) { label = 221; break; } else { label = 227; break; }
    case 221: 
      var $1321=$v48;
      var $1322=((($1321)-(1))|0);
      $v48=$1322;
      var $1323=$p49;
      var $1324=$dh;
      var $1325=(($1323)>>>0) >= (($1324)>>>0);
      if ($1325) { label = 222; break; } else { label = 226; break; }
    case 222: 
      var $1327=$p49;
      var $1328=$dh;
      var $1329=(($1327)>>>0) > (($1328)>>>0);
      if ($1329) { label = 224; break; } else { label = 223; break; }
    case 223: 
      var $1331=$t051;
      var $1332=$5;
      var $1333=((($1332)-(2))|0);
      var $1334=$4;
      var $1335=(($1334+($1333<<2))|0);
      var $1336=HEAP32[(($1335)>>2)];
      var $1337=(($1331)>>>0) >= (($1336)>>>0);
      if ($1337) { label = 224; break; } else { label = 225; break; }
    case 224: 
      var $1339=$v48;
      var $1340=((($1339)-(1))|0);
      $v48=$1340;
      label = 225; break;
    case 225: 
      label = 226; break;
    case 226: 
      label = 227; break;
    case 227: 
      var $1344=$v48;
      var $1345=(($dinv)|0);
      HEAP32[(($1345)>>2)]=$1344;
      label = 228; break;
    case 228: 
      var $1347=$1;
      var $1348=$new_np;
      var $1349=$3;
      var $1350=$4;
      var $1351=$5;
      var $1352=___gmpn_dcpi1_div_q($1347, $1348, $1349, $1350, $1351, $dinv);
      $qh=$1352;
      label = 233; break;
    case 229: 
      var $1354=$3;
      var $1355=$5;
      var $1356=___gmpn_mu_div_q_itch($1354, $1355, 0);
      $itch71=$1356;
      var $1357=$itch71;
      var $1358=($1357<<2);
      var $1359=(($1358)>>>0) < 65536;
      if ($1359) { label = 230; break; } else { label = 231; break; }
    case 230: 
      var $1361=$itch71;
      var $1362=($1361<<2);
      var $1363=STACKTOP;STACKTOP = (STACKTOP + $1362)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1369 = $1363;label = 232; break;
    case 231: 
      var $1365=$itch71;
      var $1366=($1365<<2);
      var $1367=___gmp_tmp_reentrant_alloc($__tmp_marker, $1366);
      var $1369 = $1367;label = 232; break;
    case 232: 
      var $1369;
      var $1370=$1369;
      $scratch72=$1370;
      var $1371=$1;
      var $1372=$2;
      var $1373=$3;
      var $1374=$4;
      var $1375=$5;
      var $1376=$scratch72;
      var $1377=___gmpn_mu_div_q($1371, $1372, $1373, $1374, $1375, $1376);
      $qh=$1377;
      label = 233; break;
    case 233: 
      label = 234; break;
    case 234: 
      label = 235; break;
    case 235: 
      var $1381=$qh;
      var $1382=$3;
      var $1383=$5;
      var $1384=((($1382)-($1383))|0);
      var $1385=$1;
      var $1386=(($1385+($1384<<2))|0);
      HEAP32[(($1386)>>2)]=$1381;
      label = 236; break;
    case 236: 
      label = 485; break;
    case 237: 
      var $1389=$qn;
      var $1390=((($1389)+(1))|0);
      var $1391=($1390<<2);
      var $1392=(($1391)>>>0) < 65536;
      if ($1392) { label = 238; break; } else { label = 239; break; }
    case 238: 
      var $1394=$qn;
      var $1395=((($1394)+(1))|0);
      var $1396=($1395<<2);
      var $1397=STACKTOP;STACKTOP = (STACKTOP + $1396)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1404 = $1397;label = 240; break;
    case 239: 
      var $1399=$qn;
      var $1400=((($1399)+(1))|0);
      var $1401=($1400<<2);
      var $1402=___gmp_tmp_reentrant_alloc($__tmp_marker, $1401);
      var $1404 = $1402;label = 240; break;
    case 240: 
      var $1404;
      var $1405=$1404;
      $tp=$1405;
      var $1406=$6;
      $new_np=$1406;
      var $1407=$qn;
      var $1408=($1407<<1);
      var $1409=((($1408)+(1))|0);
      $new_nn=$1409;
      var $1410=$new_np;
      var $1411=$2;
      var $1412=(($1410)|0)==(($1411)|0);
      if ($1412) { label = 241; break; } else { label = 245; break; }
    case 241: 
      var $1414=$new_nn;
      var $1415=((($1414)+(1))|0);
      var $1416=($1415<<2);
      var $1417=(($1416)>>>0) < 65536;
      if ($1417) { label = 242; break; } else { label = 243; break; }
    case 242: 
      var $1419=$new_nn;
      var $1420=((($1419)+(1))|0);
      var $1421=($1420<<2);
      var $1422=STACKTOP;STACKTOP = (STACKTOP + $1421)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1429 = $1422;label = 244; break;
    case 243: 
      var $1424=$new_nn;
      var $1425=((($1424)+(1))|0);
      var $1426=($1425<<2);
      var $1427=___gmp_tmp_reentrant_alloc($__tmp_marker, $1426);
      var $1429 = $1427;label = 244; break;
    case 244: 
      var $1429;
      var $1430=$1429;
      $new_np=$1430;
      label = 245; break;
    case 245: 
      var $1432=$5;
      var $1433=((($1432)-(1))|0);
      var $1434=$4;
      var $1435=(($1434+($1433<<2))|0);
      var $1436=HEAP32[(($1435)>>2)];
      $dh=$1436;
      var $1437=$dh;
      var $1438=$1437 & -2147483648;
      var $1439=(($1438)|0)==0;
      if ($1439) { label = 246; break; } else { label = 350; break; }
    case 246: 
      label = 247; break;
    case 247: 
      var $1442=$dh;
      $__xr73=$1442;
      var $1443=$__xr73;
      var $1444=(($1443)>>>0) < 65536;
      if ($1444) { label = 248; break; } else { label = 249; break; }
    case 248: 
      var $1446=$__xr73;
      var $1447=(($1446)>>>0) < 256;
      var $1448=$1447 ? 1 : 9;
      var $1454 = $1448;label = 250; break;
    case 249: 
      var $1450=$__xr73;
      var $1451=(($1450)>>>0) < 16777216;
      var $1452=$1451 ? 17 : 25;
      var $1454 = $1452;label = 250; break;
    case 250: 
      var $1454;
      $__a74=$1454;
      var $1455=$__a74;
      var $1456=(((33)-($1455))|0);
      var $1457=$__xr73;
      var $1458=$__a74;
      var $1459=$1457 >>> (($1458)>>>0);
      var $1460=((5244408+$1459)|0);
      var $1461=HEAP8[($1460)];
      var $1462=(($1461)&255);
      var $1463=((($1456)-($1462))|0);
      $cnt=$1463;
      label = 251; break;
    case 251: 
      var $1465=$new_np;
      var $1466=$2;
      var $1467=$3;
      var $1468=(($1466+($1467<<2))|0);
      var $1469=$new_nn;
      var $1470=(((-$1469))|0);
      var $1471=(($1468+($1470<<2))|0);
      var $1472=$new_nn;
      var $1473=$cnt;
      var $1474=___gmpn_lshift($1465, $1471, $1472, $1473);
      $cy=$1474;
      var $1475=$cy;
      var $1476=$new_nn;
      var $1477=$new_np;
      var $1478=(($1477+($1476<<2))|0);
      HEAP32[(($1478)>>2)]=$1475;
      var $1479=$cy;
      var $1480=(($1479)|0)!=0;
      var $1481=(($1480)&1);
      var $1482=$new_nn;
      var $1483=((($1482)+($1481))|0);
      $new_nn=$1483;
      var $1484=$qn;
      var $1485=((($1484)+(1))|0);
      var $1486=($1485<<2);
      var $1487=(($1486)>>>0) < 65536;
      if ($1487) { label = 252; break; } else { label = 253; break; }
    case 252: 
      var $1489=$qn;
      var $1490=((($1489)+(1))|0);
      var $1491=($1490<<2);
      var $1492=STACKTOP;STACKTOP = (STACKTOP + $1491)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1499 = $1492;label = 254; break;
    case 253: 
      var $1494=$qn;
      var $1495=((($1494)+(1))|0);
      var $1496=($1495<<2);
      var $1497=___gmp_tmp_reentrant_alloc($__tmp_marker, $1496);
      var $1499 = $1497;label = 254; break;
    case 254: 
      var $1499;
      var $1500=$1499;
      $new_dp=$1500;
      var $1501=$new_dp;
      var $1502=$4;
      var $1503=$5;
      var $1504=(($1502+($1503<<2))|0);
      var $1505=$qn;
      var $1506=((($1505)+(1))|0);
      var $1507=(((-$1506))|0);
      var $1508=(($1504+($1507<<2))|0);
      var $1509=$qn;
      var $1510=((($1509)+(1))|0);
      var $1511=$cnt;
      var $1512=___gmpn_lshift($1501, $1508, $1510, $1511);
      var $1513=$5;
      var $1514=$qn;
      var $1515=((($1514)+(1))|0);
      var $1516=((($1513)-($1515))|0);
      var $1517=((($1516)-(1))|0);
      var $1518=$4;
      var $1519=(($1518+($1517<<2))|0);
      var $1520=HEAP32[(($1519)>>2)];
      var $1521=$cnt;
      var $1522=(((32)-($1521))|0);
      var $1523=$1520 >>> (($1522)>>>0);
      var $1524=$new_dp;
      var $1525=(($1524)|0);
      var $1526=HEAP32[(($1525)>>2)];
      var $1527=$1526 | $1523;
      HEAP32[(($1525)>>2)]=$1527;
      var $1528=$qn;
      var $1529=((($1528)+(1))|0);
      var $1530=(($1529)|0)==2;
      if ($1530) { label = 255; break; } else { label = 256; break; }
    case 255: 
      var $1532=$tp;
      var $1533=$new_np;
      var $1534=$new_nn;
      var $1535=$new_dp;
      var $1536=___gmpn_divrem_2($1532, 0, $1533, $1534, $1535);
      $qh=$1536;
      label = 340; break;
    case 256: 
      var $1538=$qn;
      var $1539=(($1538)|0) >= 199;
      if ($1539) { label = 295; break; } else { label = 257; break; }
    case 257: 
      label = 258; break;
    case 258: 
      label = 259; break;
    case 259: 
      label = 260; break;
    case 260: 
      label = 261; break;
    case 261: 
      label = 262; break;
    case 262: 
      label = 263; break;
    case 263: 
      label = 264; break;
    case 264: 
      label = 265; break;
    case 265: 
      label = 266; break;
    case 266: 
      var $1550=$qn;
      var $1551=$new_dp;
      var $1552=(($1551+($1550<<2))|0);
      var $1553=HEAP32[(($1552)>>2)];
      var $1554=$1553 >>> 16;
      $__d181=$1554;
      var $1555=$qn;
      var $1556=$new_dp;
      var $1557=(($1556+($1555<<2))|0);
      var $1558=HEAP32[(($1557)>>2)];
      var $1559=$1558 & 65535;
      $__d082=$1559;
      var $1560=$qn;
      var $1561=$new_dp;
      var $1562=(($1561+($1560<<2))|0);
      var $1563=HEAP32[(($1562)>>2)];
      var $1564=$1563 ^ -1;
      var $1565=$__d181;
      var $1566=Math.floor(((($1564)>>>0))/((($1565)>>>0)));
      $__q183=$1566;
      var $1567=$qn;
      var $1568=$new_dp;
      var $1569=(($1568+($1567<<2))|0);
      var $1570=HEAP32[(($1569)>>2)];
      var $1571=$1570 ^ -1;
      var $1572=$__q183;
      var $1573=$__d181;
      var $1574=Math.imul($1572,$1573);
      var $1575=((($1571)-($1574))|0);
      $__r185=$1575;
      var $1576=$__q183;
      var $1577=$__d082;
      var $1578=Math.imul($1576,$1577);
      $__m87=$1578;
      var $1579=$__r185;
      var $1580=($1579<<16);
      var $1581=$1580 | 65535;
      $__r185=$1581;
      var $1582=$__r185;
      var $1583=$__m87;
      var $1584=(($1582)>>>0) < (($1583)>>>0);
      if ($1584) { label = 267; break; } else { label = 272; break; }
    case 267: 
      var $1586=$__q183;
      var $1587=((($1586)-(1))|0);
      $__q183=$1587;
      var $1588=$qn;
      var $1589=$new_dp;
      var $1590=(($1589+($1588<<2))|0);
      var $1591=HEAP32[(($1590)>>2)];
      var $1592=$__r185;
      var $1593=((($1592)+($1591))|0);
      $__r185=$1593;
      var $1594=$__r185;
      var $1595=$qn;
      var $1596=$new_dp;
      var $1597=(($1596+($1595<<2))|0);
      var $1598=HEAP32[(($1597)>>2)];
      var $1599=(($1594)>>>0) >= (($1598)>>>0);
      if ($1599) { label = 268; break; } else { label = 271; break; }
    case 268: 
      var $1601=$__r185;
      var $1602=$__m87;
      var $1603=(($1601)>>>0) < (($1602)>>>0);
      if ($1603) { label = 269; break; } else { label = 270; break; }
    case 269: 
      var $1605=$__q183;
      var $1606=((($1605)-(1))|0);
      $__q183=$1606;
      var $1607=$qn;
      var $1608=$new_dp;
      var $1609=(($1608+($1607<<2))|0);
      var $1610=HEAP32[(($1609)>>2)];
      var $1611=$__r185;
      var $1612=((($1611)+($1610))|0);
      $__r185=$1612;
      label = 270; break;
    case 270: 
      label = 271; break;
    case 271: 
      label = 272; break;
    case 272: 
      var $1616=$__m87;
      var $1617=$__r185;
      var $1618=((($1617)-($1616))|0);
      $__r185=$1618;
      var $1619=$__r185;
      var $1620=$__d181;
      var $1621=Math.floor(((($1619)>>>0))/((($1620)>>>0)));
      $__q084=$1621;
      var $1622=$__r185;
      var $1623=$__q084;
      var $1624=$__d181;
      var $1625=Math.imul($1623,$1624);
      var $1626=((($1622)-($1625))|0);
      $__r086=$1626;
      var $1627=$__q084;
      var $1628=$__d082;
      var $1629=Math.imul($1627,$1628);
      $__m87=$1629;
      var $1630=$__r086;
      var $1631=($1630<<16);
      var $1632=$1631 | 65535;
      $__r086=$1632;
      var $1633=$__r086;
      var $1634=$__m87;
      var $1635=(($1633)>>>0) < (($1634)>>>0);
      if ($1635) { label = 273; break; } else { label = 278; break; }
    case 273: 
      var $1637=$__q084;
      var $1638=((($1637)-(1))|0);
      $__q084=$1638;
      var $1639=$qn;
      var $1640=$new_dp;
      var $1641=(($1640+($1639<<2))|0);
      var $1642=HEAP32[(($1641)>>2)];
      var $1643=$__r086;
      var $1644=((($1643)+($1642))|0);
      $__r086=$1644;
      var $1645=$__r086;
      var $1646=$qn;
      var $1647=$new_dp;
      var $1648=(($1647+($1646<<2))|0);
      var $1649=HEAP32[(($1648)>>2)];
      var $1650=(($1645)>>>0) >= (($1649)>>>0);
      if ($1650) { label = 274; break; } else { label = 277; break; }
    case 274: 
      var $1652=$__r086;
      var $1653=$__m87;
      var $1654=(($1652)>>>0) < (($1653)>>>0);
      if ($1654) { label = 275; break; } else { label = 276; break; }
    case 275: 
      var $1656=$__q084;
      var $1657=((($1656)-(1))|0);
      $__q084=$1657;
      var $1658=$qn;
      var $1659=$new_dp;
      var $1660=(($1659+($1658<<2))|0);
      var $1661=HEAP32[(($1660)>>2)];
      var $1662=$__r086;
      var $1663=((($1662)+($1661))|0);
      $__r086=$1663;
      label = 276; break;
    case 276: 
      label = 277; break;
    case 277: 
      label = 278; break;
    case 278: 
      var $1667=$__m87;
      var $1668=$__r086;
      var $1669=((($1668)-($1667))|0);
      $__r086=$1669;
      var $1670=$__q183;
      var $1671=($1670<<16);
      var $1672=$__q084;
      var $1673=$1671 | $1672;
      $v75=$1673;
      var $1674=$__r086;
      $dummy80=$1674;
      label = 279; break;
    case 279: 
      label = 280; break;
    case 280: 
      var $1677=$qn;
      var $1678=$new_dp;
      var $1679=(($1678+($1677<<2))|0);
      var $1680=HEAP32[(($1679)>>2)];
      var $1681=$v75;
      var $1682=Math.imul($1680,$1681);
      $p76=$1682;
      var $1683=$qn;
      var $1684=((($1683)-(1))|0);
      var $1685=$new_dp;
      var $1686=(($1685+($1684<<2))|0);
      var $1687=HEAP32[(($1686)>>2)];
      var $1688=$p76;
      var $1689=((($1688)+($1687))|0);
      $p76=$1689;
      var $1690=$p76;
      var $1691=$qn;
      var $1692=((($1691)-(1))|0);
      var $1693=$new_dp;
      var $1694=(($1693+($1692<<2))|0);
      var $1695=HEAP32[(($1694)>>2)];
      var $1696=(($1690)>>>0) < (($1695)>>>0);
      if ($1696) { label = 281; break; } else { label = 282; break; }
    case 281: 
      var $1698=$v75;
      var $1699=((($1698)-(1))|0);
      $v75=$1699;
      var $1700=$p76;
      var $1701=$qn;
      var $1702=$new_dp;
      var $1703=(($1702+($1701<<2))|0);
      var $1704=HEAP32[(($1703)>>2)];
      var $1705=(($1700)>>>0) >= (($1704)>>>0);
      var $1706=(($1705)&1);
      var $1707=(((-$1706))|0);
      $mask79=$1707;
      var $1708=$qn;
      var $1709=$new_dp;
      var $1710=(($1709+($1708<<2))|0);
      var $1711=HEAP32[(($1710)>>2)];
      var $1712=$p76;
      var $1713=((($1712)-($1711))|0);
      $p76=$1713;
      var $1714=$mask79;
      var $1715=$v75;
      var $1716=((($1715)+($1714))|0);
      $v75=$1716;
      var $1717=$mask79;
      var $1718=$qn;
      var $1719=$new_dp;
      var $1720=(($1719+($1718<<2))|0);
      var $1721=HEAP32[(($1720)>>2)];
      var $1722=$1717 & $1721;
      var $1723=$p76;
      var $1724=((($1723)-($1722))|0);
      $p76=$1724;
      label = 282; break;
    case 282: 
      label = 283; break;
    case 283: 
      var $1727=$qn;
      var $1728=((($1727)-(1))|0);
      var $1729=$new_dp;
      var $1730=(($1729+($1728<<2))|0);
      var $1731=HEAP32[(($1730)>>2)];
      $__u96=$1731;
      var $1732=$v75;
      $__v97=$1732;
      var $1733=$__u96;
      var $1734=$1733 & 65535;
      $__ul92=$1734;
      var $1735=$__u96;
      var $1736=$1735 >>> 16;
      $__uh94=$1736;
      var $1737=$__v97;
      var $1738=$1737 & 65535;
      $__vl93=$1738;
      var $1739=$__v97;
      var $1740=$1739 >>> 16;
      $__vh95=$1740;
      var $1741=$__ul92;
      var $1742=$__vl93;
      var $1743=Math.imul($1741,$1742);
      $__x088=$1743;
      var $1744=$__ul92;
      var $1745=$__vh95;
      var $1746=Math.imul($1744,$1745);
      $__x189=$1746;
      var $1747=$__uh94;
      var $1748=$__vl93;
      var $1749=Math.imul($1747,$1748);
      $__x290=$1749;
      var $1750=$__uh94;
      var $1751=$__vh95;
      var $1752=Math.imul($1750,$1751);
      $__x391=$1752;
      var $1753=$__x088;
      var $1754=$1753 >>> 16;
      var $1755=$__x189;
      var $1756=((($1755)+($1754))|0);
      $__x189=$1756;
      var $1757=$__x290;
      var $1758=$__x189;
      var $1759=((($1758)+($1757))|0);
      $__x189=$1759;
      var $1760=$__x189;
      var $1761=$__x290;
      var $1762=(($1760)>>>0) < (($1761)>>>0);
      if ($1762) { label = 284; break; } else { label = 285; break; }
    case 284: 
      var $1764=$__x391;
      var $1765=((($1764)+(65536))|0);
      $__x391=$1765;
      label = 285; break;
    case 285: 
      var $1767=$__x391;
      var $1768=$__x189;
      var $1769=$1768 >>> 16;
      var $1770=((($1767)+($1769))|0);
      $t177=$1770;
      var $1771=$__x189;
      var $1772=$1771 << 16;
      var $1773=$__x088;
      var $1774=$1773 & 65535;
      var $1775=((($1772)+($1774))|0);
      $t078=$1775;
      label = 286; break;
    case 286: 
      var $1777=$t177;
      var $1778=$p76;
      var $1779=((($1778)+($1777))|0);
      $p76=$1779;
      var $1780=$p76;
      var $1781=$t177;
      var $1782=(($1780)>>>0) < (($1781)>>>0);
      if ($1782) { label = 287; break; } else { label = 293; break; }
    case 287: 
      var $1784=$v75;
      var $1785=((($1784)-(1))|0);
      $v75=$1785;
      var $1786=$p76;
      var $1787=$qn;
      var $1788=$new_dp;
      var $1789=(($1788+($1787<<2))|0);
      var $1790=HEAP32[(($1789)>>2)];
      var $1791=(($1786)>>>0) >= (($1790)>>>0);
      if ($1791) { label = 288; break; } else { label = 292; break; }
    case 288: 
      var $1793=$p76;
      var $1794=$qn;
      var $1795=$new_dp;
      var $1796=(($1795+($1794<<2))|0);
      var $1797=HEAP32[(($1796)>>2)];
      var $1798=(($1793)>>>0) > (($1797)>>>0);
      if ($1798) { label = 290; break; } else { label = 289; break; }
    case 289: 
      var $1800=$t078;
      var $1801=$qn;
      var $1802=((($1801)-(1))|0);
      var $1803=$new_dp;
      var $1804=(($1803+($1802<<2))|0);
      var $1805=HEAP32[(($1804)>>2)];
      var $1806=(($1800)>>>0) >= (($1805)>>>0);
      if ($1806) { label = 290; break; } else { label = 291; break; }
    case 290: 
      var $1808=$v75;
      var $1809=((($1808)-(1))|0);
      $v75=$1809;
      label = 291; break;
    case 291: 
      label = 292; break;
    case 292: 
      label = 293; break;
    case 293: 
      var $1813=$v75;
      var $1814=(($dinv)|0);
      HEAP32[(($1814)>>2)]=$1813;
      label = 294; break;
    case 294: 
      var $1816=$tp;
      var $1817=$new_np;
      var $1818=$new_nn;
      var $1819=$new_dp;
      var $1820=$qn;
      var $1821=((($1820)+(1))|0);
      var $1822=(($dinv)|0);
      var $1823=HEAP32[(($1822)>>2)];
      var $1824=___gmpn_sbpi1_divappr_q($1816, $1817, $1818, $1819, $1821, $1823);
      $qh=$1824;
      label = 339; break;
    case 295: 
      var $1826=$qn;
      var $1827=(($1826)|0) >= 1999;
      if ($1827) { label = 334; break; } else { label = 296; break; }
    case 296: 
      label = 297; break;
    case 297: 
      label = 298; break;
    case 298: 
      label = 299; break;
    case 299: 
      label = 300; break;
    case 300: 
      label = 301; break;
    case 301: 
      label = 302; break;
    case 302: 
      label = 303; break;
    case 303: 
      label = 304; break;
    case 304: 
      label = 305; break;
    case 305: 
      var $1838=$qn;
      var $1839=$new_dp;
      var $1840=(($1839+($1838<<2))|0);
      var $1841=HEAP32[(($1840)>>2)];
      var $1842=$1841 >>> 16;
      $__d1104=$1842;
      var $1843=$qn;
      var $1844=$new_dp;
      var $1845=(($1844+($1843<<2))|0);
      var $1846=HEAP32[(($1845)>>2)];
      var $1847=$1846 & 65535;
      $__d0105=$1847;
      var $1848=$qn;
      var $1849=$new_dp;
      var $1850=(($1849+($1848<<2))|0);
      var $1851=HEAP32[(($1850)>>2)];
      var $1852=$1851 ^ -1;
      var $1853=$__d1104;
      var $1854=Math.floor(((($1852)>>>0))/((($1853)>>>0)));
      $__q1106=$1854;
      var $1855=$qn;
      var $1856=$new_dp;
      var $1857=(($1856+($1855<<2))|0);
      var $1858=HEAP32[(($1857)>>2)];
      var $1859=$1858 ^ -1;
      var $1860=$__q1106;
      var $1861=$__d1104;
      var $1862=Math.imul($1860,$1861);
      var $1863=((($1859)-($1862))|0);
      $__r1108=$1863;
      var $1864=$__q1106;
      var $1865=$__d0105;
      var $1866=Math.imul($1864,$1865);
      $__m110=$1866;
      var $1867=$__r1108;
      var $1868=($1867<<16);
      var $1869=$1868 | 65535;
      $__r1108=$1869;
      var $1870=$__r1108;
      var $1871=$__m110;
      var $1872=(($1870)>>>0) < (($1871)>>>0);
      if ($1872) { label = 306; break; } else { label = 311; break; }
    case 306: 
      var $1874=$__q1106;
      var $1875=((($1874)-(1))|0);
      $__q1106=$1875;
      var $1876=$qn;
      var $1877=$new_dp;
      var $1878=(($1877+($1876<<2))|0);
      var $1879=HEAP32[(($1878)>>2)];
      var $1880=$__r1108;
      var $1881=((($1880)+($1879))|0);
      $__r1108=$1881;
      var $1882=$__r1108;
      var $1883=$qn;
      var $1884=$new_dp;
      var $1885=(($1884+($1883<<2))|0);
      var $1886=HEAP32[(($1885)>>2)];
      var $1887=(($1882)>>>0) >= (($1886)>>>0);
      if ($1887) { label = 307; break; } else { label = 310; break; }
    case 307: 
      var $1889=$__r1108;
      var $1890=$__m110;
      var $1891=(($1889)>>>0) < (($1890)>>>0);
      if ($1891) { label = 308; break; } else { label = 309; break; }
    case 308: 
      var $1893=$__q1106;
      var $1894=((($1893)-(1))|0);
      $__q1106=$1894;
      var $1895=$qn;
      var $1896=$new_dp;
      var $1897=(($1896+($1895<<2))|0);
      var $1898=HEAP32[(($1897)>>2)];
      var $1899=$__r1108;
      var $1900=((($1899)+($1898))|0);
      $__r1108=$1900;
      label = 309; break;
    case 309: 
      label = 310; break;
    case 310: 
      label = 311; break;
    case 311: 
      var $1904=$__m110;
      var $1905=$__r1108;
      var $1906=((($1905)-($1904))|0);
      $__r1108=$1906;
      var $1907=$__r1108;
      var $1908=$__d1104;
      var $1909=Math.floor(((($1907)>>>0))/((($1908)>>>0)));
      $__q0107=$1909;
      var $1910=$__r1108;
      var $1911=$__q0107;
      var $1912=$__d1104;
      var $1913=Math.imul($1911,$1912);
      var $1914=((($1910)-($1913))|0);
      $__r0109=$1914;
      var $1915=$__q0107;
      var $1916=$__d0105;
      var $1917=Math.imul($1915,$1916);
      $__m110=$1917;
      var $1918=$__r0109;
      var $1919=($1918<<16);
      var $1920=$1919 | 65535;
      $__r0109=$1920;
      var $1921=$__r0109;
      var $1922=$__m110;
      var $1923=(($1921)>>>0) < (($1922)>>>0);
      if ($1923) { label = 312; break; } else { label = 317; break; }
    case 312: 
      var $1925=$__q0107;
      var $1926=((($1925)-(1))|0);
      $__q0107=$1926;
      var $1927=$qn;
      var $1928=$new_dp;
      var $1929=(($1928+($1927<<2))|0);
      var $1930=HEAP32[(($1929)>>2)];
      var $1931=$__r0109;
      var $1932=((($1931)+($1930))|0);
      $__r0109=$1932;
      var $1933=$__r0109;
      var $1934=$qn;
      var $1935=$new_dp;
      var $1936=(($1935+($1934<<2))|0);
      var $1937=HEAP32[(($1936)>>2)];
      var $1938=(($1933)>>>0) >= (($1937)>>>0);
      if ($1938) { label = 313; break; } else { label = 316; break; }
    case 313: 
      var $1940=$__r0109;
      var $1941=$__m110;
      var $1942=(($1940)>>>0) < (($1941)>>>0);
      if ($1942) { label = 314; break; } else { label = 315; break; }
    case 314: 
      var $1944=$__q0107;
      var $1945=((($1944)-(1))|0);
      $__q0107=$1945;
      var $1946=$qn;
      var $1947=$new_dp;
      var $1948=(($1947+($1946<<2))|0);
      var $1949=HEAP32[(($1948)>>2)];
      var $1950=$__r0109;
      var $1951=((($1950)+($1949))|0);
      $__r0109=$1951;
      label = 315; break;
    case 315: 
      label = 316; break;
    case 316: 
      label = 317; break;
    case 317: 
      var $1955=$__m110;
      var $1956=$__r0109;
      var $1957=((($1956)-($1955))|0);
      $__r0109=$1957;
      var $1958=$__q1106;
      var $1959=($1958<<16);
      var $1960=$__q0107;
      var $1961=$1959 | $1960;
      $v98=$1961;
      var $1962=$__r0109;
      $dummy103=$1962;
      label = 318; break;
    case 318: 
      label = 319; break;
    case 319: 
      var $1965=$qn;
      var $1966=$new_dp;
      var $1967=(($1966+($1965<<2))|0);
      var $1968=HEAP32[(($1967)>>2)];
      var $1969=$v98;
      var $1970=Math.imul($1968,$1969);
      $p99=$1970;
      var $1971=$qn;
      var $1972=((($1971)-(1))|0);
      var $1973=$new_dp;
      var $1974=(($1973+($1972<<2))|0);
      var $1975=HEAP32[(($1974)>>2)];
      var $1976=$p99;
      var $1977=((($1976)+($1975))|0);
      $p99=$1977;
      var $1978=$p99;
      var $1979=$qn;
      var $1980=((($1979)-(1))|0);
      var $1981=$new_dp;
      var $1982=(($1981+($1980<<2))|0);
      var $1983=HEAP32[(($1982)>>2)];
      var $1984=(($1978)>>>0) < (($1983)>>>0);
      if ($1984) { label = 320; break; } else { label = 321; break; }
    case 320: 
      var $1986=$v98;
      var $1987=((($1986)-(1))|0);
      $v98=$1987;
      var $1988=$p99;
      var $1989=$qn;
      var $1990=$new_dp;
      var $1991=(($1990+($1989<<2))|0);
      var $1992=HEAP32[(($1991)>>2)];
      var $1993=(($1988)>>>0) >= (($1992)>>>0);
      var $1994=(($1993)&1);
      var $1995=(((-$1994))|0);
      $mask102=$1995;
      var $1996=$qn;
      var $1997=$new_dp;
      var $1998=(($1997+($1996<<2))|0);
      var $1999=HEAP32[(($1998)>>2)];
      var $2000=$p99;
      var $2001=((($2000)-($1999))|0);
      $p99=$2001;
      var $2002=$mask102;
      var $2003=$v98;
      var $2004=((($2003)+($2002))|0);
      $v98=$2004;
      var $2005=$mask102;
      var $2006=$qn;
      var $2007=$new_dp;
      var $2008=(($2007+($2006<<2))|0);
      var $2009=HEAP32[(($2008)>>2)];
      var $2010=$2005 & $2009;
      var $2011=$p99;
      var $2012=((($2011)-($2010))|0);
      $p99=$2012;
      label = 321; break;
    case 321: 
      label = 322; break;
    case 322: 
      var $2015=$qn;
      var $2016=((($2015)-(1))|0);
      var $2017=$new_dp;
      var $2018=(($2017+($2016<<2))|0);
      var $2019=HEAP32[(($2018)>>2)];
      $__u119=$2019;
      var $2020=$v98;
      $__v120=$2020;
      var $2021=$__u119;
      var $2022=$2021 & 65535;
      $__ul115=$2022;
      var $2023=$__u119;
      var $2024=$2023 >>> 16;
      $__uh117=$2024;
      var $2025=$__v120;
      var $2026=$2025 & 65535;
      $__vl116=$2026;
      var $2027=$__v120;
      var $2028=$2027 >>> 16;
      $__vh118=$2028;
      var $2029=$__ul115;
      var $2030=$__vl116;
      var $2031=Math.imul($2029,$2030);
      $__x0111=$2031;
      var $2032=$__ul115;
      var $2033=$__vh118;
      var $2034=Math.imul($2032,$2033);
      $__x1112=$2034;
      var $2035=$__uh117;
      var $2036=$__vl116;
      var $2037=Math.imul($2035,$2036);
      $__x2113=$2037;
      var $2038=$__uh117;
      var $2039=$__vh118;
      var $2040=Math.imul($2038,$2039);
      $__x3114=$2040;
      var $2041=$__x0111;
      var $2042=$2041 >>> 16;
      var $2043=$__x1112;
      var $2044=((($2043)+($2042))|0);
      $__x1112=$2044;
      var $2045=$__x2113;
      var $2046=$__x1112;
      var $2047=((($2046)+($2045))|0);
      $__x1112=$2047;
      var $2048=$__x1112;
      var $2049=$__x2113;
      var $2050=(($2048)>>>0) < (($2049)>>>0);
      if ($2050) { label = 323; break; } else { label = 324; break; }
    case 323: 
      var $2052=$__x3114;
      var $2053=((($2052)+(65536))|0);
      $__x3114=$2053;
      label = 324; break;
    case 324: 
      var $2055=$__x3114;
      var $2056=$__x1112;
      var $2057=$2056 >>> 16;
      var $2058=((($2055)+($2057))|0);
      $t1100=$2058;
      var $2059=$__x1112;
      var $2060=$2059 << 16;
      var $2061=$__x0111;
      var $2062=$2061 & 65535;
      var $2063=((($2060)+($2062))|0);
      $t0101=$2063;
      label = 325; break;
    case 325: 
      var $2065=$t1100;
      var $2066=$p99;
      var $2067=((($2066)+($2065))|0);
      $p99=$2067;
      var $2068=$p99;
      var $2069=$t1100;
      var $2070=(($2068)>>>0) < (($2069)>>>0);
      if ($2070) { label = 326; break; } else { label = 332; break; }
    case 326: 
      var $2072=$v98;
      var $2073=((($2072)-(1))|0);
      $v98=$2073;
      var $2074=$p99;
      var $2075=$qn;
      var $2076=$new_dp;
      var $2077=(($2076+($2075<<2))|0);
      var $2078=HEAP32[(($2077)>>2)];
      var $2079=(($2074)>>>0) >= (($2078)>>>0);
      if ($2079) { label = 327; break; } else { label = 331; break; }
    case 327: 
      var $2081=$p99;
      var $2082=$qn;
      var $2083=$new_dp;
      var $2084=(($2083+($2082<<2))|0);
      var $2085=HEAP32[(($2084)>>2)];
      var $2086=(($2081)>>>0) > (($2085)>>>0);
      if ($2086) { label = 329; break; } else { label = 328; break; }
    case 328: 
      var $2088=$t0101;
      var $2089=$qn;
      var $2090=((($2089)-(1))|0);
      var $2091=$new_dp;
      var $2092=(($2091+($2090<<2))|0);
      var $2093=HEAP32[(($2092)>>2)];
      var $2094=(($2088)>>>0) >= (($2093)>>>0);
      if ($2094) { label = 329; break; } else { label = 330; break; }
    case 329: 
      var $2096=$v98;
      var $2097=((($2096)-(1))|0);
      $v98=$2097;
      label = 330; break;
    case 330: 
      label = 331; break;
    case 331: 
      label = 332; break;
    case 332: 
      var $2101=$v98;
      var $2102=(($dinv)|0);
      HEAP32[(($2102)>>2)]=$2101;
      label = 333; break;
    case 333: 
      var $2104=$tp;
      var $2105=$new_np;
      var $2106=$new_nn;
      var $2107=$new_dp;
      var $2108=$qn;
      var $2109=((($2108)+(1))|0);
      var $2110=___gmpn_dcpi1_divappr_q($2104, $2105, $2106, $2107, $2109, $dinv);
      $qh=$2110;
      label = 338; break;
    case 334: 
      var $2112=$new_nn;
      var $2113=$qn;
      var $2114=((($2113)+(1))|0);
      var $2115=___gmpn_mu_divappr_q_itch($2112, $2114, 0);
      $itch121=$2115;
      var $2116=$itch121;
      var $2117=($2116<<2);
      var $2118=(($2117)>>>0) < 65536;
      if ($2118) { label = 335; break; } else { label = 336; break; }
    case 335: 
      var $2120=$itch121;
      var $2121=($2120<<2);
      var $2122=STACKTOP;STACKTOP = (STACKTOP + $2121)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $2128 = $2122;label = 337; break;
    case 336: 
      var $2124=$itch121;
      var $2125=($2124<<2);
      var $2126=___gmp_tmp_reentrant_alloc($__tmp_marker, $2125);
      var $2128 = $2126;label = 337; break;
    case 337: 
      var $2128;
      var $2129=$2128;
      $scratch122=$2129;
      var $2130=$tp;
      var $2131=$new_np;
      var $2132=$new_nn;
      var $2133=$new_dp;
      var $2134=$qn;
      var $2135=((($2134)+(1))|0);
      var $2136=$scratch122;
      var $2137=___gmpn_mu_divappr_q($2130, $2131, $2132, $2133, $2135, $2136);
      $qh=$2137;
      label = 338; break;
    case 338: 
      label = 339; break;
    case 339: 
      label = 340; break;
    case 340: 
      var $2141=$cy;
      var $2142=(($2141)|0)==0;
      if ($2142) { label = 341; break; } else { label = 342; break; }
    case 341: 
      var $2144=$qh;
      var $2145=$qn;
      var $2146=$tp;
      var $2147=(($2146+($2145<<2))|0);
      HEAP32[(($2147)>>2)]=$2144;
      label = 349; break;
    case 342: 
      var $2149=$qh;
      var $2150=(($2149)|0)!=0;
      if ($2150) { label = 343; break; } else { label = 348; break; }
    case 343: 
      var $2152=$new_nn;
      var $2153=$qn;
      var $2154=((($2153)+(1))|0);
      var $2155=((($2152)-($2154))|0);
      $n124=$2155;
      $i123=0;
      label = 344; break;
    case 344: 
      var $2157=$i123;
      var $2158=$n124;
      var $2159=(($2157)|0) < (($2158)|0);
      if ($2159) { label = 345; break; } else { label = 347; break; }
    case 345: 
      var $2161=$i123;
      var $2162=$tp;
      var $2163=(($2162+($2161<<2))|0);
      HEAP32[(($2163)>>2)]=-1;
      label = 346; break;
    case 346: 
      var $2165=$i123;
      var $2166=((($2165)+(1))|0);
      $i123=$2166;
      label = 344; break;
    case 347: 
      $qh=0;
      label = 348; break;
    case 348: 
      label = 349; break;
    case 349: 
      label = 454; break;
    case 350: 
      label = 351; break;
    case 351: 
      label = 352; break;
    case 352: 
      label = 353; break;
    case 353: 
      label = 354; break;
    case 354: 
      label = 355; break;
    case 355: 
      label = 356; break;
    case 356: 
      label = 357; break;
    case 357: 
      label = 358; break;
    case 358: 
      var $2179=$new_nn;
      var $2180=(($2179)|0)!=0;
      if ($2180) { label = 359; break; } else { label = 365; break; }
    case 359: 
      var $2182=$new_nn;
      var $2183=((($2182)-(1))|0);
      $__n125=$2183;
      var $2184=$new_np;
      $__dst126=$2184;
      var $2185=$2;
      var $2186=$3;
      var $2187=(($2185+($2186<<2))|0);
      var $2188=$new_nn;
      var $2189=(((-$2188))|0);
      var $2190=(($2187+($2189<<2))|0);
      $__src127=$2190;
      var $2191=$__src127;
      var $2192=(($2191+4)|0);
      $__src127=$2192;
      var $2193=HEAP32[(($2191)>>2)];
      $__x128=$2193;
      var $2194=$__n125;
      var $2195=(($2194)|0)!=0;
      if ($2195) { label = 360; break; } else { label = 364; break; }
    case 360: 
      label = 361; break;
    case 361: 
      var $2198=$__x128;
      var $2199=$__dst126;
      var $2200=(($2199+4)|0);
      $__dst126=$2200;
      HEAP32[(($2199)>>2)]=$2198;
      var $2201=$__src127;
      var $2202=(($2201+4)|0);
      $__src127=$2202;
      var $2203=HEAP32[(($2201)>>2)];
      $__x128=$2203;
      label = 362; break;
    case 362: 
      var $2205=$__n125;
      var $2206=((($2205)-(1))|0);
      $__n125=$2206;
      var $2207=(($2206)|0)!=0;
      if ($2207) { label = 361; break; } else { label = 363; break; }
    case 363: 
      label = 364; break;
    case 364: 
      var $2210=$__x128;
      var $2211=$__dst126;
      var $2212=(($2211+4)|0);
      $__dst126=$2212;
      HEAP32[(($2211)>>2)]=$2210;
      label = 365; break;
    case 365: 
      label = 366; break;
    case 366: 
      label = 367; break;
    case 367: 
      var $2216=$4;
      var $2217=$5;
      var $2218=(($2216+($2217<<2))|0);
      var $2219=$qn;
      var $2220=((($2219)+(1))|0);
      var $2221=(((-$2220))|0);
      var $2222=(($2218+($2221<<2))|0);
      $new_dp=$2222;
      var $2223=$qn;
      var $2224=(($2223)|0)==1;
      if ($2224) { label = 368; break; } else { label = 369; break; }
    case 368: 
      var $2226=$tp;
      var $2227=$new_np;
      var $2228=$new_nn;
      var $2229=$new_dp;
      var $2230=___gmpn_divrem_2($2226, 0, $2227, $2228, $2229);
      $qh=$2230;
      label = 453; break;
    case 369: 
      var $2232=$qn;
      var $2233=(($2232)|0) >= 199;
      if ($2233) { label = 408; break; } else { label = 370; break; }
    case 370: 
      label = 371; break;
    case 371: 
      label = 372; break;
    case 372: 
      label = 373; break;
    case 373: 
      label = 374; break;
    case 374: 
      label = 375; break;
    case 375: 
      label = 376; break;
    case 376: 
      label = 377; break;
    case 377: 
      label = 378; break;
    case 378: 
      label = 379; break;
    case 379: 
      var $2244=$dh;
      var $2245=$2244 >>> 16;
      $__d1135=$2245;
      var $2246=$dh;
      var $2247=$2246 & 65535;
      $__d0136=$2247;
      var $2248=$dh;
      var $2249=$2248 ^ -1;
      var $2250=$__d1135;
      var $2251=Math.floor(((($2249)>>>0))/((($2250)>>>0)));
      $__q1137=$2251;
      var $2252=$dh;
      var $2253=$2252 ^ -1;
      var $2254=$__q1137;
      var $2255=$__d1135;
      var $2256=Math.imul($2254,$2255);
      var $2257=((($2253)-($2256))|0);
      $__r1139=$2257;
      var $2258=$__q1137;
      var $2259=$__d0136;
      var $2260=Math.imul($2258,$2259);
      $__m141=$2260;
      var $2261=$__r1139;
      var $2262=($2261<<16);
      var $2263=$2262 | 65535;
      $__r1139=$2263;
      var $2264=$__r1139;
      var $2265=$__m141;
      var $2266=(($2264)>>>0) < (($2265)>>>0);
      if ($2266) { label = 380; break; } else { label = 385; break; }
    case 380: 
      var $2268=$__q1137;
      var $2269=((($2268)-(1))|0);
      $__q1137=$2269;
      var $2270=$dh;
      var $2271=$__r1139;
      var $2272=((($2271)+($2270))|0);
      $__r1139=$2272;
      var $2273=$__r1139;
      var $2274=$dh;
      var $2275=(($2273)>>>0) >= (($2274)>>>0);
      if ($2275) { label = 381; break; } else { label = 384; break; }
    case 381: 
      var $2277=$__r1139;
      var $2278=$__m141;
      var $2279=(($2277)>>>0) < (($2278)>>>0);
      if ($2279) { label = 382; break; } else { label = 383; break; }
    case 382: 
      var $2281=$__q1137;
      var $2282=((($2281)-(1))|0);
      $__q1137=$2282;
      var $2283=$dh;
      var $2284=$__r1139;
      var $2285=((($2284)+($2283))|0);
      $__r1139=$2285;
      label = 383; break;
    case 383: 
      label = 384; break;
    case 384: 
      label = 385; break;
    case 385: 
      var $2289=$__m141;
      var $2290=$__r1139;
      var $2291=((($2290)-($2289))|0);
      $__r1139=$2291;
      var $2292=$__r1139;
      var $2293=$__d1135;
      var $2294=Math.floor(((($2292)>>>0))/((($2293)>>>0)));
      $__q0138=$2294;
      var $2295=$__r1139;
      var $2296=$__q0138;
      var $2297=$__d1135;
      var $2298=Math.imul($2296,$2297);
      var $2299=((($2295)-($2298))|0);
      $__r0140=$2299;
      var $2300=$__q0138;
      var $2301=$__d0136;
      var $2302=Math.imul($2300,$2301);
      $__m141=$2302;
      var $2303=$__r0140;
      var $2304=($2303<<16);
      var $2305=$2304 | 65535;
      $__r0140=$2305;
      var $2306=$__r0140;
      var $2307=$__m141;
      var $2308=(($2306)>>>0) < (($2307)>>>0);
      if ($2308) { label = 386; break; } else { label = 391; break; }
    case 386: 
      var $2310=$__q0138;
      var $2311=((($2310)-(1))|0);
      $__q0138=$2311;
      var $2312=$dh;
      var $2313=$__r0140;
      var $2314=((($2313)+($2312))|0);
      $__r0140=$2314;
      var $2315=$__r0140;
      var $2316=$dh;
      var $2317=(($2315)>>>0) >= (($2316)>>>0);
      if ($2317) { label = 387; break; } else { label = 390; break; }
    case 387: 
      var $2319=$__r0140;
      var $2320=$__m141;
      var $2321=(($2319)>>>0) < (($2320)>>>0);
      if ($2321) { label = 388; break; } else { label = 389; break; }
    case 388: 
      var $2323=$__q0138;
      var $2324=((($2323)-(1))|0);
      $__q0138=$2324;
      var $2325=$dh;
      var $2326=$__r0140;
      var $2327=((($2326)+($2325))|0);
      $__r0140=$2327;
      label = 389; break;
    case 389: 
      label = 390; break;
    case 390: 
      label = 391; break;
    case 391: 
      var $2331=$__m141;
      var $2332=$__r0140;
      var $2333=((($2332)-($2331))|0);
      $__r0140=$2333;
      var $2334=$__q1137;
      var $2335=($2334<<16);
      var $2336=$__q0138;
      var $2337=$2335 | $2336;
      $v129=$2337;
      var $2338=$__r0140;
      $dummy134=$2338;
      label = 392; break;
    case 392: 
      label = 393; break;
    case 393: 
      var $2341=$dh;
      var $2342=$v129;
      var $2343=Math.imul($2341,$2342);
      $p130=$2343;
      var $2344=$qn;
      var $2345=((($2344)-(1))|0);
      var $2346=$new_dp;
      var $2347=(($2346+($2345<<2))|0);
      var $2348=HEAP32[(($2347)>>2)];
      var $2349=$p130;
      var $2350=((($2349)+($2348))|0);
      $p130=$2350;
      var $2351=$p130;
      var $2352=$qn;
      var $2353=((($2352)-(1))|0);
      var $2354=$new_dp;
      var $2355=(($2354+($2353<<2))|0);
      var $2356=HEAP32[(($2355)>>2)];
      var $2357=(($2351)>>>0) < (($2356)>>>0);
      if ($2357) { label = 394; break; } else { label = 395; break; }
    case 394: 
      var $2359=$v129;
      var $2360=((($2359)-(1))|0);
      $v129=$2360;
      var $2361=$p130;
      var $2362=$dh;
      var $2363=(($2361)>>>0) >= (($2362)>>>0);
      var $2364=(($2363)&1);
      var $2365=(((-$2364))|0);
      $mask133=$2365;
      var $2366=$dh;
      var $2367=$p130;
      var $2368=((($2367)-($2366))|0);
      $p130=$2368;
      var $2369=$mask133;
      var $2370=$v129;
      var $2371=((($2370)+($2369))|0);
      $v129=$2371;
      var $2372=$mask133;
      var $2373=$dh;
      var $2374=$2372 & $2373;
      var $2375=$p130;
      var $2376=((($2375)-($2374))|0);
      $p130=$2376;
      label = 395; break;
    case 395: 
      label = 396; break;
    case 396: 
      var $2379=$qn;
      var $2380=((($2379)-(1))|0);
      var $2381=$new_dp;
      var $2382=(($2381+($2380<<2))|0);
      var $2383=HEAP32[(($2382)>>2)];
      $__u150=$2383;
      var $2384=$v129;
      $__v151=$2384;
      var $2385=$__u150;
      var $2386=$2385 & 65535;
      $__ul146=$2386;
      var $2387=$__u150;
      var $2388=$2387 >>> 16;
      $__uh148=$2388;
      var $2389=$__v151;
      var $2390=$2389 & 65535;
      $__vl147=$2390;
      var $2391=$__v151;
      var $2392=$2391 >>> 16;
      $__vh149=$2392;
      var $2393=$__ul146;
      var $2394=$__vl147;
      var $2395=Math.imul($2393,$2394);
      $__x0142=$2395;
      var $2396=$__ul146;
      var $2397=$__vh149;
      var $2398=Math.imul($2396,$2397);
      $__x1143=$2398;
      var $2399=$__uh148;
      var $2400=$__vl147;
      var $2401=Math.imul($2399,$2400);
      $__x2144=$2401;
      var $2402=$__uh148;
      var $2403=$__vh149;
      var $2404=Math.imul($2402,$2403);
      $__x3145=$2404;
      var $2405=$__x0142;
      var $2406=$2405 >>> 16;
      var $2407=$__x1143;
      var $2408=((($2407)+($2406))|0);
      $__x1143=$2408;
      var $2409=$__x2144;
      var $2410=$__x1143;
      var $2411=((($2410)+($2409))|0);
      $__x1143=$2411;
      var $2412=$__x1143;
      var $2413=$__x2144;
      var $2414=(($2412)>>>0) < (($2413)>>>0);
      if ($2414) { label = 397; break; } else { label = 398; break; }
    case 397: 
      var $2416=$__x3145;
      var $2417=((($2416)+(65536))|0);
      $__x3145=$2417;
      label = 398; break;
    case 398: 
      var $2419=$__x3145;
      var $2420=$__x1143;
      var $2421=$2420 >>> 16;
      var $2422=((($2419)+($2421))|0);
      $t1131=$2422;
      var $2423=$__x1143;
      var $2424=$2423 << 16;
      var $2425=$__x0142;
      var $2426=$2425 & 65535;
      var $2427=((($2424)+($2426))|0);
      $t0132=$2427;
      label = 399; break;
    case 399: 
      var $2429=$t1131;
      var $2430=$p130;
      var $2431=((($2430)+($2429))|0);
      $p130=$2431;
      var $2432=$p130;
      var $2433=$t1131;
      var $2434=(($2432)>>>0) < (($2433)>>>0);
      if ($2434) { label = 400; break; } else { label = 406; break; }
    case 400: 
      var $2436=$v129;
      var $2437=((($2436)-(1))|0);
      $v129=$2437;
      var $2438=$p130;
      var $2439=$dh;
      var $2440=(($2438)>>>0) >= (($2439)>>>0);
      if ($2440) { label = 401; break; } else { label = 405; break; }
    case 401: 
      var $2442=$p130;
      var $2443=$dh;
      var $2444=(($2442)>>>0) > (($2443)>>>0);
      if ($2444) { label = 403; break; } else { label = 402; break; }
    case 402: 
      var $2446=$t0132;
      var $2447=$qn;
      var $2448=((($2447)-(1))|0);
      var $2449=$new_dp;
      var $2450=(($2449+($2448<<2))|0);
      var $2451=HEAP32[(($2450)>>2)];
      var $2452=(($2446)>>>0) >= (($2451)>>>0);
      if ($2452) { label = 403; break; } else { label = 404; break; }
    case 403: 
      var $2454=$v129;
      var $2455=((($2454)-(1))|0);
      $v129=$2455;
      label = 404; break;
    case 404: 
      label = 405; break;
    case 405: 
      label = 406; break;
    case 406: 
      var $2459=$v129;
      var $2460=(($dinv)|0);
      HEAP32[(($2460)>>2)]=$2459;
      label = 407; break;
    case 407: 
      var $2462=$tp;
      var $2463=$new_np;
      var $2464=$new_nn;
      var $2465=$new_dp;
      var $2466=$qn;
      var $2467=((($2466)+(1))|0);
      var $2468=(($dinv)|0);
      var $2469=HEAP32[(($2468)>>2)];
      var $2470=___gmpn_sbpi1_divappr_q($2462, $2463, $2464, $2465, $2467, $2469);
      $qh=$2470;
      label = 452; break;
    case 408: 
      var $2472=$qn;
      var $2473=(($2472)|0) >= 1999;
      if ($2473) { label = 447; break; } else { label = 409; break; }
    case 409: 
      label = 410; break;
    case 410: 
      label = 411; break;
    case 411: 
      label = 412; break;
    case 412: 
      label = 413; break;
    case 413: 
      label = 414; break;
    case 414: 
      label = 415; break;
    case 415: 
      label = 416; break;
    case 416: 
      label = 417; break;
    case 417: 
      label = 418; break;
    case 418: 
      var $2484=$dh;
      var $2485=$2484 >>> 16;
      $__d1158=$2485;
      var $2486=$dh;
      var $2487=$2486 & 65535;
      $__d0159=$2487;
      var $2488=$dh;
      var $2489=$2488 ^ -1;
      var $2490=$__d1158;
      var $2491=Math.floor(((($2489)>>>0))/((($2490)>>>0)));
      $__q1160=$2491;
      var $2492=$dh;
      var $2493=$2492 ^ -1;
      var $2494=$__q1160;
      var $2495=$__d1158;
      var $2496=Math.imul($2494,$2495);
      var $2497=((($2493)-($2496))|0);
      $__r1162=$2497;
      var $2498=$__q1160;
      var $2499=$__d0159;
      var $2500=Math.imul($2498,$2499);
      $__m164=$2500;
      var $2501=$__r1162;
      var $2502=($2501<<16);
      var $2503=$2502 | 65535;
      $__r1162=$2503;
      var $2504=$__r1162;
      var $2505=$__m164;
      var $2506=(($2504)>>>0) < (($2505)>>>0);
      if ($2506) { label = 419; break; } else { label = 424; break; }
    case 419: 
      var $2508=$__q1160;
      var $2509=((($2508)-(1))|0);
      $__q1160=$2509;
      var $2510=$dh;
      var $2511=$__r1162;
      var $2512=((($2511)+($2510))|0);
      $__r1162=$2512;
      var $2513=$__r1162;
      var $2514=$dh;
      var $2515=(($2513)>>>0) >= (($2514)>>>0);
      if ($2515) { label = 420; break; } else { label = 423; break; }
    case 420: 
      var $2517=$__r1162;
      var $2518=$__m164;
      var $2519=(($2517)>>>0) < (($2518)>>>0);
      if ($2519) { label = 421; break; } else { label = 422; break; }
    case 421: 
      var $2521=$__q1160;
      var $2522=((($2521)-(1))|0);
      $__q1160=$2522;
      var $2523=$dh;
      var $2524=$__r1162;
      var $2525=((($2524)+($2523))|0);
      $__r1162=$2525;
      label = 422; break;
    case 422: 
      label = 423; break;
    case 423: 
      label = 424; break;
    case 424: 
      var $2529=$__m164;
      var $2530=$__r1162;
      var $2531=((($2530)-($2529))|0);
      $__r1162=$2531;
      var $2532=$__r1162;
      var $2533=$__d1158;
      var $2534=Math.floor(((($2532)>>>0))/((($2533)>>>0)));
      $__q0161=$2534;
      var $2535=$__r1162;
      var $2536=$__q0161;
      var $2537=$__d1158;
      var $2538=Math.imul($2536,$2537);
      var $2539=((($2535)-($2538))|0);
      $__r0163=$2539;
      var $2540=$__q0161;
      var $2541=$__d0159;
      var $2542=Math.imul($2540,$2541);
      $__m164=$2542;
      var $2543=$__r0163;
      var $2544=($2543<<16);
      var $2545=$2544 | 65535;
      $__r0163=$2545;
      var $2546=$__r0163;
      var $2547=$__m164;
      var $2548=(($2546)>>>0) < (($2547)>>>0);
      if ($2548) { label = 425; break; } else { label = 430; break; }
    case 425: 
      var $2550=$__q0161;
      var $2551=((($2550)-(1))|0);
      $__q0161=$2551;
      var $2552=$dh;
      var $2553=$__r0163;
      var $2554=((($2553)+($2552))|0);
      $__r0163=$2554;
      var $2555=$__r0163;
      var $2556=$dh;
      var $2557=(($2555)>>>0) >= (($2556)>>>0);
      if ($2557) { label = 426; break; } else { label = 429; break; }
    case 426: 
      var $2559=$__r0163;
      var $2560=$__m164;
      var $2561=(($2559)>>>0) < (($2560)>>>0);
      if ($2561) { label = 427; break; } else { label = 428; break; }
    case 427: 
      var $2563=$__q0161;
      var $2564=((($2563)-(1))|0);
      $__q0161=$2564;
      var $2565=$dh;
      var $2566=$__r0163;
      var $2567=((($2566)+($2565))|0);
      $__r0163=$2567;
      label = 428; break;
    case 428: 
      label = 429; break;
    case 429: 
      label = 430; break;
    case 430: 
      var $2571=$__m164;
      var $2572=$__r0163;
      var $2573=((($2572)-($2571))|0);
      $__r0163=$2573;
      var $2574=$__q1160;
      var $2575=($2574<<16);
      var $2576=$__q0161;
      var $2577=$2575 | $2576;
      $v152=$2577;
      var $2578=$__r0163;
      $dummy157=$2578;
      label = 431; break;
    case 431: 
      label = 432; break;
    case 432: 
      var $2581=$dh;
      var $2582=$v152;
      var $2583=Math.imul($2581,$2582);
      $p153=$2583;
      var $2584=$qn;
      var $2585=((($2584)-(1))|0);
      var $2586=$new_dp;
      var $2587=(($2586+($2585<<2))|0);
      var $2588=HEAP32[(($2587)>>2)];
      var $2589=$p153;
      var $2590=((($2589)+($2588))|0);
      $p153=$2590;
      var $2591=$p153;
      var $2592=$qn;
      var $2593=((($2592)-(1))|0);
      var $2594=$new_dp;
      var $2595=(($2594+($2593<<2))|0);
      var $2596=HEAP32[(($2595)>>2)];
      var $2597=(($2591)>>>0) < (($2596)>>>0);
      if ($2597) { label = 433; break; } else { label = 434; break; }
    case 433: 
      var $2599=$v152;
      var $2600=((($2599)-(1))|0);
      $v152=$2600;
      var $2601=$p153;
      var $2602=$dh;
      var $2603=(($2601)>>>0) >= (($2602)>>>0);
      var $2604=(($2603)&1);
      var $2605=(((-$2604))|0);
      $mask156=$2605;
      var $2606=$dh;
      var $2607=$p153;
      var $2608=((($2607)-($2606))|0);
      $p153=$2608;
      var $2609=$mask156;
      var $2610=$v152;
      var $2611=((($2610)+($2609))|0);
      $v152=$2611;
      var $2612=$mask156;
      var $2613=$dh;
      var $2614=$2612 & $2613;
      var $2615=$p153;
      var $2616=((($2615)-($2614))|0);
      $p153=$2616;
      label = 434; break;
    case 434: 
      label = 435; break;
    case 435: 
      var $2619=$qn;
      var $2620=((($2619)-(1))|0);
      var $2621=$new_dp;
      var $2622=(($2621+($2620<<2))|0);
      var $2623=HEAP32[(($2622)>>2)];
      $__u173=$2623;
      var $2624=$v152;
      $__v174=$2624;
      var $2625=$__u173;
      var $2626=$2625 & 65535;
      $__ul169=$2626;
      var $2627=$__u173;
      var $2628=$2627 >>> 16;
      $__uh171=$2628;
      var $2629=$__v174;
      var $2630=$2629 & 65535;
      $__vl170=$2630;
      var $2631=$__v174;
      var $2632=$2631 >>> 16;
      $__vh172=$2632;
      var $2633=$__ul169;
      var $2634=$__vl170;
      var $2635=Math.imul($2633,$2634);
      $__x0165=$2635;
      var $2636=$__ul169;
      var $2637=$__vh172;
      var $2638=Math.imul($2636,$2637);
      $__x1166=$2638;
      var $2639=$__uh171;
      var $2640=$__vl170;
      var $2641=Math.imul($2639,$2640);
      $__x2167=$2641;
      var $2642=$__uh171;
      var $2643=$__vh172;
      var $2644=Math.imul($2642,$2643);
      $__x3168=$2644;
      var $2645=$__x0165;
      var $2646=$2645 >>> 16;
      var $2647=$__x1166;
      var $2648=((($2647)+($2646))|0);
      $__x1166=$2648;
      var $2649=$__x2167;
      var $2650=$__x1166;
      var $2651=((($2650)+($2649))|0);
      $__x1166=$2651;
      var $2652=$__x1166;
      var $2653=$__x2167;
      var $2654=(($2652)>>>0) < (($2653)>>>0);
      if ($2654) { label = 436; break; } else { label = 437; break; }
    case 436: 
      var $2656=$__x3168;
      var $2657=((($2656)+(65536))|0);
      $__x3168=$2657;
      label = 437; break;
    case 437: 
      var $2659=$__x3168;
      var $2660=$__x1166;
      var $2661=$2660 >>> 16;
      var $2662=((($2659)+($2661))|0);
      $t1154=$2662;
      var $2663=$__x1166;
      var $2664=$2663 << 16;
      var $2665=$__x0165;
      var $2666=$2665 & 65535;
      var $2667=((($2664)+($2666))|0);
      $t0155=$2667;
      label = 438; break;
    case 438: 
      var $2669=$t1154;
      var $2670=$p153;
      var $2671=((($2670)+($2669))|0);
      $p153=$2671;
      var $2672=$p153;
      var $2673=$t1154;
      var $2674=(($2672)>>>0) < (($2673)>>>0);
      if ($2674) { label = 439; break; } else { label = 445; break; }
    case 439: 
      var $2676=$v152;
      var $2677=((($2676)-(1))|0);
      $v152=$2677;
      var $2678=$p153;
      var $2679=$dh;
      var $2680=(($2678)>>>0) >= (($2679)>>>0);
      if ($2680) { label = 440; break; } else { label = 444; break; }
    case 440: 
      var $2682=$p153;
      var $2683=$dh;
      var $2684=(($2682)>>>0) > (($2683)>>>0);
      if ($2684) { label = 442; break; } else { label = 441; break; }
    case 441: 
      var $2686=$t0155;
      var $2687=$qn;
      var $2688=((($2687)-(1))|0);
      var $2689=$new_dp;
      var $2690=(($2689+($2688<<2))|0);
      var $2691=HEAP32[(($2690)>>2)];
      var $2692=(($2686)>>>0) >= (($2691)>>>0);
      if ($2692) { label = 442; break; } else { label = 443; break; }
    case 442: 
      var $2694=$v152;
      var $2695=((($2694)-(1))|0);
      $v152=$2695;
      label = 443; break;
    case 443: 
      label = 444; break;
    case 444: 
      label = 445; break;
    case 445: 
      var $2699=$v152;
      var $2700=(($dinv)|0);
      HEAP32[(($2700)>>2)]=$2699;
      label = 446; break;
    case 446: 
      var $2702=$tp;
      var $2703=$new_np;
      var $2704=$new_nn;
      var $2705=$new_dp;
      var $2706=$qn;
      var $2707=((($2706)+(1))|0);
      var $2708=___gmpn_dcpi1_divappr_q($2702, $2703, $2704, $2705, $2707, $dinv);
      $qh=$2708;
      label = 451; break;
    case 447: 
      var $2710=$new_nn;
      var $2711=$qn;
      var $2712=((($2711)+(1))|0);
      var $2713=___gmpn_mu_divappr_q_itch($2710, $2712, 0);
      $itch175=$2713;
      var $2714=$itch175;
      var $2715=($2714<<2);
      var $2716=(($2715)>>>0) < 65536;
      if ($2716) { label = 448; break; } else { label = 449; break; }
    case 448: 
      var $2718=$itch175;
      var $2719=($2718<<2);
      var $2720=STACKTOP;STACKTOP = (STACKTOP + $2719)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $2726 = $2720;label = 450; break;
    case 449: 
      var $2722=$itch175;
      var $2723=($2722<<2);
      var $2724=___gmp_tmp_reentrant_alloc($__tmp_marker, $2723);
      var $2726 = $2724;label = 450; break;
    case 450: 
      var $2726;
      var $2727=$2726;
      $scratch176=$2727;
      var $2728=$tp;
      var $2729=$new_np;
      var $2730=$new_nn;
      var $2731=$new_dp;
      var $2732=$qn;
      var $2733=((($2732)+(1))|0);
      var $2734=$scratch176;
      var $2735=___gmpn_mu_divappr_q($2728, $2729, $2730, $2731, $2733, $2734);
      $qh=$2735;
      label = 451; break;
    case 451: 
      label = 452; break;
    case 452: 
      label = 453; break;
    case 453: 
      var $2739=$qh;
      var $2740=$qn;
      var $2741=$tp;
      var $2742=(($2741+($2740<<2))|0);
      HEAP32[(($2742)>>2)]=$2739;
      label = 454; break;
    case 454: 
      label = 455; break;
    case 455: 
      label = 456; break;
    case 456: 
      label = 457; break;
    case 457: 
      label = 458; break;
    case 458: 
      label = 459; break;
    case 459: 
      label = 460; break;
    case 460: 
      label = 461; break;
    case 461: 
      label = 462; break;
    case 462: 
      var $2752=$qn;
      var $2753=(($2752)|0)!=0;
      if ($2753) { label = 463; break; } else { label = 469; break; }
    case 463: 
      var $2755=$qn;
      var $2756=((($2755)-(1))|0);
      $__n177=$2756;
      var $2757=$1;
      $__dst178=$2757;
      var $2758=$tp;
      var $2759=(($2758+4)|0);
      $__src179=$2759;
      var $2760=$__src179;
      var $2761=(($2760+4)|0);
      $__src179=$2761;
      var $2762=HEAP32[(($2760)>>2)];
      $__x180=$2762;
      var $2763=$__n177;
      var $2764=(($2763)|0)!=0;
      if ($2764) { label = 464; break; } else { label = 468; break; }
    case 464: 
      label = 465; break;
    case 465: 
      var $2767=$__x180;
      var $2768=$__dst178;
      var $2769=(($2768+4)|0);
      $__dst178=$2769;
      HEAP32[(($2768)>>2)]=$2767;
      var $2770=$__src179;
      var $2771=(($2770+4)|0);
      $__src179=$2771;
      var $2772=HEAP32[(($2770)>>2)];
      $__x180=$2772;
      label = 466; break;
    case 466: 
      var $2774=$__n177;
      var $2775=((($2774)-(1))|0);
      $__n177=$2775;
      var $2776=(($2775)|0)!=0;
      if ($2776) { label = 465; break; } else { label = 467; break; }
    case 467: 
      label = 468; break;
    case 468: 
      var $2779=$__x180;
      var $2780=$__dst178;
      var $2781=(($2780+4)|0);
      $__dst178=$2781;
      HEAP32[(($2780)>>2)]=$2779;
      label = 469; break;
    case 469: 
      label = 470; break;
    case 470: 
      label = 471; break;
    case 471: 
      var $2785=$tp;
      var $2786=(($2785)|0);
      var $2787=HEAP32[(($2786)>>2)];
      var $2788=(($2787)>>>0) <= 4;
      if ($2788) { label = 472; break; } else { label = 484; break; }
    case 472: 
      var $2790=$5;
      var $2791=$qn;
      var $2792=((($2790)+($2791))|0);
      var $2793=($2792<<2);
      var $2794=(($2793)>>>0) < 65536;
      if ($2794) { label = 473; break; } else { label = 474; break; }
    case 473: 
      var $2796=$5;
      var $2797=$qn;
      var $2798=((($2796)+($2797))|0);
      var $2799=($2798<<2);
      var $2800=STACKTOP;STACKTOP = (STACKTOP + $2799)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $2808 = $2800;label = 475; break;
    case 474: 
      var $2802=$5;
      var $2803=$qn;
      var $2804=((($2802)+($2803))|0);
      var $2805=($2804<<2);
      var $2806=___gmp_tmp_reentrant_alloc($__tmp_marker, $2805);
      var $2808 = $2806;label = 475; break;
    case 475: 
      var $2808;
      var $2809=$2808;
      $rp=$2809;
      var $2810=$rp;
      var $2811=$4;
      var $2812=$5;
      var $2813=$tp;
      var $2814=(($2813+4)|0);
      var $2815=$qn;
      var $2816=___gmpn_mul($2810, $2811, $2812, $2814, $2815);
      var $2817=$5;
      var $2818=$qn;
      var $2819=((($2817)+($2818))|0);
      $rn=$2819;
      var $2820=$rn;
      var $2821=((($2820)-(1))|0);
      var $2822=$rp;
      var $2823=(($2822+($2821<<2))|0);
      var $2824=HEAP32[(($2823)>>2)];
      var $2825=(($2824)|0)==0;
      var $2826=(($2825)&1);
      var $2827=$rn;
      var $2828=((($2827)-($2826))|0);
      $rn=$2828;
      var $2829=$rn;
      var $2830=$3;
      var $2831=(($2829)|0) > (($2830)|0);
      if ($2831) { label = 477; break; } else { label = 476; break; }
    case 476: 
      var $2833=$2;
      var $2834=$rp;
      var $2835=$3;
      var $2836=___gmpn_cmp($2833, $2834, $2835);
      var $2837=(($2836)|0) < 0;
      if ($2837) { label = 477; break; } else { label = 483; break; }
    case 477: 
      label = 478; break;
    case 478: 
      var $2840=$1;
      $__p=$2840;
      label = 479; break;
    case 479: 
      var $2842=$__p;
      var $2843=(($2842+4)|0);
      $__p=$2843;
      var $2844=HEAP32[(($2842)>>2)];
      var $2845=((($2844)-(1))|0);
      HEAP32[(($2842)>>2)]=$2845;
      var $2846=(($2844)|0)==0;
      if ($2846) { label = 480; break; } else { label = 481; break; }
    case 480: 
      label = 479; break;
    case 481: 
      label = 482; break;
    case 482: 
      label = 483; break;
    case 483: 
      label = 484; break;
    case 484: 
      label = 485; break;
    case 485: 
      label = 486; break;
    case 486: 
      var $2854=HEAP32[(($__tmp_marker)>>2)];
      var $2855=(($2854)|0)!=0;
      if ($2855) { label = 487; break; } else { label = 488; break; }
    case 487: 
      var $2857=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($2857);
      label = 488; break;
    case 488: 
      label = 489; break;
    case 489: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_div_q["X"]=1;

function ___gmpn_divrem_1($qp, $qxn, $up, $un, $d) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $i;
      var $n1;
      var $n0;
      var $r;
      var $q;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $__d11;
      var $__d02;
      var $__q13;
      var $__q04;
      var $__r15;
      var $__r06;
      var $__m7;
      var $dinv;
      var $dummy;
      var $__d18;
      var $__d09;
      var $__q110;
      var $__q011;
      var $__r112;
      var $__r013;
      var $__m14;
      var $_qh;
      var $_ql;
      var $_r;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $_qh15;
      var $_ql16;
      var $_r17;
      var $__x018;
      var $__x119;
      var $__x220;
      var $__x321;
      var $__ul22;
      var $__vl23;
      var $__uh24;
      var $__vh25;
      var $__u26;
      var $__v27;
      var $norm;
      var $__xr;
      var $__a;
      var $dinv28;
      var $dummy29;
      var $__d130;
      var $__d031;
      var $__q132;
      var $__q033;
      var $__r134;
      var $__r035;
      var $__m36;
      var $_qh37;
      var $_ql38;
      var $_r39;
      var $__x040;
      var $__x141;
      var $__x242;
      var $__x343;
      var $__ul44;
      var $__vl45;
      var $__uh46;
      var $__vh47;
      var $__u48;
      var $__v49;
      var $__x50;
      var $_qh51;
      var $_ql52;
      var $_r53;
      var $__x054;
      var $__x155;
      var $__x256;
      var $__x357;
      var $__ul58;
      var $__vl59;
      var $__uh60;
      var $__vh61;
      var $__u62;
      var $__v63;
      var $__x64;
      var $_qh65;
      var $_ql66;
      var $_r67;
      var $__x068;
      var $__x169;
      var $__x270;
      var $__x371;
      var $__ul72;
      var $__vl73;
      var $__uh74;
      var $__vh75;
      var $__u76;
      var $__v77;
      $2=$qp;
      $3=$qxn;
      $4=$up;
      $5=$un;
      $6=$d;
      $r=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $15=$5;
      var $16=$3;
      var $17=((($15)+($16))|0);
      $n=$17;
      var $18=$n;
      var $19=(($18)|0)==0;
      if ($19) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=0;
      label = 194; break;
    case 12: 
      var $22=$6;
      var $23=$22 << 0;
      $6=$23;
      var $24=$n;
      var $25=((($24)-(1))|0);
      var $26=$2;
      var $27=(($26+($25<<2))|0);
      $2=$27;
      var $28=$6;
      var $29=$28 & -2147483648;
      var $30=(($29)|0)!=0;
      if ($30) { label = 13; break; } else { label = 116; break; }
    case 13: 
      var $32=$5;
      var $33=(($32)|0)!=0;
      if ($33) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $35=$5;
      var $36=((($35)-(1))|0);
      var $37=$4;
      var $38=(($37+($36<<2))|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 << 0;
      $r=$40;
      var $41=$r;
      var $42=$6;
      var $43=(($41)>>>0) >= (($42)>>>0);
      var $44=(($43)&1);
      $q=$44;
      var $45=$q;
      var $46=$2;
      var $47=((($46)-(4))|0);
      $2=$47;
      HEAP32[(($46)>>2)]=$45;
      var $48=$6;
      var $49=$q;
      var $50=(((-$49))|0);
      var $51=$48 & $50;
      var $52=$r;
      var $53=((($52)-($51))|0);
      $r=$53;
      var $54=$r;
      var $55=$54 >>> 0;
      $r=$55;
      var $56=$n;
      var $57=((($56)-(1))|0);
      $n=$57;
      var $58=$5;
      var $59=((($58)-(1))|0);
      $5=$59;
      label = 15; break;
    case 15: 
      if (1) { label = 63; break; } else { label = 16; break; }
    case 16: 
      var $62=$n;
      var $63=(($62)|0) >= 0;
      if ($63) { label = 63; break; } else { label = 17; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $66=$5;
      var $67=((($66)-(1))|0);
      $i=$67;
      label = 19; break;
    case 19: 
      var $69=$i;
      var $70=(($69)|0) >= 0;
      if ($70) { label = 20; break; } else { label = 40; break; }
    case 20: 
      var $72=$i;
      var $73=$4;
      var $74=(($73+($72<<2))|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 << 0;
      $n0=$76;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $82=$6;
      var $83=$82 >>> 16;
      $__d1=$83;
      var $84=$6;
      var $85=$84 & 65535;
      $__d0=$85;
      var $86=$r;
      var $87=$__d1;
      var $88=Math.floor(((($86)>>>0))/((($87)>>>0)));
      $__q1=$88;
      var $89=$r;
      var $90=$__q1;
      var $91=$__d1;
      var $92=Math.imul($90,$91);
      var $93=((($89)-($92))|0);
      $__r1=$93;
      var $94=$__q1;
      var $95=$__d0;
      var $96=Math.imul($94,$95);
      $__m=$96;
      var $97=$__r1;
      var $98=($97<<16);
      var $99=$n0;
      var $100=$99 >>> 16;
      var $101=$98 | $100;
      $__r1=$101;
      var $102=$__r1;
      var $103=$__m;
      var $104=(($102)>>>0) < (($103)>>>0);
      if ($104) { label = 26; break; } else { label = 31; break; }
    case 26: 
      var $106=$__q1;
      var $107=((($106)-(1))|0);
      $__q1=$107;
      var $108=$6;
      var $109=$__r1;
      var $110=((($109)+($108))|0);
      $__r1=$110;
      var $111=$__r1;
      var $112=$6;
      var $113=(($111)>>>0) >= (($112)>>>0);
      if ($113) { label = 27; break; } else { label = 30; break; }
    case 27: 
      var $115=$__r1;
      var $116=$__m;
      var $117=(($115)>>>0) < (($116)>>>0);
      if ($117) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $119=$__q1;
      var $120=((($119)-(1))|0);
      $__q1=$120;
      var $121=$6;
      var $122=$__r1;
      var $123=((($122)+($121))|0);
      $__r1=$123;
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $127=$__m;
      var $128=$__r1;
      var $129=((($128)-($127))|0);
      $__r1=$129;
      var $130=$__r1;
      var $131=$__d1;
      var $132=Math.floor(((($130)>>>0))/((($131)>>>0)));
      $__q0=$132;
      var $133=$__r1;
      var $134=$__q0;
      var $135=$__d1;
      var $136=Math.imul($134,$135);
      var $137=((($133)-($136))|0);
      $__r0=$137;
      var $138=$__q0;
      var $139=$__d0;
      var $140=Math.imul($138,$139);
      $__m=$140;
      var $141=$__r0;
      var $142=($141<<16);
      var $143=$n0;
      var $144=$143 & 65535;
      var $145=$142 | $144;
      $__r0=$145;
      var $146=$__r0;
      var $147=$__m;
      var $148=(($146)>>>0) < (($147)>>>0);
      if ($148) { label = 32; break; } else { label = 37; break; }
    case 32: 
      var $150=$__q0;
      var $151=((($150)-(1))|0);
      $__q0=$151;
      var $152=$6;
      var $153=$__r0;
      var $154=((($153)+($152))|0);
      $__r0=$154;
      var $155=$__r0;
      var $156=$6;
      var $157=(($155)>>>0) >= (($156)>>>0);
      if ($157) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $159=$__r0;
      var $160=$__m;
      var $161=(($159)>>>0) < (($160)>>>0);
      if ($161) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $163=$__q0;
      var $164=((($163)-(1))|0);
      $__q0=$164;
      var $165=$6;
      var $166=$__r0;
      var $167=((($166)+($165))|0);
      $__r0=$167;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $171=$__m;
      var $172=$__r0;
      var $173=((($172)-($171))|0);
      $__r0=$173;
      var $174=$__q1;
      var $175=($174<<16);
      var $176=$__q0;
      var $177=$175 | $176;
      var $178=$2;
      HEAP32[(($178)>>2)]=$177;
      var $179=$__r0;
      $r=$179;
      label = 38; break;
    case 38: 
      var $181=$r;
      var $182=$181 >>> 0;
      $r=$182;
      var $183=$2;
      var $184=((($183)-(4))|0);
      $2=$184;
      label = 39; break;
    case 39: 
      var $186=$i;
      var $187=((($186)-(1))|0);
      $i=$187;
      label = 19; break;
    case 40: 
      var $189=$3;
      var $190=((($189)-(1))|0);
      $i=$190;
      label = 41; break;
    case 41: 
      var $192=$i;
      var $193=(($192)|0) >= 0;
      if ($193) { label = 42; break; } else { label = 62; break; }
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $200=$6;
      var $201=$200 >>> 16;
      $__d11=$201;
      var $202=$6;
      var $203=$202 & 65535;
      $__d02=$203;
      var $204=$r;
      var $205=$__d11;
      var $206=Math.floor(((($204)>>>0))/((($205)>>>0)));
      $__q13=$206;
      var $207=$r;
      var $208=$__q13;
      var $209=$__d11;
      var $210=Math.imul($208,$209);
      var $211=((($207)-($210))|0);
      $__r15=$211;
      var $212=$__q13;
      var $213=$__d02;
      var $214=Math.imul($212,$213);
      $__m7=$214;
      var $215=$__r15;
      var $216=($215<<16);
      $__r15=$216;
      var $217=$__r15;
      var $218=$__m7;
      var $219=(($217)>>>0) < (($218)>>>0);
      if ($219) { label = 48; break; } else { label = 53; break; }
    case 48: 
      var $221=$__q13;
      var $222=((($221)-(1))|0);
      $__q13=$222;
      var $223=$6;
      var $224=$__r15;
      var $225=((($224)+($223))|0);
      $__r15=$225;
      var $226=$__r15;
      var $227=$6;
      var $228=(($226)>>>0) >= (($227)>>>0);
      if ($228) { label = 49; break; } else { label = 52; break; }
    case 49: 
      var $230=$__r15;
      var $231=$__m7;
      var $232=(($230)>>>0) < (($231)>>>0);
      if ($232) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $234=$__q13;
      var $235=((($234)-(1))|0);
      $__q13=$235;
      var $236=$6;
      var $237=$__r15;
      var $238=((($237)+($236))|0);
      $__r15=$238;
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $242=$__m7;
      var $243=$__r15;
      var $244=((($243)-($242))|0);
      $__r15=$244;
      var $245=$__r15;
      var $246=$__d11;
      var $247=Math.floor(((($245)>>>0))/((($246)>>>0)));
      $__q04=$247;
      var $248=$__r15;
      var $249=$__q04;
      var $250=$__d11;
      var $251=Math.imul($249,$250);
      var $252=((($248)-($251))|0);
      $__r06=$252;
      var $253=$__q04;
      var $254=$__d02;
      var $255=Math.imul($253,$254);
      $__m7=$255;
      var $256=$__r06;
      var $257=($256<<16);
      $__r06=$257;
      var $258=$__r06;
      var $259=$__m7;
      var $260=(($258)>>>0) < (($259)>>>0);
      if ($260) { label = 54; break; } else { label = 59; break; }
    case 54: 
      var $262=$__q04;
      var $263=((($262)-(1))|0);
      $__q04=$263;
      var $264=$6;
      var $265=$__r06;
      var $266=((($265)+($264))|0);
      $__r06=$266;
      var $267=$__r06;
      var $268=$6;
      var $269=(($267)>>>0) >= (($268)>>>0);
      if ($269) { label = 55; break; } else { label = 58; break; }
    case 55: 
      var $271=$__r06;
      var $272=$__m7;
      var $273=(($271)>>>0) < (($272)>>>0);
      if ($273) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $275=$__q04;
      var $276=((($275)-(1))|0);
      $__q04=$276;
      var $277=$6;
      var $278=$__r06;
      var $279=((($278)+($277))|0);
      $__r06=$279;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $283=$__m7;
      var $284=$__r06;
      var $285=((($284)-($283))|0);
      $__r06=$285;
      var $286=$__q13;
      var $287=($286<<16);
      var $288=$__q04;
      var $289=$287 | $288;
      var $290=$2;
      HEAP32[(($290)>>2)]=$289;
      var $291=$__r06;
      $r=$291;
      label = 60; break;
    case 60: 
      var $293=$r;
      var $294=$293 >>> 0;
      $r=$294;
      var $295=$2;
      var $296=((($295)-(4))|0);
      $2=$296;
      label = 61; break;
    case 61: 
      var $298=$i;
      var $299=((($298)-(1))|0);
      $i=$299;
      label = 41; break;
    case 62: 
      var $301=$r;
      $1=$301;
      label = 194; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $311=$6;
      var $312=$311 >>> 16;
      $__d18=$312;
      var $313=$6;
      var $314=$313 & 65535;
      $__d09=$314;
      var $315=$6;
      var $316=$315 ^ -1;
      var $317=$__d18;
      var $318=Math.floor(((($316)>>>0))/((($317)>>>0)));
      $__q110=$318;
      var $319=$6;
      var $320=$319 ^ -1;
      var $321=$__q110;
      var $322=$__d18;
      var $323=Math.imul($321,$322);
      var $324=((($320)-($323))|0);
      $__r112=$324;
      var $325=$__q110;
      var $326=$__d09;
      var $327=Math.imul($325,$326);
      $__m14=$327;
      var $328=$__r112;
      var $329=($328<<16);
      var $330=$329 | 65535;
      $__r112=$330;
      var $331=$__r112;
      var $332=$__m14;
      var $333=(($331)>>>0) < (($332)>>>0);
      if ($333) { label = 72; break; } else { label = 77; break; }
    case 72: 
      var $335=$__q110;
      var $336=((($335)-(1))|0);
      $__q110=$336;
      var $337=$6;
      var $338=$__r112;
      var $339=((($338)+($337))|0);
      $__r112=$339;
      var $340=$__r112;
      var $341=$6;
      var $342=(($340)>>>0) >= (($341)>>>0);
      if ($342) { label = 73; break; } else { label = 76; break; }
    case 73: 
      var $344=$__r112;
      var $345=$__m14;
      var $346=(($344)>>>0) < (($345)>>>0);
      if ($346) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $348=$__q110;
      var $349=((($348)-(1))|0);
      $__q110=$349;
      var $350=$6;
      var $351=$__r112;
      var $352=((($351)+($350))|0);
      $__r112=$352;
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $356=$__m14;
      var $357=$__r112;
      var $358=((($357)-($356))|0);
      $__r112=$358;
      var $359=$__r112;
      var $360=$__d18;
      var $361=Math.floor(((($359)>>>0))/((($360)>>>0)));
      $__q011=$361;
      var $362=$__r112;
      var $363=$__q011;
      var $364=$__d18;
      var $365=Math.imul($363,$364);
      var $366=((($362)-($365))|0);
      $__r013=$366;
      var $367=$__q011;
      var $368=$__d09;
      var $369=Math.imul($367,$368);
      $__m14=$369;
      var $370=$__r013;
      var $371=($370<<16);
      var $372=$371 | 65535;
      $__r013=$372;
      var $373=$__r013;
      var $374=$__m14;
      var $375=(($373)>>>0) < (($374)>>>0);
      if ($375) { label = 78; break; } else { label = 83; break; }
    case 78: 
      var $377=$__q011;
      var $378=((($377)-(1))|0);
      $__q011=$378;
      var $379=$6;
      var $380=$__r013;
      var $381=((($380)+($379))|0);
      $__r013=$381;
      var $382=$__r013;
      var $383=$6;
      var $384=(($382)>>>0) >= (($383)>>>0);
      if ($384) { label = 79; break; } else { label = 82; break; }
    case 79: 
      var $386=$__r013;
      var $387=$__m14;
      var $388=(($386)>>>0) < (($387)>>>0);
      if ($388) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $390=$__q011;
      var $391=((($390)-(1))|0);
      $__q011=$391;
      var $392=$6;
      var $393=$__r013;
      var $394=((($393)+($392))|0);
      $__r013=$394;
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $398=$__m14;
      var $399=$__r013;
      var $400=((($399)-($398))|0);
      $__r013=$400;
      var $401=$__q110;
      var $402=($401<<16);
      var $403=$__q011;
      var $404=$402 | $403;
      $dinv=$404;
      var $405=$__r013;
      $dummy=$405;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $408=$5;
      var $409=((($408)-(1))|0);
      $i=$409;
      label = 86; break;
    case 86: 
      var $411=$i;
      var $412=(($411)|0) >= 0;
      if ($412) { label = 87; break; } else { label = 101; break; }
    case 87: 
      var $414=$i;
      var $415=$4;
      var $416=(($415+($414<<2))|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=$417 << 0;
      $n0=$418;
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $421=$r;
      $__u=$421;
      var $422=$dinv;
      $__v=$422;
      var $423=$__u;
      var $424=$423 & 65535;
      $__ul=$424;
      var $425=$__u;
      var $426=$425 >>> 16;
      $__uh=$426;
      var $427=$__v;
      var $428=$427 & 65535;
      $__vl=$428;
      var $429=$__v;
      var $430=$429 >>> 16;
      $__vh=$430;
      var $431=$__ul;
      var $432=$__vl;
      var $433=Math.imul($431,$432);
      $__x0=$433;
      var $434=$__ul;
      var $435=$__vh;
      var $436=Math.imul($434,$435);
      $__x1=$436;
      var $437=$__uh;
      var $438=$__vl;
      var $439=Math.imul($437,$438);
      $__x2=$439;
      var $440=$__uh;
      var $441=$__vh;
      var $442=Math.imul($440,$441);
      $__x3=$442;
      var $443=$__x0;
      var $444=$443 >>> 16;
      var $445=$__x1;
      var $446=((($445)+($444))|0);
      $__x1=$446;
      var $447=$__x2;
      var $448=$__x1;
      var $449=((($448)+($447))|0);
      $__x1=$449;
      var $450=$__x1;
      var $451=$__x2;
      var $452=(($450)>>>0) < (($451)>>>0);
      if ($452) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $454=$__x3;
      var $455=((($454)+(65536))|0);
      $__x3=$455;
      label = 91; break;
    case 91: 
      var $457=$__x3;
      var $458=$__x1;
      var $459=$458 >>> 16;
      var $460=((($457)+($459))|0);
      $_qh=$460;
      var $461=$__x1;
      var $462=$461 << 16;
      var $463=$__x0;
      var $464=$463 & 65535;
      var $465=((($462)+($464))|0);
      $_ql=$465;
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $468=$_ql;
      var $469=$n0;
      var $470=((($468)+($469))|0);
      $__x=$470;
      var $471=$_qh;
      var $472=$r;
      var $473=((($472)+(1))|0);
      var $474=((($471)+($473))|0);
      var $475=$__x;
      var $476=$_ql;
      var $477=(($475)>>>0) < (($476)>>>0);
      var $478=(($477)&1);
      var $479=((($474)+($478))|0);
      $_qh=$479;
      var $480=$__x;
      $_ql=$480;
      label = 94; break;
    case 94: 
      var $482=$n0;
      var $483=$_qh;
      var $484=$6;
      var $485=Math.imul($483,$484);
      var $486=((($482)-($485))|0);
      $_r=$486;
      var $487=$_r;
      var $488=$_ql;
      var $489=(($487)>>>0) > (($488)>>>0);
      if ($489) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $491=$6;
      var $492=$_r;
      var $493=((($492)+($491))|0);
      $_r=$493;
      var $494=$_qh;
      var $495=((($494)-(1))|0);
      $_qh=$495;
      label = 96; break;
    case 96: 
      var $497=$_r;
      var $498=$6;
      var $499=(($497)>>>0) >= (($498)>>>0);
      if ($499) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $501=$6;
      var $502=$_r;
      var $503=((($502)-($501))|0);
      $_r=$503;
      var $504=$_qh;
      var $505=((($504)+(1))|0);
      $_qh=$505;
      label = 98; break;
    case 98: 
      var $507=$_r;
      $r=$507;
      var $508=$_qh;
      var $509=$2;
      HEAP32[(($509)>>2)]=$508;
      label = 99; break;
    case 99: 
      var $511=$r;
      var $512=$511 >>> 0;
      $r=$512;
      var $513=$2;
      var $514=((($513)-(4))|0);
      $2=$514;
      label = 100; break;
    case 100: 
      var $516=$i;
      var $517=((($516)-(1))|0);
      $i=$517;
      label = 86; break;
    case 101: 
      var $519=$3;
      var $520=((($519)-(1))|0);
      $i=$520;
      label = 102; break;
    case 102: 
      var $522=$i;
      var $523=(($522)|0) >= 0;
      if ($523) { label = 103; break; } else { label = 115; break; }
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $527=$r;
      $__u26=$527;
      var $528=$dinv;
      $__v27=$528;
      var $529=$__u26;
      var $530=$529 & 65535;
      $__ul22=$530;
      var $531=$__u26;
      var $532=$531 >>> 16;
      $__uh24=$532;
      var $533=$__v27;
      var $534=$533 & 65535;
      $__vl23=$534;
      var $535=$__v27;
      var $536=$535 >>> 16;
      $__vh25=$536;
      var $537=$__ul22;
      var $538=$__vl23;
      var $539=Math.imul($537,$538);
      $__x018=$539;
      var $540=$__ul22;
      var $541=$__vh25;
      var $542=Math.imul($540,$541);
      $__x119=$542;
      var $543=$__uh24;
      var $544=$__vl23;
      var $545=Math.imul($543,$544);
      $__x220=$545;
      var $546=$__uh24;
      var $547=$__vh25;
      var $548=Math.imul($546,$547);
      $__x321=$548;
      var $549=$__x018;
      var $550=$549 >>> 16;
      var $551=$__x119;
      var $552=((($551)+($550))|0);
      $__x119=$552;
      var $553=$__x220;
      var $554=$__x119;
      var $555=((($554)+($553))|0);
      $__x119=$555;
      var $556=$__x119;
      var $557=$__x220;
      var $558=(($556)>>>0) < (($557)>>>0);
      if ($558) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $560=$__x321;
      var $561=((($560)+(65536))|0);
      $__x321=$561;
      label = 107; break;
    case 107: 
      var $563=$__x321;
      var $564=$__x119;
      var $565=$564 >>> 16;
      var $566=((($563)+($565))|0);
      $_qh15=$566;
      var $567=$__x119;
      var $568=$567 << 16;
      var $569=$__x018;
      var $570=$569 & 65535;
      var $571=((($568)+($570))|0);
      $_ql16=$571;
      label = 108; break;
    case 108: 
      var $573=$r;
      var $574=((($573)+(1))|0);
      var $575=$_qh15;
      var $576=((($575)+($574))|0);
      $_qh15=$576;
      var $577=$_qh15;
      var $578=$6;
      var $579=Math.imul($577,$578);
      var $580=(((-$579))|0);
      $_r17=$580;
      var $581=$_r17;
      var $582=$_ql16;
      var $583=(($581)>>>0) > (($582)>>>0);
      if ($583) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $585=$6;
      var $586=$_r17;
      var $587=((($586)+($585))|0);
      $_r17=$587;
      var $588=$_qh15;
      var $589=((($588)-(1))|0);
      $_qh15=$589;
      label = 110; break;
    case 110: 
      var $591=$_r17;
      var $592=$6;
      var $593=(($591)>>>0) >= (($592)>>>0);
      if ($593) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $595=$6;
      var $596=$_r17;
      var $597=((($596)-($595))|0);
      $_r17=$597;
      var $598=$_qh15;
      var $599=((($598)+(1))|0);
      $_qh15=$599;
      label = 112; break;
    case 112: 
      var $601=$_r17;
      $r=$601;
      var $602=$_qh15;
      var $603=$2;
      HEAP32[(($603)>>2)]=$602;
      label = 113; break;
    case 113: 
      var $605=$r;
      var $606=$605 >>> 0;
      $r=$606;
      var $607=$2;
      var $608=((($607)-(4))|0);
      $2=$608;
      label = 114; break;
    case 114: 
      var $610=$i;
      var $611=((($610)-(1))|0);
      $i=$611;
      label = 102; break;
    case 115: 
      var $613=$r;
      $1=$613;
      label = 194; break;
    case 116: 
      var $615=$5;
      var $616=(($615)|0)!=0;
      if ($616) { label = 117; break; } else { label = 122; break; }
    case 117: 
      var $618=$5;
      var $619=((($618)-(1))|0);
      var $620=$4;
      var $621=(($620+($619<<2))|0);
      var $622=HEAP32[(($621)>>2)];
      var $623=$622 << 0;
      $n1=$623;
      var $624=$n1;
      var $625=$6;
      var $626=(($624)>>>0) < (($625)>>>0);
      if ($626) { label = 118; break; } else { label = 121; break; }
    case 118: 
      var $628=$n1;
      var $629=$628 >>> 0;
      $r=$629;
      var $630=$2;
      var $631=((($630)-(4))|0);
      $2=$631;
      HEAP32[(($630)>>2)]=0;
      var $632=$n;
      var $633=((($632)-(1))|0);
      $n=$633;
      var $634=$n;
      var $635=(($634)|0)==0;
      if ($635) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $637=$r;
      $1=$637;
      label = 194; break;
    case 120: 
      var $639=$5;
      var $640=((($639)-(1))|0);
      $5=$640;
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $644=$6;
      $__xr=$644;
      var $645=$__xr;
      var $646=(($645)>>>0) < 65536;
      if ($646) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $648=$__xr;
      var $649=(($648)>>>0) < 256;
      var $650=$649 ? 1 : 9;
      var $656 = $650;label = 126; break;
    case 125: 
      var $652=$__xr;
      var $653=(($652)>>>0) < 16777216;
      var $654=$653 ? 17 : 25;
      var $656 = $654;label = 126; break;
    case 126: 
      var $656;
      $__a=$656;
      var $657=$__a;
      var $658=(((33)-($657))|0);
      var $659=$__xr;
      var $660=$__a;
      var $661=$659 >>> (($660)>>>0);
      var $662=((5244408+$661)|0);
      var $663=HEAP8[($662)];
      var $664=(($663)&255);
      var $665=((($658)-($664))|0);
      $norm=$665;
      label = 127; break;
    case 127: 
      var $667=$norm;
      var $668=$6;
      var $669=$668 << $667;
      $6=$669;
      var $670=$norm;
      var $671=$r;
      var $672=$671 << $670;
      $r=$672;
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      var $681=$6;
      var $682=$681 >>> 16;
      $__d130=$682;
      var $683=$6;
      var $684=$683 & 65535;
      $__d031=$684;
      var $685=$6;
      var $686=$685 ^ -1;
      var $687=$__d130;
      var $688=Math.floor(((($686)>>>0))/((($687)>>>0)));
      $__q132=$688;
      var $689=$6;
      var $690=$689 ^ -1;
      var $691=$__q132;
      var $692=$__d130;
      var $693=Math.imul($691,$692);
      var $694=((($690)-($693))|0);
      $__r134=$694;
      var $695=$__q132;
      var $696=$__d031;
      var $697=Math.imul($695,$696);
      $__m36=$697;
      var $698=$__r134;
      var $699=($698<<16);
      var $700=$699 | 65535;
      $__r134=$700;
      var $701=$__r134;
      var $702=$__m36;
      var $703=(($701)>>>0) < (($702)>>>0);
      if ($703) { label = 136; break; } else { label = 141; break; }
    case 136: 
      var $705=$__q132;
      var $706=((($705)-(1))|0);
      $__q132=$706;
      var $707=$6;
      var $708=$__r134;
      var $709=((($708)+($707))|0);
      $__r134=$709;
      var $710=$__r134;
      var $711=$6;
      var $712=(($710)>>>0) >= (($711)>>>0);
      if ($712) { label = 137; break; } else { label = 140; break; }
    case 137: 
      var $714=$__r134;
      var $715=$__m36;
      var $716=(($714)>>>0) < (($715)>>>0);
      if ($716) { label = 138; break; } else { label = 139; break; }
    case 138: 
      var $718=$__q132;
      var $719=((($718)-(1))|0);
      $__q132=$719;
      var $720=$6;
      var $721=$__r134;
      var $722=((($721)+($720))|0);
      $__r134=$722;
      label = 139; break;
    case 139: 
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      var $726=$__m36;
      var $727=$__r134;
      var $728=((($727)-($726))|0);
      $__r134=$728;
      var $729=$__r134;
      var $730=$__d130;
      var $731=Math.floor(((($729)>>>0))/((($730)>>>0)));
      $__q033=$731;
      var $732=$__r134;
      var $733=$__q033;
      var $734=$__d130;
      var $735=Math.imul($733,$734);
      var $736=((($732)-($735))|0);
      $__r035=$736;
      var $737=$__q033;
      var $738=$__d031;
      var $739=Math.imul($737,$738);
      $__m36=$739;
      var $740=$__r035;
      var $741=($740<<16);
      var $742=$741 | 65535;
      $__r035=$742;
      var $743=$__r035;
      var $744=$__m36;
      var $745=(($743)>>>0) < (($744)>>>0);
      if ($745) { label = 142; break; } else { label = 147; break; }
    case 142: 
      var $747=$__q033;
      var $748=((($747)-(1))|0);
      $__q033=$748;
      var $749=$6;
      var $750=$__r035;
      var $751=((($750)+($749))|0);
      $__r035=$751;
      var $752=$__r035;
      var $753=$6;
      var $754=(($752)>>>0) >= (($753)>>>0);
      if ($754) { label = 143; break; } else { label = 146; break; }
    case 143: 
      var $756=$__r035;
      var $757=$__m36;
      var $758=(($756)>>>0) < (($757)>>>0);
      if ($758) { label = 144; break; } else { label = 145; break; }
    case 144: 
      var $760=$__q033;
      var $761=((($760)-(1))|0);
      $__q033=$761;
      var $762=$6;
      var $763=$__r035;
      var $764=((($763)+($762))|0);
      $__r035=$764;
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 147; break;
    case 147: 
      var $768=$__m36;
      var $769=$__r035;
      var $770=((($769)-($768))|0);
      $__r035=$770;
      var $771=$__q132;
      var $772=($771<<16);
      var $773=$__q033;
      var $774=$772 | $773;
      $dinv28=$774;
      var $775=$__r035;
      $dummy29=$775;
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $778=$5;
      var $779=(($778)|0)!=0;
      if ($779) { label = 150; break; } else { label = 179; break; }
    case 150: 
      var $781=$5;
      var $782=((($781)-(1))|0);
      var $783=$4;
      var $784=(($783+($782<<2))|0);
      var $785=HEAP32[(($784)>>2)];
      var $786=$785 << 0;
      $n1=$786;
      var $787=$n1;
      var $788=$norm;
      var $789=(((32)-($788))|0);
      var $790=$787 >>> (($789)>>>0);
      var $791=$r;
      var $792=$791 | $790;
      $r=$792;
      var $793=$5;
      var $794=((($793)-(2))|0);
      $i=$794;
      label = 151; break;
    case 151: 
      var $796=$i;
      var $797=(($796)|0) >= 0;
      if ($797) { label = 152; break; } else { label = 166; break; }
    case 152: 
      var $799=$i;
      var $800=$4;
      var $801=(($800+($799<<2))|0);
      var $802=HEAP32[(($801)>>2)];
      var $803=$802 << 0;
      $n0=$803;
      label = 153; break;
    case 153: 
      label = 154; break;
    case 154: 
      var $806=$r;
      $__u48=$806;
      var $807=$dinv28;
      $__v49=$807;
      var $808=$__u48;
      var $809=$808 & 65535;
      $__ul44=$809;
      var $810=$__u48;
      var $811=$810 >>> 16;
      $__uh46=$811;
      var $812=$__v49;
      var $813=$812 & 65535;
      $__vl45=$813;
      var $814=$__v49;
      var $815=$814 >>> 16;
      $__vh47=$815;
      var $816=$__ul44;
      var $817=$__vl45;
      var $818=Math.imul($816,$817);
      $__x040=$818;
      var $819=$__ul44;
      var $820=$__vh47;
      var $821=Math.imul($819,$820);
      $__x141=$821;
      var $822=$__uh46;
      var $823=$__vl45;
      var $824=Math.imul($822,$823);
      $__x242=$824;
      var $825=$__uh46;
      var $826=$__vh47;
      var $827=Math.imul($825,$826);
      $__x343=$827;
      var $828=$__x040;
      var $829=$828 >>> 16;
      var $830=$__x141;
      var $831=((($830)+($829))|0);
      $__x141=$831;
      var $832=$__x242;
      var $833=$__x141;
      var $834=((($833)+($832))|0);
      $__x141=$834;
      var $835=$__x141;
      var $836=$__x242;
      var $837=(($835)>>>0) < (($836)>>>0);
      if ($837) { label = 155; break; } else { label = 156; break; }
    case 155: 
      var $839=$__x343;
      var $840=((($839)+(65536))|0);
      $__x343=$840;
      label = 156; break;
    case 156: 
      var $842=$__x343;
      var $843=$__x141;
      var $844=$843 >>> 16;
      var $845=((($842)+($844))|0);
      $_qh37=$845;
      var $846=$__x141;
      var $847=$846 << 16;
      var $848=$__x040;
      var $849=$848 & 65535;
      var $850=((($847)+($849))|0);
      $_ql38=$850;
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      var $853=$_ql38;
      var $854=$n1;
      var $855=$norm;
      var $856=$854 << $855;
      var $857=$n0;
      var $858=$norm;
      var $859=(((32)-($858))|0);
      var $860=$857 >>> (($859)>>>0);
      var $861=$856 | $860;
      var $862=((($853)+($861))|0);
      $__x50=$862;
      var $863=$_qh37;
      var $864=$r;
      var $865=((($864)+(1))|0);
      var $866=((($863)+($865))|0);
      var $867=$__x50;
      var $868=$_ql38;
      var $869=(($867)>>>0) < (($868)>>>0);
      var $870=(($869)&1);
      var $871=((($866)+($870))|0);
      $_qh37=$871;
      var $872=$__x50;
      $_ql38=$872;
      label = 159; break;
    case 159: 
      var $874=$n1;
      var $875=$norm;
      var $876=$874 << $875;
      var $877=$n0;
      var $878=$norm;
      var $879=(((32)-($878))|0);
      var $880=$877 >>> (($879)>>>0);
      var $881=$876 | $880;
      var $882=$_qh37;
      var $883=$6;
      var $884=Math.imul($882,$883);
      var $885=((($881)-($884))|0);
      $_r39=$885;
      var $886=$_r39;
      var $887=$_ql38;
      var $888=(($886)>>>0) > (($887)>>>0);
      if ($888) { label = 160; break; } else { label = 161; break; }
    case 160: 
      var $890=$6;
      var $891=$_r39;
      var $892=((($891)+($890))|0);
      $_r39=$892;
      var $893=$_qh37;
      var $894=((($893)-(1))|0);
      $_qh37=$894;
      label = 161; break;
    case 161: 
      var $896=$_r39;
      var $897=$6;
      var $898=(($896)>>>0) >= (($897)>>>0);
      if ($898) { label = 162; break; } else { label = 163; break; }
    case 162: 
      var $900=$6;
      var $901=$_r39;
      var $902=((($901)-($900))|0);
      $_r39=$902;
      var $903=$_qh37;
      var $904=((($903)+(1))|0);
      $_qh37=$904;
      label = 163; break;
    case 163: 
      var $906=$_r39;
      $r=$906;
      var $907=$_qh37;
      var $908=$2;
      HEAP32[(($908)>>2)]=$907;
      label = 164; break;
    case 164: 
      var $910=$r;
      var $911=$910 >>> 0;
      $r=$911;
      var $912=$2;
      var $913=((($912)-(4))|0);
      $2=$913;
      var $914=$n0;
      $n1=$914;
      label = 165; break;
    case 165: 
      var $916=$i;
      var $917=((($916)-(1))|0);
      $i=$917;
      label = 151; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      var $921=$r;
      $__u62=$921;
      var $922=$dinv28;
      $__v63=$922;
      var $923=$__u62;
      var $924=$923 & 65535;
      $__ul58=$924;
      var $925=$__u62;
      var $926=$925 >>> 16;
      $__uh60=$926;
      var $927=$__v63;
      var $928=$927 & 65535;
      $__vl59=$928;
      var $929=$__v63;
      var $930=$929 >>> 16;
      $__vh61=$930;
      var $931=$__ul58;
      var $932=$__vl59;
      var $933=Math.imul($931,$932);
      $__x054=$933;
      var $934=$__ul58;
      var $935=$__vh61;
      var $936=Math.imul($934,$935);
      $__x155=$936;
      var $937=$__uh60;
      var $938=$__vl59;
      var $939=Math.imul($937,$938);
      $__x256=$939;
      var $940=$__uh60;
      var $941=$__vh61;
      var $942=Math.imul($940,$941);
      $__x357=$942;
      var $943=$__x054;
      var $944=$943 >>> 16;
      var $945=$__x155;
      var $946=((($945)+($944))|0);
      $__x155=$946;
      var $947=$__x256;
      var $948=$__x155;
      var $949=((($948)+($947))|0);
      $__x155=$949;
      var $950=$__x155;
      var $951=$__x256;
      var $952=(($950)>>>0) < (($951)>>>0);
      if ($952) { label = 169; break; } else { label = 170; break; }
    case 169: 
      var $954=$__x357;
      var $955=((($954)+(65536))|0);
      $__x357=$955;
      label = 170; break;
    case 170: 
      var $957=$__x357;
      var $958=$__x155;
      var $959=$958 >>> 16;
      var $960=((($957)+($959))|0);
      $_qh51=$960;
      var $961=$__x155;
      var $962=$961 << 16;
      var $963=$__x054;
      var $964=$963 & 65535;
      var $965=((($962)+($964))|0);
      $_ql52=$965;
      label = 171; break;
    case 171: 
      label = 172; break;
    case 172: 
      var $968=$_ql52;
      var $969=$n1;
      var $970=$norm;
      var $971=$969 << $970;
      var $972=((($968)+($971))|0);
      $__x64=$972;
      var $973=$_qh51;
      var $974=$r;
      var $975=((($974)+(1))|0);
      var $976=((($973)+($975))|0);
      var $977=$__x64;
      var $978=$_ql52;
      var $979=(($977)>>>0) < (($978)>>>0);
      var $980=(($979)&1);
      var $981=((($976)+($980))|0);
      $_qh51=$981;
      var $982=$__x64;
      $_ql52=$982;
      label = 173; break;
    case 173: 
      var $984=$n1;
      var $985=$norm;
      var $986=$984 << $985;
      var $987=$_qh51;
      var $988=$6;
      var $989=Math.imul($987,$988);
      var $990=((($986)-($989))|0);
      $_r53=$990;
      var $991=$_r53;
      var $992=$_ql52;
      var $993=(($991)>>>0) > (($992)>>>0);
      if ($993) { label = 174; break; } else { label = 175; break; }
    case 174: 
      var $995=$6;
      var $996=$_r53;
      var $997=((($996)+($995))|0);
      $_r53=$997;
      var $998=$_qh51;
      var $999=((($998)-(1))|0);
      $_qh51=$999;
      label = 175; break;
    case 175: 
      var $1001=$_r53;
      var $1002=$6;
      var $1003=(($1001)>>>0) >= (($1002)>>>0);
      if ($1003) { label = 176; break; } else { label = 177; break; }
    case 176: 
      var $1005=$6;
      var $1006=$_r53;
      var $1007=((($1006)-($1005))|0);
      $_r53=$1007;
      var $1008=$_qh51;
      var $1009=((($1008)+(1))|0);
      $_qh51=$1009;
      label = 177; break;
    case 177: 
      var $1011=$_r53;
      $r=$1011;
      var $1012=$_qh51;
      var $1013=$2;
      HEAP32[(($1013)>>2)]=$1012;
      label = 178; break;
    case 178: 
      var $1015=$r;
      var $1016=$1015 >>> 0;
      $r=$1016;
      var $1017=$2;
      var $1018=((($1017)-(4))|0);
      $2=$1018;
      label = 179; break;
    case 179: 
      var $1020=$3;
      var $1021=((($1020)-(1))|0);
      $i=$1021;
      label = 180; break;
    case 180: 
      var $1023=$i;
      var $1024=(($1023)|0) >= 0;
      if ($1024) { label = 181; break; } else { label = 193; break; }
    case 181: 
      label = 182; break;
    case 182: 
      label = 183; break;
    case 183: 
      var $1028=$r;
      $__u76=$1028;
      var $1029=$dinv28;
      $__v77=$1029;
      var $1030=$__u76;
      var $1031=$1030 & 65535;
      $__ul72=$1031;
      var $1032=$__u76;
      var $1033=$1032 >>> 16;
      $__uh74=$1033;
      var $1034=$__v77;
      var $1035=$1034 & 65535;
      $__vl73=$1035;
      var $1036=$__v77;
      var $1037=$1036 >>> 16;
      $__vh75=$1037;
      var $1038=$__ul72;
      var $1039=$__vl73;
      var $1040=Math.imul($1038,$1039);
      $__x068=$1040;
      var $1041=$__ul72;
      var $1042=$__vh75;
      var $1043=Math.imul($1041,$1042);
      $__x169=$1043;
      var $1044=$__uh74;
      var $1045=$__vl73;
      var $1046=Math.imul($1044,$1045);
      $__x270=$1046;
      var $1047=$__uh74;
      var $1048=$__vh75;
      var $1049=Math.imul($1047,$1048);
      $__x371=$1049;
      var $1050=$__x068;
      var $1051=$1050 >>> 16;
      var $1052=$__x169;
      var $1053=((($1052)+($1051))|0);
      $__x169=$1053;
      var $1054=$__x270;
      var $1055=$__x169;
      var $1056=((($1055)+($1054))|0);
      $__x169=$1056;
      var $1057=$__x169;
      var $1058=$__x270;
      var $1059=(($1057)>>>0) < (($1058)>>>0);
      if ($1059) { label = 184; break; } else { label = 185; break; }
    case 184: 
      var $1061=$__x371;
      var $1062=((($1061)+(65536))|0);
      $__x371=$1062;
      label = 185; break;
    case 185: 
      var $1064=$__x371;
      var $1065=$__x169;
      var $1066=$1065 >>> 16;
      var $1067=((($1064)+($1066))|0);
      $_qh65=$1067;
      var $1068=$__x169;
      var $1069=$1068 << 16;
      var $1070=$__x068;
      var $1071=$1070 & 65535;
      var $1072=((($1069)+($1071))|0);
      $_ql66=$1072;
      label = 186; break;
    case 186: 
      var $1074=$r;
      var $1075=((($1074)+(1))|0);
      var $1076=$_qh65;
      var $1077=((($1076)+($1075))|0);
      $_qh65=$1077;
      var $1078=$_qh65;
      var $1079=$6;
      var $1080=Math.imul($1078,$1079);
      var $1081=(((-$1080))|0);
      $_r67=$1081;
      var $1082=$_r67;
      var $1083=$_ql66;
      var $1084=(($1082)>>>0) > (($1083)>>>0);
      if ($1084) { label = 187; break; } else { label = 188; break; }
    case 187: 
      var $1086=$6;
      var $1087=$_r67;
      var $1088=((($1087)+($1086))|0);
      $_r67=$1088;
      var $1089=$_qh65;
      var $1090=((($1089)-(1))|0);
      $_qh65=$1090;
      label = 188; break;
    case 188: 
      var $1092=$_r67;
      var $1093=$6;
      var $1094=(($1092)>>>0) >= (($1093)>>>0);
      if ($1094) { label = 189; break; } else { label = 190; break; }
    case 189: 
      var $1096=$6;
      var $1097=$_r67;
      var $1098=((($1097)-($1096))|0);
      $_r67=$1098;
      var $1099=$_qh65;
      var $1100=((($1099)+(1))|0);
      $_qh65=$1100;
      label = 190; break;
    case 190: 
      var $1102=$_r67;
      $r=$1102;
      var $1103=$_qh65;
      var $1104=$2;
      HEAP32[(($1104)>>2)]=$1103;
      label = 191; break;
    case 191: 
      var $1106=$r;
      var $1107=$1106 >>> 0;
      $r=$1107;
      var $1108=$2;
      var $1109=((($1108)-(4))|0);
      $2=$1109;
      label = 192; break;
    case 192: 
      var $1111=$i;
      var $1112=((($1111)-(1))|0);
      $i=$1112;
      label = 180; break;
    case 193: 
      var $1114=$r;
      var $1115=$norm;
      var $1116=$1114 >>> (($1115)>>>0);
      $1=$1116;
      label = 194; break;
    case 194: 
      var $1118=$1;

      return $1118;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_divrem_1["X"]=1;

function ___gmpn_divrem_2($qp, $qxn, $np, $nn, $dp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $most_significant_q_limb;
      var $i;
      var $n1;
      var $n0;
      var $n2;
      var $d1;
      var $d0;
      var $d1inv;
      var $use_preinv;
      var $__x;
      var $dummy;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $q;
      var $r;
      var $__x1;
      var $_qh;
      var $_ql;
      var $_r;
      var $__x0;
      var $__x12;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x4;
      var $__d15;
      var $__d06;
      var $__q17;
      var $__q08;
      var $__r19;
      var $__r010;
      var $__m11;
      var $__x012;
      var $__x113;
      var $__x214;
      var $__x315;
      var $__ul16;
      var $__vl17;
      var $__uh18;
      var $__vh19;
      var $__u20;
      var $__v21;
      var $__x22;
      var $__x23;
      $1=$qp;
      $2=$qxn;
      $3=$np;
      $4=$nn;
      $5=$dp;
      $most_significant_q_limb=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $18=$4;
      var $19=((($18)-(2))|0);
      var $20=$3;
      var $21=(($20+($19<<2))|0);
      $3=$21;
      var $22=$5;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      $d1=$24;
      var $25=$5;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      $d0=$27;
      var $28=$3;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      $n1=$30;
      var $31=$3;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      $n0=$33;
      var $34=$n1;
      var $35=$d1;
      var $36=(($34)>>>0) >= (($35)>>>0);
      if ($36) { label = 15; break; } else { label = 20; break; }
    case 15: 
      var $38=$n1;
      var $39=$d1;
      var $40=(($38)>>>0) > (($39)>>>0);
      if ($40) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $42=$n0;
      var $43=$d0;
      var $44=(($42)>>>0) >= (($43)>>>0);
      if ($44) { label = 17; break; } else { label = 20; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $47=$n0;
      var $48=$d0;
      var $49=((($47)-($48))|0);
      $__x=$49;
      var $50=$n1;
      var $51=$d1;
      var $52=((($50)-($51))|0);
      var $53=$n0;
      var $54=$d0;
      var $55=(($53)>>>0) < (($54)>>>0);
      var $56=(($55)&1);
      var $57=((($52)-($56))|0);
      $n1=$57;
      var $58=$__x;
      $n0=$58;
      label = 19; break;
    case 19: 
      $most_significant_q_limb=1;
      label = 20; break;
    case 20: 
      $use_preinv=1;
      var $61=$use_preinv;
      var $62=(($61)|0)!=0;
      if ($62) { label = 21; break; } else { label = 44; break; }
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $72=$d1;
      var $73=$72 >>> 16;
      $__d1=$73;
      var $74=$d1;
      var $75=$74 & 65535;
      $__d0=$75;
      var $76=$d1;
      var $77=$76 ^ -1;
      var $78=$__d1;
      var $79=Math.floor(((($77)>>>0))/((($78)>>>0)));
      $__q1=$79;
      var $80=$d1;
      var $81=$80 ^ -1;
      var $82=$__q1;
      var $83=$__d1;
      var $84=Math.imul($82,$83);
      var $85=((($81)-($84))|0);
      $__r1=$85;
      var $86=$__q1;
      var $87=$__d0;
      var $88=Math.imul($86,$87);
      $__m=$88;
      var $89=$__r1;
      var $90=($89<<16);
      var $91=$90 | 65535;
      $__r1=$91;
      var $92=$__r1;
      var $93=$__m;
      var $94=(($92)>>>0) < (($93)>>>0);
      if ($94) { label = 30; break; } else { label = 35; break; }
    case 30: 
      var $96=$__q1;
      var $97=((($96)-(1))|0);
      $__q1=$97;
      var $98=$d1;
      var $99=$__r1;
      var $100=((($99)+($98))|0);
      $__r1=$100;
      var $101=$__r1;
      var $102=$d1;
      var $103=(($101)>>>0) >= (($102)>>>0);
      if ($103) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $105=$__r1;
      var $106=$__m;
      var $107=(($105)>>>0) < (($106)>>>0);
      if ($107) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $109=$__q1;
      var $110=((($109)-(1))|0);
      $__q1=$110;
      var $111=$d1;
      var $112=$__r1;
      var $113=((($112)+($111))|0);
      $__r1=$113;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $117=$__m;
      var $118=$__r1;
      var $119=((($118)-($117))|0);
      $__r1=$119;
      var $120=$__r1;
      var $121=$__d1;
      var $122=Math.floor(((($120)>>>0))/((($121)>>>0)));
      $__q0=$122;
      var $123=$__r1;
      var $124=$__q0;
      var $125=$__d1;
      var $126=Math.imul($124,$125);
      var $127=((($123)-($126))|0);
      $__r0=$127;
      var $128=$__q0;
      var $129=$__d0;
      var $130=Math.imul($128,$129);
      $__m=$130;
      var $131=$__r0;
      var $132=($131<<16);
      var $133=$132 | 65535;
      $__r0=$133;
      var $134=$__r0;
      var $135=$__m;
      var $136=(($134)>>>0) < (($135)>>>0);
      if ($136) { label = 36; break; } else { label = 41; break; }
    case 36: 
      var $138=$__q0;
      var $139=((($138)-(1))|0);
      $__q0=$139;
      var $140=$d1;
      var $141=$__r0;
      var $142=((($141)+($140))|0);
      $__r0=$142;
      var $143=$__r0;
      var $144=$d1;
      var $145=(($143)>>>0) >= (($144)>>>0);
      if ($145) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $147=$__r0;
      var $148=$__m;
      var $149=(($147)>>>0) < (($148)>>>0);
      if ($149) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $151=$__q0;
      var $152=((($151)-(1))|0);
      $__q0=$152;
      var $153=$d1;
      var $154=$__r0;
      var $155=((($154)+($153))|0);
      $__r0=$155;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $159=$__m;
      var $160=$__r0;
      var $161=((($160)-($159))|0);
      $__r0=$161;
      var $162=$__q1;
      var $163=($162<<16);
      var $164=$__q0;
      var $165=$163 | $164;
      $d1inv=$165;
      var $166=$__r0;
      $dummy=$166;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $170=$2;
      var $171=$4;
      var $172=((($170)+($171))|0);
      var $173=((($172)-(2))|0);
      var $174=((($173)-(1))|0);
      $i=$174;
      label = 45; break;
    case 45: 
      var $176=$i;
      var $177=(($176)|0) >= 0;
      if ($177) { label = 46; break; } else { label = 106; break; }
    case 46: 
      var $179=$i;
      var $180=$2;
      var $181=(($179)|0) >= (($180)|0);
      if ($181) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $183=$3;
      var $184=((($183)-(4))|0);
      $3=$184;
      label = 49; break;
    case 48: 
      var $186=$3;
      var $187=(($186)|0);
      HEAP32[(($187)>>2)]=0;
      label = 49; break;
    case 49: 
      var $189=$n1;
      var $190=$d1;
      var $191=(($189)|0)==(($190)|0);
      if ($191) { label = 50; break; } else { label = 55; break; }
    case 50: 
      $q=-1;
      var $193=$n0;
      var $194=$d1;
      var $195=((($193)+($194))|0);
      $r=$195;
      var $196=$r;
      var $197=$d1;
      var $198=(($196)>>>0) < (($197)>>>0);
      if ($198) { label = 51; break; } else { label = 54; break; }
    case 51: 
      label = 52; break;
    case 52: 
      var $201=$3;
      var $202=(($201)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$d0;
      var $205=((($203)+($204))|0);
      $__x1=$205;
      var $206=$r;
      var $207=$d0;
      var $208=((($206)-($207))|0);
      var $209=(($208)|0);
      var $210=$__x1;
      var $211=$3;
      var $212=(($211)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($210)>>>0) < (($213)>>>0);
      var $215=(($214)&1);
      var $216=((($209)+($215))|0);
      $n1=$216;
      var $217=$__x1;
      $n0=$217;
      label = 53; break;
    case 53: 
      var $219=$q;
      var $220=$i;
      var $221=$1;
      var $222=(($221+($220<<2))|0);
      HEAP32[(($222)>>2)]=$219;
      label = 105; break;
    case 54: 
      var $224=$d0;
      var $225=$d0;
      var $226=(($225)|0)!=0;
      var $227=(($226)&1);
      var $228=((($224)-($227))|0);
      $n1=$228;
      var $229=$d0;
      var $230=(((-$229))|0);
      $n0=$230;
      label = 93; break;
    case 55: 
      var $232=$use_preinv;
      var $233=(($232)|0)!=0;
      if ($233) { label = 56; break; } else { label = 69; break; }
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $237=$n1;
      $__u=$237;
      var $238=$d1inv;
      $__v=$238;
      var $239=$__u;
      var $240=$239 & 65535;
      $__ul=$240;
      var $241=$__u;
      var $242=$241 >>> 16;
      $__uh=$242;
      var $243=$__v;
      var $244=$243 & 65535;
      $__vl=$244;
      var $245=$__v;
      var $246=$245 >>> 16;
      $__vh=$246;
      var $247=$__ul;
      var $248=$__vl;
      var $249=Math.imul($247,$248);
      $__x0=$249;
      var $250=$__ul;
      var $251=$__vh;
      var $252=Math.imul($250,$251);
      $__x12=$252;
      var $253=$__uh;
      var $254=$__vl;
      var $255=Math.imul($253,$254);
      $__x2=$255;
      var $256=$__uh;
      var $257=$__vh;
      var $258=Math.imul($256,$257);
      $__x3=$258;
      var $259=$__x0;
      var $260=$259 >>> 16;
      var $261=$__x12;
      var $262=((($261)+($260))|0);
      $__x12=$262;
      var $263=$__x2;
      var $264=$__x12;
      var $265=((($264)+($263))|0);
      $__x12=$265;
      var $266=$__x12;
      var $267=$__x2;
      var $268=(($266)>>>0) < (($267)>>>0);
      if ($268) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $270=$__x3;
      var $271=((($270)+(65536))|0);
      $__x3=$271;
      label = 60; break;
    case 60: 
      var $273=$__x3;
      var $274=$__x12;
      var $275=$274 >>> 16;
      var $276=((($273)+($275))|0);
      $_qh=$276;
      var $277=$__x12;
      var $278=$277 << 16;
      var $279=$__x0;
      var $280=$279 & 65535;
      var $281=((($278)+($280))|0);
      $_ql=$281;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $284=$_ql;
      var $285=$n0;
      var $286=((($284)+($285))|0);
      $__x4=$286;
      var $287=$_qh;
      var $288=$n1;
      var $289=((($288)+(1))|0);
      var $290=((($287)+($289))|0);
      var $291=$__x4;
      var $292=$_ql;
      var $293=(($291)>>>0) < (($292)>>>0);
      var $294=(($293)&1);
      var $295=((($290)+($294))|0);
      $_qh=$295;
      var $296=$__x4;
      $_ql=$296;
      label = 63; break;
    case 63: 
      var $298=$n0;
      var $299=$_qh;
      var $300=$d1;
      var $301=Math.imul($299,$300);
      var $302=((($298)-($301))|0);
      $_r=$302;
      var $303=$_r;
      var $304=$_ql;
      var $305=(($303)>>>0) > (($304)>>>0);
      if ($305) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $307=$d1;
      var $308=$_r;
      var $309=((($308)+($307))|0);
      $_r=$309;
      var $310=$_qh;
      var $311=((($310)-(1))|0);
      $_qh=$311;
      label = 65; break;
    case 65: 
      var $313=$_r;
      var $314=$d1;
      var $315=(($313)>>>0) >= (($314)>>>0);
      if ($315) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $317=$d1;
      var $318=$_r;
      var $319=((($318)-($317))|0);
      $_r=$319;
      var $320=$_qh;
      var $321=((($320)+(1))|0);
      $_qh=$321;
      label = 67; break;
    case 67: 
      var $323=$_r;
      $r=$323;
      var $324=$_qh;
      $q=$324;
      label = 68; break;
    case 68: 
      label = 88; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $332=$d1;
      var $333=$332 << 0;
      var $334=$333 >>> 16;
      $__d15=$334;
      var $335=$d1;
      var $336=$335 << 0;
      var $337=$336 & 65535;
      $__d06=$337;
      var $338=$n1;
      var $339=$__d15;
      var $340=Math.floor(((($338)>>>0))/((($339)>>>0)));
      $__q17=$340;
      var $341=$n1;
      var $342=$__q17;
      var $343=$__d15;
      var $344=Math.imul($342,$343);
      var $345=((($341)-($344))|0);
      $__r19=$345;
      var $346=$__q17;
      var $347=$__d06;
      var $348=Math.imul($346,$347);
      $__m11=$348;
      var $349=$__r19;
      var $350=($349<<16);
      var $351=$n0;
      var $352=$351 << 0;
      var $353=$352 >>> 16;
      var $354=$350 | $353;
      $__r19=$354;
      var $355=$__r19;
      var $356=$__m11;
      var $357=(($355)>>>0) < (($356)>>>0);
      if ($357) { label = 75; break; } else { label = 80; break; }
    case 75: 
      var $359=$__q17;
      var $360=((($359)-(1))|0);
      $__q17=$360;
      var $361=$d1;
      var $362=$361 << 0;
      var $363=$__r19;
      var $364=((($363)+($362))|0);
      $__r19=$364;
      var $365=$__r19;
      var $366=$d1;
      var $367=$366 << 0;
      var $368=(($365)>>>0) >= (($367)>>>0);
      if ($368) { label = 76; break; } else { label = 79; break; }
    case 76: 
      var $370=$__r19;
      var $371=$__m11;
      var $372=(($370)>>>0) < (($371)>>>0);
      if ($372) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $374=$__q17;
      var $375=((($374)-(1))|0);
      $__q17=$375;
      var $376=$d1;
      var $377=$376 << 0;
      var $378=$__r19;
      var $379=((($378)+($377))|0);
      $__r19=$379;
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $383=$__m11;
      var $384=$__r19;
      var $385=((($384)-($383))|0);
      $__r19=$385;
      var $386=$__r19;
      var $387=$__d15;
      var $388=Math.floor(((($386)>>>0))/((($387)>>>0)));
      $__q08=$388;
      var $389=$__r19;
      var $390=$__q08;
      var $391=$__d15;
      var $392=Math.imul($390,$391);
      var $393=((($389)-($392))|0);
      $__r010=$393;
      var $394=$__q08;
      var $395=$__d06;
      var $396=Math.imul($394,$395);
      $__m11=$396;
      var $397=$__r010;
      var $398=($397<<16);
      var $399=$n0;
      var $400=$399 << 0;
      var $401=$400 & 65535;
      var $402=$398 | $401;
      $__r010=$402;
      var $403=$__r010;
      var $404=$__m11;
      var $405=(($403)>>>0) < (($404)>>>0);
      if ($405) { label = 81; break; } else { label = 86; break; }
    case 81: 
      var $407=$__q08;
      var $408=((($407)-(1))|0);
      $__q08=$408;
      var $409=$d1;
      var $410=$409 << 0;
      var $411=$__r010;
      var $412=((($411)+($410))|0);
      $__r010=$412;
      var $413=$__r010;
      var $414=$d1;
      var $415=$414 << 0;
      var $416=(($413)>>>0) >= (($415)>>>0);
      if ($416) { label = 82; break; } else { label = 85; break; }
    case 82: 
      var $418=$__r010;
      var $419=$__m11;
      var $420=(($418)>>>0) < (($419)>>>0);
      if ($420) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $422=$__q08;
      var $423=((($422)-(1))|0);
      $__q08=$423;
      var $424=$d1;
      var $425=$424 << 0;
      var $426=$__r010;
      var $427=((($426)+($425))|0);
      $__r010=$427;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $431=$__m11;
      var $432=$__r010;
      var $433=((($432)-($431))|0);
      $__r010=$433;
      var $434=$__q17;
      var $435=($434<<16);
      var $436=$__q08;
      var $437=$435 | $436;
      $q=$437;
      var $438=$__r010;
      $r=$438;
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $441=$r;
      var $442=$441 >>> 0;
      $r=$442;
      label = 89; break;
    case 89: 
      var $444=$d0;
      $__u20=$444;
      var $445=$q;
      var $446=$445 << 0;
      $__v21=$446;
      var $447=$__u20;
      var $448=$447 & 65535;
      $__ul16=$448;
      var $449=$__u20;
      var $450=$449 >>> 16;
      $__uh18=$450;
      var $451=$__v21;
      var $452=$451 & 65535;
      $__vl17=$452;
      var $453=$__v21;
      var $454=$453 >>> 16;
      $__vh19=$454;
      var $455=$__ul16;
      var $456=$__vl17;
      var $457=Math.imul($455,$456);
      $__x012=$457;
      var $458=$__ul16;
      var $459=$__vh19;
      var $460=Math.imul($458,$459);
      $__x113=$460;
      var $461=$__uh18;
      var $462=$__vl17;
      var $463=Math.imul($461,$462);
      $__x214=$463;
      var $464=$__uh18;
      var $465=$__vh19;
      var $466=Math.imul($464,$465);
      $__x315=$466;
      var $467=$__x012;
      var $468=$467 >>> 16;
      var $469=$__x113;
      var $470=((($469)+($468))|0);
      $__x113=$470;
      var $471=$__x214;
      var $472=$__x113;
      var $473=((($472)+($471))|0);
      $__x113=$473;
      var $474=$__x113;
      var $475=$__x214;
      var $476=(($474)>>>0) < (($475)>>>0);
      if ($476) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $478=$__x315;
      var $479=((($478)+(65536))|0);
      $__x315=$479;
      label = 91; break;
    case 91: 
      var $481=$__x315;
      var $482=$__x113;
      var $483=$482 >>> 16;
      var $484=((($481)+($483))|0);
      $n1=$484;
      var $485=$__x113;
      var $486=$485 << 16;
      var $487=$__x012;
      var $488=$487 & 65535;
      var $489=((($486)+($488))|0);
      $n0=$489;
      label = 92; break;
    case 92: 
      var $491=$n0;
      var $492=$491 >>> 0;
      $n0=$492;
      label = 93; break;
    case 93: 
      var $494=$3;
      var $495=(($494)|0);
      var $496=HEAP32[(($495)>>2)];
      $n2=$496;
      label = 94; break;
    case 94: 
      var $498=$n1;
      var $499=$r;
      var $500=(($498)>>>0) > (($499)>>>0);
      if ($500) { label = 97; break; } else { label = 95; break; }
    case 95: 
      var $502=$n1;
      var $503=$r;
      var $504=(($502)|0)==(($503)|0);
      if ($504) { label = 96; break; } else { label = 102; break; }
    case 96: 
      var $506=$n0;
      var $507=$n2;
      var $508=(($506)>>>0) > (($507)>>>0);
      if ($508) { label = 97; break; } else { label = 102; break; }
    case 97: 
      var $510=$q;
      var $511=((($510)-(1))|0);
      $q=$511;
      label = 98; break;
    case 98: 
      var $513=$n0;
      var $514=$d0;
      var $515=((($513)-($514))|0);
      $__x22=$515;
      var $516=$n1;
      var $517=(($516)|0);
      var $518=$n0;
      var $519=$d0;
      var $520=(($518)>>>0) < (($519)>>>0);
      var $521=(($520)&1);
      var $522=((($517)-($521))|0);
      $n1=$522;
      var $523=$__x22;
      $n0=$523;
      label = 99; break;
    case 99: 
      var $525=$d1;
      var $526=$r;
      var $527=((($526)+($525))|0);
      $r=$527;
      var $528=$r;
      var $529=$d1;
      var $530=(($528)>>>0) >= (($529)>>>0);
      if ($530) { label = 100; break; } else { label = 101; break; }
    case 100: 
      label = 94; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $534=$q;
      var $535=$i;
      var $536=$1;
      var $537=(($536+($535<<2))|0);
      HEAP32[(($537)>>2)]=$534;
      label = 103; break;
    case 103: 
      var $539=$n2;
      var $540=$n0;
      var $541=((($539)-($540))|0);
      $__x23=$541;
      var $542=$r;
      var $543=$n1;
      var $544=((($542)-($543))|0);
      var $545=$n2;
      var $546=$n0;
      var $547=(($545)>>>0) < (($546)>>>0);
      var $548=(($547)&1);
      var $549=((($544)-($548))|0);
      $n1=$549;
      var $550=$__x23;
      $n0=$550;
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $553=$i;
      var $554=((($553)-(1))|0);
      $i=$554;
      label = 45; break;
    case 106: 
      var $556=$n1;
      var $557=$3;
      var $558=(($557+4)|0);
      HEAP32[(($558)>>2)]=$556;
      var $559=$n0;
      var $560=$3;
      var $561=(($560)|0);
      HEAP32[(($561)>>2)]=$559;
      var $562=$most_significant_q_limb;

      return $562;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_divrem_2["X"]=1;

function ___gmpn_lshift($rp, $up, $n, $cnt) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $high_limb;
      var $low_limb;
      var $tnc;
      var $i;
      var $retval;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$cnt;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+($13<<2))|0);
      $2=$15;
      var $16=$3;
      var $17=$1;
      var $18=(($17+($16<<2))|0);
      $1=$18;
      var $19=$4;
      var $20=(((32)-($19))|0);
      $tnc=$20;
      var $21=$2;
      var $22=((($21)-(4))|0);
      $2=$22;
      var $23=HEAP32[(($22)>>2)];
      $low_limb=$23;
      var $24=$low_limb;
      var $25=$tnc;
      var $26=$24 >>> (($25)>>>0);
      $retval=$26;
      var $27=$low_limb;
      var $28=$4;
      var $29=$27 << $28;
      $high_limb=$29;
      var $30=$3;
      var $31=((($30)-(1))|0);
      $i=$31;
      label = 11; break;
    case 11: 
      var $33=$i;
      var $34=(($33)|0)!=0;
      if ($34) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $36=$2;
      var $37=((($36)-(4))|0);
      $2=$37;
      var $38=HEAP32[(($37)>>2)];
      $low_limb=$38;
      var $39=$high_limb;
      var $40=$low_limb;
      var $41=$tnc;
      var $42=$40 >>> (($41)>>>0);
      var $43=$39 | $42;
      var $44=$1;
      var $45=((($44)-(4))|0);
      $1=$45;
      HEAP32[(($45)>>2)]=$43;
      var $46=$low_limb;
      var $47=$4;
      var $48=$46 << $47;
      $high_limb=$48;
      label = 13; break;
    case 13: 
      var $50=$i;
      var $51=((($50)-(1))|0);
      $i=$51;
      label = 11; break;
    case 14: 
      var $53=$high_limb;
      var $54=$1;
      var $55=((($54)-(4))|0);
      $1=$55;
      HEAP32[(($55)>>2)]=$53;
      var $56=$retval;

      return $56;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_lshift["X"]=1;

function ___gmpn_mu_div_q($qp, $np, $nn, $dp, $dn, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $tp;
      var $rp;
      var $ip;
      var $this_ip;
      var $qn;
      var $in;
      var $this_in;
      var $cy;
      var $qh;
      var $__tmp_marker=__stackBase__;
      var $in1;
      var $in2;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__n1;
      var $__dst2;
      var $__src3;
      var $__x4;
      var $__dst5;
      var $__n6;
      var $__n7;
      var $__dst8;
      var $__src9;
      var $__x10;
      var $__n11;
      var $__dst12;
      var $__src13;
      var $__x14;
      var $i;
      var $__n15;
      var $__dst16;
      var $__src17;
      var $__x18;
      var $cy19;
      var $pp;
      var $__n20;
      var $__dst21;
      var $__src22;
      var $__x23;
      var $__n24;
      var $__dst25;
      var $__src26;
      var $__x27;
      var $cy28;
      var $__n29;
      var $__dst30;
      var $__src31;
      var $__x32;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$scratch;
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $7=$3;
      var $8=$5;
      var $9=((($7)-($8))|0);
      $qn=$9;
      var $10=$qn;
      var $11=((($10)+(1))|0);
      var $12=($11<<2);
      var $13=___gmp_tmp_reentrant_alloc($__tmp_marker, $12);
      var $14=$13;
      $tp=$14;
      var $15=$qn;
      var $16=$5;
      var $17=(($15)|0) >= (($16)|0);
      if ($17) { label = 3; break; } else { label = 135; break; }
    case 3: 
      var $19=$5;
      var $20=$qn;
      var $21=(($19)|0)!=(($20)|0);
      if ($21) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $23=$qn;
      var $24=$5;
      var $25=((($23)-($24))|0);
      var $26=$5;
      var $27=___gmpn_mu_div_qr_choose_in($25, $26, 0);
      $in1=$27;
      var $28=$5;
      var $29=((($28)+(1))|0);
      var $30=$5;
      var $31=___gmpn_mu_divappr_q_choose_in($29, $30, 0);
      $in2=$31;
      var $32=$in1;
      var $33=$in2;
      var $34=(($32)|0) > (($33)|0);
      if ($34) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $36=$in1;
      var $40 = $36;label = 7; break;
    case 6: 
      var $38=$in2;
      var $40 = $38;label = 7; break;
    case 7: 
      var $40;
      $in=$40;
      label = 9; break;
    case 8: 
      var $42=$5;
      var $43=((($42)+(1))|0);
      var $44=$5;
      var $45=___gmpn_mu_divappr_q_choose_in($43, $44, 0);
      $in=$45;
      label = 9; break;
    case 9: 
      var $47=$in;
      var $48=((($47)+(1))|0);
      var $49=($48<<2);
      var $50=___gmp_tmp_reentrant_alloc($__tmp_marker, $49);
      var $51=$50;
      $ip=$51;
      var $52=$5;
      var $53=$in;
      var $54=(($52)|0)==(($53)|0);
      if ($54) { label = 10; break; } else { label = 41; break; }
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $64=$in;
      var $65=(($64)|0)!=0;
      if ($65) { label = 19; break; } else { label = 25; break; }
    case 19: 
      var $67=$in;
      var $68=((($67)-(1))|0);
      $__n=$68;
      var $69=$6;
      var $70=(($69+4)|0);
      $__dst=$70;
      var $71=$4;
      $__src=$71;
      var $72=$__src;
      var $73=(($72+4)|0);
      $__src=$73;
      var $74=HEAP32[(($72)>>2)];
      $__x=$74;
      var $75=$__n;
      var $76=(($75)|0)!=0;
      if ($76) { label = 20; break; } else { label = 24; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $79=$__x;
      var $80=$__dst;
      var $81=(($80+4)|0);
      $__dst=$81;
      HEAP32[(($80)>>2)]=$79;
      var $82=$__src;
      var $83=(($82+4)|0);
      $__src=$83;
      var $84=HEAP32[(($82)>>2)];
      $__x=$84;
      label = 22; break;
    case 22: 
      var $86=$__n;
      var $87=((($86)-(1))|0);
      $__n=$87;
      var $88=(($87)|0)!=0;
      if ($88) { label = 21; break; } else { label = 23; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $91=$__x;
      var $92=$__dst;
      var $93=(($92+4)|0);
      $__dst=$93;
      HEAP32[(($92)>>2)]=$91;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $97=$6;
      var $98=(($97)|0);
      HEAP32[(($98)>>2)]=1;
      var $99=$ip;
      var $100=$6;
      var $101=$in;
      var $102=((($101)+(1))|0);
      var $103=___gmpn_invertappr($99, $100, $102, 0);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $109=$in;
      var $110=(($109)|0)!=0;
      if ($110) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $112=$in;
      var $113=((($112)-(1))|0);
      $__n1=$113;
      var $114=$ip;
      $__dst2=$114;
      var $115=$ip;
      var $116=(($115+4)|0);
      $__src3=$116;
      var $117=$__src3;
      var $118=(($117+4)|0);
      $__src3=$118;
      var $119=HEAP32[(($117)>>2)];
      $__x4=$119;
      var $120=$__n1;
      var $121=(($120)|0)!=0;
      if ($121) { label = 34; break; } else { label = 38; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $124=$__x4;
      var $125=$__dst2;
      var $126=(($125+4)|0);
      $__dst2=$126;
      HEAP32[(($125)>>2)]=$124;
      var $127=$__src3;
      var $128=(($127+4)|0);
      $__src3=$128;
      var $129=HEAP32[(($127)>>2)];
      $__x4=$129;
      label = 36; break;
    case 36: 
      var $131=$__n1;
      var $132=((($131)-(1))|0);
      $__n1=$132;
      var $133=(($132)|0)!=0;
      if ($133) { label = 35; break; } else { label = 37; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $136=$__x4;
      var $137=$__dst2;
      var $138=(($137+4)|0);
      $__dst2=$138;
      HEAP32[(($137)>>2)]=$136;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 67; break;
    case 41: 
      var $142=$6;
      var $143=$4;
      var $144=$5;
      var $145=(($143+($144<<2))|0);
      var $146=$in;
      var $147=((($146)+(1))|0);
      var $148=(((-$147))|0);
      var $149=(($145+($148<<2))|0);
      var $150=$in;
      var $151=((($150)+(1))|0);
      var $152=___gmpn_add_1($142, $149, $151, 1);
      $cy=$152;
      var $153=$cy;
      var $154=(($153)|0)!=0;
      if ($154) { label = 42; break; } else { label = 52; break; }
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $159=$in;
      var $160=(($159)|0)!=0;
      if ($160) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $162=$ip;
      $__dst5=$162;
      var $163=$in;
      $__n6=$163;
      label = 47; break;
    case 47: 
      var $165=$__dst5;
      var $166=(($165+4)|0);
      $__dst5=$166;
      HEAP32[(($165)>>2)]=0;
      label = 48; break;
    case 48: 
      var $168=$__n6;
      var $169=((($168)-(1))|0);
      $__n6=$169;
      var $170=(($169)|0)!=0;
      if ($170) { label = 47; break; } else { label = 49; break; }
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 66; break;
    case 52: 
      var $175=$ip;
      var $176=$6;
      var $177=$in;
      var $178=((($177)+(1))|0);
      var $179=___gmpn_invertappr($175, $176, $178, 0);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $185=$in;
      var $186=(($185)|0)!=0;
      if ($186) { label = 58; break; } else { label = 64; break; }
    case 58: 
      var $188=$in;
      var $189=((($188)-(1))|0);
      $__n7=$189;
      var $190=$ip;
      $__dst8=$190;
      var $191=$ip;
      var $192=(($191+4)|0);
      $__src9=$192;
      var $193=$__src9;
      var $194=(($193+4)|0);
      $__src9=$194;
      var $195=HEAP32[(($193)>>2)];
      $__x10=$195;
      var $196=$__n7;
      var $197=(($196)|0)!=0;
      if ($197) { label = 59; break; } else { label = 63; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $200=$__x10;
      var $201=$__dst8;
      var $202=(($201+4)|0);
      $__dst8=$202;
      HEAP32[(($201)>>2)]=$200;
      var $203=$__src9;
      var $204=(($203+4)|0);
      $__src9=$204;
      var $205=HEAP32[(($203)>>2)];
      $__x10=$205;
      label = 61; break;
    case 61: 
      var $207=$__n7;
      var $208=((($207)-(1))|0);
      $__n7=$208;
      var $209=(($208)|0)!=0;
      if ($209) { label = 60; break; } else { label = 62; break; }
    case 62: 
      label = 63; break;
    case 63: 
      var $212=$__x10;
      var $213=$__dst8;
      var $214=(($213+4)|0);
      $__dst8=$214;
      HEAP32[(($213)>>2)]=$212;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $219=$5;
      var $220=($219<<1);
      var $221=((($220)+(1))|0);
      var $222=($221<<2);
      var $223=___gmp_tmp_reentrant_alloc($__tmp_marker, $222);
      var $224=$223;
      $rp=$224;
      var $225=$qn;
      var $226=$5;
      var $227=((($225)-($226))|0);
      var $228=$5;
      var $229=___gmpn_mu_div_qr_choose_in($227, $228, 0);
      $this_in=$229;
      var $230=$ip;
      var $231=$in;
      var $232=(($230+($231<<2))|0);
      var $233=$this_in;
      var $234=(((-$233))|0);
      var $235=(($232+($234<<2))|0);
      $this_ip=$235;
      var $236=$tp;
      var $237=$5;
      var $238=(($236+($237<<2))|0);
      var $239=(($238+4)|0);
      var $240=$rp;
      var $241=$5;
      var $242=(($240+($241<<2))|0);
      var $243=(($242+4)|0);
      var $244=$2;
      var $245=$5;
      var $246=(($244+($245<<2))|0);
      var $247=$qn;
      var $248=$4;
      var $249=$5;
      var $250=$this_ip;
      var $251=$this_in;
      var $252=$6;
      var $253=___gmpn_preinv_mu_div_qr($239, $243, $246, $247, $248, $249, $250, $251, $252);
      $qh=$253;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $262=$5;
      var $263=(($262)|0)!=0;
      if ($263) { label = 76; break; } else { label = 82; break; }
    case 76: 
      var $265=$5;
      var $266=((($265)-(1))|0);
      $__n11=$266;
      var $267=$rp;
      var $268=(($267+4)|0);
      $__dst12=$268;
      var $269=$2;
      $__src13=$269;
      var $270=$__src13;
      var $271=(($270+4)|0);
      $__src13=$271;
      var $272=HEAP32[(($270)>>2)];
      $__x14=$272;
      var $273=$__n11;
      var $274=(($273)|0)!=0;
      if ($274) { label = 77; break; } else { label = 81; break; }
    case 77: 
      label = 78; break;
    case 78: 
      var $277=$__x14;
      var $278=$__dst12;
      var $279=(($278+4)|0);
      $__dst12=$279;
      HEAP32[(($278)>>2)]=$277;
      var $280=$__src13;
      var $281=(($280+4)|0);
      $__src13=$281;
      var $282=HEAP32[(($280)>>2)];
      $__x14=$282;
      label = 79; break;
    case 79: 
      var $284=$__n11;
      var $285=((($284)-(1))|0);
      $__n11=$285;
      var $286=(($285)|0)!=0;
      if ($286) { label = 78; break; } else { label = 80; break; }
    case 80: 
      label = 81; break;
    case 81: 
      var $289=$__x14;
      var $290=$__dst12;
      var $291=(($290+4)|0);
      $__dst12=$291;
      HEAP32[(($290)>>2)]=$289;
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $295=$rp;
      var $296=(($295)|0);
      HEAP32[(($296)>>2)]=0;
      var $297=$5;
      var $298=((($297)+(1))|0);
      var $299=$5;
      var $300=___gmpn_mu_divappr_q_choose_in($298, $299, 0);
      $this_in=$300;
      var $301=$ip;
      var $302=$in;
      var $303=(($301+($302<<2))|0);
      var $304=$this_in;
      var $305=(((-$304))|0);
      var $306=(($303+($305<<2))|0);
      $this_ip=$306;
      var $307=$tp;
      var $308=$rp;
      var $309=$5;
      var $310=($309<<1);
      var $311=((($310)+(1))|0);
      var $312=$4;
      var $313=$5;
      var $314=$this_ip;
      var $315=$this_in;
      var $316=$6;
      var $317=___gmpn_preinv_mu_divappr_q($307, $308, $311, $312, $313, $314, $315, $316);
      $cy=$317;
      var $318=$cy;
      var $319=(($318)|0)!=0;
      if ($319) { label = 85; break; } else { label = 90; break; }
    case 85: 
      $i=0;
      label = 86; break;
    case 86: 
      var $322=$i;
      var $323=$5;
      var $324=((($323)+(1))|0);
      var $325=(($322)|0) < (($324)|0);
      if ($325) { label = 87; break; } else { label = 89; break; }
    case 87: 
      var $327=$i;
      var $328=$tp;
      var $329=(($328+($327<<2))|0);
      HEAP32[(($329)>>2)]=-1;
      label = 88; break;
    case 88: 
      var $331=$i;
      var $332=((($331)+(1))|0);
      $i=$332;
      label = 86; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $335=$tp;
      var $336=(($335)|0);
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337)>>>0) > 4;
      if ($338) { label = 91; break; } else { label = 109; break; }
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $348=$qn;
      var $349=(($348)|0)!=0;
      if ($349) { label = 100; break; } else { label = 106; break; }
    case 100: 
      var $351=$qn;
      var $352=((($351)-(1))|0);
      $__n15=$352;
      var $353=$1;
      $__dst16=$353;
      var $354=$tp;
      var $355=(($354+4)|0);
      $__src17=$355;
      var $356=$__src17;
      var $357=(($356+4)|0);
      $__src17=$357;
      var $358=HEAP32[(($356)>>2)];
      $__x18=$358;
      var $359=$__n15;
      var $360=(($359)|0)!=0;
      if ($360) { label = 101; break; } else { label = 105; break; }
    case 101: 
      label = 102; break;
    case 102: 
      var $363=$__x18;
      var $364=$__dst16;
      var $365=(($364+4)|0);
      $__dst16=$365;
      HEAP32[(($364)>>2)]=$363;
      var $366=$__src17;
      var $367=(($366+4)|0);
      $__src17=$367;
      var $368=HEAP32[(($366)>>2)];
      $__x18=$368;
      label = 103; break;
    case 103: 
      var $370=$__n15;
      var $371=((($370)-(1))|0);
      $__n15=$371;
      var $372=(($371)|0)!=0;
      if ($372) { label = 102; break; } else { label = 104; break; }
    case 104: 
      label = 105; break;
    case 105: 
      var $375=$__x18;
      var $376=$__dst16;
      var $377=(($376+4)|0);
      $__dst16=$377;
      HEAP32[(($376)>>2)]=$375;
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 134; break;
    case 109: 
      var $382=$3;
      var $383=($382<<2);
      var $384=___gmp_tmp_reentrant_alloc($__tmp_marker, $383);
      var $385=$384;
      $pp=$385;
      var $386=$pp;
      var $387=$tp;
      var $388=(($387+4)|0);
      var $389=$qn;
      var $390=$4;
      var $391=$5;
      var $392=___gmpn_mul($386, $388, $389, $390, $391);
      var $393=$qh;
      var $394=(($393)|0)!=0;
      if ($394) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $396=$pp;
      var $397=$qn;
      var $398=(($396+($397<<2))|0);
      var $399=$pp;
      var $400=$qn;
      var $401=(($399+($400<<2))|0);
      var $402=$4;
      var $403=$5;
      var $404=___gmpn_add_n($398, $401, $402, $403);
      var $407 = $404;label = 112; break;
    case 111: 
      var $407 = 0;label = 112; break;
    case 112: 
      var $407;
      $cy19=$407;
      var $408=$cy19;
      var $409=(($408)|0)!=0;
      if ($409) { label = 114; break; } else { label = 113; break; }
    case 113: 
      var $411=$pp;
      var $412=$2;
      var $413=$3;
      var $414=___gmpn_cmp($411, $412, $413);
      var $415=(($414)|0) > 0;
      if ($415) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $417=$1;
      var $418=$tp;
      var $419=(($418+4)|0);
      var $420=$qn;
      var $421=___gmpn_sub_1($417, $419, $420, 1);
      var $422=$qh;
      var $423=((($422)-($421))|0);
      $qh=$423;
      label = 133; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $433=$qn;
      var $434=(($433)|0)!=0;
      if ($434) { label = 124; break; } else { label = 130; break; }
    case 124: 
      var $436=$qn;
      var $437=((($436)-(1))|0);
      $__n20=$437;
      var $438=$1;
      $__dst21=$438;
      var $439=$tp;
      var $440=(($439+4)|0);
      $__src22=$440;
      var $441=$__src22;
      var $442=(($441+4)|0);
      $__src22=$442;
      var $443=HEAP32[(($441)>>2)];
      $__x23=$443;
      var $444=$__n20;
      var $445=(($444)|0)!=0;
      if ($445) { label = 125; break; } else { label = 129; break; }
    case 125: 
      label = 126; break;
    case 126: 
      var $448=$__x23;
      var $449=$__dst21;
      var $450=(($449+4)|0);
      $__dst21=$450;
      HEAP32[(($449)>>2)]=$448;
      var $451=$__src22;
      var $452=(($451+4)|0);
      $__src22=$452;
      var $453=HEAP32[(($451)>>2)];
      $__x23=$453;
      label = 127; break;
    case 127: 
      var $455=$__n20;
      var $456=((($455)-(1))|0);
      $__n20=$456;
      var $457=(($456)|0)!=0;
      if ($457) { label = 126; break; } else { label = 128; break; }
    case 128: 
      label = 129; break;
    case 129: 
      var $460=$__x23;
      var $461=$__dst21;
      var $462=(($461+4)|0);
      $__dst21=$462;
      HEAP32[(($461)>>2)]=$460;
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      label = 180; break;
    case 135: 
      var $469=$tp;
      var $470=$2;
      var $471=$3;
      var $472=(($470+($471<<2))|0);
      var $473=$qn;
      var $474=($473<<1);
      var $475=((($474)+(2))|0);
      var $476=(((-$475))|0);
      var $477=(($472+($476<<2))|0);
      var $478=$qn;
      var $479=($478<<1);
      var $480=((($479)+(2))|0);
      var $481=$4;
      var $482=$5;
      var $483=(($481+($482<<2))|0);
      var $484=$qn;
      var $485=((($484)+(1))|0);
      var $486=(((-$485))|0);
      var $487=(($483+($486<<2))|0);
      var $488=$qn;
      var $489=((($488)+(1))|0);
      var $490=$6;
      var $491=___gmpn_mu_divappr_q($469, $477, $480, $487, $489, $490);
      $qh=$491;
      var $492=$tp;
      var $493=(($492)|0);
      var $494=HEAP32[(($493)>>2)];
      var $495=(($494)>>>0) > 6;
      if ($495) { label = 136; break; } else { label = 154; break; }
    case 136: 
      label = 137; break;
    case 137: 
      label = 138; break;
    case 138: 
      label = 139; break;
    case 139: 
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      var $505=$qn;
      var $506=(($505)|0)!=0;
      if ($506) { label = 145; break; } else { label = 151; break; }
    case 145: 
      var $508=$qn;
      var $509=((($508)-(1))|0);
      $__n24=$509;
      var $510=$1;
      $__dst25=$510;
      var $511=$tp;
      var $512=(($511+4)|0);
      $__src26=$512;
      var $513=$__src26;
      var $514=(($513+4)|0);
      $__src26=$514;
      var $515=HEAP32[(($513)>>2)];
      $__x27=$515;
      var $516=$__n24;
      var $517=(($516)|0)!=0;
      if ($517) { label = 146; break; } else { label = 150; break; }
    case 146: 
      label = 147; break;
    case 147: 
      var $520=$__x27;
      var $521=$__dst25;
      var $522=(($521+4)|0);
      $__dst25=$522;
      HEAP32[(($521)>>2)]=$520;
      var $523=$__src26;
      var $524=(($523+4)|0);
      $__src26=$524;
      var $525=HEAP32[(($523)>>2)];
      $__x27=$525;
      label = 148; break;
    case 148: 
      var $527=$__n24;
      var $528=((($527)-(1))|0);
      $__n24=$528;
      var $529=(($528)|0)!=0;
      if ($529) { label = 147; break; } else { label = 149; break; }
    case 149: 
      label = 150; break;
    case 150: 
      var $532=$__x27;
      var $533=$__dst25;
      var $534=(($533+4)|0);
      $__dst25=$534;
      HEAP32[(($533)>>2)]=$532;
      label = 151; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 179; break;
    case 154: 
      var $539=$3;
      var $540=($539<<2);
      var $541=___gmp_tmp_reentrant_alloc($__tmp_marker, $540);
      var $542=$541;
      $rp=$542;
      var $543=$rp;
      var $544=$4;
      var $545=$5;
      var $546=$tp;
      var $547=(($546+4)|0);
      var $548=$qn;
      var $549=___gmpn_mul($543, $544, $545, $547, $548);
      var $550=$qh;
      var $551=(($550)|0)!=0;
      if ($551) { label = 155; break; } else { label = 156; break; }
    case 155: 
      var $553=$rp;
      var $554=$qn;
      var $555=(($553+($554<<2))|0);
      var $556=$rp;
      var $557=$qn;
      var $558=(($556+($557<<2))|0);
      var $559=$4;
      var $560=$5;
      var $561=___gmpn_add_n($555, $558, $559, $560);
      var $564 = $561;label = 157; break;
    case 156: 
      var $564 = 0;label = 157; break;
    case 157: 
      var $564;
      $cy28=$564;
      var $565=$cy28;
      var $566=(($565)|0)!=0;
      if ($566) { label = 159; break; } else { label = 158; break; }
    case 158: 
      var $568=$rp;
      var $569=$2;
      var $570=$3;
      var $571=___gmpn_cmp($568, $569, $570);
      var $572=(($571)|0) > 0;
      if ($572) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $574=$1;
      var $575=$tp;
      var $576=(($575+4)|0);
      var $577=$qn;
      var $578=___gmpn_sub_1($574, $576, $577, 1);
      var $579=$qh;
      var $580=((($579)-($578))|0);
      $qh=$580;
      label = 178; break;
    case 160: 
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      var $590=$qn;
      var $591=(($590)|0)!=0;
      if ($591) { label = 169; break; } else { label = 175; break; }
    case 169: 
      var $593=$qn;
      var $594=((($593)-(1))|0);
      $__n29=$594;
      var $595=$1;
      $__dst30=$595;
      var $596=$tp;
      var $597=(($596+4)|0);
      $__src31=$597;
      var $598=$__src31;
      var $599=(($598+4)|0);
      $__src31=$599;
      var $600=HEAP32[(($598)>>2)];
      $__x32=$600;
      var $601=$__n29;
      var $602=(($601)|0)!=0;
      if ($602) { label = 170; break; } else { label = 174; break; }
    case 170: 
      label = 171; break;
    case 171: 
      var $605=$__x32;
      var $606=$__dst30;
      var $607=(($606+4)|0);
      $__dst30=$607;
      HEAP32[(($606)>>2)]=$605;
      var $608=$__src31;
      var $609=(($608+4)|0);
      $__src31=$609;
      var $610=HEAP32[(($608)>>2)];
      $__x32=$610;
      label = 172; break;
    case 172: 
      var $612=$__n29;
      var $613=((($612)-(1))|0);
      $__n29=$613;
      var $614=(($613)|0)!=0;
      if ($614) { label = 171; break; } else { label = 173; break; }
    case 173: 
      label = 174; break;
    case 174: 
      var $617=$__x32;
      var $618=$__dst30;
      var $619=(($618+4)|0);
      $__dst30=$619;
      HEAP32[(($618)>>2)]=$617;
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      label = 178; break;
    case 178: 
      label = 179; break;
    case 179: 
      label = 180; break;
    case 180: 
      label = 181; break;
    case 181: 
      var $627=HEAP32[(($__tmp_marker)>>2)];
      var $628=(($627)|0)!=0;
      if ($628) { label = 182; break; } else { label = 183; break; }
    case 182: 
      var $630=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($630);
      label = 183; break;
    case 183: 
      label = 184; break;
    case 184: 
      var $633=$qh;
      STACKTOP = __stackBase__;
      return $633;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_div_q["X"]=1;

function ___gmpn_mu_div_q_itch($nn, $dn, $mua_k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $qn;
      var $itch1;
      var $itch2;
      $2=$nn;
      $3=$dn;
      $4=$mua_k;
      var $5=$2;
      var $6=$3;
      var $7=((($5)-($6))|0);
      $qn=$7;
      var $8=$qn;
      var $9=$3;
      var $10=(($8)|0) >= (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$qn;
      var $13=$3;
      var $14=$4;
      var $15=___gmpn_mu_div_qr_itch($12, $13, $14);
      $itch1=$15;
      var $16=$3;
      var $17=($16<<1);
      var $18=((($17)+(1))|0);
      var $19=$3;
      var $20=$4;
      var $21=___gmpn_mu_divappr_q_itch($18, $19, $20);
      $itch2=$21;
      var $22=$itch1;
      var $23=$itch2;
      var $24=(($22)|0) > (($23)|0);
      if ($24) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $26=$itch1;
      var $30 = $26;label = 6; break;
    case 5: 
      var $28=$itch2;
      var $30 = $28;label = 6; break;
    case 6: 
      var $30;
      $1=$30;
      label = 8; break;
    case 7: 
      var $32=$qn;
      var $33=($32<<1);
      var $34=((($33)+(2))|0);
      var $35=$qn;
      var $36=((($35)+(1))|0);
      var $37=$4;
      var $38=___gmpn_mu_divappr_q_itch($34, $36, $37);
      $itch1=$38;
      var $39=$itch1;
      $1=$39;
      label = 8; break;
    case 8: 
      var $41=$1;

      return $41;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_div_q_itch["X"]=1;

function ___gmpn_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $qn;
      var $cy;
      var $qh;
      $1=$qp;
      $2=$rp;
      $3=$np;
      $4=$nn;
      $5=$dp;
      $6=$dn;
      $7=$scratch;
      var $8=$4;
      var $9=$6;
      var $10=((($8)-($9))|0);
      $qn=$10;
      var $11=$qn;
      var $12=((($11)+(100))|0);
      var $13=$6;
      var $14=(($12)|0) < (($13)|0);
      if ($14) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $16=$1;
      var $17=$2;
      var $18=$4;
      var $19=(($17+($18<<2))|0);
      var $20=$qn;
      var $21=($20<<1);
      var $22=((($21)+(1))|0);
      var $23=(((-$22))|0);
      var $24=(($19+($23<<2))|0);
      var $25=$3;
      var $26=$4;
      var $27=(($25+($26<<2))|0);
      var $28=$qn;
      var $29=($28<<1);
      var $30=((($29)+(1))|0);
      var $31=(((-$30))|0);
      var $32=(($27+($31<<2))|0);
      var $33=$qn;
      var $34=($33<<1);
      var $35=((($34)+(1))|0);
      var $36=$5;
      var $37=$6;
      var $38=(($36+($37<<2))|0);
      var $39=$qn;
      var $40=((($39)+(1))|0);
      var $41=(((-$40))|0);
      var $42=(($38+($41<<2))|0);
      var $43=$qn;
      var $44=((($43)+(1))|0);
      var $45=$7;
      var $46=_mpn_mu_div_qr2($16, $24, $32, $35, $42, $44, $45);
      $qh=$46;
      var $47=$6;
      var $48=$qn;
      var $49=((($48)+(1))|0);
      var $50=((($47)-($49))|0);
      var $51=$qn;
      var $52=(($50)|0) > (($51)|0);
      if ($52) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $54=$7;
      var $55=$5;
      var $56=$6;
      var $57=$qn;
      var $58=((($57)+(1))|0);
      var $59=((($56)-($58))|0);
      var $60=$1;
      var $61=$qn;
      var $62=___gmpn_mul($54, $55, $59, $60, $61);
      label = 6; break;
    case 5: 
      var $64=$7;
      var $65=$1;
      var $66=$qn;
      var $67=$5;
      var $68=$6;
      var $69=$qn;
      var $70=((($69)+(1))|0);
      var $71=((($68)-($70))|0);
      var $72=___gmpn_mul($64, $65, $66, $67, $71);
      label = 6; break;
    case 6: 
      var $74=$qh;
      var $75=(($74)|0)!=0;
      if ($75) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $77=$7;
      var $78=$qn;
      var $79=(($77+($78<<2))|0);
      var $80=$7;
      var $81=$qn;
      var $82=(($80+($81<<2))|0);
      var $83=$5;
      var $84=$6;
      var $85=$qn;
      var $86=((($85)+(1))|0);
      var $87=((($84)-($86))|0);
      var $88=___gmpn_add_n($79, $82, $83, $87);
      $cy=$88;
      label = 9; break;
    case 8: 
      $cy=0;
      label = 9; break;
    case 9: 
      var $91=$cy;
      var $92=$6;
      var $93=((($92)-(1))|0);
      var $94=$7;
      var $95=(($94+($93<<2))|0);
      HEAP32[(($95)>>2)]=$91;
      var $96=$2;
      var $97=$3;
      var $98=$7;
      var $99=$4;
      var $100=$qn;
      var $101=($100<<1);
      var $102=((($101)+(1))|0);
      var $103=((($99)-($102))|0);
      var $104=___gmpn_sub_n($96, $97, $98, $103);
      $cy=$104;
      var $105=$2;
      var $106=$4;
      var $107=(($105+($106<<2))|0);
      var $108=$qn;
      var $109=($108<<1);
      var $110=((($109)+(1))|0);
      var $111=(((-$110))|0);
      var $112=(($107+($111<<2))|0);
      var $113=$2;
      var $114=$4;
      var $115=(($113+($114<<2))|0);
      var $116=$qn;
      var $117=($116<<1);
      var $118=((($117)+(1))|0);
      var $119=(((-$118))|0);
      var $120=(($115+($119<<2))|0);
      var $121=$7;
      var $122=$4;
      var $123=(($121+($122<<2))|0);
      var $124=$qn;
      var $125=($124<<1);
      var $126=((($125)+(1))|0);
      var $127=(((-$126))|0);
      var $128=(($123+($127<<2))|0);
      var $129=$qn;
      var $130=((($129)+(1))|0);
      var $131=$cy;
      var $132=_mpn_sub_nc($112, $120, $128, $130, $131);
      $cy=$132;
      var $133=$cy;
      var $134=(($133)|0)!=0;
      if ($134) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $136=$1;
      var $137=$1;
      var $138=$qn;
      var $139=___gmpn_sub_1($136, $137, $138, 1);
      var $140=$qh;
      var $141=((($140)-($139))|0);
      $qh=$141;
      var $142=$2;
      var $143=$2;
      var $144=$5;
      var $145=$6;
      var $146=___gmpn_add_n($142, $143, $144, $145);
      label = 11; break;
    case 11: 
      label = 13; break;
    case 12: 
      var $149=$1;
      var $150=$2;
      var $151=$3;
      var $152=$4;
      var $153=$5;
      var $154=$6;
      var $155=$7;
      var $156=_mpn_mu_div_qr2($149, $150, $151, $152, $153, $154, $155);
      $qh=$156;
      label = 13; break;
    case 13: 
      var $158=$qh;

      return $158;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_div_qr["X"]=1;

function _mpn_mu_div_qr2($qp, $rp, $np, $nn, $dp, $dn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $qn;
      var $in;
      var $cy;
      var $qh;
      var $ip;
      var $tp;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__n1;
      var $__dst2;
      var $__src3;
      var $__x4;
      var $__dst5;
      var $__n6;
      var $__n7;
      var $__dst8;
      var $__src9;
      var $__x10;
      $1=$qp;
      $2=$rp;
      $3=$np;
      $4=$nn;
      $5=$dp;
      $6=$dn;
      $7=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $10=$4;
      var $11=$6;
      var $12=((($10)-($11))|0);
      $qn=$12;
      var $13=$qn;
      var $14=$6;
      var $15=___gmpn_mu_div_qr_choose_in($13, $14, 0);
      $in=$15;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $18=$7;
      $ip=$18;
      var $19=$7;
      var $20=$in;
      var $21=(($19+($20<<2))|0);
      var $22=(($21+4)|0);
      $tp=$22;
      var $23=$6;
      var $24=$in;
      var $25=(($23)|0)==(($24)|0);
      if ($25) { label = 7; break; } else { label = 38; break; }
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $35=$in;
      var $36=(($35)|0)!=0;
      if ($36) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $38=$in;
      var $39=((($38)-(1))|0);
      $__n=$39;
      var $40=$tp;
      var $41=(($40+4)|0);
      $__dst=$41;
      var $42=$5;
      $__src=$42;
      var $43=$__src;
      var $44=(($43+4)|0);
      $__src=$44;
      var $45=HEAP32[(($43)>>2)];
      $__x=$45;
      var $46=$__n;
      var $47=(($46)|0)!=0;
      if ($47) { label = 17; break; } else { label = 21; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $50=$__x;
      var $51=$__dst;
      var $52=(($51+4)|0);
      $__dst=$52;
      HEAP32[(($51)>>2)]=$50;
      var $53=$__src;
      var $54=(($53+4)|0);
      $__src=$54;
      var $55=HEAP32[(($53)>>2)];
      $__x=$55;
      label = 19; break;
    case 19: 
      var $57=$__n;
      var $58=((($57)-(1))|0);
      $__n=$58;
      var $59=(($58)|0)!=0;
      if ($59) { label = 18; break; } else { label = 20; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $62=$__x;
      var $63=$__dst;
      var $64=(($63+4)|0);
      $__dst=$64;
      HEAP32[(($63)>>2)]=$62;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $68=$tp;
      var $69=(($68)|0);
      HEAP32[(($69)>>2)]=1;
      var $70=$ip;
      var $71=$tp;
      var $72=$in;
      var $73=((($72)+(1))|0);
      var $74=___gmpn_invertappr($70, $71, $73, 0);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $80=$in;
      var $81=(($80)|0)!=0;
      if ($81) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $83=$in;
      var $84=((($83)-(1))|0);
      $__n1=$84;
      var $85=$ip;
      $__dst2=$85;
      var $86=$ip;
      var $87=(($86+4)|0);
      $__src3=$87;
      var $88=$__src3;
      var $89=(($88+4)|0);
      $__src3=$89;
      var $90=HEAP32[(($88)>>2)];
      $__x4=$90;
      var $91=$__n1;
      var $92=(($91)|0)!=0;
      if ($92) { label = 31; break; } else { label = 35; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $95=$__x4;
      var $96=$__dst2;
      var $97=(($96+4)|0);
      $__dst2=$97;
      HEAP32[(($96)>>2)]=$95;
      var $98=$__src3;
      var $99=(($98+4)|0);
      $__src3=$99;
      var $100=HEAP32[(($98)>>2)];
      $__x4=$100;
      label = 33; break;
    case 33: 
      var $102=$__n1;
      var $103=((($102)-(1))|0);
      $__n1=$103;
      var $104=(($103)|0)!=0;
      if ($104) { label = 32; break; } else { label = 34; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $107=$__x4;
      var $108=$__dst2;
      var $109=(($108+4)|0);
      $__dst2=$109;
      HEAP32[(($108)>>2)]=$107;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 64; break;
    case 38: 
      var $113=$tp;
      var $114=$5;
      var $115=$6;
      var $116=(($114+($115<<2))|0);
      var $117=$in;
      var $118=((($117)+(1))|0);
      var $119=(((-$118))|0);
      var $120=(($116+($119<<2))|0);
      var $121=$in;
      var $122=((($121)+(1))|0);
      var $123=___gmpn_add_1($113, $120, $122, 1);
      $cy=$123;
      var $124=$cy;
      var $125=(($124)|0)!=0;
      if ($125) { label = 39; break; } else { label = 49; break; }
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $130=$in;
      var $131=(($130)|0)!=0;
      if ($131) { label = 43; break; } else { label = 47; break; }
    case 43: 
      var $133=$ip;
      $__dst5=$133;
      var $134=$in;
      $__n6=$134;
      label = 44; break;
    case 44: 
      var $136=$__dst5;
      var $137=(($136+4)|0);
      $__dst5=$137;
      HEAP32[(($136)>>2)]=0;
      label = 45; break;
    case 45: 
      var $139=$__n6;
      var $140=((($139)-(1))|0);
      $__n6=$140;
      var $141=(($140)|0)!=0;
      if ($141) { label = 44; break; } else { label = 46; break; }
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 63; break;
    case 49: 
      var $146=$ip;
      var $147=$tp;
      var $148=$in;
      var $149=((($148)+(1))|0);
      var $150=___gmpn_invertappr($146, $147, $149, 0);
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $156=$in;
      var $157=(($156)|0)!=0;
      if ($157) { label = 55; break; } else { label = 61; break; }
    case 55: 
      var $159=$in;
      var $160=((($159)-(1))|0);
      $__n7=$160;
      var $161=$ip;
      $__dst8=$161;
      var $162=$ip;
      var $163=(($162+4)|0);
      $__src9=$163;
      var $164=$__src9;
      var $165=(($164+4)|0);
      $__src9=$165;
      var $166=HEAP32[(($164)>>2)];
      $__x10=$166;
      var $167=$__n7;
      var $168=(($167)|0)!=0;
      if ($168) { label = 56; break; } else { label = 60; break; }
    case 56: 
      label = 57; break;
    case 57: 
      var $171=$__x10;
      var $172=$__dst8;
      var $173=(($172+4)|0);
      $__dst8=$173;
      HEAP32[(($172)>>2)]=$171;
      var $174=$__src9;
      var $175=(($174+4)|0);
      $__src9=$175;
      var $176=HEAP32[(($174)>>2)];
      $__x10=$176;
      label = 58; break;
    case 58: 
      var $178=$__n7;
      var $179=((($178)-(1))|0);
      $__n7=$179;
      var $180=(($179)|0)!=0;
      if ($180) { label = 57; break; } else { label = 59; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $183=$__x10;
      var $184=$__dst8;
      var $185=(($184+4)|0);
      $__dst8=$185;
      HEAP32[(($184)>>2)]=$183;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $190=$1;
      var $191=$2;
      var $192=$3;
      var $193=$4;
      var $194=$5;
      var $195=$6;
      var $196=$ip;
      var $197=$in;
      var $198=$7;
      var $199=$in;
      var $200=(($198+($199<<2))|0);
      var $201=___gmpn_preinv_mu_div_qr($190, $191, $192, $193, $194, $195, $196, $197, $200);
      $qh=$201;
      var $202=$qh;

      return $202;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_mu_div_qr2["X"]=1;

function _mpn_sub_nc($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_mu_div_qr_choose_in($qn, $dn, $k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $in;
      var $b;
      var $xn;
      $1=$qn;
      $2=$dn;
      $3=$k;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $7=$1;
      var $8=$2;
      var $9=(($7)|0) > (($8)|0);
      if ($9) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$1;
      var $12=((($11)-(1))|0);
      var $13=$2;
      var $14=((((($12)|0))/((($13)|0)))&-1);
      var $15=((($14)+(1))|0);
      $b=$15;
      var $16=$1;
      var $17=((($16)-(1))|0);
      var $18=$b;
      var $19=((((($17)|0))/((($18)|0)))&-1);
      var $20=((($19)+(1))|0);
      $in=$20;
      label = 9; break;
    case 5: 
      var $22=$1;
      var $23=((($22)*(3))&-1);
      var $24=$2;
      var $25=(($23)|0) > (($24)|0);
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$1;
      var $28=((($27)-(1))|0);
      var $29=((((($28)|0))/(2))&-1);
      var $30=((($29)+(1))|0);
      $in=$30;
      label = 8; break;
    case 7: 
      var $32=$1;
      var $33=((($32)-(1))|0);
      var $34=(((($33)|0))&-1);
      var $35=((($34)+(1))|0);
      $in=$35;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $39=$2;
      var $40=$1;
      var $41=(($39)|0) < (($40)|0);
      if ($41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $43=$2;
      var $47 = $43;label = 13; break;
    case 12: 
      var $45=$1;
      var $47 = $45;label = 13; break;
    case 13: 
      var $47;
      $xn=$47;
      var $48=$xn;
      var $49=((($48)-(1))|0);
      var $50=$3;
      var $51=((((($49)|0))/((($50)|0)))&-1);
      var $52=((($51)+(1))|0);
      $in=$52;
      label = 14; break;
    case 14: 
      var $54=$in;

      return $54;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_div_qr_choose_in["X"]=1;

function _mpn_mulmod_bnm1_itch($rn, $an, $bn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      $3=$bn;
      var $4=$1;
      var $5=$4 >> 1;
      $n=$5;
      var $6=$1;
      var $7=((($6)+(4))|0);
      var $8=$2;
      var $9=$n;
      var $10=(($8)|0) > (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$3;
      var $13=$n;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $20 = $16;label = 6; break;
    case 5: 
      var $18=$n;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      var $23 = $20;label = 8; break;
    case 7: 
      var $23 = 0;label = 8; break;
    case 8: 
      var $23;
      var $24=((($7)+($23))|0);
      $itch=$24;
      var $25=$itch;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_mu_div_qr_itch($nn, $dn, $mua_k) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $itch_local;
  var $in;
  var $itch_out;
  $1=$nn;
  $2=$dn;
  $3=$mua_k;
  var $4=$2;
  var $5=((($4)+(1))|0);
  var $6=___gmpn_mulmod_bnm1_next_size($5);
  $itch_local=$6;
  var $7=$1;
  var $8=$2;
  var $9=((($7)-($8))|0);
  var $10=$2;
  var $11=$3;
  var $12=___gmpn_mu_div_qr_choose_in($9, $10, $11);
  $in=$12;
  var $13=$itch_local;
  var $14=$2;
  var $15=$in;
  var $16=_mpn_mulmod_bnm1_itch($13, $14, $15);
  $itch_out=$16;
  var $17=$in;
  var $18=$itch_local;
  var $19=((($17)+($18))|0);
  var $20=$itch_out;
  var $21=((($19)+($20))|0);

  return $21;
}


function ___gmpn_preinv_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $ip, $in, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $qn;
      var $cy;
      var $cx;
      var $qh;
      var $r;
      var $tn;
      var $wn;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__x1;
      var $__p;
      var $__n2;
      var $__dst3;
      var $__src4;
      var $__x5;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      $2=$qp;
      $3=$rp;
      $4=$np;
      $5=$nn;
      $6=$dp;
      $7=$dn;
      $8=$ip;
      $9=$in;
      $10=$scratch;
      var $11=$5;
      var $12=$7;
      var $13=((($11)-($12))|0);
      $qn=$13;
      var $14=$qn;
      var $15=$4;
      var $16=(($15+($14<<2))|0);
      $4=$16;
      var $17=$qn;
      var $18=$2;
      var $19=(($18+($17<<2))|0);
      $2=$19;
      var $20=$4;
      var $21=$6;
      var $22=$7;
      var $23=___gmpn_cmp($20, $21, $22);
      var $24=(($23)|0) >= 0;
      var $25=(($24)&1);
      $qh=$25;
      var $26=$qh;
      var $27=(($26)|0)!=0;
      if ($27) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $29=$3;
      var $30=$4;
      var $31=$6;
      var $32=$7;
      var $33=___gmpn_sub_n($29, $30, $31, $32);
      label = 22; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $43=$7;
      var $44=(($43)|0)!=0;
      if ($44) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $46=$7;
      var $47=((($46)-(1))|0);
      $__n=$47;
      var $48=$3;
      $__dst=$48;
      var $49=$4;
      $__src=$49;
      var $50=$__src;
      var $51=(($50+4)|0);
      $__src=$51;
      var $52=HEAP32[(($50)>>2)];
      $__x=$52;
      var $53=$__n;
      var $54=(($53)|0)!=0;
      if ($54) { label = 14; break; } else { label = 18; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $57=$__x;
      var $58=$__dst;
      var $59=(($58+4)|0);
      $__dst=$59;
      HEAP32[(($58)>>2)]=$57;
      var $60=$__src;
      var $61=(($60+4)|0);
      $__src=$61;
      var $62=HEAP32[(($60)>>2)];
      $__x=$62;
      label = 16; break;
    case 16: 
      var $64=$__n;
      var $65=((($64)-(1))|0);
      $__n=$65;
      var $66=(($65)|0)!=0;
      if ($66) { label = 15; break; } else { label = 17; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $69=$__x;
      var $70=$__dst;
      var $71=(($70+4)|0);
      $__dst=$71;
      HEAP32[(($70)>>2)]=$69;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $76=$qn;
      var $77=(($76)|0)==0;
      if ($77) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $79=$qh;
      $1=$79;
      label = 85; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $82=$qn;
      var $83=(($82)|0) > 0;
      if ($83) { label = 26; break; } else { label = 84; break; }
    case 26: 
      var $85=$qn;
      var $86=$9;
      var $87=(($85)|0) < (($86)|0);
      if ($87) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $89=$9;
      var $90=$qn;
      var $91=((($89)-($90))|0);
      var $92=$8;
      var $93=(($92+($91<<2))|0);
      $8=$93;
      var $94=$qn;
      $9=$94;
      label = 28; break;
    case 28: 
      var $96=$9;
      var $97=$4;
      var $98=(((-$96))|0);
      var $99=(($97+($98<<2))|0);
      $4=$99;
      var $100=$9;
      var $101=$2;
      var $102=(((-$100))|0);
      var $103=(($101+($102<<2))|0);
      $2=$103;
      var $104=$10;
      var $105=$3;
      var $106=$7;
      var $107=(($105+($106<<2))|0);
      var $108=$9;
      var $109=(((-$108))|0);
      var $110=(($107+($109<<2))|0);
      var $111=$8;
      var $112=$9;
      ___gmpn_mul_n($104, $110, $111, $112);
      var $113=$2;
      var $114=$10;
      var $115=$9;
      var $116=(($114+($115<<2))|0);
      var $117=$3;
      var $118=$7;
      var $119=(($117+($118<<2))|0);
      var $120=$9;
      var $121=(((-$120))|0);
      var $122=(($119+($121<<2))|0);
      var $123=$9;
      var $124=___gmpn_add_n($113, $116, $122, $123);
      $cy=$124;
      label = 29; break;
    case 29: 
      var $126=$cy;
      var $127=(($126)|0)==0;
      if ($127) { label = 31; break; } else { label = 30; break; }
    case 30: 
      ___gmp_assert_fail(((5243176)|0), 269, ((5243616)|0));
      throw "Reached an unreachable!"
    case 31: 
      label = 32; break;
    case 32: 
      var $131=$9;
      var $132=$qn;
      var $133=((($132)-($131))|0);
      $qn=$133;
      var $134=$9;
      var $135=(($134)|0) >= 40;
      if ($135) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $137=$10;
      var $138=$6;
      var $139=$7;
      var $140=$2;
      var $141=$9;
      var $142=___gmpn_mul($137, $138, $139, $140, $141);
      label = 48; break;
    case 34: 
      var $144=$7;
      var $145=((($144)+(1))|0);
      var $146=___gmpn_mulmod_bnm1_next_size($145);
      $tn=$146;
      var $147=$10;
      var $148=$tn;
      var $149=$6;
      var $150=$7;
      var $151=$2;
      var $152=$9;
      var $153=$10;
      var $154=$tn;
      var $155=(($153+($154<<2))|0);
      ___gmpn_mulmod_bnm1($147, $148, $149, $150, $151, $152, $155);
      var $156=$7;
      var $157=$9;
      var $158=((($156)+($157))|0);
      var $159=$tn;
      var $160=((($158)-($159))|0);
      $wn=$160;
      var $161=$wn;
      var $162=(($161)|0) > 0;
      if ($162) { label = 35; break; } else { label = 47; break; }
    case 35: 
      var $164=$10;
      var $165=$10;
      var $166=$3;
      var $167=$7;
      var $168=(($166+($167<<2))|0);
      var $169=$wn;
      var $170=(((-$169))|0);
      var $171=(($168+($170<<2))|0);
      var $172=$wn;
      var $173=___gmpn_sub_n($164, $165, $171, $172);
      $cy=$173;
      var $174=$10;
      var $175=$wn;
      var $176=(($174+($175<<2))|0);
      var $177=$10;
      var $178=$wn;
      var $179=(($177+($178<<2))|0);
      var $180=$tn;
      var $181=$wn;
      var $182=((($180)-($181))|0);
      var $183=$cy;
      var $184=___gmpn_sub_1($176, $179, $182, $183);
      $cy=$184;
      var $185=$3;
      var $186=$7;
      var $187=(($185+($186<<2))|0);
      var $188=$9;
      var $189=(((-$188))|0);
      var $190=(($187+($189<<2))|0);
      var $191=$10;
      var $192=$7;
      var $193=(($191+($192<<2))|0);
      var $194=$tn;
      var $195=$7;
      var $196=((($194)-($195))|0);
      var $197=___gmpn_cmp($190, $193, $196);
      var $198=(($197)|0) < 0;
      var $199=(($198)&1);
      $cx=$199;
      label = 36; break;
    case 36: 
      var $201=$cx;
      var $202=$cy;
      var $203=(($201)>>>0) >= (($202)>>>0);
      if ($203) { label = 38; break; } else { label = 37; break; }
    case 37: 
      ___gmp_assert_fail(((5243176)|0), 289, ((5243412)|0));
      throw "Reached an unreachable!"
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $208=$10;
      $__p=$208;
      var $209=$__p;
      var $210=HEAP32[(($209)>>2)];
      var $211=$cx;
      var $212=$cy;
      var $213=((($211)-($212))|0);
      var $214=((($210)+($213))|0);
      $__x1=$214;
      var $215=$__x1;
      var $216=$__p;
      HEAP32[(($216)>>2)]=$215;
      var $217=$__x1;
      var $218=$cx;
      var $219=$cy;
      var $220=((($218)-($219))|0);
      var $221=(($217)>>>0) < (($220)>>>0);
      if ($221) { label = 41; break; } else { label = 45; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $224=$__p;
      var $225=(($224+4)|0);
      $__p=$225;
      var $226=HEAP32[(($225)>>2)];
      var $227=((($226)+(1))|0);
      HEAP32[(($225)>>2)]=$227;
      var $228=(($227)|0)==0;
      if ($228) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 42; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $235=$7;
      var $236=$9;
      var $237=((($235)-($236))|0);
      var $238=$3;
      var $239=(($238+($237<<2))|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=$7;
      var $242=$10;
      var $243=(($242+($241<<2))|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=((($240)-($244))|0);
      $r=$245;
      var $246=$7;
      var $247=$9;
      var $248=(($246)|0)!=(($247)|0);
      if ($248) { label = 49; break; } else { label = 67; break; }
    case 49: 
      var $250=$10;
      var $251=$4;
      var $252=$10;
      var $253=$9;
      var $254=___gmpn_sub_n($250, $251, $252, $253);
      $cy=$254;
      var $255=$10;
      var $256=$9;
      var $257=(($255+($256<<2))|0);
      var $258=$3;
      var $259=$10;
      var $260=$9;
      var $261=(($259+($260<<2))|0);
      var $262=$7;
      var $263=$9;
      var $264=((($262)-($263))|0);
      var $265=$cy;
      var $266=_mpn_sub_nc($257, $258, $261, $264, $265);
      $cy=$266;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $275=$7;
      var $276=(($275)|0)!=0;
      if ($276) { label = 58; break; } else { label = 64; break; }
    case 58: 
      var $278=$7;
      var $279=((($278)-(1))|0);
      $__n2=$279;
      var $280=$3;
      $__dst3=$280;
      var $281=$10;
      $__src4=$281;
      var $282=$__src4;
      var $283=(($282+4)|0);
      $__src4=$283;
      var $284=HEAP32[(($282)>>2)];
      $__x5=$284;
      var $285=$__n2;
      var $286=(($285)|0)!=0;
      if ($286) { label = 59; break; } else { label = 63; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $289=$__x5;
      var $290=$__dst3;
      var $291=(($290+4)|0);
      $__dst3=$291;
      HEAP32[(($290)>>2)]=$289;
      var $292=$__src4;
      var $293=(($292+4)|0);
      $__src4=$293;
      var $294=HEAP32[(($292)>>2)];
      $__x5=$294;
      label = 61; break;
    case 61: 
      var $296=$__n2;
      var $297=((($296)-(1))|0);
      $__n2=$297;
      var $298=(($297)|0)!=0;
      if ($298) { label = 60; break; } else { label = 62; break; }
    case 62: 
      label = 63; break;
    case 63: 
      var $301=$__x5;
      var $302=$__dst3;
      var $303=(($302+4)|0);
      $__dst3=$303;
      HEAP32[(($302)>>2)]=$301;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 68; break;
    case 67: 
      var $308=$3;
      var $309=$4;
      var $310=$10;
      var $311=$9;
      var $312=___gmpn_sub_n($308, $309, $310, $311);
      $cy=$312;
      label = 68; break;
    case 68: 
      var $314=$cy;
      var $315=$r;
      var $316=((($315)-($314))|0);
      $r=$316;
      label = 69; break;
    case 69: 
      var $318=$r;
      var $319=(($318)|0)!=0;
      if ($319) { label = 70; break; } else { label = 76; break; }
    case 70: 
      label = 71; break;
    case 71: 
      var $322=$2;
      $__p7=$322;
      label = 72; break;
    case 72: 
      var $324=$__p7;
      var $325=(($324+4)|0);
      $__p7=$325;
      var $326=HEAP32[(($324)>>2)];
      var $327=((($326)+(1))|0);
      HEAP32[(($324)>>2)]=$327;
      var $328=(($327)|0)==0;
      if ($328) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 72; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $332=$3;
      var $333=$3;
      var $334=$6;
      var $335=$7;
      var $336=___gmpn_sub_n($332, $333, $334, $335);
      $cy=$336;
      var $337=$cy;
      var $338=$r;
      var $339=((($338)-($337))|0);
      $r=$339;
      label = 69; break;
    case 76: 
      var $341=$3;
      var $342=$6;
      var $343=$7;
      var $344=___gmpn_cmp($341, $342, $343);
      var $345=(($344)|0) >= 0;
      if ($345) { label = 77; break; } else { label = 83; break; }
    case 77: 
      label = 78; break;
    case 78: 
      var $348=$2;
      $__p9=$348;
      label = 79; break;
    case 79: 
      var $350=$__p9;
      var $351=(($350+4)|0);
      $__p9=$351;
      var $352=HEAP32[(($350)>>2)];
      var $353=((($352)+(1))|0);
      HEAP32[(($350)>>2)]=$353;
      var $354=(($353)|0)==0;
      if ($354) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 79; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $358=$3;
      var $359=$3;
      var $360=$6;
      var $361=$7;
      var $362=___gmpn_sub_n($358, $359, $360, $361);
      $cy=$362;
      label = 83; break;
    case 83: 
      label = 25; break;
    case 84: 
      var $365=$qh;
      $1=$365;
      label = 85; break;
    case 85: 
      var $367=$1;

      return $367;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_preinv_mu_div_qr["X"]=1;

function ___gmpn_mu_divappr_q_choose_in($qn, $dn, $k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $in;
      var $b;
      var $xn;
      $1=$qn;
      $2=$dn;
      $3=$k;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $7=$1;
      var $8=$2;
      var $9=(($7)|0) > (($8)|0);
      if ($9) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$1;
      var $12=((($11)-(1))|0);
      var $13=$2;
      var $14=((((($12)|0))/((($13)|0)))&-1);
      var $15=((($14)+(1))|0);
      $b=$15;
      var $16=$1;
      var $17=((($16)-(1))|0);
      var $18=$b;
      var $19=((((($17)|0))/((($18)|0)))&-1);
      var $20=((($19)+(1))|0);
      $in=$20;
      label = 9; break;
    case 5: 
      var $22=$1;
      var $23=((($22)*(3))&-1);
      var $24=$2;
      var $25=(($23)|0) > (($24)|0);
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$1;
      var $28=((($27)-(1))|0);
      var $29=((((($28)|0))/(2))&-1);
      var $30=((($29)+(1))|0);
      $in=$30;
      label = 8; break;
    case 7: 
      var $32=$1;
      var $33=((($32)-(1))|0);
      var $34=(((($33)|0))&-1);
      var $35=((($34)+(1))|0);
      $in=$35;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $39=$2;
      var $40=$1;
      var $41=(($39)|0) < (($40)|0);
      if ($41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $43=$2;
      var $47 = $43;label = 13; break;
    case 12: 
      var $45=$1;
      var $47 = $45;label = 13; break;
    case 13: 
      var $47;
      $xn=$47;
      var $48=$xn;
      var $49=((($48)-(1))|0);
      var $50=$3;
      var $51=((((($49)|0))/((($50)|0)))&-1);
      var $52=((($51)+(1))|0);
      $in=$52;
      label = 14; break;
    case 14: 
      var $54=$in;

      return $54;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_divappr_q_choose_in["X"]=1;

function ___gmpn_mu_divappr_q($qp, $np, $nn, $dp, $dn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qn;
      var $in;
      var $cy;
      var $qh;
      var $ip;
      var $tp;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__n1;
      var $__dst2;
      var $__src3;
      var $__x4;
      var $__dst5;
      var $__n6;
      var $__n7;
      var $__dst8;
      var $__src9;
      var $__x10;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$3;
      var $10=$5;
      var $11=((($9)-($10))|0);
      $qn=$11;
      var $12=$qn;
      var $13=((($12)+(1))|0);
      var $14=$5;
      var $15=(($13)|0) < (($14)|0);
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$5;
      var $18=$qn;
      var $19=((($18)+(1))|0);
      var $20=((($17)-($19))|0);
      var $21=$2;
      var $22=(($21+($20<<2))|0);
      $2=$22;
      var $23=$5;
      var $24=$qn;
      var $25=((($24)+(1))|0);
      var $26=((($23)-($25))|0);
      var $27=$3;
      var $28=((($27)-($26))|0);
      $3=$28;
      var $29=$5;
      var $30=$qn;
      var $31=((($30)+(1))|0);
      var $32=((($29)-($31))|0);
      var $33=$4;
      var $34=(($33+($32<<2))|0);
      $4=$34;
      var $35=$qn;
      var $36=((($35)+(1))|0);
      $5=$36;
      label = 6; break;
    case 6: 
      var $38=$qn;
      var $39=$5;
      var $40=___gmpn_mu_divappr_q_choose_in($38, $39, 0);
      $in=$40;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $43=$6;
      $ip=$43;
      var $44=$6;
      var $45=$in;
      var $46=(($44+($45<<2))|0);
      var $47=(($46+4)|0);
      $tp=$47;
      var $48=$5;
      var $49=$in;
      var $50=(($48)|0)==(($49)|0);
      if ($50) { label = 9; break; } else { label = 40; break; }
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $60=$in;
      var $61=(($60)|0)!=0;
      if ($61) { label = 18; break; } else { label = 24; break; }
    case 18: 
      var $63=$in;
      var $64=((($63)-(1))|0);
      $__n=$64;
      var $65=$tp;
      var $66=(($65+4)|0);
      $__dst=$66;
      var $67=$4;
      $__src=$67;
      var $68=$__src;
      var $69=(($68+4)|0);
      $__src=$69;
      var $70=HEAP32[(($68)>>2)];
      $__x=$70;
      var $71=$__n;
      var $72=(($71)|0)!=0;
      if ($72) { label = 19; break; } else { label = 23; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $75=$__x;
      var $76=$__dst;
      var $77=(($76+4)|0);
      $__dst=$77;
      HEAP32[(($76)>>2)]=$75;
      var $78=$__src;
      var $79=(($78+4)|0);
      $__src=$79;
      var $80=HEAP32[(($78)>>2)];
      $__x=$80;
      label = 21; break;
    case 21: 
      var $82=$__n;
      var $83=((($82)-(1))|0);
      $__n=$83;
      var $84=(($83)|0)!=0;
      if ($84) { label = 20; break; } else { label = 22; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $87=$__x;
      var $88=$__dst;
      var $89=(($88+4)|0);
      $__dst=$89;
      HEAP32[(($88)>>2)]=$87;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $93=$tp;
      var $94=(($93)|0);
      HEAP32[(($94)>>2)]=1;
      var $95=$ip;
      var $96=$tp;
      var $97=$in;
      var $98=((($97)+(1))|0);
      var $99=___gmpn_invertappr($95, $96, $98, 0);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $105=$in;
      var $106=(($105)|0)!=0;
      if ($106) { label = 32; break; } else { label = 38; break; }
    case 32: 
      var $108=$in;
      var $109=((($108)-(1))|0);
      $__n1=$109;
      var $110=$ip;
      $__dst2=$110;
      var $111=$ip;
      var $112=(($111+4)|0);
      $__src3=$112;
      var $113=$__src3;
      var $114=(($113+4)|0);
      $__src3=$114;
      var $115=HEAP32[(($113)>>2)];
      $__x4=$115;
      var $116=$__n1;
      var $117=(($116)|0)!=0;
      if ($117) { label = 33; break; } else { label = 37; break; }
    case 33: 
      label = 34; break;
    case 34: 
      var $120=$__x4;
      var $121=$__dst2;
      var $122=(($121+4)|0);
      $__dst2=$122;
      HEAP32[(($121)>>2)]=$120;
      var $123=$__src3;
      var $124=(($123+4)|0);
      $__src3=$124;
      var $125=HEAP32[(($123)>>2)];
      $__x4=$125;
      label = 35; break;
    case 35: 
      var $127=$__n1;
      var $128=((($127)-(1))|0);
      $__n1=$128;
      var $129=(($128)|0)!=0;
      if ($129) { label = 34; break; } else { label = 36; break; }
    case 36: 
      label = 37; break;
    case 37: 
      var $132=$__x4;
      var $133=$__dst2;
      var $134=(($133+4)|0);
      $__dst2=$134;
      HEAP32[(($133)>>2)]=$132;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 66; break;
    case 40: 
      var $138=$tp;
      var $139=$4;
      var $140=$5;
      var $141=(($139+($140<<2))|0);
      var $142=$in;
      var $143=((($142)+(1))|0);
      var $144=(((-$143))|0);
      var $145=(($141+($144<<2))|0);
      var $146=$in;
      var $147=((($146)+(1))|0);
      var $148=___gmpn_add_1($138, $145, $147, 1);
      $cy=$148;
      var $149=$cy;
      var $150=(($149)|0)!=0;
      if ($150) { label = 41; break; } else { label = 51; break; }
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $155=$in;
      var $156=(($155)|0)!=0;
      if ($156) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $158=$ip;
      $__dst5=$158;
      var $159=$in;
      $__n6=$159;
      label = 46; break;
    case 46: 
      var $161=$__dst5;
      var $162=(($161+4)|0);
      $__dst5=$162;
      HEAP32[(($161)>>2)]=0;
      label = 47; break;
    case 47: 
      var $164=$__n6;
      var $165=((($164)-(1))|0);
      $__n6=$165;
      var $166=(($165)|0)!=0;
      if ($166) { label = 46; break; } else { label = 48; break; }
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 65; break;
    case 51: 
      var $171=$ip;
      var $172=$tp;
      var $173=$in;
      var $174=((($173)+(1))|0);
      var $175=___gmpn_invertappr($171, $172, $174, 0);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $181=$in;
      var $182=(($181)|0)!=0;
      if ($182) { label = 57; break; } else { label = 63; break; }
    case 57: 
      var $184=$in;
      var $185=((($184)-(1))|0);
      $__n7=$185;
      var $186=$ip;
      $__dst8=$186;
      var $187=$ip;
      var $188=(($187+4)|0);
      $__src9=$188;
      var $189=$__src9;
      var $190=(($189+4)|0);
      $__src9=$190;
      var $191=HEAP32[(($189)>>2)];
      $__x10=$191;
      var $192=$__n7;
      var $193=(($192)|0)!=0;
      if ($193) { label = 58; break; } else { label = 62; break; }
    case 58: 
      label = 59; break;
    case 59: 
      var $196=$__x10;
      var $197=$__dst8;
      var $198=(($197+4)|0);
      $__dst8=$198;
      HEAP32[(($197)>>2)]=$196;
      var $199=$__src9;
      var $200=(($199+4)|0);
      $__src9=$200;
      var $201=HEAP32[(($199)>>2)];
      $__x10=$201;
      label = 60; break;
    case 60: 
      var $203=$__n7;
      var $204=((($203)-(1))|0);
      $__n7=$204;
      var $205=(($204)|0)!=0;
      if ($205) { label = 59; break; } else { label = 61; break; }
    case 61: 
      label = 62; break;
    case 62: 
      var $208=$__x10;
      var $209=$__dst8;
      var $210=(($209+4)|0);
      $__dst8=$210;
      HEAP32[(($209)>>2)]=$208;
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $215=$1;
      var $216=$2;
      var $217=$3;
      var $218=$4;
      var $219=$5;
      var $220=$ip;
      var $221=$in;
      var $222=$6;
      var $223=$in;
      var $224=(($222+($223<<2))|0);
      var $225=___gmpn_preinv_mu_divappr_q($215, $216, $217, $218, $219, $220, $221, $224);
      $qh=$225;
      var $226=$qh;

      return $226;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_divappr_q["X"]=1;

function _mpn_mulmod_bnm1_itch107($rn, $an, $bn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      $3=$bn;
      var $4=$1;
      var $5=$4 >> 1;
      $n=$5;
      var $6=$1;
      var $7=((($6)+(4))|0);
      var $8=$2;
      var $9=$n;
      var $10=(($8)|0) > (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$3;
      var $13=$n;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $20 = $16;label = 6; break;
    case 5: 
      var $18=$n;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      var $23 = $20;label = 8; break;
    case 7: 
      var $23 = 0;label = 8; break;
    case 8: 
      var $23;
      var $24=((($7)+($23))|0);
      $itch=$24;
      var $25=$itch;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_mul_1($rp, $up, $n, $vl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $cl;
      var $hpl;
      var $lpl;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$vl;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      $cl=0;
      label = 7; break;
    case 7: 
      var $10=$2;
      var $11=(($10+4)|0);
      $2=$11;
      var $12=HEAP32[(($10)>>2)];
      $ul=$12;
      label = 8; break;
    case 8: 
      var $14=$ul;
      $__u=$14;
      var $15=$4;
      $__v=$15;
      var $16=$__u;
      var $17=$16 & 65535;
      $__ul=$17;
      var $18=$__u;
      var $19=$18 >>> 16;
      $__uh=$19;
      var $20=$__v;
      var $21=$20 & 65535;
      $__vl=$21;
      var $22=$__v;
      var $23=$22 >>> 16;
      $__vh=$23;
      var $24=$__ul;
      var $25=$__vl;
      var $26=Math.imul($24,$25);
      $__x0=$26;
      var $27=$__ul;
      var $28=$__vh;
      var $29=Math.imul($27,$28);
      $__x1=$29;
      var $30=$__uh;
      var $31=$__vl;
      var $32=Math.imul($30,$31);
      $__x2=$32;
      var $33=$__uh;
      var $34=$__vh;
      var $35=Math.imul($33,$34);
      $__x3=$35;
      var $36=$__x0;
      var $37=$36 >>> 16;
      var $38=$__x1;
      var $39=((($38)+($37))|0);
      $__x1=$39;
      var $40=$__x2;
      var $41=$__x1;
      var $42=((($41)+($40))|0);
      $__x1=$42;
      var $43=$__x1;
      var $44=$__x2;
      var $45=(($43)>>>0) < (($44)>>>0);
      if ($45) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $47=$__x3;
      var $48=((($47)+(65536))|0);
      $__x3=$48;
      label = 10; break;
    case 10: 
      var $50=$__x3;
      var $51=$__x1;
      var $52=$51 >>> 16;
      var $53=((($50)+($52))|0);
      $hpl=$53;
      var $54=$__x1;
      var $55=$54 << 16;
      var $56=$__x0;
      var $57=$56 & 65535;
      var $58=((($55)+($57))|0);
      $lpl=$58;
      label = 11; break;
    case 11: 
      var $60=$cl;
      var $61=$lpl;
      var $62=((($61)+($60))|0);
      $lpl=$62;
      var $63=$lpl;
      var $64=$cl;
      var $65=(($63)>>>0) < (($64)>>>0);
      var $66=(($65)&1);
      var $67=$hpl;
      var $68=((($66)+($67))|0);
      $cl=$68;
      var $69=$lpl;
      var $70=$1;
      var $71=(($70+4)|0);
      $1=$71;
      HEAP32[(($70)>>2)]=$69;
      label = 12; break;
    case 12: 
      var $73=$3;
      var $74=((($73)-(1))|0);
      $3=$74;
      var $75=(($74)|0)!=0;
      if ($75) { label = 7; break; } else { label = 13; break; }
    case 13: 
      var $77=$cl;

      return $77;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul_1["X"]=1;

function _mpn_sub_nc104($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_mu_divappr_q_itch($nn, $dn, $mua_k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $qn;
      var $in;
      var $itch_local;
      var $itch_out;
      $1=$nn;
      $2=$dn;
      $3=$mua_k;
      var $4=$1;
      var $5=$2;
      var $6=((($4)-($5))|0);
      $qn=$6;
      var $7=$qn;
      var $8=((($7)+(1))|0);
      var $9=$2;
      var $10=(($8)|0) < (($9)|0);
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$qn;
      var $13=((($12)+(1))|0);
      $2=$13;
      label = 4; break;
    case 4: 
      var $15=$qn;
      var $16=$2;
      var $17=$3;
      var $18=___gmpn_mu_divappr_q_choose_in($15, $16, $17);
      $in=$18;
      var $19=$2;
      var $20=((($19)+(1))|0);
      var $21=___gmpn_mulmod_bnm1_next_size($20);
      $itch_local=$21;
      var $22=$itch_local;
      var $23=$2;
      var $24=$in;
      var $25=_mpn_mulmod_bnm1_itch107($22, $23, $24);
      $itch_out=$25;
      var $26=$in;
      var $27=$2;
      var $28=((($26)+($27))|0);
      var $29=$itch_local;
      var $30=((($28)+($29))|0);
      var $31=$itch_out;
      var $32=((($30)+($31))|0);

      return $32;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_preinv_mu_divappr_q($qp, $np, $nn, $dp, $dn, $ip, $in, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $qn;
      var $cy;
      var $cx;
      var $qh;
      var $r;
      var $tn;
      var $wn;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__x1;
      var $__p;
      var $__n2;
      var $__dst3;
      var $__src4;
      var $__x5;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      var $i;
      $2=$qp;
      $3=$np;
      $4=$nn;
      $5=$dp;
      $6=$dn;
      $7=$ip;
      $8=$in;
      $9=$scratch;
      var $10=$4;
      var $11=$6;
      var $12=((($10)-($11))|0);
      $qn=$12;
      var $13=$qn;
      var $14=$3;
      var $15=(($14+($13<<2))|0);
      $3=$15;
      var $16=$qn;
      var $17=$2;
      var $18=(($17+($16<<2))|0);
      $2=$18;
      var $19=$3;
      var $20=$5;
      var $21=$6;
      var $22=___gmpn_cmp($19, $20, $21);
      var $23=(($22)|0) >= 0;
      var $24=(($23)&1);
      $qh=$24;
      var $25=$qh;
      var $26=(($25)|0)!=0;
      if ($26) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $28=$9;
      var $29=$3;
      var $30=$5;
      var $31=$6;
      var $32=___gmpn_sub_n($28, $29, $30, $31);
      label = 22; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $42=$6;
      var $43=(($42)|0)!=0;
      if ($43) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $45=$6;
      var $46=((($45)-(1))|0);
      $__n=$46;
      var $47=$9;
      $__dst=$47;
      var $48=$3;
      $__src=$48;
      var $49=$__src;
      var $50=(($49+4)|0);
      $__src=$50;
      var $51=HEAP32[(($49)>>2)];
      $__x=$51;
      var $52=$__n;
      var $53=(($52)|0)!=0;
      if ($53) { label = 14; break; } else { label = 18; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $56=$__x;
      var $57=$__dst;
      var $58=(($57+4)|0);
      $__dst=$58;
      HEAP32[(($57)>>2)]=$56;
      var $59=$__src;
      var $60=(($59+4)|0);
      $__src=$60;
      var $61=HEAP32[(($59)>>2)];
      $__x=$61;
      label = 16; break;
    case 16: 
      var $63=$__n;
      var $64=((($63)-(1))|0);
      $__n=$64;
      var $65=(($64)|0)!=0;
      if ($65) { label = 15; break; } else { label = 17; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $68=$__x;
      var $69=$__dst;
      var $70=(($69+4)|0);
      $__dst=$70;
      HEAP32[(($69)>>2)]=$68;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $75=$qn;
      var $76=(($75)|0)==0;
      if ($76) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $78=$qh;
      $1=$78;
      label = 96; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $81=$qn;
      var $82=(($81)|0) > 0;
      if ($82) { label = 26; break; } else { label = 86; break; }
    case 26: 
      var $84=$qn;
      var $85=$8;
      var $86=(($84)|0) < (($85)|0);
      if ($86) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $88=$8;
      var $89=$qn;
      var $90=((($88)-($89))|0);
      var $91=$7;
      var $92=(($91+($90<<2))|0);
      $7=$92;
      var $93=$qn;
      $8=$93;
      label = 28; break;
    case 28: 
      var $95=$8;
      var $96=$3;
      var $97=(((-$95))|0);
      var $98=(($96+($97<<2))|0);
      $3=$98;
      var $99=$8;
      var $100=$2;
      var $101=(((-$99))|0);
      var $102=(($100+($101<<2))|0);
      $2=$102;
      var $103=$9;
      var $104=$6;
      var $105=(($103+($104<<2))|0);
      var $106=$9;
      var $107=$6;
      var $108=(($106+($107<<2))|0);
      var $109=$8;
      var $110=(((-$109))|0);
      var $111=(($108+($110<<2))|0);
      var $112=$7;
      var $113=$8;
      ___gmpn_mul_n($105, $111, $112, $113);
      var $114=$2;
      var $115=$9;
      var $116=$6;
      var $117=(($115+($116<<2))|0);
      var $118=$8;
      var $119=(($117+($118<<2))|0);
      var $120=$9;
      var $121=$6;
      var $122=(($120+($121<<2))|0);
      var $123=$8;
      var $124=(((-$123))|0);
      var $125=(($122+($124<<2))|0);
      var $126=$8;
      var $127=___gmpn_add_n($114, $119, $125, $126);
      $cy=$127;
      label = 29; break;
    case 29: 
      var $129=$cy;
      var $130=(($129)|0)==0;
      if ($130) { label = 31; break; } else { label = 30; break; }
    case 30: 
      ___gmp_assert_fail(((5243160)|0), 195, ((5243608)|0));
      throw "Reached an unreachable!"
    case 31: 
      label = 32; break;
    case 32: 
      var $134=$8;
      var $135=$qn;
      var $136=((($135)-($134))|0);
      $qn=$136;
      var $137=$qn;
      var $138=(($137)|0)==0;
      if ($138) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 86; break;
    case 34: 
      var $141=$8;
      var $142=(($141)|0) >= 40;
      if ($142) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $144=$9;
      var $145=$6;
      var $146=(($144+($145<<2))|0);
      var $147=$5;
      var $148=$6;
      var $149=$2;
      var $150=$8;
      var $151=___gmpn_mul($146, $147, $148, $149, $150);
      label = 50; break;
    case 36: 
      var $153=$6;
      var $154=((($153)+(1))|0);
      var $155=___gmpn_mulmod_bnm1_next_size($154);
      $tn=$155;
      var $156=$9;
      var $157=$6;
      var $158=(($156+($157<<2))|0);
      var $159=$tn;
      var $160=$5;
      var $161=$6;
      var $162=$2;
      var $163=$8;
      var $164=$9;
      var $165=$6;
      var $166=(($164+($165<<2))|0);
      var $167=$tn;
      var $168=(($166+($167<<2))|0);
      ___gmpn_mulmod_bnm1($158, $159, $160, $161, $162, $163, $168);
      var $169=$6;
      var $170=$8;
      var $171=((($169)+($170))|0);
      var $172=$tn;
      var $173=((($171)-($172))|0);
      $wn=$173;
      var $174=$wn;
      var $175=(($174)|0) > 0;
      if ($175) { label = 37; break; } else { label = 49; break; }
    case 37: 
      var $177=$9;
      var $178=$6;
      var $179=(($177+($178<<2))|0);
      var $180=$9;
      var $181=$6;
      var $182=(($180+($181<<2))|0);
      var $183=$9;
      var $184=$6;
      var $185=(($183+($184<<2))|0);
      var $186=$wn;
      var $187=(((-$186))|0);
      var $188=(($185+($187<<2))|0);
      var $189=$wn;
      var $190=___gmpn_sub_n($179, $182, $188, $189);
      $cy=$190;
      var $191=$9;
      var $192=$6;
      var $193=(($191+($192<<2))|0);
      var $194=$wn;
      var $195=(($193+($194<<2))|0);
      var $196=$9;
      var $197=$6;
      var $198=(($196+($197<<2))|0);
      var $199=$wn;
      var $200=(($198+($199<<2))|0);
      var $201=$tn;
      var $202=$wn;
      var $203=((($201)-($202))|0);
      var $204=$cy;
      var $205=___gmpn_sub_1($195, $200, $203, $204);
      $cy=$205;
      var $206=$9;
      var $207=$6;
      var $208=(($206+($207<<2))|0);
      var $209=$8;
      var $210=(((-$209))|0);
      var $211=(($208+($210<<2))|0);
      var $212=$9;
      var $213=$6;
      var $214=(($212+($213<<2))|0);
      var $215=$6;
      var $216=(($214+($215<<2))|0);
      var $217=$tn;
      var $218=$6;
      var $219=((($217)-($218))|0);
      var $220=___gmpn_cmp($211, $216, $219);
      var $221=(($220)|0) < 0;
      var $222=(($221)&1);
      $cx=$222;
      label = 38; break;
    case 38: 
      var $224=$cx;
      var $225=$cy;
      var $226=(($224)>>>0) >= (($225)>>>0);
      if ($226) { label = 40; break; } else { label = 39; break; }
    case 39: 
      ___gmp_assert_fail(((5243160)|0), 217, ((5243344)|0));
      throw "Reached an unreachable!"
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $231=$9;
      var $232=$6;
      var $233=(($231+($232<<2))|0);
      $__p=$233;
      var $234=$__p;
      var $235=HEAP32[(($234)>>2)];
      var $236=$cx;
      var $237=$cy;
      var $238=((($236)-($237))|0);
      var $239=((($235)+($238))|0);
      $__x1=$239;
      var $240=$__x1;
      var $241=$__p;
      HEAP32[(($241)>>2)]=$240;
      var $242=$__x1;
      var $243=$cx;
      var $244=$cy;
      var $245=((($243)-($244))|0);
      var $246=(($242)>>>0) < (($245)>>>0);
      if ($246) { label = 43; break; } else { label = 47; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $249=$__p;
      var $250=(($249+4)|0);
      $__p=$250;
      var $251=HEAP32[(($250)>>2)];
      var $252=((($251)+(1))|0);
      HEAP32[(($250)>>2)]=$252;
      var $253=(($252)|0)==0;
      if ($253) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 44; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $260=$6;
      var $261=$8;
      var $262=((($260)-($261))|0);
      var $263=$9;
      var $264=(($263+($262<<2))|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=$6;
      var $267=$9;
      var $268=$6;
      var $269=(($267+($268<<2))|0);
      var $270=(($269+($266<<2))|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=((($265)-($271))|0);
      $r=$272;
      var $273=$6;
      var $274=$8;
      var $275=(($273)|0)!=(($274)|0);
      if ($275) { label = 51; break; } else { label = 69; break; }
    case 51: 
      var $277=$9;
      var $278=$6;
      var $279=(($277+($278<<2))|0);
      var $280=$3;
      var $281=$9;
      var $282=$6;
      var $283=(($281+($282<<2))|0);
      var $284=$8;
      var $285=___gmpn_sub_n($279, $280, $283, $284);
      $cy=$285;
      var $286=$9;
      var $287=$6;
      var $288=(($286+($287<<2))|0);
      var $289=$8;
      var $290=(($288+($289<<2))|0);
      var $291=$9;
      var $292=$9;
      var $293=$6;
      var $294=(($292+($293<<2))|0);
      var $295=$8;
      var $296=(($294+($295<<2))|0);
      var $297=$6;
      var $298=$8;
      var $299=((($297)-($298))|0);
      var $300=$cy;
      var $301=_mpn_sub_nc104($290, $291, $296, $299, $300);
      $cy=$301;
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $310=$6;
      var $311=(($310)|0)!=0;
      if ($311) { label = 60; break; } else { label = 66; break; }
    case 60: 
      var $313=$6;
      var $314=((($313)-(1))|0);
      $__n2=$314;
      var $315=$9;
      $__dst3=$315;
      var $316=$9;
      var $317=$6;
      var $318=(($316+($317<<2))|0);
      $__src4=$318;
      var $319=$__src4;
      var $320=(($319+4)|0);
      $__src4=$320;
      var $321=HEAP32[(($319)>>2)];
      $__x5=$321;
      var $322=$__n2;
      var $323=(($322)|0)!=0;
      if ($323) { label = 61; break; } else { label = 65; break; }
    case 61: 
      label = 62; break;
    case 62: 
      var $326=$__x5;
      var $327=$__dst3;
      var $328=(($327+4)|0);
      $__dst3=$328;
      HEAP32[(($327)>>2)]=$326;
      var $329=$__src4;
      var $330=(($329+4)|0);
      $__src4=$330;
      var $331=HEAP32[(($329)>>2)];
      $__x5=$331;
      label = 63; break;
    case 63: 
      var $333=$__n2;
      var $334=((($333)-(1))|0);
      $__n2=$334;
      var $335=(($334)|0)!=0;
      if ($335) { label = 62; break; } else { label = 64; break; }
    case 64: 
      label = 65; break;
    case 65: 
      var $338=$__x5;
      var $339=$__dst3;
      var $340=(($339+4)|0);
      $__dst3=$340;
      HEAP32[(($339)>>2)]=$338;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 70; break;
    case 69: 
      var $345=$9;
      var $346=$3;
      var $347=$9;
      var $348=$6;
      var $349=(($347+($348<<2))|0);
      var $350=$8;
      var $351=___gmpn_sub_n($345, $346, $349, $350);
      $cy=$351;
      label = 70; break;
    case 70: 
      var $353=$cy;
      var $354=$r;
      var $355=((($354)-($353))|0);
      $r=$355;
      label = 71; break;
    case 71: 
      var $357=$r;
      var $358=(($357)|0)!=0;
      if ($358) { label = 72; break; } else { label = 78; break; }
    case 72: 
      label = 73; break;
    case 73: 
      var $361=$2;
      $__p7=$361;
      label = 74; break;
    case 74: 
      var $363=$__p7;
      var $364=(($363+4)|0);
      $__p7=$364;
      var $365=HEAP32[(($363)>>2)];
      var $366=((($365)+(1))|0);
      HEAP32[(($363)>>2)]=$366;
      var $367=(($366)|0)==0;
      if ($367) { label = 75; break; } else { label = 76; break; }
    case 75: 
      label = 74; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $371=$9;
      var $372=$9;
      var $373=$5;
      var $374=$6;
      var $375=___gmpn_sub_n($371, $372, $373, $374);
      $cy=$375;
      var $376=$cy;
      var $377=$r;
      var $378=((($377)-($376))|0);
      $r=$378;
      label = 71; break;
    case 78: 
      var $380=$9;
      var $381=$5;
      var $382=$6;
      var $383=___gmpn_cmp($380, $381, $382);
      var $384=(($383)|0) >= 0;
      if ($384) { label = 79; break; } else { label = 85; break; }
    case 79: 
      label = 80; break;
    case 80: 
      var $387=$2;
      $__p9=$387;
      label = 81; break;
    case 81: 
      var $389=$__p9;
      var $390=(($389+4)|0);
      $__p9=$390;
      var $391=HEAP32[(($389)>>2)];
      var $392=((($391)+(1))|0);
      HEAP32[(($389)>>2)]=$392;
      var $393=(($392)|0)==0;
      if ($393) { label = 82; break; } else { label = 83; break; }
    case 82: 
      label = 81; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $397=$9;
      var $398=$9;
      var $399=$5;
      var $400=$6;
      var $401=___gmpn_sub_n($397, $398, $399, $400);
      $cy=$401;
      label = 85; break;
    case 85: 
      label = 25; break;
    case 86: 
      var $404=$4;
      var $405=$6;
      var $406=((($404)-($405))|0);
      $qn=$406;
      var $407=$2;
      var $408=$2;
      var $409=$qn;
      var $410=___gmpn_add_1($407, $408, $409, 3);
      var $411=$cy;
      var $412=((($411)+($410))|0);
      $cy=$412;
      var $413=$cy;
      var $414=(($413)|0)!=0;
      if ($414) { label = 87; break; } else { label = 95; break; }
    case 87: 
      var $416=$qh;
      var $417=(($416)|0)!=0;
      if ($417) { label = 88; break; } else { label = 93; break; }
    case 88: 
      $i=0;
      label = 89; break;
    case 89: 
      var $420=$i;
      var $421=$qn;
      var $422=(($420)|0) < (($421)|0);
      if ($422) { label = 90; break; } else { label = 92; break; }
    case 90: 
      var $424=$i;
      var $425=$2;
      var $426=(($425+($424<<2))|0);
      HEAP32[(($426)>>2)]=-1;
      label = 91; break;
    case 91: 
      var $428=$i;
      var $429=((($428)+(1))|0);
      $i=$429;
      label = 89; break;
    case 92: 
      label = 94; break;
    case 93: 
      $qh=1;
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $434=$qh;
      $1=$434;
      label = 96; break;
    case 96: 
      var $436=$1;

      return $436;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_preinv_mu_divappr_q["X"]=1;

function ___gmpn_mul_basecase($rp, $up, $un, $vp, $vn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$rp;
      $2=$up;
      $3=$un;
      $4=$vp;
      $5=$vn;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$1;
      var $15=$2;
      var $16=$3;
      var $17=$4;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=___gmpn_mul_1($14, $15, $16, $19);
      var $21=$3;
      var $22=$1;
      var $23=(($22+($21<<2))|0);
      HEAP32[(($23)>>2)]=$20;
      var $24=$1;
      var $25=(($24+4)|0);
      $1=$25;
      var $26=$4;
      var $27=(($26+4)|0);
      $4=$27;
      var $28=$5;
      var $29=((($28)-(1))|0);
      $5=$29;
      label = 11; break;
    case 11: 
      var $31=$5;
      var $32=(($31)|0) >= 1;
      if ($32) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $34=$1;
      var $35=$2;
      var $36=$3;
      var $37=$4;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=___gmpn_addmul_1($34, $35, $36, $39);
      var $41=$3;
      var $42=$1;
      var $43=(($42+($41<<2))|0);
      HEAP32[(($43)>>2)]=$40;
      var $44=$1;
      var $45=(($44+4)|0);
      $1=$45;
      var $46=$4;
      var $47=(($46+4)|0);
      $4=$47;
      var $48=$5;
      var $49=((($48)-(1))|0);
      $5=$49;
      label = 11; break;
    case 13: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul_basecase["X"]=1;

function ___gmpn_mul_n($p, $a, $b, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1052)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ws=__stackBase__;
      var $ws1;
      var $ws2;
      var $ws3;
      var $ws4;
      var $__tmp_marker=(__stackBase__)+(1048);
      $1=$p;
      $2=$a;
      $3=$b;
      $4=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $11=$4;
      var $12=(($11)|0) >= 30;
      if ($12) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $14=$1;
      var $15=$2;
      var $16=$4;
      var $17=$3;
      var $18=$4;
      ___gmpn_mul_basecase($14, $15, $16, $17, $18);
      label = 35; break;
    case 10: 
      var $20=$4;
      var $21=(($20)|0) >= 100;
      if ($21) { label = 14; break; } else { label = 11; break; }
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $25=$1;
      var $26=$2;
      var $27=$4;
      var $28=$3;
      var $29=$4;
      var $30=(($ws)|0);
      ___gmpn_toom22_mul($25, $26, $27, $28, $29, $30);
      label = 34; break;
    case 14: 
      var $32=$4;
      var $33=(($32)|0) >= 300;
      if ($33) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $35=$4;
      var $36=((($35)*(5))&-1);
      var $37=$36 >> 1;
      var $38=((($37)+(32))|0);
      var $39=($38<<2);
      var $40=STACKTOP;STACKTOP = (STACKTOP + $39)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $41=$40;
      $ws1=$41;
      var $42=$1;
      var $43=$2;
      var $44=$4;
      var $45=$3;
      var $46=$4;
      var $47=$ws1;
      ___gmpn_toom33_mul($42, $43, $44, $45, $46, $47);
      label = 33; break;
    case 16: 
      var $49=$4;
      var $50=(($49)|0) >= 350;
      if ($50) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $52=$4;
      var $53=((($52)*(3))&-1);
      var $54=((($53)+(32))|0);
      var $55=($54<<2);
      var $56=STACKTOP;STACKTOP = (STACKTOP + $55)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $57=$56;
      $ws2=$57;
      var $58=$1;
      var $59=$2;
      var $60=$4;
      var $61=$3;
      var $62=$4;
      var $63=$ws2;
      ___gmpn_toom44_mul($58, $59, $60, $61, $62, $63);
      label = 32; break;
    case 18: 
      var $65=$4;
      var $66=(($65)|0) >= 450;
      if ($66) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $68=$4;
      var $69=((($68)-(350))|0);
      var $70=($69<<1);
      var $71=((($70)+(1082))|0);
      var $72=($71<<2);
      var $73=STACKTOP;STACKTOP = (STACKTOP + $72)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $74=$73;
      $ws3=$74;
      var $75=$1;
      var $76=$2;
      var $77=$4;
      var $78=$3;
      var $79=$4;
      var $80=$ws3;
      ___gmpn_toom6h_mul($75, $76, $77, $78, $79, $80);
      label = 31; break;
    case 20: 
      var $82=$4;
      var $83=(($82)|0) >= 3000;
      if ($83) { label = 29; break; } else { label = 21; break; }
    case 21: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $85=$4;
      var $86=((($85)*(15))&-1);
      var $87=$86 >> 3;
      var $88=((($87)-(843))|0);
      var $89=((($88)+(1282))|0);
      var $90=($89<<2);
      var $91=(($90)>>>0) < 65536;
      if ($91) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $93=$4;
      var $94=((($93)*(15))&-1);
      var $95=$94 >> 3;
      var $96=((($95)-(843))|0);
      var $97=((($96)+(1282))|0);
      var $98=($97<<2);
      var $99=STACKTOP;STACKTOP = (STACKTOP + $98)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $109 = $99;label = 24; break;
    case 23: 
      var $101=$4;
      var $102=((($101)*(15))&-1);
      var $103=$102 >> 3;
      var $104=((($103)-(843))|0);
      var $105=((($104)+(1282))|0);
      var $106=($105<<2);
      var $107=___gmp_tmp_reentrant_alloc($__tmp_marker, $106);
      var $109 = $107;label = 24; break;
    case 24: 
      var $109;
      var $110=$109;
      $ws4=$110;
      var $111=$1;
      var $112=$2;
      var $113=$4;
      var $114=$3;
      var $115=$4;
      var $116=$ws4;
      ___gmpn_toom8h_mul($111, $112, $113, $114, $115, $116);
      label = 25; break;
    case 25: 
      var $118=HEAP32[(($__tmp_marker)>>2)];
      var $119=(($118)|0)!=0;
      if ($119) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $121=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($121);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 30; break;
    case 29: 
      var $125=$1;
      var $126=$2;
      var $127=$4;
      var $128=$3;
      var $129=$4;
      ___gmpn_nussbaumer_mul($125, $126, $127, $128, $129);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul_n["X"]=1;

function ___gmpn_bc_mulmod_bnm1($rp, $ap, $bp, $rn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $cy;
      var $__x;
      var $__p;
      $1=$rp;
      $2=$ap;
      $3=$bp;
      $4=$rn;
      $5=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$5;
      var $9=$2;
      var $10=$3;
      var $11=$4;
      ___gmpn_mul_n($8, $9, $10, $11);
      var $12=$1;
      var $13=$5;
      var $14=$5;
      var $15=$4;
      var $16=(($14+($15<<2))|0);
      var $17=$4;
      var $18=___gmpn_add_n($12, $13, $16, $17);
      $cy=$18;
      label = 5; break;
    case 5: 
      var $20=$1;
      $__p=$20;
      var $21=$__p;
      var $22=HEAP32[(($21)>>2)];
      var $23=$cy;
      var $24=((($22)+($23))|0);
      $__x=$24;
      var $25=$__x;
      var $26=$__p;
      HEAP32[(($26)>>2)]=$25;
      var $27=$__x;
      var $28=$cy;
      var $29=(($27)>>>0) < (($28)>>>0);
      if ($29) { label = 6; break; } else { label = 10; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $32=$__p;
      var $33=(($32+4)|0);
      $__p=$33;
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)+(1))|0);
      HEAP32[(($33)>>2)]=$35;
      var $36=(($35)|0)==0;
      if ($36) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 7; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_bc_mulmod_bnm1["X"]=1;

function ___gmpn_mulmod_bnm1($rp, $rn, $ap, $an, $bp, $bn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $cy;
      var $__x;
      var $__p;
      var $n;
      var $cy1;
      var $hi;
      var $am1;
      var $bm1;
      var $anm;
      var $bnm;
      var $so;
      var $__x2;
      var $__p3;
      var $__x4;
      var $__p5;
      var $k;
      var $ap1;
      var $bp1;
      var $anp;
      var $bnp;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      var $mask;
      var $__x10;
      var $__p11;
      var $__x12;
      var $__p13;
      var $__x14;
      var $__p15;
      $1=$rp;
      $2=$rn;
      $3=$ap;
      $4=$an;
      $5=$bp;
      $6=$bn;
      $7=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$2;
      var $15=$14 & 1;
      var $16=(($15)|0)!=0;
      if ($16) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $18=$2;
      var $19=(($18)|0) >= 16;
      if ($19) { label = 24; break; } else { label = 10; break; }
    case 10: 
      var $21=$6;
      var $22=$2;
      var $23=(($21)|0) < (($22)|0);
      if ($23) { label = 11; break; } else { label = 22; break; }
    case 11: 
      var $25=$4;
      var $26=$6;
      var $27=((($25)+($26))|0);
      var $28=$2;
      var $29=(($27)|0) <= (($28)|0);
      if ($29) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $31=$1;
      var $32=$3;
      var $33=$4;
      var $34=$5;
      var $35=$6;
      var $36=___gmpn_mul($31, $32, $33, $34, $35);
      label = 21; break;
    case 13: 
      var $38=$7;
      var $39=$3;
      var $40=$4;
      var $41=$5;
      var $42=$6;
      var $43=___gmpn_mul($38, $39, $40, $41, $42);
      var $44=$1;
      var $45=$7;
      var $46=$2;
      var $47=$7;
      var $48=$2;
      var $49=(($47+($48<<2))|0);
      var $50=$4;
      var $51=$6;
      var $52=((($50)+($51))|0);
      var $53=$2;
      var $54=((($52)-($53))|0);
      var $55=___gmpn_add($44, $45, $46, $49, $54);
      $cy=$55;
      label = 14; break;
    case 14: 
      var $57=$1;
      $__p=$57;
      var $58=$__p;
      var $59=HEAP32[(($58)>>2)];
      var $60=$cy;
      var $61=((($59)+($60))|0);
      $__x=$61;
      var $62=$__x;
      var $63=$__p;
      HEAP32[(($63)>>2)]=$62;
      var $64=$__x;
      var $65=$cy;
      var $66=(($64)>>>0) < (($65)>>>0);
      if ($66) { label = 15; break; } else { label = 19; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $69=$__p;
      var $70=(($69+4)|0);
      $__p=$70;
      var $71=HEAP32[(($70)>>2)];
      var $72=((($71)+(1))|0);
      HEAP32[(($70)>>2)]=$72;
      var $73=(($72)|0)==0;
      if ($73) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 16; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 23; break;
    case 22: 
      var $80=$1;
      var $81=$3;
      var $82=$5;
      var $83=$2;
      var $84=$7;
      ___gmpn_bc_mulmod_bnm1($80, $81, $82, $83, $84);
      label = 23; break;
    case 23: 
      label = 123; break;
    case 24: 
      var $87=$2;
      var $88=$87 >> 1;
      $n=$88;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $91=$4;
      var $92=$n;
      var $93=(($91)|0) > (($92)|0);
      if ($93) { label = 27; break; } else { label = 45; break; }
    case 27: 
      var $95=$7;
      $am1=$95;
      var $96=$7;
      var $97=$3;
      var $98=$n;
      var $99=$3;
      var $100=$n;
      var $101=(($99+($100<<2))|0);
      var $102=$4;
      var $103=$n;
      var $104=((($102)-($103))|0);
      var $105=___gmpn_add($96, $97, $98, $101, $104);
      $cy1=$105;
      label = 28; break;
    case 28: 
      var $107=$7;
      $__p3=$107;
      var $108=$__p3;
      var $109=HEAP32[(($108)>>2)];
      var $110=$cy1;
      var $111=((($109)+($110))|0);
      $__x2=$111;
      var $112=$__x2;
      var $113=$__p3;
      HEAP32[(($113)>>2)]=$112;
      var $114=$__x2;
      var $115=$cy1;
      var $116=(($114)>>>0) < (($115)>>>0);
      if ($116) { label = 29; break; } else { label = 33; break; }
    case 29: 
      label = 30; break;
    case 30: 
      var $119=$__p3;
      var $120=(($119+4)|0);
      $__p3=$120;
      var $121=HEAP32[(($120)>>2)];
      var $122=((($121)+(1))|0);
      HEAP32[(($120)>>2)]=$122;
      var $123=(($122)|0)==0;
      if ($123) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 30; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $128=$n;
      $anm=$128;
      var $129=$6;
      var $130=$n;
      var $131=(($129)|0) > (($130)|0);
      if ($131) { label = 35; break; } else { label = 43; break; }
    case 35: 
      var $133=$7;
      var $134=$n;
      var $135=(($133+($134<<2))|0);
      $bm1=$135;
      var $136=$7;
      var $137=$n;
      var $138=(($136+($137<<2))|0);
      var $139=$5;
      var $140=$n;
      var $141=$5;
      var $142=$n;
      var $143=(($141+($142<<2))|0);
      var $144=$6;
      var $145=$n;
      var $146=((($144)-($145))|0);
      var $147=___gmpn_add($138, $139, $140, $143, $146);
      $cy1=$147;
      label = 36; break;
    case 36: 
      var $149=$7;
      var $150=$n;
      var $151=(($149+($150<<2))|0);
      $__p5=$151;
      var $152=$__p5;
      var $153=HEAP32[(($152)>>2)];
      var $154=$cy1;
      var $155=((($153)+($154))|0);
      $__x4=$155;
      var $156=$__x4;
      var $157=$__p5;
      HEAP32[(($157)>>2)]=$156;
      var $158=$__x4;
      var $159=$cy1;
      var $160=(($158)>>>0) < (($159)>>>0);
      if ($160) { label = 37; break; } else { label = 41; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $163=$__p5;
      var $164=(($163+4)|0);
      $__p5=$164;
      var $165=HEAP32[(($164)>>2)];
      var $166=((($165)+(1))|0);
      HEAP32[(($164)>>2)]=$166;
      var $167=(($166)|0)==0;
      if ($167) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 38; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $172=$n;
      $bnm=$172;
      var $173=$7;
      var $174=$n;
      var $175=($174<<1);
      var $176=(($173+($175<<2))|0);
      $so=$176;
      label = 44; break;
    case 43: 
      var $178=$7;
      var $179=$n;
      var $180=(($178+($179<<2))|0);
      $so=$180;
      var $181=$5;
      $bm1=$181;
      var $182=$6;
      $bnm=$182;
      label = 44; break;
    case 44: 
      label = 46; break;
    case 45: 
      var $185=$7;
      $so=$185;
      var $186=$3;
      $am1=$186;
      var $187=$4;
      $anm=$187;
      var $188=$5;
      $bm1=$188;
      var $189=$6;
      $bnm=$189;
      label = 46; break;
    case 46: 
      var $191=$1;
      var $192=$n;
      var $193=$am1;
      var $194=$anm;
      var $195=$bm1;
      var $196=$bnm;
      var $197=$so;
      ___gmpn_mulmod_bnm1($191, $192, $193, $194, $195, $196, $197);
      var $198=$4;
      var $199=$n;
      var $200=(($198)|0) > (($199)|0);
      if ($200) { label = 47; break; } else { label = 55; break; }
    case 47: 
      var $202=$7;
      var $203=$n;
      var $204=($203<<1);
      var $205=(($202+($204<<2))|0);
      var $206=(($205+8)|0);
      $ap1=$206;
      var $207=$7;
      var $208=$n;
      var $209=($208<<1);
      var $210=(($207+($209<<2))|0);
      var $211=(($210+8)|0);
      var $212=$3;
      var $213=$n;
      var $214=$3;
      var $215=$n;
      var $216=(($214+($215<<2))|0);
      var $217=$4;
      var $218=$n;
      var $219=((($217)-($218))|0);
      var $220=___gmpn_sub($211, $212, $213, $216, $219);
      $cy1=$220;
      var $221=$n;
      var $222=$7;
      var $223=$n;
      var $224=($223<<1);
      var $225=(($222+($224<<2))|0);
      var $226=(($225+8)|0);
      var $227=(($226+($221<<2))|0);
      HEAP32[(($227)>>2)]=0;
      label = 48; break;
    case 48: 
      var $229=$7;
      var $230=$n;
      var $231=($230<<1);
      var $232=(($229+($231<<2))|0);
      var $233=(($232+8)|0);
      $__p7=$233;
      var $234=$__p7;
      var $235=HEAP32[(($234)>>2)];
      var $236=$cy1;
      var $237=((($235)+($236))|0);
      $__x6=$237;
      var $238=$__x6;
      var $239=$__p7;
      HEAP32[(($239)>>2)]=$238;
      var $240=$__x6;
      var $241=$cy1;
      var $242=(($240)>>>0) < (($241)>>>0);
      if ($242) { label = 49; break; } else { label = 53; break; }
    case 49: 
      label = 50; break;
    case 50: 
      var $245=$__p7;
      var $246=(($245+4)|0);
      $__p7=$246;
      var $247=HEAP32[(($246)>>2)];
      var $248=((($247)+(1))|0);
      HEAP32[(($246)>>2)]=$248;
      var $249=(($248)|0)==0;
      if ($249) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 50; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $254=$n;
      var $255=$n;
      var $256=$ap1;
      var $257=(($256+($255<<2))|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=((($254)+($258))|0);
      $anp=$259;
      label = 56; break;
    case 55: 
      var $261=$3;
      $ap1=$261;
      var $262=$4;
      $anp=$262;
      label = 56; break;
    case 56: 
      var $264=$6;
      var $265=$n;
      var $266=(($264)|0) > (($265)|0);
      if ($266) { label = 57; break; } else { label = 65; break; }
    case 57: 
      var $268=$7;
      var $269=$n;
      var $270=($269<<1);
      var $271=(($268+($270<<2))|0);
      var $272=(($271+8)|0);
      var $273=$n;
      var $274=(($272+($273<<2))|0);
      var $275=(($274+4)|0);
      $bp1=$275;
      var $276=$7;
      var $277=$n;
      var $278=($277<<1);
      var $279=(($276+($278<<2))|0);
      var $280=(($279+8)|0);
      var $281=$n;
      var $282=(($280+($281<<2))|0);
      var $283=(($282+4)|0);
      var $284=$5;
      var $285=$n;
      var $286=$5;
      var $287=$n;
      var $288=(($286+($287<<2))|0);
      var $289=$6;
      var $290=$n;
      var $291=((($289)-($290))|0);
      var $292=___gmpn_sub($283, $284, $285, $288, $291);
      $cy1=$292;
      var $293=$n;
      var $294=($293<<1);
      var $295=((($294)+(1))|0);
      var $296=$7;
      var $297=$n;
      var $298=($297<<1);
      var $299=(($296+($298<<2))|0);
      var $300=(($299+8)|0);
      var $301=(($300+($295<<2))|0);
      HEAP32[(($301)>>2)]=0;
      label = 58; break;
    case 58: 
      var $303=$7;
      var $304=$n;
      var $305=($304<<1);
      var $306=(($303+($305<<2))|0);
      var $307=(($306+8)|0);
      var $308=$n;
      var $309=(($307+($308<<2))|0);
      var $310=(($309+4)|0);
      $__p9=$310;
      var $311=$__p9;
      var $312=HEAP32[(($311)>>2)];
      var $313=$cy1;
      var $314=((($312)+($313))|0);
      $__x8=$314;
      var $315=$__x8;
      var $316=$__p9;
      HEAP32[(($316)>>2)]=$315;
      var $317=$__x8;
      var $318=$cy1;
      var $319=(($317)>>>0) < (($318)>>>0);
      if ($319) { label = 59; break; } else { label = 63; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $322=$__p9;
      var $323=(($322+4)|0);
      $__p9=$323;
      var $324=HEAP32[(($323)>>2)];
      var $325=((($324)+(1))|0);
      HEAP32[(($323)>>2)]=$325;
      var $326=(($325)|0)==0;
      if ($326) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 60; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $331=$n;
      var $332=$n;
      var $333=$bp1;
      var $334=(($333+($332<<2))|0);
      var $335=HEAP32[(($334)>>2)];
      var $336=((($331)+($335))|0);
      $bnp=$336;
      label = 66; break;
    case 65: 
      var $338=$5;
      $bp1=$338;
      var $339=$6;
      $bnp=$339;
      label = 66; break;
    case 66: 
      var $341=$n;
      var $342=(($341)|0) >= 300;
      if ($342) { label = 68; break; } else { label = 67; break; }
    case 67: 
      $k=0;
      label = 72; break;
    case 68: 
      var $345=$n;
      var $346=___gmpn_fft_best_k($345, 0);
      $k=$346;
      var $347=$k;
      var $348=1 << $347;
      var $349=((($348)-(1))|0);
      $mask=$349;
      label = 69; break;
    case 69: 
      var $351=$n;
      var $352=$mask;
      var $353=$351 & $352;
      var $354=(($353)|0)!=0;
      if ($354) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $356=$k;
      var $357=((($356)-(1))|0);
      $k=$357;
      var $358=$mask;
      var $359=$358 >> 1;
      $mask=$359;
      label = 69; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $362=$k;
      var $363=(($362)|0) >= 4;
      if ($363) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $365=$7;
      var $366=$n;
      var $367=$ap1;
      var $368=$anp;
      var $369=$bp1;
      var $370=$bnp;
      var $371=$k;
      var $372=___gmpn_mul_fft($365, $366, $367, $368, $369, $370, $371);
      var $373=$n;
      var $374=$7;
      var $375=(($374+($373<<2))|0);
      HEAP32[(($375)>>2)]=$372;
      label = 93; break;
    case 74: 
      var $377=$bp1;
      var $378=$5;
      var $379=(($377)|0)==(($378)|0);
      if ($379) { label = 75; break; } else { label = 91; break; }
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $387=$7;
      var $388=$ap1;
      var $389=$anp;
      var $390=$bp1;
      var $391=$bnp;
      var $392=___gmpn_mul($387, $388, $389, $390, $391);
      var $393=$anp;
      var $394=$bnp;
      var $395=((($393)+($394))|0);
      var $396=$n;
      var $397=((($395)-($396))|0);
      $anp=$397;
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $400=$anp;
      var $401=$n;
      var $402=(($400)|0) > (($401)|0);
      var $403=(($402)&1);
      var $404=$anp;
      var $405=((($404)-($403))|0);
      $anp=$405;
      var $406=$7;
      var $407=$7;
      var $408=$n;
      var $409=$7;
      var $410=$n;
      var $411=(($409+($410<<2))|0);
      var $412=$anp;
      var $413=___gmpn_sub($406, $407, $408, $411, $412);
      $cy1=$413;
      var $414=$n;
      var $415=$7;
      var $416=(($415+($414<<2))|0);
      HEAP32[(($416)>>2)]=0;
      label = 84; break;
    case 84: 
      var $418=$7;
      $__p11=$418;
      var $419=$__p11;
      var $420=HEAP32[(($419)>>2)];
      var $421=$cy1;
      var $422=((($420)+($421))|0);
      $__x10=$422;
      var $423=$__x10;
      var $424=$__p11;
      HEAP32[(($424)>>2)]=$423;
      var $425=$__x10;
      var $426=$cy1;
      var $427=(($425)>>>0) < (($426)>>>0);
      if ($427) { label = 85; break; } else { label = 89; break; }
    case 85: 
      label = 86; break;
    case 86: 
      var $430=$__p11;
      var $431=(($430+4)|0);
      $__p11=$431;
      var $432=HEAP32[(($431)>>2)];
      var $433=((($432)+(1))|0);
      HEAP32[(($431)>>2)]=$433;
      var $434=(($433)|0)==0;
      if ($434) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 86; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 92; break;
    case 91: 
      var $440=$7;
      var $441=$ap1;
      var $442=$bp1;
      var $443=$n;
      var $444=$7;
      _mpn_bc_mulmod_bnp1($440, $441, $442, $443, $444);
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $447=$n;
      var $448=$7;
      var $449=(($448+($447<<2))|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=$1;
      var $452=$1;
      var $453=$7;
      var $454=$n;
      var $455=___gmpn_add_n($451, $452, $453, $454);
      var $456=((($450)+($455))|0);
      $cy1=$456;
      var $457=$1;
      var $458=(($457)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=$459 & 1;
      var $461=$cy1;
      var $462=((($461)+($460))|0);
      $cy1=$462;
      var $463=$1;
      var $464=$1;
      var $465=$n;
      var $466=___gmpn_rshift($463, $464, $465, 1);
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $469=$cy1;
      var $470=$469 << 31;
      $hi=$470;
      var $471=$cy1;
      var $472=$471 >>> 1;
      $cy1=$472;
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $475=$hi;
      var $476=$n;
      var $477=((($476)-(1))|0);
      var $478=$1;
      var $479=(($478+($477<<2))|0);
      var $480=HEAP32[(($479)>>2)];
      var $481=$480 | $475;
      HEAP32[(($479)>>2)]=$481;
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $487=$1;
      $__p13=$487;
      var $488=$__p13;
      var $489=HEAP32[(($488)>>2)];
      var $490=$cy1;
      var $491=((($489)+($490))|0);
      $__x12=$491;
      var $492=$__x12;
      var $493=$__p13;
      HEAP32[(($493)>>2)]=$492;
      var $494=$__x12;
      var $495=$cy1;
      var $496=(($494)>>>0) < (($495)>>>0);
      if ($496) { label = 103; break; } else { label = 107; break; }
    case 103: 
      label = 104; break;
    case 104: 
      var $499=$__p13;
      var $500=(($499+4)|0);
      $__p13=$500;
      var $501=HEAP32[(($500)>>2)];
      var $502=((($501)+(1))|0);
      HEAP32[(($500)>>2)]=$502;
      var $503=(($502)|0)==0;
      if ($503) { label = 105; break; } else { label = 106; break; }
    case 105: 
      label = 104; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      var $508=$4;
      var $509=$6;
      var $510=((($508)+($509))|0);
      var $511=$2;
      var $512=(($510)|0) < (($511)|0);
      if ($512) { label = 109; break; } else { label = 114; break; }
    case 109: 
      var $514=$1;
      var $515=$n;
      var $516=(($514+($515<<2))|0);
      var $517=$1;
      var $518=$7;
      var $519=$4;
      var $520=$6;
      var $521=((($519)+($520))|0);
      var $522=$n;
      var $523=((($521)-($522))|0);
      var $524=___gmpn_sub_n($516, $517, $518, $523);
      $cy1=$524;
      var $525=$n;
      var $526=$7;
      var $527=(($526+($525<<2))|0);
      var $528=HEAP32[(($527)>>2)];
      var $529=$7;
      var $530=$4;
      var $531=(($529+($530<<2))|0);
      var $532=$6;
      var $533=(($531+($532<<2))|0);
      var $534=$n;
      var $535=(((-$534))|0);
      var $536=(($533+($535<<2))|0);
      var $537=$1;
      var $538=$4;
      var $539=(($537+($538<<2))|0);
      var $540=$6;
      var $541=(($539+($540<<2))|0);
      var $542=$n;
      var $543=(((-$542))|0);
      var $544=(($541+($543<<2))|0);
      var $545=$7;
      var $546=$4;
      var $547=(($545+($546<<2))|0);
      var $548=$6;
      var $549=(($547+($548<<2))|0);
      var $550=$n;
      var $551=(((-$550))|0);
      var $552=(($549+($551<<2))|0);
      var $553=$2;
      var $554=$4;
      var $555=$6;
      var $556=((($554)+($555))|0);
      var $557=((($553)-($556))|0);
      var $558=$cy1;
      var $559=_mpn_sub_nc116($536, $544, $552, $557, $558);
      var $560=((($528)+($559))|0);
      $cy1=$560;
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $563=$1;
      var $564=$1;
      var $565=$4;
      var $566=$6;
      var $567=((($565)+($566))|0);
      var $568=$cy1;
      var $569=___gmpn_sub_1($563, $564, $567, $568);
      $cy1=$569;
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      label = 122; break;
    case 114: 
      var $573=$n;
      var $574=$7;
      var $575=(($574+($573<<2))|0);
      var $576=HEAP32[(($575)>>2)];
      var $577=$1;
      var $578=$n;
      var $579=(($577+($578<<2))|0);
      var $580=$1;
      var $581=$7;
      var $582=$n;
      var $583=___gmpn_sub_n($579, $580, $581, $582);
      var $584=((($576)+($583))|0);
      $cy1=$584;
      label = 115; break;
    case 115: 
      var $586=$1;
      $__p15=$586;
      var $587=$__p15;
      var $588=HEAP32[(($587)>>2)];
      $__x14=$588;
      var $589=$__x14;
      var $590=$cy1;
      var $591=((($589)-($590))|0);
      var $592=$__p15;
      HEAP32[(($592)>>2)]=$591;
      var $593=$__x14;
      var $594=$cy1;
      var $595=(($593)>>>0) < (($594)>>>0);
      if ($595) { label = 116; break; } else { label = 120; break; }
    case 116: 
      label = 117; break;
    case 117: 
      var $598=$__p15;
      var $599=(($598+4)|0);
      $__p15=$599;
      var $600=HEAP32[(($599)>>2)];
      var $601=((($600)-(1))|0);
      HEAP32[(($599)>>2)]=$601;
      var $602=(($600)|0)==0;
      if ($602) { label = 118; break; } else { label = 119; break; }
    case 118: 
      label = 117; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mulmod_bnm1["X"]=1;

function _mpn_sqrmod_bnm1_itch($rn, $an) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      var $3=$1;
      var $4=$3 >> 1;
      $n=$4;
      var $5=$1;
      var $6=((($5)+(3))|0);
      var $7=$2;
      var $8=$n;
      var $9=(($7)|0) > (($8)|0);
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$2;
      var $14 = $11;label = 5; break;
    case 4: 
      var $14 = 0;label = 5; break;
    case 5: 
      var $14;
      var $15=((($6)+($14))|0);
      $itch=$15;
      var $16=$itch;

      return $16;
    default: assert(0, "bad label: " + label);
  }

}


function _mpn_mulmod_bnm1_itch121($rn, $an, $bn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      $3=$bn;
      var $4=$1;
      var $5=$4 >> 1;
      $n=$5;
      var $6=$1;
      var $7=((($6)+(4))|0);
      var $8=$2;
      var $9=$n;
      var $10=(($8)|0) > (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$3;
      var $13=$n;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $20 = $16;label = 6; break;
    case 5: 
      var $18=$n;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      var $23 = $20;label = 8; break;
    case 7: 
      var $23 = 0;label = 8; break;
    case 8: 
      var $23;
      var $24=((($7)+($23))|0);
      $itch=$24;
      var $25=$itch;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_rshift($rp, $up, $n, $cnt) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $high_limb;
      var $low_limb;
      var $tnc;
      var $i;
      var $retval;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$cnt;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$4;
      var $14=(((32)-($13))|0);
      $tnc=$14;
      var $15=$2;
      var $16=(($15+4)|0);
      $2=$16;
      var $17=HEAP32[(($15)>>2)];
      $high_limb=$17;
      var $18=$high_limb;
      var $19=$tnc;
      var $20=$18 << $19;
      $retval=$20;
      var $21=$high_limb;
      var $22=$4;
      var $23=$21 >>> (($22)>>>0);
      $low_limb=$23;
      var $24=$3;
      var $25=((($24)-(1))|0);
      $i=$25;
      label = 11; break;
    case 11: 
      var $27=$i;
      var $28=(($27)|0)!=0;
      if ($28) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $30=$2;
      var $31=(($30+4)|0);
      $2=$31;
      var $32=HEAP32[(($30)>>2)];
      $high_limb=$32;
      var $33=$low_limb;
      var $34=$high_limb;
      var $35=$tnc;
      var $36=$34 << $35;
      var $37=$33 | $36;
      var $38=$1;
      var $39=(($38+4)|0);
      $1=$39;
      HEAP32[(($38)>>2)]=$37;
      var $40=$high_limb;
      var $41=$4;
      var $42=$40 >>> (($41)>>>0);
      $low_limb=$42;
      label = 13; break;
    case 13: 
      var $44=$i;
      var $45=((($44)-(1))|0);
      $i=$45;
      label = 11; break;
    case 14: 
      var $47=$low_limb;
      var $48=$1;
      HEAP32[(($48)>>2)]=$47;
      var $49=$retval;

      return $49;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_rshift["X"]=1;

function _mpn_bc_mulmod_bnp1($rp, $ap, $bp, $rn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $cy;
      var $__x;
      var $__p;
      $1=$rp;
      $2=$ap;
      $3=$bp;
      $4=$rn;
      $5=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$5;
      var $9=$2;
      var $10=$3;
      var $11=$4;
      var $12=((($11)+(1))|0);
      ___gmpn_mul_n($8, $9, $10, $12);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $17=$4;
      var $18=($17<<1);
      var $19=$5;
      var $20=(($19+($18<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$1;
      var $23=$5;
      var $24=$5;
      var $25=$4;
      var $26=(($24+($25<<2))|0);
      var $27=$4;
      var $28=___gmpn_sub_n($22, $23, $26, $27);
      var $29=((($21)+($28))|0);
      $cy=$29;
      var $30=$4;
      var $31=$1;
      var $32=(($31+($30<<2))|0);
      HEAP32[(($32)>>2)]=0;
      label = 9; break;
    case 9: 
      var $34=$1;
      $__p=$34;
      var $35=$__p;
      var $36=HEAP32[(($35)>>2)];
      var $37=$cy;
      var $38=((($36)+($37))|0);
      $__x=$38;
      var $39=$__x;
      var $40=$__p;
      HEAP32[(($40)>>2)]=$39;
      var $41=$__x;
      var $42=$cy;
      var $43=(($41)>>>0) < (($42)>>>0);
      if ($43) { label = 10; break; } else { label = 14; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $46=$__p;
      var $47=(($46+4)|0);
      $__p=$47;
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($49)|0)==0;
      if ($50) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_bc_mulmod_bnp1["X"]=1;

function _mpn_sub_nc116($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_mulmod_bnm1_next_size($n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $nh;
      $2=$n;
      var $3=$2;
      var $4=(($3)|0) >= 16;
      if ($4) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$2;
      $1=$6;
      label = 11; break;
    case 4: 
      var $8=$2;
      var $9=(($8)|0) >= 61;
      if ($9) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $11=$2;
      var $12=((($11)+(1))|0);
      var $13=$12 & -2;
      $1=$13;
      label = 11; break;
    case 6: 
      var $15=$2;
      var $16=(($15)|0) >= 121;
      if ($16) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $18=$2;
      var $19=((($18)+(3))|0);
      var $20=$19 & -4;
      $1=$20;
      label = 11; break;
    case 8: 
      var $22=$2;
      var $23=((($22)+(1))|0);
      var $24=$23 >> 1;
      $nh=$24;
      var $25=$nh;
      var $26=(($25)|0) >= 300;
      if ($26) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $28=$2;
      var $29=((($28)+(7))|0);
      var $30=$29 & -8;
      $1=$30;
      label = 11; break;
    case 10: 
      var $32=$nh;
      var $33=$nh;
      var $34=___gmpn_fft_best_k($33, 0);
      var $35=___gmpn_fft_next_size($32, $34);
      var $36=($35<<1);
      $1=$36;
      label = 11; break;
    case 11: 
      var $38=$1;

      return $38;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_nussbaumer_mul($pp, $ap, $an, $bp, $bn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $rn;
      var $tp;
      var $__tmp_marker=__stackBase__;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $10=$2;
      var $11=$4;
      var $12=(($10)|0)==(($11)|0);
      if ($12) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $14=$3;
      var $15=$5;
      var $16=(($14)|0)==(($15)|0);
      if ($16) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $18=$3;
      var $19=($18<<1);
      var $20=___gmpn_sqrmod_bnm1_next_size($19);
      $rn=$20;
      var $21=$rn;
      var $22=$3;
      var $23=_mpn_sqrmod_bnm1_itch($21, $22);
      var $24=($23<<2);
      var $25=(($24)>>>0) < 65536;
      if ($25) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=$rn;
      var $28=$3;
      var $29=_mpn_sqrmod_bnm1_itch($27, $28);
      var $30=($29<<2);
      var $31=STACKTOP;STACKTOP = (STACKTOP + $30)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $39 = $31;label = 11; break;
    case 10: 
      var $33=$rn;
      var $34=$3;
      var $35=_mpn_sqrmod_bnm1_itch($33, $34);
      var $36=($35<<2);
      var $37=___gmp_tmp_reentrant_alloc($__tmp_marker, $36);
      var $39 = $37;label = 11; break;
    case 11: 
      var $39;
      var $40=$39;
      $tp=$40;
      var $41=$1;
      var $42=$rn;
      var $43=$2;
      var $44=$3;
      var $45=$tp;
      ___gmpn_sqrmod_bnm1($41, $42, $43, $44, $45);
      label = 16; break;
    case 12: 
      var $47=$3;
      var $48=$5;
      var $49=((($47)+($48))|0);
      var $50=___gmpn_mulmod_bnm1_next_size($49);
      $rn=$50;
      var $51=$rn;
      var $52=$3;
      var $53=$5;
      var $54=_mpn_mulmod_bnm1_itch121($51, $52, $53);
      var $55=($54<<2);
      var $56=(($55)>>>0) < 65536;
      if ($56) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $58=$rn;
      var $59=$3;
      var $60=$5;
      var $61=_mpn_mulmod_bnm1_itch121($58, $59, $60);
      var $62=($61<<2);
      var $63=STACKTOP;STACKTOP = (STACKTOP + $62)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $72 = $63;label = 15; break;
    case 14: 
      var $65=$rn;
      var $66=$3;
      var $67=$5;
      var $68=_mpn_mulmod_bnm1_itch121($65, $66, $67);
      var $69=($68<<2);
      var $70=___gmp_tmp_reentrant_alloc($__tmp_marker, $69);
      var $72 = $70;label = 15; break;
    case 15: 
      var $72;
      var $73=$72;
      $tp=$73;
      var $74=$1;
      var $75=$rn;
      var $76=$2;
      var $77=$3;
      var $78=$4;
      var $79=$5;
      var $80=$tp;
      ___gmpn_mulmod_bnm1($74, $75, $76, $77, $78, $79, $80);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $83=HEAP32[(($__tmp_marker)>>2)];
      var $84=(($83)|0)!=0;
      if ($84) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $86=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($86);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_nussbaumer_mul["X"]=1;

function ___gmpn_sbpi1_div_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $qh;
      var $qn;
      var $i;
      var $n1;
      var $n0;
      var $d1;
      var $d0;
      var $cy;
      var $cy1;
      var $q;
      var $flag;
      var $dn_orig;
      var $dp_orig;
      var $np_orig;
      var $_q0;
      var $_t1;
      var $_t0;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__x4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      var $__x15;
      var $__x17;
      var $__x18;
      var $_q019;
      var $_t120;
      var $_t021;
      var $_mask22;
      var $__x023;
      var $__x124;
      var $__x225;
      var $__x326;
      var $__ul27;
      var $__vl28;
      var $__uh29;
      var $__vh30;
      var $__u31;
      var $__v32;
      var $__x33;
      var $__x34;
      var $__x035;
      var $__x136;
      var $__x237;
      var $__x338;
      var $__ul39;
      var $__vl40;
      var $__uh41;
      var $__vh42;
      var $__u43;
      var $__v44;
      var $__x45;
      var $__x46;
      var $__x47;
      var $__x48;
      var $_q049;
      var $_t150;
      var $_t051;
      var $_mask52;
      var $__x053;
      var $__x154;
      var $__x255;
      var $__x356;
      var $__ul57;
      var $__vl58;
      var $__uh59;
      var $__vh60;
      var $__u61;
      var $__v62;
      var $__x63;
      var $__x64;
      var $__x065;
      var $__x166;
      var $__x267;
      var $__x368;
      var $__ul69;
      var $__vl70;
      var $__uh71;
      var $__vh72;
      var $__u73;
      var $__v74;
      var $__x75;
      var $__x76;
      var $__x77;
      var $q78;
      var $x;
      var $y;
      $2=$qp;
      $3=$np;
      $4=$nn;
      $5=$dp;
      $6=$dn;
      $7=$dinv;
      var $8=$6;
      $dn_orig=$8;
      var $9=$5;
      $dp_orig=$9;
      var $10=$3;
      $np_orig=$10;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $17=$4;
      var $18=$3;
      var $19=(($18+($17<<2))|0);
      $3=$19;
      var $20=$4;
      var $21=$6;
      var $22=((($20)-($21))|0);
      $qn=$22;
      var $23=$qn;
      var $24=((($23)+(1))|0);
      var $25=$6;
      var $26=(($24)|0) < (($25)|0);
      if ($26) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $28=$6;
      var $29=$qn;
      var $30=((($29)+(1))|0);
      var $31=((($28)-($30))|0);
      var $32=$5;
      var $33=(($32+($31<<2))|0);
      $5=$33;
      var $34=$qn;
      var $35=((($34)+(1))|0);
      $6=$35;
      label = 10; break;
    case 10: 
      var $37=$3;
      var $38=$6;
      var $39=(((-$38))|0);
      var $40=(($37+($39<<2))|0);
      var $41=$5;
      var $42=$6;
      var $43=___gmpn_cmp($40, $41, $42);
      var $44=(($43)|0) >= 0;
      var $45=(($44)&1);
      $qh=$45;
      var $46=$qh;
      var $47=(($46)|0)!=0;
      if ($47) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $49=$3;
      var $50=$6;
      var $51=(((-$50))|0);
      var $52=(($49+($51<<2))|0);
      var $53=$3;
      var $54=$6;
      var $55=(((-$54))|0);
      var $56=(($53+($55<<2))|0);
      var $57=$5;
      var $58=$6;
      var $59=___gmpn_sub_n($52, $56, $57, $58);
      label = 12; break;
    case 12: 
      var $61=$qn;
      var $62=$2;
      var $63=(($62+($61<<2))|0);
      $2=$63;
      var $64=$6;
      var $65=((($64)-(2))|0);
      $6=$65;
      var $66=$6;
      var $67=((($66)+(1))|0);
      var $68=$5;
      var $69=(($68+($67<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      $d1=$70;
      var $71=$6;
      var $72=(($71)|0);
      var $73=$5;
      var $74=(($73+($72<<2))|0);
      var $75=HEAP32[(($74)>>2)];
      $d0=$75;
      var $76=$3;
      var $77=((($76)-(8))|0);
      $3=$77;
      var $78=$3;
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      $n1=$80;
      var $81=$qn;
      var $82=$6;
      var $83=((($82)+(2))|0);
      var $84=((($81)-($83))|0);
      $i=$84;
      label = 13; break;
    case 13: 
      var $86=$i;
      var $87=(($86)|0) >= 0;
      if ($87) { label = 14; break; } else { label = 47; break; }
    case 14: 
      var $89=$3;
      var $90=((($89)-(4))|0);
      $3=$90;
      var $91=$n1;
      var $92=$d1;
      var $93=(($91)|0)==(($92)|0);
      if ($93) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $95=$3;
      var $96=(($95+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$d0;
      var $99=(($97)|0)==(($98)|0);
      if ($99) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $q=-1;
      var $101=$3;
      var $102=$6;
      var $103=(((-$102))|0);
      var $104=(($101+($103<<2))|0);
      var $105=$5;
      var $106=$6;
      var $107=((($106)+(2))|0);
      var $108=$q;
      var $109=___gmpn_submul_1($104, $105, $107, $108);
      var $110=$3;
      var $111=(($110+4)|0);
      var $112=HEAP32[(($111)>>2)];
      $n1=$112;
      label = 45; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $116=$n1;
      $__u=$116;
      var $117=$7;
      $__v=$117;
      var $118=$__u;
      var $119=$118 & 65535;
      $__ul=$119;
      var $120=$__u;
      var $121=$120 >>> 16;
      $__uh=$121;
      var $122=$__v;
      var $123=$122 & 65535;
      $__vl=$123;
      var $124=$__v;
      var $125=$124 >>> 16;
      $__vh=$125;
      var $126=$__ul;
      var $127=$__vl;
      var $128=Math.imul($126,$127);
      $__x0=$128;
      var $129=$__ul;
      var $130=$__vh;
      var $131=Math.imul($129,$130);
      $__x1=$131;
      var $132=$__uh;
      var $133=$__vl;
      var $134=Math.imul($132,$133);
      $__x2=$134;
      var $135=$__uh;
      var $136=$__vh;
      var $137=Math.imul($135,$136);
      $__x3=$137;
      var $138=$__x0;
      var $139=$138 >>> 16;
      var $140=$__x1;
      var $141=((($140)+($139))|0);
      $__x1=$141;
      var $142=$__x2;
      var $143=$__x1;
      var $144=((($143)+($142))|0);
      $__x1=$144;
      var $145=$__x1;
      var $146=$__x2;
      var $147=(($145)>>>0) < (($146)>>>0);
      if ($147) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $149=$__x3;
      var $150=((($149)+(65536))|0);
      $__x3=$150;
      label = 21; break;
    case 21: 
      var $152=$__x3;
      var $153=$__x1;
      var $154=$153 >>> 16;
      var $155=((($152)+($154))|0);
      $q=$155;
      var $156=$__x1;
      var $157=$156 << 16;
      var $158=$__x0;
      var $159=$158 & 65535;
      var $160=((($157)+($159))|0);
      $_q0=$160;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $163=$_q0;
      var $164=$3;
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=((($163)+($166))|0);
      $__x=$167;
      var $168=$q;
      var $169=$n1;
      var $170=((($168)+($169))|0);
      var $171=$__x;
      var $172=$_q0;
      var $173=(($171)>>>0) < (($172)>>>0);
      var $174=(($173)&1);
      var $175=((($170)+($174))|0);
      $q=$175;
      var $176=$__x;
      $_q0=$176;
      label = 24; break;
    case 24: 
      var $178=$3;
      var $179=(($178+4)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=$d1;
      var $182=$q;
      var $183=Math.imul($181,$182);
      var $184=((($180)-($183))|0);
      $n1=$184;
      var $185=$3;
      var $186=(($185)|0);
      var $187=HEAP32[(($186)>>2)];
      $n0=$187;
      label = 25; break;
    case 25: 
      var $189=$n0;
      var $190=$d0;
      var $191=((($189)-($190))|0);
      $__x4=$191;
      var $192=$n1;
      var $193=$d1;
      var $194=((($192)-($193))|0);
      var $195=$n0;
      var $196=$d0;
      var $197=(($195)>>>0) < (($196)>>>0);
      var $198=(($197)&1);
      var $199=((($194)-($198))|0);
      $n1=$199;
      var $200=$__x4;
      $n0=$200;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $203=$d0;
      $__u13=$203;
      var $204=$q;
      $__v14=$204;
      var $205=$__u13;
      var $206=$205 & 65535;
      $__ul9=$206;
      var $207=$__u13;
      var $208=$207 >>> 16;
      $__uh11=$208;
      var $209=$__v14;
      var $210=$209 & 65535;
      $__vl10=$210;
      var $211=$__v14;
      var $212=$211 >>> 16;
      $__vh12=$212;
      var $213=$__ul9;
      var $214=$__vl10;
      var $215=Math.imul($213,$214);
      $__x05=$215;
      var $216=$__ul9;
      var $217=$__vh12;
      var $218=Math.imul($216,$217);
      $__x16=$218;
      var $219=$__uh11;
      var $220=$__vl10;
      var $221=Math.imul($219,$220);
      $__x27=$221;
      var $222=$__uh11;
      var $223=$__vh12;
      var $224=Math.imul($222,$223);
      $__x38=$224;
      var $225=$__x05;
      var $226=$225 >>> 16;
      var $227=$__x16;
      var $228=((($227)+($226))|0);
      $__x16=$228;
      var $229=$__x27;
      var $230=$__x16;
      var $231=((($230)+($229))|0);
      $__x16=$231;
      var $232=$__x16;
      var $233=$__x27;
      var $234=(($232)>>>0) < (($233)>>>0);
      if ($234) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $236=$__x38;
      var $237=((($236)+(65536))|0);
      $__x38=$237;
      label = 29; break;
    case 29: 
      var $239=$__x38;
      var $240=$__x16;
      var $241=$240 >>> 16;
      var $242=((($239)+($241))|0);
      $_t1=$242;
      var $243=$__x16;
      var $244=$243 << 16;
      var $245=$__x05;
      var $246=$245 & 65535;
      var $247=((($244)+($246))|0);
      $_t0=$247;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $250=$n0;
      var $251=$_t0;
      var $252=((($250)-($251))|0);
      $__x15=$252;
      var $253=$n1;
      var $254=$_t1;
      var $255=((($253)-($254))|0);
      var $256=$n0;
      var $257=$_t0;
      var $258=(($256)>>>0) < (($257)>>>0);
      var $259=(($258)&1);
      var $260=((($255)-($259))|0);
      $n1=$260;
      var $261=$__x15;
      $n0=$261;
      label = 32; break;
    case 32: 
      var $263=$q;
      var $264=((($263)+(1))|0);
      $q=$264;
      var $265=$n1;
      var $266=$_q0;
      var $267=(($265)>>>0) >= (($266)>>>0);
      var $268=(($267)&1);
      var $269=(((-$268))|0);
      $_mask=$269;
      var $270=$_mask;
      var $271=$q;
      var $272=((($271)+($270))|0);
      $q=$272;
      label = 33; break;
    case 33: 
      var $274=$n0;
      var $275=$_mask;
      var $276=$d0;
      var $277=$275 & $276;
      var $278=((($274)+($277))|0);
      $__x17=$278;
      var $279=$n1;
      var $280=$_mask;
      var $281=$d1;
      var $282=$280 & $281;
      var $283=((($279)+($282))|0);
      var $284=$__x17;
      var $285=$n0;
      var $286=(($284)>>>0) < (($285)>>>0);
      var $287=(($286)&1);
      var $288=((($283)+($287))|0);
      $n1=$288;
      var $289=$__x17;
      $n0=$289;
      label = 34; break;
    case 34: 
      var $291=$n1;
      var $292=$d1;
      var $293=(($291)>>>0) >= (($292)>>>0);
      if ($293) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $295=$n1;
      var $296=$d1;
      var $297=(($295)>>>0) > (($296)>>>0);
      if ($297) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $299=$n0;
      var $300=$d0;
      var $301=(($299)>>>0) >= (($300)>>>0);
      if ($301) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $303=$q;
      var $304=((($303)+(1))|0);
      $q=$304;
      label = 38; break;
    case 38: 
      var $306=$n0;
      var $307=$d0;
      var $308=((($306)-($307))|0);
      $__x18=$308;
      var $309=$n1;
      var $310=$d1;
      var $311=((($309)-($310))|0);
      var $312=$n0;
      var $313=$d0;
      var $314=(($312)>>>0) < (($313)>>>0);
      var $315=(($314)&1);
      var $316=((($311)-($315))|0);
      $n1=$316;
      var $317=$__x18;
      $n0=$317;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $322=$3;
      var $323=$6;
      var $324=(((-$323))|0);
      var $325=(($322+($324<<2))|0);
      var $326=$5;
      var $327=$6;
      var $328=$q;
      var $329=___gmpn_submul_1($325, $326, $327, $328);
      $cy=$329;
      var $330=$n0;
      var $331=$cy;
      var $332=(($330)>>>0) < (($331)>>>0);
      var $333=(($332)&1);
      $cy1=$333;
      var $334=$n0;
      var $335=$cy;
      var $336=((($334)-($335))|0);
      $n0=$336;
      var $337=$n1;
      var $338=$cy1;
      var $339=(($337)>>>0) < (($338)>>>0);
      var $340=(($339)&1);
      $cy=$340;
      var $341=$cy1;
      var $342=$n1;
      var $343=((($342)-($341))|0);
      $n1=$343;
      var $344=$n0;
      var $345=$3;
      var $346=(($345)|0);
      HEAP32[(($346)>>2)]=$344;
      var $347=$cy;
      var $348=(($347)|0)!=0;
      if ($348) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $350=$d1;
      var $351=$3;
      var $352=$6;
      var $353=(((-$352))|0);
      var $354=(($351+($353<<2))|0);
      var $355=$3;
      var $356=$6;
      var $357=(((-$356))|0);
      var $358=(($355+($357<<2))|0);
      var $359=$5;
      var $360=$6;
      var $361=((($360)+(1))|0);
      var $362=___gmpn_add_n($354, $358, $359, $361);
      var $363=((($350)+($362))|0);
      var $364=$n1;
      var $365=((($364)+($363))|0);
      $n1=$365;
      var $366=$q;
      var $367=((($366)-(1))|0);
      $q=$367;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $370=$q;
      var $371=$2;
      var $372=((($371)-(4))|0);
      $2=$372;
      HEAP32[(($372)>>2)]=$370;
      label = 46; break;
    case 46: 
      var $374=$i;
      var $375=((($374)-(1))|0);
      $i=$375;
      label = 13; break;
    case 47: 
      $flag=-1;
      var $377=$6;
      var $378=(($377)|0) >= 0;
      if ($378) { label = 48; break; } else { label = 123; break; }
    case 48: 
      var $380=$6;
      $i=$380;
      label = 49; break;
    case 49: 
      var $382=$i;
      var $383=(($382)|0) > 0;
      if ($383) { label = 50; break; } else { label = 87; break; }
    case 50: 
      var $385=$3;
      var $386=((($385)-(4))|0);
      $3=$386;
      var $387=$n1;
      var $388=$d1;
      var $389=$flag;
      var $390=$388 & $389;
      var $391=(($387)>>>0) >= (($390)>>>0);
      if ($391) { label = 51; break; } else { label = 57; break; }
    case 51: 
      $q=-1;
      var $393=$3;
      var $394=$6;
      var $395=(((-$394))|0);
      var $396=(($393+($395<<2))|0);
      var $397=$5;
      var $398=$6;
      var $399=((($398)+(2))|0);
      var $400=$q;
      var $401=___gmpn_submul_1($396, $397, $399, $400);
      $cy=$401;
      var $402=$n1;
      var $403=$cy;
      var $404=(($402)|0)!=(($403)|0);
      if ($404) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $406=$n1;
      var $407=$cy;
      var $408=$flag;
      var $409=$407 & $408;
      var $410=(($406)>>>0) < (($409)>>>0);
      if ($410) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $412=$q;
      var $413=((($412)-(1))|0);
      $q=$413;
      var $414=$3;
      var $415=$6;
      var $416=(((-$415))|0);
      var $417=(($414+($416<<2))|0);
      var $418=$3;
      var $419=$6;
      var $420=(((-$419))|0);
      var $421=(($418+($420<<2))|0);
      var $422=$5;
      var $423=$6;
      var $424=((($423)+(2))|0);
      var $425=___gmpn_add_n($417, $421, $422, $424);
      label = 55; break;
    case 54: 
      $flag=0;
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $429=$3;
      var $430=(($429+4)|0);
      var $431=HEAP32[(($430)>>2)];
      $n1=$431;
      label = 85; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $435=$n1;
      $__u31=$435;
      var $436=$7;
      $__v32=$436;
      var $437=$__u31;
      var $438=$437 & 65535;
      $__ul27=$438;
      var $439=$__u31;
      var $440=$439 >>> 16;
      $__uh29=$440;
      var $441=$__v32;
      var $442=$441 & 65535;
      $__vl28=$442;
      var $443=$__v32;
      var $444=$443 >>> 16;
      $__vh30=$444;
      var $445=$__ul27;
      var $446=$__vl28;
      var $447=Math.imul($445,$446);
      $__x023=$447;
      var $448=$__ul27;
      var $449=$__vh30;
      var $450=Math.imul($448,$449);
      $__x124=$450;
      var $451=$__uh29;
      var $452=$__vl28;
      var $453=Math.imul($451,$452);
      $__x225=$453;
      var $454=$__uh29;
      var $455=$__vh30;
      var $456=Math.imul($454,$455);
      $__x326=$456;
      var $457=$__x023;
      var $458=$457 >>> 16;
      var $459=$__x124;
      var $460=((($459)+($458))|0);
      $__x124=$460;
      var $461=$__x225;
      var $462=$__x124;
      var $463=((($462)+($461))|0);
      $__x124=$463;
      var $464=$__x124;
      var $465=$__x225;
      var $466=(($464)>>>0) < (($465)>>>0);
      if ($466) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $468=$__x326;
      var $469=((($468)+(65536))|0);
      $__x326=$469;
      label = 61; break;
    case 61: 
      var $471=$__x326;
      var $472=$__x124;
      var $473=$472 >>> 16;
      var $474=((($471)+($473))|0);
      $q=$474;
      var $475=$__x124;
      var $476=$475 << 16;
      var $477=$__x023;
      var $478=$477 & 65535;
      var $479=((($476)+($478))|0);
      $_q019=$479;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $482=$_q019;
      var $483=$3;
      var $484=(($483+4)|0);
      var $485=HEAP32[(($484)>>2)];
      var $486=((($482)+($485))|0);
      $__x33=$486;
      var $487=$q;
      var $488=$n1;
      var $489=((($487)+($488))|0);
      var $490=$__x33;
      var $491=$_q019;
      var $492=(($490)>>>0) < (($491)>>>0);
      var $493=(($492)&1);
      var $494=((($489)+($493))|0);
      $q=$494;
      var $495=$__x33;
      $_q019=$495;
      label = 64; break;
    case 64: 
      var $497=$3;
      var $498=(($497+4)|0);
      var $499=HEAP32[(($498)>>2)];
      var $500=$d1;
      var $501=$q;
      var $502=Math.imul($500,$501);
      var $503=((($499)-($502))|0);
      $n1=$503;
      var $504=$3;
      var $505=(($504)|0);
      var $506=HEAP32[(($505)>>2)];
      $n0=$506;
      label = 65; break;
    case 65: 
      var $508=$n0;
      var $509=$d0;
      var $510=((($508)-($509))|0);
      $__x34=$510;
      var $511=$n1;
      var $512=$d1;
      var $513=((($511)-($512))|0);
      var $514=$n0;
      var $515=$d0;
      var $516=(($514)>>>0) < (($515)>>>0);
      var $517=(($516)&1);
      var $518=((($513)-($517))|0);
      $n1=$518;
      var $519=$__x34;
      $n0=$519;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $522=$d0;
      $__u43=$522;
      var $523=$q;
      $__v44=$523;
      var $524=$__u43;
      var $525=$524 & 65535;
      $__ul39=$525;
      var $526=$__u43;
      var $527=$526 >>> 16;
      $__uh41=$527;
      var $528=$__v44;
      var $529=$528 & 65535;
      $__vl40=$529;
      var $530=$__v44;
      var $531=$530 >>> 16;
      $__vh42=$531;
      var $532=$__ul39;
      var $533=$__vl40;
      var $534=Math.imul($532,$533);
      $__x035=$534;
      var $535=$__ul39;
      var $536=$__vh42;
      var $537=Math.imul($535,$536);
      $__x136=$537;
      var $538=$__uh41;
      var $539=$__vl40;
      var $540=Math.imul($538,$539);
      $__x237=$540;
      var $541=$__uh41;
      var $542=$__vh42;
      var $543=Math.imul($541,$542);
      $__x338=$543;
      var $544=$__x035;
      var $545=$544 >>> 16;
      var $546=$__x136;
      var $547=((($546)+($545))|0);
      $__x136=$547;
      var $548=$__x237;
      var $549=$__x136;
      var $550=((($549)+($548))|0);
      $__x136=$550;
      var $551=$__x136;
      var $552=$__x237;
      var $553=(($551)>>>0) < (($552)>>>0);
      if ($553) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $555=$__x338;
      var $556=((($555)+(65536))|0);
      $__x338=$556;
      label = 69; break;
    case 69: 
      var $558=$__x338;
      var $559=$__x136;
      var $560=$559 >>> 16;
      var $561=((($558)+($560))|0);
      $_t120=$561;
      var $562=$__x136;
      var $563=$562 << 16;
      var $564=$__x035;
      var $565=$564 & 65535;
      var $566=((($563)+($565))|0);
      $_t021=$566;
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $569=$n0;
      var $570=$_t021;
      var $571=((($569)-($570))|0);
      $__x45=$571;
      var $572=$n1;
      var $573=$_t120;
      var $574=((($572)-($573))|0);
      var $575=$n0;
      var $576=$_t021;
      var $577=(($575)>>>0) < (($576)>>>0);
      var $578=(($577)&1);
      var $579=((($574)-($578))|0);
      $n1=$579;
      var $580=$__x45;
      $n0=$580;
      label = 72; break;
    case 72: 
      var $582=$q;
      var $583=((($582)+(1))|0);
      $q=$583;
      var $584=$n1;
      var $585=$_q019;
      var $586=(($584)>>>0) >= (($585)>>>0);
      var $587=(($586)&1);
      var $588=(((-$587))|0);
      $_mask22=$588;
      var $589=$_mask22;
      var $590=$q;
      var $591=((($590)+($589))|0);
      $q=$591;
      label = 73; break;
    case 73: 
      var $593=$n0;
      var $594=$_mask22;
      var $595=$d0;
      var $596=$594 & $595;
      var $597=((($593)+($596))|0);
      $__x46=$597;
      var $598=$n1;
      var $599=$_mask22;
      var $600=$d1;
      var $601=$599 & $600;
      var $602=((($598)+($601))|0);
      var $603=$__x46;
      var $604=$n0;
      var $605=(($603)>>>0) < (($604)>>>0);
      var $606=(($605)&1);
      var $607=((($602)+($606))|0);
      $n1=$607;
      var $608=$__x46;
      $n0=$608;
      label = 74; break;
    case 74: 
      var $610=$n1;
      var $611=$d1;
      var $612=(($610)>>>0) >= (($611)>>>0);
      if ($612) { label = 75; break; } else { label = 81; break; }
    case 75: 
      var $614=$n1;
      var $615=$d1;
      var $616=(($614)>>>0) > (($615)>>>0);
      if ($616) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $618=$n0;
      var $619=$d0;
      var $620=(($618)>>>0) >= (($619)>>>0);
      if ($620) { label = 77; break; } else { label = 80; break; }
    case 77: 
      var $622=$q;
      var $623=((($622)+(1))|0);
      $q=$623;
      label = 78; break;
    case 78: 
      var $625=$n0;
      var $626=$d0;
      var $627=((($625)-($626))|0);
      $__x47=$627;
      var $628=$n1;
      var $629=$d1;
      var $630=((($628)-($629))|0);
      var $631=$n0;
      var $632=$d0;
      var $633=(($631)>>>0) < (($632)>>>0);
      var $634=(($633)&1);
      var $635=((($630)-($634))|0);
      $n1=$635;
      var $636=$__x47;
      $n0=$636;
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $641=$3;
      var $642=$6;
      var $643=(((-$642))|0);
      var $644=(($641+($643<<2))|0);
      var $645=$5;
      var $646=$6;
      var $647=$q;
      var $648=___gmpn_submul_1($644, $645, $646, $647);
      $cy=$648;
      var $649=$n0;
      var $650=$cy;
      var $651=(($649)>>>0) < (($650)>>>0);
      var $652=(($651)&1);
      $cy1=$652;
      var $653=$n0;
      var $654=$cy;
      var $655=((($653)-($654))|0);
      $n0=$655;
      var $656=$n1;
      var $657=$cy1;
      var $658=(($656)>>>0) < (($657)>>>0);
      var $659=(($658)&1);
      $cy=$659;
      var $660=$cy1;
      var $661=$n1;
      var $662=((($661)-($660))|0);
      $n1=$662;
      var $663=$n0;
      var $664=$3;
      var $665=(($664)|0);
      HEAP32[(($665)>>2)]=$663;
      var $666=$cy;
      var $667=(($666)|0)!=0;
      if ($667) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $669=$d1;
      var $670=$3;
      var $671=$6;
      var $672=(((-$671))|0);
      var $673=(($670+($672<<2))|0);
      var $674=$3;
      var $675=$6;
      var $676=(((-$675))|0);
      var $677=(($674+($676<<2))|0);
      var $678=$5;
      var $679=$6;
      var $680=((($679)+(1))|0);
      var $681=___gmpn_add_n($673, $677, $678, $680);
      var $682=((($669)+($681))|0);
      var $683=$n1;
      var $684=((($683)+($682))|0);
      $n1=$684;
      var $685=$q;
      var $686=((($685)-(1))|0);
      $q=$686;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $689=$q;
      var $690=$2;
      var $691=((($690)-(4))|0);
      $2=$691;
      HEAP32[(($691)>>2)]=$689;
      var $692=$6;
      var $693=((($692)-(1))|0);
      $6=$693;
      var $694=$5;
      var $695=(($694+4)|0);
      $5=$695;
      label = 86; break;
    case 86: 
      var $697=$i;
      var $698=((($697)-(1))|0);
      $i=$698;
      label = 49; break;
    case 87: 
      var $700=$3;
      var $701=((($700)-(4))|0);
      $3=$701;
      var $702=$n1;
      var $703=$d1;
      var $704=$flag;
      var $705=$703 & $704;
      var $706=(($702)>>>0) >= (($705)>>>0);
      if ($706) { label = 88; break; } else { label = 96; break; }
    case 88: 
      $q=-1;
      var $708=$3;
      var $709=$5;
      var $710=$q;
      var $711=___gmpn_submul_1($708, $709, 2, $710);
      $cy=$711;
      var $712=$n1;
      var $713=$cy;
      var $714=(($712)|0)!=(($713)|0);
      if ($714) { label = 89; break; } else { label = 95; break; }
    case 89: 
      var $716=$n1;
      var $717=$cy;
      var $718=$flag;
      var $719=$717 & $718;
      var $720=(($716)>>>0) < (($719)>>>0);
      if ($720) { label = 90; break; } else { label = 93; break; }
    case 90: 
      var $722=$q;
      var $723=((($722)-(1))|0);
      $q=$723;
      label = 91; break;
    case 91: 
      var $725=$3;
      var $726=(($725)|0);
      var $727=HEAP32[(($726)>>2)];
      var $728=$5;
      var $729=(($728)|0);
      var $730=HEAP32[(($729)>>2)];
      var $731=((($727)+($730))|0);
      $__x48=$731;
      var $732=$3;
      var $733=(($732+4)|0);
      var $734=HEAP32[(($733)>>2)];
      var $735=$5;
      var $736=(($735+4)|0);
      var $737=HEAP32[(($736)>>2)];
      var $738=((($734)+($737))|0);
      var $739=$__x48;
      var $740=$3;
      var $741=(($740)|0);
      var $742=HEAP32[(($741)>>2)];
      var $743=(($739)>>>0) < (($742)>>>0);
      var $744=(($743)&1);
      var $745=((($738)+($744))|0);
      var $746=$3;
      var $747=(($746+4)|0);
      HEAP32[(($747)>>2)]=$745;
      var $748=$__x48;
      var $749=$3;
      var $750=(($749)|0);
      HEAP32[(($750)>>2)]=$748;
      label = 92; break;
    case 92: 
      label = 94; break;
    case 93: 
      $flag=0;
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $755=$3;
      var $756=(($755+4)|0);
      var $757=HEAP32[(($756)>>2)];
      $n1=$757;
      label = 122; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      var $761=$n1;
      $__u61=$761;
      var $762=$7;
      $__v62=$762;
      var $763=$__u61;
      var $764=$763 & 65535;
      $__ul57=$764;
      var $765=$__u61;
      var $766=$765 >>> 16;
      $__uh59=$766;
      var $767=$__v62;
      var $768=$767 & 65535;
      $__vl58=$768;
      var $769=$__v62;
      var $770=$769 >>> 16;
      $__vh60=$770;
      var $771=$__ul57;
      var $772=$__vl58;
      var $773=Math.imul($771,$772);
      $__x053=$773;
      var $774=$__ul57;
      var $775=$__vh60;
      var $776=Math.imul($774,$775);
      $__x154=$776;
      var $777=$__uh59;
      var $778=$__vl58;
      var $779=Math.imul($777,$778);
      $__x255=$779;
      var $780=$__uh59;
      var $781=$__vh60;
      var $782=Math.imul($780,$781);
      $__x356=$782;
      var $783=$__x053;
      var $784=$783 >>> 16;
      var $785=$__x154;
      var $786=((($785)+($784))|0);
      $__x154=$786;
      var $787=$__x255;
      var $788=$__x154;
      var $789=((($788)+($787))|0);
      $__x154=$789;
      var $790=$__x154;
      var $791=$__x255;
      var $792=(($790)>>>0) < (($791)>>>0);
      if ($792) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $794=$__x356;
      var $795=((($794)+(65536))|0);
      $__x356=$795;
      label = 100; break;
    case 100: 
      var $797=$__x356;
      var $798=$__x154;
      var $799=$798 >>> 16;
      var $800=((($797)+($799))|0);
      $q=$800;
      var $801=$__x154;
      var $802=$801 << 16;
      var $803=$__x053;
      var $804=$803 & 65535;
      var $805=((($802)+($804))|0);
      $_q049=$805;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $808=$_q049;
      var $809=$3;
      var $810=(($809+4)|0);
      var $811=HEAP32[(($810)>>2)];
      var $812=((($808)+($811))|0);
      $__x63=$812;
      var $813=$q;
      var $814=$n1;
      var $815=((($813)+($814))|0);
      var $816=$__x63;
      var $817=$_q049;
      var $818=(($816)>>>0) < (($817)>>>0);
      var $819=(($818)&1);
      var $820=((($815)+($819))|0);
      $q=$820;
      var $821=$__x63;
      $_q049=$821;
      label = 103; break;
    case 103: 
      var $823=$3;
      var $824=(($823+4)|0);
      var $825=HEAP32[(($824)>>2)];
      var $826=$d1;
      var $827=$q;
      var $828=Math.imul($826,$827);
      var $829=((($825)-($828))|0);
      $n1=$829;
      var $830=$3;
      var $831=(($830)|0);
      var $832=HEAP32[(($831)>>2)];
      $n0=$832;
      label = 104; break;
    case 104: 
      var $834=$n0;
      var $835=$d0;
      var $836=((($834)-($835))|0);
      $__x64=$836;
      var $837=$n1;
      var $838=$d1;
      var $839=((($837)-($838))|0);
      var $840=$n0;
      var $841=$d0;
      var $842=(($840)>>>0) < (($841)>>>0);
      var $843=(($842)&1);
      var $844=((($839)-($843))|0);
      $n1=$844;
      var $845=$__x64;
      $n0=$845;
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $848=$d0;
      $__u73=$848;
      var $849=$q;
      $__v74=$849;
      var $850=$__u73;
      var $851=$850 & 65535;
      $__ul69=$851;
      var $852=$__u73;
      var $853=$852 >>> 16;
      $__uh71=$853;
      var $854=$__v74;
      var $855=$854 & 65535;
      $__vl70=$855;
      var $856=$__v74;
      var $857=$856 >>> 16;
      $__vh72=$857;
      var $858=$__ul69;
      var $859=$__vl70;
      var $860=Math.imul($858,$859);
      $__x065=$860;
      var $861=$__ul69;
      var $862=$__vh72;
      var $863=Math.imul($861,$862);
      $__x166=$863;
      var $864=$__uh71;
      var $865=$__vl70;
      var $866=Math.imul($864,$865);
      $__x267=$866;
      var $867=$__uh71;
      var $868=$__vh72;
      var $869=Math.imul($867,$868);
      $__x368=$869;
      var $870=$__x065;
      var $871=$870 >>> 16;
      var $872=$__x166;
      var $873=((($872)+($871))|0);
      $__x166=$873;
      var $874=$__x267;
      var $875=$__x166;
      var $876=((($875)+($874))|0);
      $__x166=$876;
      var $877=$__x166;
      var $878=$__x267;
      var $879=(($877)>>>0) < (($878)>>>0);
      if ($879) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $881=$__x368;
      var $882=((($881)+(65536))|0);
      $__x368=$882;
      label = 108; break;
    case 108: 
      var $884=$__x368;
      var $885=$__x166;
      var $886=$885 >>> 16;
      var $887=((($884)+($886))|0);
      $_t150=$887;
      var $888=$__x166;
      var $889=$888 << 16;
      var $890=$__x065;
      var $891=$890 & 65535;
      var $892=((($889)+($891))|0);
      $_t051=$892;
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $895=$n0;
      var $896=$_t051;
      var $897=((($895)-($896))|0);
      $__x75=$897;
      var $898=$n1;
      var $899=$_t150;
      var $900=((($898)-($899))|0);
      var $901=$n0;
      var $902=$_t051;
      var $903=(($901)>>>0) < (($902)>>>0);
      var $904=(($903)&1);
      var $905=((($900)-($904))|0);
      $n1=$905;
      var $906=$__x75;
      $n0=$906;
      label = 111; break;
    case 111: 
      var $908=$q;
      var $909=((($908)+(1))|0);
      $q=$909;
      var $910=$n1;
      var $911=$_q049;
      var $912=(($910)>>>0) >= (($911)>>>0);
      var $913=(($912)&1);
      var $914=(((-$913))|0);
      $_mask52=$914;
      var $915=$_mask52;
      var $916=$q;
      var $917=((($916)+($915))|0);
      $q=$917;
      label = 112; break;
    case 112: 
      var $919=$n0;
      var $920=$_mask52;
      var $921=$d0;
      var $922=$920 & $921;
      var $923=((($919)+($922))|0);
      $__x76=$923;
      var $924=$n1;
      var $925=$_mask52;
      var $926=$d1;
      var $927=$925 & $926;
      var $928=((($924)+($927))|0);
      var $929=$__x76;
      var $930=$n0;
      var $931=(($929)>>>0) < (($930)>>>0);
      var $932=(($931)&1);
      var $933=((($928)+($932))|0);
      $n1=$933;
      var $934=$__x76;
      $n0=$934;
      label = 113; break;
    case 113: 
      var $936=$n1;
      var $937=$d1;
      var $938=(($936)>>>0) >= (($937)>>>0);
      if ($938) { label = 114; break; } else { label = 120; break; }
    case 114: 
      var $940=$n1;
      var $941=$d1;
      var $942=(($940)>>>0) > (($941)>>>0);
      if ($942) { label = 116; break; } else { label = 115; break; }
    case 115: 
      var $944=$n0;
      var $945=$d0;
      var $946=(($944)>>>0) >= (($945)>>>0);
      if ($946) { label = 116; break; } else { label = 119; break; }
    case 116: 
      var $948=$q;
      var $949=((($948)+(1))|0);
      $q=$949;
      label = 117; break;
    case 117: 
      var $951=$n0;
      var $952=$d0;
      var $953=((($951)-($952))|0);
      $__x77=$953;
      var $954=$n1;
      var $955=$d1;
      var $956=((($954)-($955))|0);
      var $957=$n0;
      var $958=$d0;
      var $959=(($957)>>>0) < (($958)>>>0);
      var $960=(($959)&1);
      var $961=((($956)-($960))|0);
      $n1=$961;
      var $962=$__x77;
      $n0=$962;
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      var $967=$n0;
      var $968=$3;
      var $969=(($968)|0);
      HEAP32[(($969)>>2)]=$967;
      var $970=$n1;
      var $971=$3;
      var $972=(($971+4)|0);
      HEAP32[(($972)>>2)]=$970;
      label = 122; break;
    case 122: 
      var $974=$q;
      var $975=$2;
      var $976=((($975)-(4))|0);
      $2=$976;
      HEAP32[(($976)>>2)]=$974;
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $979=$3;
      var $980=(($979+4)|0);
      var $981=HEAP32[(($980)>>2)];
      var $982=$n1;
      var $983=(($981)|0)==(($982)|0);
      if ($983) { label = 126; break; } else { label = 125; break; }
    case 125: 
      ___gmp_assert_fail(((5243808)|0), 187, ((5243904)|0));
      throw "Reached an unreachable!"
    case 126: 
      label = 127; break;
    case 127: 
      var $987=$3;
      var $988=(($987+8)|0);
      $3=$988;
      var $989=$dn_orig;
      $6=$989;
      var $990=$n1;
      var $991=$6;
      var $992=$flag;
      var $993=$991 & $992;
      var $994=(($990)>>>0) < (($993)>>>0);
      if ($994) { label = 128; break; } else { label = 165; break; }
    case 128: 
      var $996=$n1;
      $x=$996;
      var $997=$6;
      var $998=(($997)|0) > 2;
      if ($998) { label = 129; break; } else { label = 144; break; }
    case 129: 
      var $1000=$dp_orig;
      $5=$1000;
      var $1001=$qn;
      var $1002=((($1001)+(1))|0);
      var $1003=$6;
      var $1004=(($1002)|0) < (($1003)|0);
      if ($1004) { label = 130; break; } else { label = 131; break; }
    case 130: 
      var $1006=$6;
      var $1007=$qn;
      var $1008=((($1007)+(1))|0);
      var $1009=((($1006)-($1008))|0);
      var $1010=$5;
      var $1011=(($1010+($1009<<2))|0);
      $5=$1011;
      var $1012=$qn;
      var $1013=((($1012)+(1))|0);
      $6=$1013;
      label = 131; break;
    case 131: 
      var $1015=$3;
      var $1016=((($1015)-(8))|0);
      var $1017=HEAP32[(($1016)>>2)];
      $y=$1017;
      var $1018=$6;
      var $1019=((($1018)-(3))|0);
      $i=$1019;
      label = 132; break;
    case 132: 
      var $1021=$i;
      var $1022=(($1021)|0) >= 0;
      if ($1022) { label = 133; break; } else { label = 143; break; }
    case 133: 
      var $1024=$i;
      var $1025=$2;
      var $1026=(($1025+($1024<<2))|0);
      var $1027=HEAP32[(($1026)>>2)];
      $q78=$1027;
      var $1028=$3;
      var $1029=$6;
      var $1030=$i;
      var $1031=((($1029)-($1030))|0);
      var $1032=(((-$1031))|0);
      var $1033=(($1028+($1032<<2))|0);
      var $1034=$5;
      var $1035=$6;
      var $1036=$i;
      var $1037=((($1035)-($1036))|0);
      var $1038=((($1037)-(2))|0);
      var $1039=$q78;
      var $1040=___gmpn_submul_1($1033, $1034, $1038, $1039);
      $cy=$1040;
      var $1041=$y;
      var $1042=$cy;
      var $1043=(($1041)>>>0) < (($1042)>>>0);
      if ($1043) { label = 134; break; } else { label = 141; break; }
    case 134: 
      var $1045=$x;
      var $1046=(($1045)|0)==0;
      if ($1046) { label = 135; break; } else { label = 140; break; }
    case 135: 
      var $1048=$2;
      var $1049=$2;
      var $1050=$qn;
      var $1051=___gmpn_sub_1($1048, $1049, $1050, 1);
      $cy=$1051;
      label = 136; break;
    case 136: 
      var $1053=$cy;
      var $1054=(($1053)|0)==0;
      if ($1054) { label = 138; break; } else { label = 137; break; }
    case 137: 
      ___gmp_assert_fail(((5243808)|0), 238, ((5243580)|0));
      throw "Reached an unreachable!"
    case 138: 
      label = 139; break;
    case 139: 
      var $1058=$qh;
      var $1059=$cy;
      var $1060=((($1058)-($1059))|0);
      $1=$1060;
      label = 166; break;
    case 140: 
      var $1062=$x;
      var $1063=((($1062)-(1))|0);
      $x=$1063;
      label = 141; break;
    case 141: 
      var $1065=$cy;
      var $1066=$y;
      var $1067=((($1066)-($1065))|0);
      $y=$1067;
      label = 142; break;
    case 142: 
      var $1069=$i;
      var $1070=((($1069)-(1))|0);
      $i=$1070;
      label = 132; break;
    case 143: 
      var $1072=$y;
      var $1073=$3;
      var $1074=((($1073)-(8))|0);
      HEAP32[(($1074)>>2)]=$1072;
      label = 144; break;
    case 144: 
      var $1076=$dn_orig;
      $6=$1076;
      var $1077=$qn;
      var $1078=((($1077)+(1))|0);
      var $1079=$6;
      var $1080=(($1078)|0) < (($1079)|0);
      if ($1080) { label = 145; break; } else { label = 164; break; }
    case 145: 
      var $1082=$dp_orig;
      $5=$1082;
      var $1083=$np_orig;
      $3=$1083;
      var $1084=$qh;
      var $1085=(($1084)|0)!=0;
      if ($1085) { label = 146; break; } else { label = 153; break; }
    case 146: 
      var $1087=$3;
      var $1088=$qn;
      var $1089=(($1087+($1088<<2))|0);
      var $1090=$3;
      var $1091=$qn;
      var $1092=(($1090+($1091<<2))|0);
      var $1093=$5;
      var $1094=$6;
      var $1095=$qn;
      var $1096=((($1095)+(1))|0);
      var $1097=((($1094)-($1096))|0);
      var $1098=___gmpn_sub_n($1089, $1092, $1093, $1097);
      $cy=$1098;
      var $1099=$cy;
      var $1100=(($1099)|0)!=0;
      if ($1100) { label = 147; break; } else { label = 152; break; }
    case 147: 
      var $1102=$x;
      var $1103=(($1102)|0)==0;
      if ($1103) { label = 148; break; } else { label = 151; break; }
    case 148: 
      var $1105=$qn;
      var $1106=(($1105)|0)!=0;
      if ($1106) { label = 149; break; } else { label = 150; break; }
    case 149: 
      var $1108=$2;
      var $1109=$2;
      var $1110=$qn;
      var $1111=___gmpn_sub_1($1108, $1109, $1110, 1);
      $cy=$1111;
      label = 150; break;
    case 150: 
      var $1113=$qh;
      var $1114=$cy;
      var $1115=((($1113)-($1114))|0);
      $1=$1115;
      label = 166; break;
    case 151: 
      var $1117=$x;
      var $1118=((($1117)-(1))|0);
      $x=$1118;
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      var $1121=$qn;
      var $1122=(($1121)|0)==0;
      if ($1122) { label = 154; break; } else { label = 155; break; }
    case 154: 
      var $1124=$qh;
      $1=$1124;
      label = 166; break;
    case 155: 
      var $1126=$6;
      var $1127=$qn;
      var $1128=((($1126)-($1127))|0);
      var $1129=((($1128)-(2))|0);
      $i=$1129;
      label = 156; break;
    case 156: 
      var $1131=$i;
      var $1132=(($1131)|0) >= 0;
      if ($1132) { label = 157; break; } else { label = 163; break; }
    case 157: 
      var $1134=$3;
      var $1135=$i;
      var $1136=(($1134+($1135<<2))|0);
      var $1137=$2;
      var $1138=$qn;
      var $1139=$i;
      var $1140=$5;
      var $1141=(($1140+($1139<<2))|0);
      var $1142=HEAP32[(($1141)>>2)];
      var $1143=___gmpn_submul_1($1136, $1137, $1138, $1142);
      $cy=$1143;
      var $1144=$3;
      var $1145=$qn;
      var $1146=(($1144+($1145<<2))|0);
      var $1147=$i;
      var $1148=(($1146+($1147<<2))|0);
      var $1149=$3;
      var $1150=$qn;
      var $1151=(($1149+($1150<<2))|0);
      var $1152=$i;
      var $1153=(($1151+($1152<<2))|0);
      var $1154=$6;
      var $1155=$qn;
      var $1156=((($1154)-($1155))|0);
      var $1157=$i;
      var $1158=((($1156)-($1157))|0);
      var $1159=((($1158)-(1))|0);
      var $1160=$cy;
      var $1161=___gmpn_sub_1($1148, $1153, $1159, $1160);
      $cy=$1161;
      var $1162=$cy;
      var $1163=(($1162)|0)!=0;
      if ($1163) { label = 158; break; } else { label = 161; break; }
    case 158: 
      var $1165=$x;
      var $1166=(($1165)|0)==0;
      if ($1166) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $1168=$2;
      var $1169=$2;
      var $1170=$qn;
      var $1171=___gmpn_sub_1($1168, $1169, $1170, 1);
      $cy=$1171;
      var $1172=$qh;
      $1=$1172;
      label = 166; break;
    case 160: 
      var $1174=$x;
      var $1175=((($1174)-(1))|0);
      $x=$1175;
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      var $1178=$i;
      var $1179=((($1178)-(1))|0);
      $i=$1179;
      label = 156; break;
    case 163: 
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      var $1183=$qh;
      $1=$1183;
      label = 166; break;
    case 166: 
      var $1185=$1;

      return $1185;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sbpi1_div_q["X"]=1;

function ___gmpn_sbpi1_divappr_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qh;
      var $qn;
      var $i;
      var $n1;
      var $n0;
      var $d1;
      var $d0;
      var $cy;
      var $cy1;
      var $q;
      var $flag;
      var $_q0;
      var $_t1;
      var $_t0;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__x4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      var $__x15;
      var $__x17;
      var $__x18;
      var $_q019;
      var $_t120;
      var $_t021;
      var $_mask22;
      var $__x023;
      var $__x124;
      var $__x225;
      var $__x326;
      var $__ul27;
      var $__vl28;
      var $__uh29;
      var $__vh30;
      var $__u31;
      var $__v32;
      var $__x33;
      var $__x34;
      var $__x035;
      var $__x136;
      var $__x237;
      var $__x338;
      var $__ul39;
      var $__vl40;
      var $__uh41;
      var $__vh42;
      var $__u43;
      var $__v44;
      var $__x45;
      var $__x46;
      var $__x47;
      var $__x48;
      var $_q049;
      var $_t150;
      var $_t051;
      var $_mask52;
      var $__x053;
      var $__x154;
      var $__x255;
      var $__x356;
      var $__ul57;
      var $__vl58;
      var $__uh59;
      var $__vh60;
      var $__u61;
      var $__v62;
      var $__x63;
      var $__x64;
      var $__x065;
      var $__x166;
      var $__x267;
      var $__x368;
      var $__ul69;
      var $__vl70;
      var $__uh71;
      var $__vh72;
      var $__u73;
      var $__v74;
      var $__x75;
      var $__x76;
      var $__x77;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+($13<<2))|0);
      $2=$15;
      var $16=$3;
      var $17=$5;
      var $18=((($16)-($17))|0);
      $qn=$18;
      var $19=$qn;
      var $20=((($19)+(1))|0);
      var $21=$5;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $24=$5;
      var $25=$qn;
      var $26=((($25)+(1))|0);
      var $27=((($24)-($26))|0);
      var $28=$4;
      var $29=(($28+($27<<2))|0);
      $4=$29;
      var $30=$qn;
      var $31=((($30)+(1))|0);
      $5=$31;
      label = 10; break;
    case 10: 
      var $33=$2;
      var $34=$5;
      var $35=(((-$34))|0);
      var $36=(($33+($35<<2))|0);
      var $37=$4;
      var $38=$5;
      var $39=___gmpn_cmp($36, $37, $38);
      var $40=(($39)|0) >= 0;
      var $41=(($40)&1);
      $qh=$41;
      var $42=$qh;
      var $43=(($42)|0)!=0;
      if ($43) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $45=$2;
      var $46=$5;
      var $47=(((-$46))|0);
      var $48=(($45+($47<<2))|0);
      var $49=$2;
      var $50=$5;
      var $51=(((-$50))|0);
      var $52=(($49+($51<<2))|0);
      var $53=$4;
      var $54=$5;
      var $55=___gmpn_sub_n($48, $52, $53, $54);
      label = 12; break;
    case 12: 
      var $57=$qn;
      var $58=$1;
      var $59=(($58+($57<<2))|0);
      $1=$59;
      var $60=$5;
      var $61=((($60)-(2))|0);
      $5=$61;
      var $62=$5;
      var $63=((($62)+(1))|0);
      var $64=$4;
      var $65=(($64+($63<<2))|0);
      var $66=HEAP32[(($65)>>2)];
      $d1=$66;
      var $67=$5;
      var $68=(($67)|0);
      var $69=$4;
      var $70=(($69+($68<<2))|0);
      var $71=HEAP32[(($70)>>2)];
      $d0=$71;
      var $72=$2;
      var $73=((($72)-(8))|0);
      $2=$73;
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      $n1=$76;
      var $77=$qn;
      var $78=$5;
      var $79=((($78)+(2))|0);
      var $80=((($77)-($79))|0);
      $i=$80;
      label = 13; break;
    case 13: 
      var $82=$i;
      var $83=(($82)|0) >= 0;
      if ($83) { label = 14; break; } else { label = 47; break; }
    case 14: 
      var $85=$2;
      var $86=((($85)-(4))|0);
      $2=$86;
      var $87=$n1;
      var $88=$d1;
      var $89=(($87)|0)==(($88)|0);
      if ($89) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $91=$2;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$d0;
      var $95=(($93)|0)==(($94)|0);
      if ($95) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $q=-1;
      var $97=$2;
      var $98=$5;
      var $99=(((-$98))|0);
      var $100=(($97+($99<<2))|0);
      var $101=$4;
      var $102=$5;
      var $103=((($102)+(2))|0);
      var $104=$q;
      var $105=___gmpn_submul_1($100, $101, $103, $104);
      var $106=$2;
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      $n1=$108;
      label = 45; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $112=$n1;
      $__u=$112;
      var $113=$6;
      $__v=$113;
      var $114=$__u;
      var $115=$114 & 65535;
      $__ul=$115;
      var $116=$__u;
      var $117=$116 >>> 16;
      $__uh=$117;
      var $118=$__v;
      var $119=$118 & 65535;
      $__vl=$119;
      var $120=$__v;
      var $121=$120 >>> 16;
      $__vh=$121;
      var $122=$__ul;
      var $123=$__vl;
      var $124=Math.imul($122,$123);
      $__x0=$124;
      var $125=$__ul;
      var $126=$__vh;
      var $127=Math.imul($125,$126);
      $__x1=$127;
      var $128=$__uh;
      var $129=$__vl;
      var $130=Math.imul($128,$129);
      $__x2=$130;
      var $131=$__uh;
      var $132=$__vh;
      var $133=Math.imul($131,$132);
      $__x3=$133;
      var $134=$__x0;
      var $135=$134 >>> 16;
      var $136=$__x1;
      var $137=((($136)+($135))|0);
      $__x1=$137;
      var $138=$__x2;
      var $139=$__x1;
      var $140=((($139)+($138))|0);
      $__x1=$140;
      var $141=$__x1;
      var $142=$__x2;
      var $143=(($141)>>>0) < (($142)>>>0);
      if ($143) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $145=$__x3;
      var $146=((($145)+(65536))|0);
      $__x3=$146;
      label = 21; break;
    case 21: 
      var $148=$__x3;
      var $149=$__x1;
      var $150=$149 >>> 16;
      var $151=((($148)+($150))|0);
      $q=$151;
      var $152=$__x1;
      var $153=$152 << 16;
      var $154=$__x0;
      var $155=$154 & 65535;
      var $156=((($153)+($155))|0);
      $_q0=$156;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $159=$_q0;
      var $160=$2;
      var $161=(($160+4)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=((($159)+($162))|0);
      $__x=$163;
      var $164=$q;
      var $165=$n1;
      var $166=((($164)+($165))|0);
      var $167=$__x;
      var $168=$_q0;
      var $169=(($167)>>>0) < (($168)>>>0);
      var $170=(($169)&1);
      var $171=((($166)+($170))|0);
      $q=$171;
      var $172=$__x;
      $_q0=$172;
      label = 24; break;
    case 24: 
      var $174=$2;
      var $175=(($174+4)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=$d1;
      var $178=$q;
      var $179=Math.imul($177,$178);
      var $180=((($176)-($179))|0);
      $n1=$180;
      var $181=$2;
      var $182=(($181)|0);
      var $183=HEAP32[(($182)>>2)];
      $n0=$183;
      label = 25; break;
    case 25: 
      var $185=$n0;
      var $186=$d0;
      var $187=((($185)-($186))|0);
      $__x4=$187;
      var $188=$n1;
      var $189=$d1;
      var $190=((($188)-($189))|0);
      var $191=$n0;
      var $192=$d0;
      var $193=(($191)>>>0) < (($192)>>>0);
      var $194=(($193)&1);
      var $195=((($190)-($194))|0);
      $n1=$195;
      var $196=$__x4;
      $n0=$196;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $199=$d0;
      $__u13=$199;
      var $200=$q;
      $__v14=$200;
      var $201=$__u13;
      var $202=$201 & 65535;
      $__ul9=$202;
      var $203=$__u13;
      var $204=$203 >>> 16;
      $__uh11=$204;
      var $205=$__v14;
      var $206=$205 & 65535;
      $__vl10=$206;
      var $207=$__v14;
      var $208=$207 >>> 16;
      $__vh12=$208;
      var $209=$__ul9;
      var $210=$__vl10;
      var $211=Math.imul($209,$210);
      $__x05=$211;
      var $212=$__ul9;
      var $213=$__vh12;
      var $214=Math.imul($212,$213);
      $__x16=$214;
      var $215=$__uh11;
      var $216=$__vl10;
      var $217=Math.imul($215,$216);
      $__x27=$217;
      var $218=$__uh11;
      var $219=$__vh12;
      var $220=Math.imul($218,$219);
      $__x38=$220;
      var $221=$__x05;
      var $222=$221 >>> 16;
      var $223=$__x16;
      var $224=((($223)+($222))|0);
      $__x16=$224;
      var $225=$__x27;
      var $226=$__x16;
      var $227=((($226)+($225))|0);
      $__x16=$227;
      var $228=$__x16;
      var $229=$__x27;
      var $230=(($228)>>>0) < (($229)>>>0);
      if ($230) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $232=$__x38;
      var $233=((($232)+(65536))|0);
      $__x38=$233;
      label = 29; break;
    case 29: 
      var $235=$__x38;
      var $236=$__x16;
      var $237=$236 >>> 16;
      var $238=((($235)+($237))|0);
      $_t1=$238;
      var $239=$__x16;
      var $240=$239 << 16;
      var $241=$__x05;
      var $242=$241 & 65535;
      var $243=((($240)+($242))|0);
      $_t0=$243;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $246=$n0;
      var $247=$_t0;
      var $248=((($246)-($247))|0);
      $__x15=$248;
      var $249=$n1;
      var $250=$_t1;
      var $251=((($249)-($250))|0);
      var $252=$n0;
      var $253=$_t0;
      var $254=(($252)>>>0) < (($253)>>>0);
      var $255=(($254)&1);
      var $256=((($251)-($255))|0);
      $n1=$256;
      var $257=$__x15;
      $n0=$257;
      label = 32; break;
    case 32: 
      var $259=$q;
      var $260=((($259)+(1))|0);
      $q=$260;
      var $261=$n1;
      var $262=$_q0;
      var $263=(($261)>>>0) >= (($262)>>>0);
      var $264=(($263)&1);
      var $265=(((-$264))|0);
      $_mask=$265;
      var $266=$_mask;
      var $267=$q;
      var $268=((($267)+($266))|0);
      $q=$268;
      label = 33; break;
    case 33: 
      var $270=$n0;
      var $271=$_mask;
      var $272=$d0;
      var $273=$271 & $272;
      var $274=((($270)+($273))|0);
      $__x17=$274;
      var $275=$n1;
      var $276=$_mask;
      var $277=$d1;
      var $278=$276 & $277;
      var $279=((($275)+($278))|0);
      var $280=$__x17;
      var $281=$n0;
      var $282=(($280)>>>0) < (($281)>>>0);
      var $283=(($282)&1);
      var $284=((($279)+($283))|0);
      $n1=$284;
      var $285=$__x17;
      $n0=$285;
      label = 34; break;
    case 34: 
      var $287=$n1;
      var $288=$d1;
      var $289=(($287)>>>0) >= (($288)>>>0);
      if ($289) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $291=$n1;
      var $292=$d1;
      var $293=(($291)>>>0) > (($292)>>>0);
      if ($293) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $295=$n0;
      var $296=$d0;
      var $297=(($295)>>>0) >= (($296)>>>0);
      if ($297) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $299=$q;
      var $300=((($299)+(1))|0);
      $q=$300;
      label = 38; break;
    case 38: 
      var $302=$n0;
      var $303=$d0;
      var $304=((($302)-($303))|0);
      $__x18=$304;
      var $305=$n1;
      var $306=$d1;
      var $307=((($305)-($306))|0);
      var $308=$n0;
      var $309=$d0;
      var $310=(($308)>>>0) < (($309)>>>0);
      var $311=(($310)&1);
      var $312=((($307)-($311))|0);
      $n1=$312;
      var $313=$__x18;
      $n0=$313;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $318=$2;
      var $319=$5;
      var $320=(((-$319))|0);
      var $321=(($318+($320<<2))|0);
      var $322=$4;
      var $323=$5;
      var $324=$q;
      var $325=___gmpn_submul_1($321, $322, $323, $324);
      $cy=$325;
      var $326=$n0;
      var $327=$cy;
      var $328=(($326)>>>0) < (($327)>>>0);
      var $329=(($328)&1);
      $cy1=$329;
      var $330=$n0;
      var $331=$cy;
      var $332=((($330)-($331))|0);
      $n0=$332;
      var $333=$n1;
      var $334=$cy1;
      var $335=(($333)>>>0) < (($334)>>>0);
      var $336=(($335)&1);
      $cy=$336;
      var $337=$cy1;
      var $338=$n1;
      var $339=((($338)-($337))|0);
      $n1=$339;
      var $340=$n0;
      var $341=$2;
      var $342=(($341)|0);
      HEAP32[(($342)>>2)]=$340;
      var $343=$cy;
      var $344=(($343)|0)!=0;
      if ($344) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $346=$d1;
      var $347=$2;
      var $348=$5;
      var $349=(((-$348))|0);
      var $350=(($347+($349<<2))|0);
      var $351=$2;
      var $352=$5;
      var $353=(((-$352))|0);
      var $354=(($351+($353<<2))|0);
      var $355=$4;
      var $356=$5;
      var $357=((($356)+(1))|0);
      var $358=___gmpn_add_n($350, $354, $355, $357);
      var $359=((($346)+($358))|0);
      var $360=$n1;
      var $361=((($360)+($359))|0);
      $n1=$361;
      var $362=$q;
      var $363=((($362)-(1))|0);
      $q=$363;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $366=$q;
      var $367=$1;
      var $368=((($367)-(4))|0);
      $1=$368;
      HEAP32[(($368)>>2)]=$366;
      label = 46; break;
    case 46: 
      var $370=$i;
      var $371=((($370)-(1))|0);
      $i=$371;
      label = 13; break;
    case 47: 
      $flag=-1;
      var $373=$5;
      var $374=(($373)|0) >= 0;
      if ($374) { label = 48; break; } else { label = 123; break; }
    case 48: 
      var $376=$5;
      $i=$376;
      label = 49; break;
    case 49: 
      var $378=$i;
      var $379=(($378)|0) > 0;
      if ($379) { label = 50; break; } else { label = 87; break; }
    case 50: 
      var $381=$2;
      var $382=((($381)-(4))|0);
      $2=$382;
      var $383=$n1;
      var $384=$d1;
      var $385=$flag;
      var $386=$384 & $385;
      var $387=(($383)>>>0) >= (($386)>>>0);
      if ($387) { label = 51; break; } else { label = 57; break; }
    case 51: 
      $q=-1;
      var $389=$2;
      var $390=$5;
      var $391=(((-$390))|0);
      var $392=(($389+($391<<2))|0);
      var $393=$4;
      var $394=$5;
      var $395=((($394)+(2))|0);
      var $396=$q;
      var $397=___gmpn_submul_1($392, $393, $395, $396);
      $cy=$397;
      var $398=$n1;
      var $399=$cy;
      var $400=(($398)|0)!=(($399)|0);
      if ($400) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $402=$n1;
      var $403=$cy;
      var $404=$flag;
      var $405=$403 & $404;
      var $406=(($402)>>>0) < (($405)>>>0);
      if ($406) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $408=$q;
      var $409=((($408)-(1))|0);
      $q=$409;
      var $410=$2;
      var $411=$5;
      var $412=(((-$411))|0);
      var $413=(($410+($412<<2))|0);
      var $414=$2;
      var $415=$5;
      var $416=(((-$415))|0);
      var $417=(($414+($416<<2))|0);
      var $418=$4;
      var $419=$5;
      var $420=((($419)+(2))|0);
      var $421=___gmpn_add_n($413, $417, $418, $420);
      label = 55; break;
    case 54: 
      $flag=0;
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $425=$2;
      var $426=(($425+4)|0);
      var $427=HEAP32[(($426)>>2)];
      $n1=$427;
      label = 85; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $431=$n1;
      $__u31=$431;
      var $432=$6;
      $__v32=$432;
      var $433=$__u31;
      var $434=$433 & 65535;
      $__ul27=$434;
      var $435=$__u31;
      var $436=$435 >>> 16;
      $__uh29=$436;
      var $437=$__v32;
      var $438=$437 & 65535;
      $__vl28=$438;
      var $439=$__v32;
      var $440=$439 >>> 16;
      $__vh30=$440;
      var $441=$__ul27;
      var $442=$__vl28;
      var $443=Math.imul($441,$442);
      $__x023=$443;
      var $444=$__ul27;
      var $445=$__vh30;
      var $446=Math.imul($444,$445);
      $__x124=$446;
      var $447=$__uh29;
      var $448=$__vl28;
      var $449=Math.imul($447,$448);
      $__x225=$449;
      var $450=$__uh29;
      var $451=$__vh30;
      var $452=Math.imul($450,$451);
      $__x326=$452;
      var $453=$__x023;
      var $454=$453 >>> 16;
      var $455=$__x124;
      var $456=((($455)+($454))|0);
      $__x124=$456;
      var $457=$__x225;
      var $458=$__x124;
      var $459=((($458)+($457))|0);
      $__x124=$459;
      var $460=$__x124;
      var $461=$__x225;
      var $462=(($460)>>>0) < (($461)>>>0);
      if ($462) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $464=$__x326;
      var $465=((($464)+(65536))|0);
      $__x326=$465;
      label = 61; break;
    case 61: 
      var $467=$__x326;
      var $468=$__x124;
      var $469=$468 >>> 16;
      var $470=((($467)+($469))|0);
      $q=$470;
      var $471=$__x124;
      var $472=$471 << 16;
      var $473=$__x023;
      var $474=$473 & 65535;
      var $475=((($472)+($474))|0);
      $_q019=$475;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $478=$_q019;
      var $479=$2;
      var $480=(($479+4)|0);
      var $481=HEAP32[(($480)>>2)];
      var $482=((($478)+($481))|0);
      $__x33=$482;
      var $483=$q;
      var $484=$n1;
      var $485=((($483)+($484))|0);
      var $486=$__x33;
      var $487=$_q019;
      var $488=(($486)>>>0) < (($487)>>>0);
      var $489=(($488)&1);
      var $490=((($485)+($489))|0);
      $q=$490;
      var $491=$__x33;
      $_q019=$491;
      label = 64; break;
    case 64: 
      var $493=$2;
      var $494=(($493+4)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=$d1;
      var $497=$q;
      var $498=Math.imul($496,$497);
      var $499=((($495)-($498))|0);
      $n1=$499;
      var $500=$2;
      var $501=(($500)|0);
      var $502=HEAP32[(($501)>>2)];
      $n0=$502;
      label = 65; break;
    case 65: 
      var $504=$n0;
      var $505=$d0;
      var $506=((($504)-($505))|0);
      $__x34=$506;
      var $507=$n1;
      var $508=$d1;
      var $509=((($507)-($508))|0);
      var $510=$n0;
      var $511=$d0;
      var $512=(($510)>>>0) < (($511)>>>0);
      var $513=(($512)&1);
      var $514=((($509)-($513))|0);
      $n1=$514;
      var $515=$__x34;
      $n0=$515;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $518=$d0;
      $__u43=$518;
      var $519=$q;
      $__v44=$519;
      var $520=$__u43;
      var $521=$520 & 65535;
      $__ul39=$521;
      var $522=$__u43;
      var $523=$522 >>> 16;
      $__uh41=$523;
      var $524=$__v44;
      var $525=$524 & 65535;
      $__vl40=$525;
      var $526=$__v44;
      var $527=$526 >>> 16;
      $__vh42=$527;
      var $528=$__ul39;
      var $529=$__vl40;
      var $530=Math.imul($528,$529);
      $__x035=$530;
      var $531=$__ul39;
      var $532=$__vh42;
      var $533=Math.imul($531,$532);
      $__x136=$533;
      var $534=$__uh41;
      var $535=$__vl40;
      var $536=Math.imul($534,$535);
      $__x237=$536;
      var $537=$__uh41;
      var $538=$__vh42;
      var $539=Math.imul($537,$538);
      $__x338=$539;
      var $540=$__x035;
      var $541=$540 >>> 16;
      var $542=$__x136;
      var $543=((($542)+($541))|0);
      $__x136=$543;
      var $544=$__x237;
      var $545=$__x136;
      var $546=((($545)+($544))|0);
      $__x136=$546;
      var $547=$__x136;
      var $548=$__x237;
      var $549=(($547)>>>0) < (($548)>>>0);
      if ($549) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $551=$__x338;
      var $552=((($551)+(65536))|0);
      $__x338=$552;
      label = 69; break;
    case 69: 
      var $554=$__x338;
      var $555=$__x136;
      var $556=$555 >>> 16;
      var $557=((($554)+($556))|0);
      $_t120=$557;
      var $558=$__x136;
      var $559=$558 << 16;
      var $560=$__x035;
      var $561=$560 & 65535;
      var $562=((($559)+($561))|0);
      $_t021=$562;
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $565=$n0;
      var $566=$_t021;
      var $567=((($565)-($566))|0);
      $__x45=$567;
      var $568=$n1;
      var $569=$_t120;
      var $570=((($568)-($569))|0);
      var $571=$n0;
      var $572=$_t021;
      var $573=(($571)>>>0) < (($572)>>>0);
      var $574=(($573)&1);
      var $575=((($570)-($574))|0);
      $n1=$575;
      var $576=$__x45;
      $n0=$576;
      label = 72; break;
    case 72: 
      var $578=$q;
      var $579=((($578)+(1))|0);
      $q=$579;
      var $580=$n1;
      var $581=$_q019;
      var $582=(($580)>>>0) >= (($581)>>>0);
      var $583=(($582)&1);
      var $584=(((-$583))|0);
      $_mask22=$584;
      var $585=$_mask22;
      var $586=$q;
      var $587=((($586)+($585))|0);
      $q=$587;
      label = 73; break;
    case 73: 
      var $589=$n0;
      var $590=$_mask22;
      var $591=$d0;
      var $592=$590 & $591;
      var $593=((($589)+($592))|0);
      $__x46=$593;
      var $594=$n1;
      var $595=$_mask22;
      var $596=$d1;
      var $597=$595 & $596;
      var $598=((($594)+($597))|0);
      var $599=$__x46;
      var $600=$n0;
      var $601=(($599)>>>0) < (($600)>>>0);
      var $602=(($601)&1);
      var $603=((($598)+($602))|0);
      $n1=$603;
      var $604=$__x46;
      $n0=$604;
      label = 74; break;
    case 74: 
      var $606=$n1;
      var $607=$d1;
      var $608=(($606)>>>0) >= (($607)>>>0);
      if ($608) { label = 75; break; } else { label = 81; break; }
    case 75: 
      var $610=$n1;
      var $611=$d1;
      var $612=(($610)>>>0) > (($611)>>>0);
      if ($612) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $614=$n0;
      var $615=$d0;
      var $616=(($614)>>>0) >= (($615)>>>0);
      if ($616) { label = 77; break; } else { label = 80; break; }
    case 77: 
      var $618=$q;
      var $619=((($618)+(1))|0);
      $q=$619;
      label = 78; break;
    case 78: 
      var $621=$n0;
      var $622=$d0;
      var $623=((($621)-($622))|0);
      $__x47=$623;
      var $624=$n1;
      var $625=$d1;
      var $626=((($624)-($625))|0);
      var $627=$n0;
      var $628=$d0;
      var $629=(($627)>>>0) < (($628)>>>0);
      var $630=(($629)&1);
      var $631=((($626)-($630))|0);
      $n1=$631;
      var $632=$__x47;
      $n0=$632;
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $637=$2;
      var $638=$5;
      var $639=(((-$638))|0);
      var $640=(($637+($639<<2))|0);
      var $641=$4;
      var $642=$5;
      var $643=$q;
      var $644=___gmpn_submul_1($640, $641, $642, $643);
      $cy=$644;
      var $645=$n0;
      var $646=$cy;
      var $647=(($645)>>>0) < (($646)>>>0);
      var $648=(($647)&1);
      $cy1=$648;
      var $649=$n0;
      var $650=$cy;
      var $651=((($649)-($650))|0);
      $n0=$651;
      var $652=$n1;
      var $653=$cy1;
      var $654=(($652)>>>0) < (($653)>>>0);
      var $655=(($654)&1);
      $cy=$655;
      var $656=$cy1;
      var $657=$n1;
      var $658=((($657)-($656))|0);
      $n1=$658;
      var $659=$n0;
      var $660=$2;
      var $661=(($660)|0);
      HEAP32[(($661)>>2)]=$659;
      var $662=$cy;
      var $663=(($662)|0)!=0;
      if ($663) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $665=$d1;
      var $666=$2;
      var $667=$5;
      var $668=(((-$667))|0);
      var $669=(($666+($668<<2))|0);
      var $670=$2;
      var $671=$5;
      var $672=(((-$671))|0);
      var $673=(($670+($672<<2))|0);
      var $674=$4;
      var $675=$5;
      var $676=((($675)+(1))|0);
      var $677=___gmpn_add_n($669, $673, $674, $676);
      var $678=((($665)+($677))|0);
      var $679=$n1;
      var $680=((($679)+($678))|0);
      $n1=$680;
      var $681=$q;
      var $682=((($681)-(1))|0);
      $q=$682;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $685=$q;
      var $686=$1;
      var $687=((($686)-(4))|0);
      $1=$687;
      HEAP32[(($687)>>2)]=$685;
      var $688=$5;
      var $689=((($688)-(1))|0);
      $5=$689;
      var $690=$4;
      var $691=(($690+4)|0);
      $4=$691;
      label = 86; break;
    case 86: 
      var $693=$i;
      var $694=((($693)-(1))|0);
      $i=$694;
      label = 49; break;
    case 87: 
      var $696=$2;
      var $697=((($696)-(4))|0);
      $2=$697;
      var $698=$n1;
      var $699=$d1;
      var $700=$flag;
      var $701=$699 & $700;
      var $702=(($698)>>>0) >= (($701)>>>0);
      if ($702) { label = 88; break; } else { label = 96; break; }
    case 88: 
      $q=-1;
      var $704=$2;
      var $705=$4;
      var $706=$q;
      var $707=___gmpn_submul_1($704, $705, 2, $706);
      $cy=$707;
      var $708=$n1;
      var $709=$cy;
      var $710=(($708)|0)!=(($709)|0);
      if ($710) { label = 89; break; } else { label = 95; break; }
    case 89: 
      var $712=$n1;
      var $713=$cy;
      var $714=$flag;
      var $715=$713 & $714;
      var $716=(($712)>>>0) < (($715)>>>0);
      if ($716) { label = 90; break; } else { label = 93; break; }
    case 90: 
      var $718=$q;
      var $719=((($718)-(1))|0);
      $q=$719;
      label = 91; break;
    case 91: 
      var $721=$2;
      var $722=(($721)|0);
      var $723=HEAP32[(($722)>>2)];
      var $724=$4;
      var $725=(($724)|0);
      var $726=HEAP32[(($725)>>2)];
      var $727=((($723)+($726))|0);
      $__x48=$727;
      var $728=$2;
      var $729=(($728+4)|0);
      var $730=HEAP32[(($729)>>2)];
      var $731=$4;
      var $732=(($731+4)|0);
      var $733=HEAP32[(($732)>>2)];
      var $734=((($730)+($733))|0);
      var $735=$__x48;
      var $736=$2;
      var $737=(($736)|0);
      var $738=HEAP32[(($737)>>2)];
      var $739=(($735)>>>0) < (($738)>>>0);
      var $740=(($739)&1);
      var $741=((($734)+($740))|0);
      var $742=$2;
      var $743=(($742+4)|0);
      HEAP32[(($743)>>2)]=$741;
      var $744=$__x48;
      var $745=$2;
      var $746=(($745)|0);
      HEAP32[(($746)>>2)]=$744;
      label = 92; break;
    case 92: 
      label = 94; break;
    case 93: 
      $flag=0;
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $751=$2;
      var $752=(($751+4)|0);
      var $753=HEAP32[(($752)>>2)];
      $n1=$753;
      label = 122; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      var $757=$n1;
      $__u61=$757;
      var $758=$6;
      $__v62=$758;
      var $759=$__u61;
      var $760=$759 & 65535;
      $__ul57=$760;
      var $761=$__u61;
      var $762=$761 >>> 16;
      $__uh59=$762;
      var $763=$__v62;
      var $764=$763 & 65535;
      $__vl58=$764;
      var $765=$__v62;
      var $766=$765 >>> 16;
      $__vh60=$766;
      var $767=$__ul57;
      var $768=$__vl58;
      var $769=Math.imul($767,$768);
      $__x053=$769;
      var $770=$__ul57;
      var $771=$__vh60;
      var $772=Math.imul($770,$771);
      $__x154=$772;
      var $773=$__uh59;
      var $774=$__vl58;
      var $775=Math.imul($773,$774);
      $__x255=$775;
      var $776=$__uh59;
      var $777=$__vh60;
      var $778=Math.imul($776,$777);
      $__x356=$778;
      var $779=$__x053;
      var $780=$779 >>> 16;
      var $781=$__x154;
      var $782=((($781)+($780))|0);
      $__x154=$782;
      var $783=$__x255;
      var $784=$__x154;
      var $785=((($784)+($783))|0);
      $__x154=$785;
      var $786=$__x154;
      var $787=$__x255;
      var $788=(($786)>>>0) < (($787)>>>0);
      if ($788) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $790=$__x356;
      var $791=((($790)+(65536))|0);
      $__x356=$791;
      label = 100; break;
    case 100: 
      var $793=$__x356;
      var $794=$__x154;
      var $795=$794 >>> 16;
      var $796=((($793)+($795))|0);
      $q=$796;
      var $797=$__x154;
      var $798=$797 << 16;
      var $799=$__x053;
      var $800=$799 & 65535;
      var $801=((($798)+($800))|0);
      $_q049=$801;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $804=$_q049;
      var $805=$2;
      var $806=(($805+4)|0);
      var $807=HEAP32[(($806)>>2)];
      var $808=((($804)+($807))|0);
      $__x63=$808;
      var $809=$q;
      var $810=$n1;
      var $811=((($809)+($810))|0);
      var $812=$__x63;
      var $813=$_q049;
      var $814=(($812)>>>0) < (($813)>>>0);
      var $815=(($814)&1);
      var $816=((($811)+($815))|0);
      $q=$816;
      var $817=$__x63;
      $_q049=$817;
      label = 103; break;
    case 103: 
      var $819=$2;
      var $820=(($819+4)|0);
      var $821=HEAP32[(($820)>>2)];
      var $822=$d1;
      var $823=$q;
      var $824=Math.imul($822,$823);
      var $825=((($821)-($824))|0);
      $n1=$825;
      var $826=$2;
      var $827=(($826)|0);
      var $828=HEAP32[(($827)>>2)];
      $n0=$828;
      label = 104; break;
    case 104: 
      var $830=$n0;
      var $831=$d0;
      var $832=((($830)-($831))|0);
      $__x64=$832;
      var $833=$n1;
      var $834=$d1;
      var $835=((($833)-($834))|0);
      var $836=$n0;
      var $837=$d0;
      var $838=(($836)>>>0) < (($837)>>>0);
      var $839=(($838)&1);
      var $840=((($835)-($839))|0);
      $n1=$840;
      var $841=$__x64;
      $n0=$841;
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $844=$d0;
      $__u73=$844;
      var $845=$q;
      $__v74=$845;
      var $846=$__u73;
      var $847=$846 & 65535;
      $__ul69=$847;
      var $848=$__u73;
      var $849=$848 >>> 16;
      $__uh71=$849;
      var $850=$__v74;
      var $851=$850 & 65535;
      $__vl70=$851;
      var $852=$__v74;
      var $853=$852 >>> 16;
      $__vh72=$853;
      var $854=$__ul69;
      var $855=$__vl70;
      var $856=Math.imul($854,$855);
      $__x065=$856;
      var $857=$__ul69;
      var $858=$__vh72;
      var $859=Math.imul($857,$858);
      $__x166=$859;
      var $860=$__uh71;
      var $861=$__vl70;
      var $862=Math.imul($860,$861);
      $__x267=$862;
      var $863=$__uh71;
      var $864=$__vh72;
      var $865=Math.imul($863,$864);
      $__x368=$865;
      var $866=$__x065;
      var $867=$866 >>> 16;
      var $868=$__x166;
      var $869=((($868)+($867))|0);
      $__x166=$869;
      var $870=$__x267;
      var $871=$__x166;
      var $872=((($871)+($870))|0);
      $__x166=$872;
      var $873=$__x166;
      var $874=$__x267;
      var $875=(($873)>>>0) < (($874)>>>0);
      if ($875) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $877=$__x368;
      var $878=((($877)+(65536))|0);
      $__x368=$878;
      label = 108; break;
    case 108: 
      var $880=$__x368;
      var $881=$__x166;
      var $882=$881 >>> 16;
      var $883=((($880)+($882))|0);
      $_t150=$883;
      var $884=$__x166;
      var $885=$884 << 16;
      var $886=$__x065;
      var $887=$886 & 65535;
      var $888=((($885)+($887))|0);
      $_t051=$888;
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $891=$n0;
      var $892=$_t051;
      var $893=((($891)-($892))|0);
      $__x75=$893;
      var $894=$n1;
      var $895=$_t150;
      var $896=((($894)-($895))|0);
      var $897=$n0;
      var $898=$_t051;
      var $899=(($897)>>>0) < (($898)>>>0);
      var $900=(($899)&1);
      var $901=((($896)-($900))|0);
      $n1=$901;
      var $902=$__x75;
      $n0=$902;
      label = 111; break;
    case 111: 
      var $904=$q;
      var $905=((($904)+(1))|0);
      $q=$905;
      var $906=$n1;
      var $907=$_q049;
      var $908=(($906)>>>0) >= (($907)>>>0);
      var $909=(($908)&1);
      var $910=(((-$909))|0);
      $_mask52=$910;
      var $911=$_mask52;
      var $912=$q;
      var $913=((($912)+($911))|0);
      $q=$913;
      label = 112; break;
    case 112: 
      var $915=$n0;
      var $916=$_mask52;
      var $917=$d0;
      var $918=$916 & $917;
      var $919=((($915)+($918))|0);
      $__x76=$919;
      var $920=$n1;
      var $921=$_mask52;
      var $922=$d1;
      var $923=$921 & $922;
      var $924=((($920)+($923))|0);
      var $925=$__x76;
      var $926=$n0;
      var $927=(($925)>>>0) < (($926)>>>0);
      var $928=(($927)&1);
      var $929=((($924)+($928))|0);
      $n1=$929;
      var $930=$__x76;
      $n0=$930;
      label = 113; break;
    case 113: 
      var $932=$n1;
      var $933=$d1;
      var $934=(($932)>>>0) >= (($933)>>>0);
      if ($934) { label = 114; break; } else { label = 120; break; }
    case 114: 
      var $936=$n1;
      var $937=$d1;
      var $938=(($936)>>>0) > (($937)>>>0);
      if ($938) { label = 116; break; } else { label = 115; break; }
    case 115: 
      var $940=$n0;
      var $941=$d0;
      var $942=(($940)>>>0) >= (($941)>>>0);
      if ($942) { label = 116; break; } else { label = 119; break; }
    case 116: 
      var $944=$q;
      var $945=((($944)+(1))|0);
      $q=$945;
      label = 117; break;
    case 117: 
      var $947=$n0;
      var $948=$d0;
      var $949=((($947)-($948))|0);
      $__x77=$949;
      var $950=$n1;
      var $951=$d1;
      var $952=((($950)-($951))|0);
      var $953=$n0;
      var $954=$d0;
      var $955=(($953)>>>0) < (($954)>>>0);
      var $956=(($955)&1);
      var $957=((($952)-($956))|0);
      $n1=$957;
      var $958=$__x77;
      $n0=$958;
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      var $963=$n1;
      var $964=$2;
      var $965=(($964+4)|0);
      HEAP32[(($965)>>2)]=$963;
      var $966=$n0;
      var $967=$2;
      var $968=(($967)|0);
      HEAP32[(($968)>>2)]=$966;
      label = 122; break;
    case 122: 
      var $970=$q;
      var $971=$1;
      var $972=((($971)-(4))|0);
      $1=$972;
      HEAP32[(($972)>>2)]=$970;
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $975=$2;
      var $976=(($975+4)|0);
      var $977=HEAP32[(($976)>>2)];
      var $978=$n1;
      var $979=(($977)|0)==(($978)|0);
      if ($979) { label = 126; break; } else { label = 125; break; }
    case 125: 
      ___gmp_assert_fail(((5243788)|0), 185, ((5243892)|0));
      throw "Reached an unreachable!"
    case 126: 
      label = 127; break;
    case 127: 
      var $983=$qh;

      return $983;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sbpi1_divappr_q["X"]=1;

function ___gmpn_sqr($p, $a, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1212)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ws=__stackBase__;
      var $ws1;
      var $ws2;
      var $ws3;
      var $ws4;
      var $__tmp_marker=(__stackBase__)+(1208);
      $1=$p;
      $2=$a;
      $3=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $8=$3;
      var $9=(($8)|0) >= 50;
      if ($9) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $11=$1;
      var $12=$2;
      var $13=$3;
      ___gmpn_sqr_basecase($11, $12, $13);
      label = 33; break;
    case 8: 
      var $15=$3;
      var $16=(($15)|0) >= 120;
      if ($16) { label = 12; break; } else { label = 9; break; }
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $20=$1;
      var $21=$2;
      var $22=$3;
      var $23=(($ws)|0);
      ___gmpn_toom2_sqr($20, $21, $22, $23);
      label = 32; break;
    case 12: 
      var $25=$3;
      var $26=(($25)|0) >= 400;
      if ($26) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $28=$3;
      var $29=((($28)*(5))&-1);
      var $30=$29 >> 1;
      var $31=((($30)+(32))|0);
      var $32=($31<<2);
      var $33=STACKTOP;STACKTOP = (STACKTOP + $32)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $34=$33;
      $ws1=$34;
      var $35=$1;
      var $36=$2;
      var $37=$3;
      var $38=$ws1;
      ___gmpn_toom3_sqr($35, $36, $37, $38);
      label = 31; break;
    case 14: 
      var $40=$3;
      var $41=(($40)|0) >= 350;
      if ($41) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $43=$3;
      var $44=((($43)*(3))&-1);
      var $45=((($44)+(32))|0);
      var $46=($45<<2);
      var $47=STACKTOP;STACKTOP = (STACKTOP + $46)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $48=$47;
      $ws2=$48;
      var $49=$1;
      var $50=$2;
      var $51=$3;
      var $52=$ws2;
      ___gmpn_toom4_sqr($49, $50, $51, $52);
      label = 30; break;
    case 16: 
      var $54=$3;
      var $55=(($54)|0) >= 450;
      if ($55) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $57=$3;
      var $58=((($57)-(350))|0);
      var $59=($58<<1);
      var $60=((($59)+(1082))|0);
      var $61=($60<<2);
      var $62=STACKTOP;STACKTOP = (STACKTOP + $61)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $63=$62;
      $ws3=$63;
      var $64=$1;
      var $65=$2;
      var $66=$3;
      var $67=$ws3;
      ___gmpn_toom6_sqr($64, $65, $66, $67);
      label = 29; break;
    case 18: 
      var $69=$3;
      var $70=(($69)|0) >= 3600;
      if ($70) { label = 27; break; } else { label = 19; break; }
    case 19: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $72=$3;
      var $73=((($72)*(15))&-1);
      var $74=$73 >> 3;
      var $75=((($74)-(843))|0);
      var $76=((($75)+(1282))|0);
      var $77=($76<<2);
      var $78=(($77)>>>0) < 65536;
      if ($78) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $80=$3;
      var $81=((($80)*(15))&-1);
      var $82=$81 >> 3;
      var $83=((($82)-(843))|0);
      var $84=((($83)+(1282))|0);
      var $85=($84<<2);
      var $86=STACKTOP;STACKTOP = (STACKTOP + $85)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $96 = $86;label = 22; break;
    case 21: 
      var $88=$3;
      var $89=((($88)*(15))&-1);
      var $90=$89 >> 3;
      var $91=((($90)-(843))|0);
      var $92=((($91)+(1282))|0);
      var $93=($92<<2);
      var $94=___gmp_tmp_reentrant_alloc($__tmp_marker, $93);
      var $96 = $94;label = 22; break;
    case 22: 
      var $96;
      var $97=$96;
      $ws4=$97;
      var $98=$1;
      var $99=$2;
      var $100=$3;
      var $101=$ws4;
      ___gmpn_toom8_sqr($98, $99, $100, $101);
      label = 23; break;
    case 23: 
      var $103=HEAP32[(($__tmp_marker)>>2)];
      var $104=(($103)|0)!=0;
      if ($104) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $106=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($106);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 28; break;
    case 27: 
      var $110=$1;
      var $111=$2;
      var $112=$3;
      var $113=$2;
      var $114=$3;
      ___gmpn_nussbaumer_mul($110, $111, $112, $113, $114);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sqr["X"]=1;

function ___gmpn_sqr_basecase($rp, $up, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 400)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $ul;
      var $lpl;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $tarr=__stackBase__;
      var $tp;
      var $cy;
      var $cy1;
      var $_i;
      var $ul2;
      var $lpl3;
      var $__x04;
      var $__x15;
      var $__x26;
      var $__x37;
      var $__ul8;
      var $__vl9;
      var $__uh10;
      var $__vh11;
      var $__u12;
      var $__v13;
      var $cy14;
      $1=$rp;
      $2=$up;
      $3=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $8=$2;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      $ul=$10;
      label = 7; break;
    case 7: 
      var $12=$ul;
      $__u=$12;
      var $13=$ul;
      var $14=$13 << 0;
      $__v=$14;
      var $15=$__u;
      var $16=$15 & 65535;
      $__ul=$16;
      var $17=$__u;
      var $18=$17 >>> 16;
      $__uh=$18;
      var $19=$__v;
      var $20=$19 & 65535;
      $__vl=$20;
      var $21=$__v;
      var $22=$21 >>> 16;
      $__vh=$22;
      var $23=$__ul;
      var $24=$__vl;
      var $25=Math.imul($23,$24);
      $__x0=$25;
      var $26=$__ul;
      var $27=$__vh;
      var $28=Math.imul($26,$27);
      $__x1=$28;
      var $29=$__uh;
      var $30=$__vl;
      var $31=Math.imul($29,$30);
      $__x2=$31;
      var $32=$__uh;
      var $33=$__vh;
      var $34=Math.imul($32,$33);
      $__x3=$34;
      var $35=$__x0;
      var $36=$35 >>> 16;
      var $37=$__x1;
      var $38=((($37)+($36))|0);
      $__x1=$38;
      var $39=$__x2;
      var $40=$__x1;
      var $41=((($40)+($39))|0);
      $__x1=$41;
      var $42=$__x1;
      var $43=$__x2;
      var $44=(($42)>>>0) < (($43)>>>0);
      if ($44) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $46=$__x3;
      var $47=((($46)+(65536))|0);
      $__x3=$47;
      label = 9; break;
    case 9: 
      var $49=$__x3;
      var $50=$__x1;
      var $51=$50 >>> 16;
      var $52=((($49)+($51))|0);
      var $53=$1;
      var $54=(($53+4)|0);
      HEAP32[(($54)>>2)]=$52;
      var $55=$__x1;
      var $56=$55 << 16;
      var $57=$__x0;
      var $58=$57 & 65535;
      var $59=((($56)+($58))|0);
      $lpl=$59;
      label = 10; break;
    case 10: 
      var $61=$lpl;
      var $62=$61 >>> 0;
      var $63=$1;
      var $64=(($63)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=$3;
      var $66=(($65)|0) > 1;
      if ($66) { label = 11; break; } else { label = 28; break; }
    case 11: 
      var $68=(($tarr)|0);
      $tp=$68;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $71=$tp;
      var $72=$2;
      var $73=(($72+4)|0);
      var $74=$3;
      var $75=((($74)-(1))|0);
      var $76=$2;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=___gmpn_mul_1($71, $73, $75, $78);
      $cy=$79;
      var $80=$cy;
      var $81=$3;
      var $82=((($81)-(1))|0);
      var $83=$tp;
      var $84=(($83+($82<<2))|0);
      HEAP32[(($84)>>2)]=$80;
      $i=2;
      label = 14; break;
    case 14: 
      var $86=$i;
      var $87=$3;
      var $88=(($86)|0) < (($87)|0);
      if ($88) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $90=$tp;
      var $91=$i;
      var $92=($91<<1);
      var $93=(($90+($92<<2))|0);
      var $94=((($93)-(8))|0);
      var $95=$2;
      var $96=$i;
      var $97=(($95+($96<<2))|0);
      var $98=$3;
      var $99=$i;
      var $100=((($98)-($99))|0);
      var $101=$i;
      var $102=((($101)-(1))|0);
      var $103=$2;
      var $104=(($103+($102<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=___gmpn_addmul_1($94, $97, $100, $105);
      $cy1=$106;
      var $107=$cy1;
      var $108=$3;
      var $109=$i;
      var $110=((($108)+($109))|0);
      var $111=((($110)-(2))|0);
      var $112=$tp;
      var $113=(($112+($111<<2))|0);
      HEAP32[(($113)>>2)]=$107;
      label = 16; break;
    case 16: 
      var $115=$i;
      var $116=((($115)+(1))|0);
      $i=$116;
      label = 14; break;
    case 17: 
      label = 18; break;
    case 18: 
      $_i=0;
      label = 19; break;
    case 19: 
      var $120=$_i;
      var $121=$3;
      var $122=((($121)-(1))|0);
      var $123=(($120)|0) < (($122)|0);
      if ($123) { label = 20; break; } else { label = 26; break; }
    case 20: 
      var $125=$_i;
      var $126=$2;
      var $127=(($126+4)|0);
      var $128=(($127+($125<<2))|0);
      var $129=HEAP32[(($128)>>2)];
      $ul2=$129;
      label = 21; break;
    case 21: 
      var $131=$ul2;
      $__u12=$131;
      var $132=$ul2;
      var $133=$132 << 0;
      $__v13=$133;
      var $134=$__u12;
      var $135=$134 & 65535;
      $__ul8=$135;
      var $136=$__u12;
      var $137=$136 >>> 16;
      $__uh10=$137;
      var $138=$__v13;
      var $139=$138 & 65535;
      $__vl9=$139;
      var $140=$__v13;
      var $141=$140 >>> 16;
      $__vh11=$141;
      var $142=$__ul8;
      var $143=$__vl9;
      var $144=Math.imul($142,$143);
      $__x04=$144;
      var $145=$__ul8;
      var $146=$__vh11;
      var $147=Math.imul($145,$146);
      $__x15=$147;
      var $148=$__uh10;
      var $149=$__vl9;
      var $150=Math.imul($148,$149);
      $__x26=$150;
      var $151=$__uh10;
      var $152=$__vh11;
      var $153=Math.imul($151,$152);
      $__x37=$153;
      var $154=$__x04;
      var $155=$154 >>> 16;
      var $156=$__x15;
      var $157=((($156)+($155))|0);
      $__x15=$157;
      var $158=$__x26;
      var $159=$__x15;
      var $160=((($159)+($158))|0);
      $__x15=$160;
      var $161=$__x15;
      var $162=$__x26;
      var $163=(($161)>>>0) < (($162)>>>0);
      if ($163) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $165=$__x37;
      var $166=((($165)+(65536))|0);
      $__x37=$166;
      label = 23; break;
    case 23: 
      var $168=$__x37;
      var $169=$__x15;
      var $170=$169 >>> 16;
      var $171=((($168)+($170))|0);
      var $172=$_i;
      var $173=($172<<1);
      var $174=((($173)+(1))|0);
      var $175=$1;
      var $176=(($175+8)|0);
      var $177=(($176+($174<<2))|0);
      HEAP32[(($177)>>2)]=$171;
      var $178=$__x15;
      var $179=$178 << 16;
      var $180=$__x04;
      var $181=$180 & 65535;
      var $182=((($179)+($181))|0);
      $lpl3=$182;
      label = 24; break;
    case 24: 
      var $184=$lpl3;
      var $185=$184 >>> 0;
      var $186=$_i;
      var $187=($186<<1);
      var $188=$1;
      var $189=(($188+8)|0);
      var $190=(($189+($187<<2))|0);
      HEAP32[(($190)>>2)]=$185;
      label = 25; break;
    case 25: 
      var $192=$_i;
      var $193=((($192)+(1))|0);
      $_i=$193;
      label = 19; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $196=$tp;
      var $197=$tp;
      var $198=$3;
      var $199=($198<<1);
      var $200=((($199)-(2))|0);
      var $201=___gmpn_lshift($196, $197, $200, 1);
      $cy14=$201;
      var $202=$1;
      var $203=(($202+4)|0);
      var $204=$1;
      var $205=(($204+4)|0);
      var $206=$tp;
      var $207=$3;
      var $208=($207<<1);
      var $209=((($208)-(2))|0);
      var $210=___gmpn_add_n($203, $205, $206, $209);
      var $211=$cy14;
      var $212=((($211)+($210))|0);
      $cy14=$212;
      var $213=$cy14;
      var $214=$3;
      var $215=($214<<1);
      var $216=((($215)-(1))|0);
      var $217=$1;
      var $218=(($217+($216<<2))|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=((($219)+($213))|0);
      HEAP32[(($218)>>2)]=$220;
      label = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sqr_basecase["X"]=1;

function ___gmpn_sqrmod_bnm1($rp, $rn, $ap, $an, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $cy;
      var $__x;
      var $__p;
      var $n;
      var $cy1;
      var $hi;
      var $am1;
      var $anm;
      var $so;
      var $__x2;
      var $__p3;
      var $k;
      var $ap1;
      var $anp;
      var $__x4;
      var $__p5;
      var $mask;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      var $__x10;
      var $__p11;
      $1=$rp;
      $2=$rn;
      $3=$ap;
      $4=$an;
      $5=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $10=$2;
      var $11=$10 & 1;
      var $12=(($11)|0)!=0;
      if ($12) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $14=$2;
      var $15=(($14)|0) >= 16;
      if ($15) { label = 22; break; } else { label = 8; break; }
    case 8: 
      var $17=$4;
      var $18=$2;
      var $19=(($17)|0) < (($18)|0);
      if ($19) { label = 9; break; } else { label = 20; break; }
    case 9: 
      var $21=$4;
      var $22=($21<<1);
      var $23=$2;
      var $24=(($22)|0) <= (($23)|0);
      if ($24) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $26=$1;
      var $27=$3;
      var $28=$4;
      ___gmpn_sqr($26, $27, $28);
      label = 19; break;
    case 11: 
      var $30=$5;
      var $31=$3;
      var $32=$4;
      ___gmpn_sqr($30, $31, $32);
      var $33=$1;
      var $34=$5;
      var $35=$2;
      var $36=$5;
      var $37=$2;
      var $38=(($36+($37<<2))|0);
      var $39=$4;
      var $40=($39<<1);
      var $41=$2;
      var $42=((($40)-($41))|0);
      var $43=___gmpn_add($33, $34, $35, $38, $42);
      $cy=$43;
      label = 12; break;
    case 12: 
      var $45=$1;
      $__p=$45;
      var $46=$__p;
      var $47=HEAP32[(($46)>>2)];
      var $48=$cy;
      var $49=((($47)+($48))|0);
      $__x=$49;
      var $50=$__x;
      var $51=$__p;
      HEAP32[(($51)>>2)]=$50;
      var $52=$__x;
      var $53=$cy;
      var $54=(($52)>>>0) < (($53)>>>0);
      if ($54) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $57=$__p;
      var $58=(($57+4)|0);
      $__p=$58;
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)+(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|0)==0;
      if ($61) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 21; break;
    case 20: 
      var $68=$1;
      var $69=$3;
      var $70=$2;
      var $71=$5;
      _mpn_bc_sqrmod_bnm1($68, $69, $70, $71);
      label = 21; break;
    case 21: 
      label = 97; break;
    case 22: 
      var $74=$2;
      var $75=$74 >> 1;
      $n=$75;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $78=$4;
      var $79=$n;
      var $80=(($78)|0) > (($79)|0);
      if ($80) { label = 25; break; } else { label = 33; break; }
    case 25: 
      var $82=$5;
      var $83=$n;
      var $84=(($82+($83<<2))|0);
      $so=$84;
      var $85=$5;
      $am1=$85;
      var $86=$5;
      var $87=$3;
      var $88=$n;
      var $89=$3;
      var $90=$n;
      var $91=(($89+($90<<2))|0);
      var $92=$4;
      var $93=$n;
      var $94=((($92)-($93))|0);
      var $95=___gmpn_add($86, $87, $88, $91, $94);
      $cy1=$95;
      label = 26; break;
    case 26: 
      var $97=$5;
      $__p3=$97;
      var $98=$__p3;
      var $99=HEAP32[(($98)>>2)];
      var $100=$cy1;
      var $101=((($99)+($100))|0);
      $__x2=$101;
      var $102=$__x2;
      var $103=$__p3;
      HEAP32[(($103)>>2)]=$102;
      var $104=$__x2;
      var $105=$cy1;
      var $106=(($104)>>>0) < (($105)>>>0);
      if ($106) { label = 27; break; } else { label = 31; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $109=$__p3;
      var $110=(($109+4)|0);
      $__p3=$110;
      var $111=HEAP32[(($110)>>2)];
      var $112=((($111)+(1))|0);
      HEAP32[(($110)>>2)]=$112;
      var $113=(($112)|0)==0;
      if ($113) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 28; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $118=$n;
      $anm=$118;
      label = 34; break;
    case 33: 
      var $120=$5;
      $so=$120;
      var $121=$3;
      $am1=$121;
      var $122=$4;
      $anm=$122;
      label = 34; break;
    case 34: 
      var $124=$1;
      var $125=$n;
      var $126=$am1;
      var $127=$anm;
      var $128=$so;
      ___gmpn_sqrmod_bnm1($124, $125, $126, $127, $128);
      var $129=$4;
      var $130=$n;
      var $131=(($129)|0) > (($130)|0);
      if ($131) { label = 35; break; } else { label = 43; break; }
    case 35: 
      var $133=$5;
      var $134=$n;
      var $135=($134<<1);
      var $136=(($133+($135<<2))|0);
      var $137=(($136+8)|0);
      $ap1=$137;
      var $138=$5;
      var $139=$n;
      var $140=($139<<1);
      var $141=(($138+($140<<2))|0);
      var $142=(($141+8)|0);
      var $143=$3;
      var $144=$n;
      var $145=$3;
      var $146=$n;
      var $147=(($145+($146<<2))|0);
      var $148=$4;
      var $149=$n;
      var $150=((($148)-($149))|0);
      var $151=___gmpn_sub($142, $143, $144, $147, $150);
      $cy1=$151;
      var $152=$n;
      var $153=$5;
      var $154=$n;
      var $155=($154<<1);
      var $156=(($153+($155<<2))|0);
      var $157=(($156+8)|0);
      var $158=(($157+($152<<2))|0);
      HEAP32[(($158)>>2)]=0;
      label = 36; break;
    case 36: 
      var $160=$5;
      var $161=$n;
      var $162=($161<<1);
      var $163=(($160+($162<<2))|0);
      var $164=(($163+8)|0);
      $__p5=$164;
      var $165=$__p5;
      var $166=HEAP32[(($165)>>2)];
      var $167=$cy1;
      var $168=((($166)+($167))|0);
      $__x4=$168;
      var $169=$__x4;
      var $170=$__p5;
      HEAP32[(($170)>>2)]=$169;
      var $171=$__x4;
      var $172=$cy1;
      var $173=(($171)>>>0) < (($172)>>>0);
      if ($173) { label = 37; break; } else { label = 41; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $176=$__p5;
      var $177=(($176+4)|0);
      $__p5=$177;
      var $178=HEAP32[(($177)>>2)];
      var $179=((($178)+(1))|0);
      HEAP32[(($177)>>2)]=$179;
      var $180=(($179)|0)==0;
      if ($180) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 38; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $185=$n;
      var $186=$n;
      var $187=$ap1;
      var $188=(($187+($186<<2))|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=((($185)+($189))|0);
      $anp=$190;
      label = 44; break;
    case 43: 
      var $192=$3;
      $ap1=$192;
      var $193=$4;
      $anp=$193;
      label = 44; break;
    case 44: 
      var $195=$n;
      var $196=(($195)|0) >= 300;
      if ($196) { label = 46; break; } else { label = 45; break; }
    case 45: 
      $k=0;
      label = 50; break;
    case 46: 
      var $199=$n;
      var $200=___gmpn_fft_best_k($199, 1);
      $k=$200;
      var $201=$k;
      var $202=1 << $201;
      var $203=((($202)-(1))|0);
      $mask=$203;
      label = 47; break;
    case 47: 
      var $205=$n;
      var $206=$mask;
      var $207=$205 & $206;
      var $208=(($207)|0)!=0;
      if ($208) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $210=$k;
      var $211=((($210)-(1))|0);
      $k=$211;
      var $212=$mask;
      var $213=$212 >> 1;
      $mask=$213;
      label = 47; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $216=$k;
      var $217=(($216)|0) >= 4;
      if ($217) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $219=$5;
      var $220=$n;
      var $221=$ap1;
      var $222=$anp;
      var $223=$ap1;
      var $224=$anp;
      var $225=$k;
      var $226=___gmpn_mul_fft($219, $220, $221, $222, $223, $224, $225);
      var $227=$n;
      var $228=$5;
      var $229=(($228+($227<<2))|0);
      HEAP32[(($229)>>2)]=$226;
      label = 67; break;
    case 52: 
      var $231=$ap1;
      var $232=$3;
      var $233=(($231)|0)==(($232)|0);
      if ($233) { label = 53; break; } else { label = 65; break; }
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $239=$5;
      var $240=$3;
      var $241=$4;
      ___gmpn_sqr($239, $240, $241);
      var $242=$4;
      var $243=($242<<1);
      var $244=$n;
      var $245=((($243)-($244))|0);
      $anp=$245;
      var $246=$5;
      var $247=$5;
      var $248=$n;
      var $249=$5;
      var $250=$n;
      var $251=(($249+($250<<2))|0);
      var $252=$anp;
      var $253=___gmpn_sub($246, $247, $248, $251, $252);
      $cy1=$253;
      var $254=$n;
      var $255=$5;
      var $256=(($255+($254<<2))|0);
      HEAP32[(($256)>>2)]=0;
      label = 58; break;
    case 58: 
      var $258=$5;
      $__p7=$258;
      var $259=$__p7;
      var $260=HEAP32[(($259)>>2)];
      var $261=$cy1;
      var $262=((($260)+($261))|0);
      $__x6=$262;
      var $263=$__x6;
      var $264=$__p7;
      HEAP32[(($264)>>2)]=$263;
      var $265=$__x6;
      var $266=$cy1;
      var $267=(($265)>>>0) < (($266)>>>0);
      if ($267) { label = 59; break; } else { label = 63; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $270=$__p7;
      var $271=(($270+4)|0);
      $__p7=$271;
      var $272=HEAP32[(($271)>>2)];
      var $273=((($272)+(1))|0);
      HEAP32[(($271)>>2)]=$273;
      var $274=(($273)|0)==0;
      if ($274) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 60; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 66; break;
    case 65: 
      var $280=$5;
      var $281=$ap1;
      var $282=$n;
      var $283=$5;
      _mpn_bc_sqrmod_bnp1($280, $281, $282, $283);
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $286=$n;
      var $287=$5;
      var $288=(($287+($286<<2))|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=$1;
      var $291=$1;
      var $292=$5;
      var $293=$n;
      var $294=___gmpn_add_n($290, $291, $292, $293);
      var $295=((($289)+($294))|0);
      $cy1=$295;
      var $296=$1;
      var $297=(($296)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=$298 & 1;
      var $300=$cy1;
      var $301=((($300)+($299))|0);
      $cy1=$301;
      var $302=$1;
      var $303=$1;
      var $304=$n;
      var $305=___gmpn_rshift($302, $303, $304, 1);
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $308=$cy1;
      var $309=$308 << 31;
      $hi=$309;
      var $310=$cy1;
      var $311=$310 >>> 1;
      $cy1=$311;
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $314=$hi;
      var $315=$n;
      var $316=((($315)-(1))|0);
      var $317=$1;
      var $318=(($317+($316<<2))|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=$319 | $314;
      HEAP32[(($318)>>2)]=$320;
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $326=$1;
      $__p9=$326;
      var $327=$__p9;
      var $328=HEAP32[(($327)>>2)];
      var $329=$cy1;
      var $330=((($328)+($329))|0);
      $__x8=$330;
      var $331=$__x8;
      var $332=$__p9;
      HEAP32[(($332)>>2)]=$331;
      var $333=$__x8;
      var $334=$cy1;
      var $335=(($333)>>>0) < (($334)>>>0);
      if ($335) { label = 77; break; } else { label = 81; break; }
    case 77: 
      label = 78; break;
    case 78: 
      var $338=$__p9;
      var $339=(($338+4)|0);
      $__p9=$339;
      var $340=HEAP32[(($339)>>2)];
      var $341=((($340)+(1))|0);
      HEAP32[(($339)>>2)]=$341;
      var $342=(($341)|0)==0;
      if ($342) { label = 79; break; } else { label = 80; break; }
    case 79: 
      label = 78; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $347=$4;
      var $348=($347<<1);
      var $349=$2;
      var $350=(($348)|0) < (($349)|0);
      if ($350) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $352=$1;
      var $353=$n;
      var $354=(($352+($353<<2))|0);
      var $355=$1;
      var $356=$5;
      var $357=$4;
      var $358=($357<<1);
      var $359=$n;
      var $360=((($358)-($359))|0);
      var $361=___gmpn_sub_n($354, $355, $356, $360);
      $cy1=$361;
      var $362=$n;
      var $363=$5;
      var $364=(($363+($362<<2))|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=$5;
      var $367=$4;
      var $368=($367<<1);
      var $369=(($366+($368<<2))|0);
      var $370=$n;
      var $371=(((-$370))|0);
      var $372=(($369+($371<<2))|0);
      var $373=$1;
      var $374=$4;
      var $375=($374<<1);
      var $376=(($373+($375<<2))|0);
      var $377=$n;
      var $378=(((-$377))|0);
      var $379=(($376+($378<<2))|0);
      var $380=$5;
      var $381=$4;
      var $382=($381<<1);
      var $383=(($380+($382<<2))|0);
      var $384=$n;
      var $385=(((-$384))|0);
      var $386=(($383+($385<<2))|0);
      var $387=$2;
      var $388=$4;
      var $389=($388<<1);
      var $390=((($387)-($389))|0);
      var $391=$cy1;
      var $392=_mpn_sub_nc139($372, $379, $386, $390, $391);
      var $393=((($365)+($392))|0);
      $cy1=$393;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $396=$1;
      var $397=$1;
      var $398=$4;
      var $399=($398<<1);
      var $400=$cy1;
      var $401=___gmpn_sub_1($396, $397, $399, $400);
      $cy1=$401;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 96; break;
    case 88: 
      var $405=$n;
      var $406=$5;
      var $407=(($406+($405<<2))|0);
      var $408=HEAP32[(($407)>>2)];
      var $409=$1;
      var $410=$n;
      var $411=(($409+($410<<2))|0);
      var $412=$1;
      var $413=$5;
      var $414=$n;
      var $415=___gmpn_sub_n($411, $412, $413, $414);
      var $416=((($408)+($415))|0);
      $cy1=$416;
      label = 89; break;
    case 89: 
      var $418=$1;
      $__p11=$418;
      var $419=$__p11;
      var $420=HEAP32[(($419)>>2)];
      $__x10=$420;
      var $421=$__x10;
      var $422=$cy1;
      var $423=((($421)-($422))|0);
      var $424=$__p11;
      HEAP32[(($424)>>2)]=$423;
      var $425=$__x10;
      var $426=$cy1;
      var $427=(($425)>>>0) < (($426)>>>0);
      if ($427) { label = 90; break; } else { label = 94; break; }
    case 90: 
      label = 91; break;
    case 91: 
      var $430=$__p11;
      var $431=(($430+4)|0);
      $__p11=$431;
      var $432=HEAP32[(($431)>>2)];
      var $433=((($432)-(1))|0);
      HEAP32[(($431)>>2)]=$433;
      var $434=(($432)|0)==0;
      if ($434) { label = 92; break; } else { label = 93; break; }
    case 92: 
      label = 91; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sqrmod_bnm1["X"]=1;

function _mpn_bc_sqrmod_bnm1($rp, $ap, $rn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $cy;
      var $__x;
      var $__p;
      $1=$rp;
      $2=$ap;
      $3=$rn;
      $4=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$4;
      var $8=$2;
      var $9=$3;
      ___gmpn_sqr($7, $8, $9);
      var $10=$1;
      var $11=$4;
      var $12=$4;
      var $13=$3;
      var $14=(($12+($13<<2))|0);
      var $15=$3;
      var $16=___gmpn_add_n($10, $11, $14, $15);
      $cy=$16;
      label = 5; break;
    case 5: 
      var $18=$1;
      $__p=$18;
      var $19=$__p;
      var $20=HEAP32[(($19)>>2)];
      var $21=$cy;
      var $22=((($20)+($21))|0);
      $__x=$22;
      var $23=$__x;
      var $24=$__p;
      HEAP32[(($24)>>2)]=$23;
      var $25=$__x;
      var $26=$cy;
      var $27=(($25)>>>0) < (($26)>>>0);
      if ($27) { label = 6; break; } else { label = 10; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $30=$__p;
      var $31=(($30+4)|0);
      $__p=$31;
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)+(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=(($33)|0)==0;
      if ($34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 7; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_bc_sqrmod_bnm1["X"]=1;

function _mpn_bc_sqrmod_bnp1($rp, $ap, $rn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $cy;
      var $__x;
      var $__p;
      $1=$rp;
      $2=$ap;
      $3=$rn;
      $4=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$4;
      var $8=$2;
      var $9=$3;
      var $10=((($9)+(1))|0);
      ___gmpn_sqr($7, $8, $10);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $15=$3;
      var $16=($15<<1);
      var $17=$4;
      var $18=(($17+($16<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$1;
      var $21=$4;
      var $22=$4;
      var $23=$3;
      var $24=(($22+($23<<2))|0);
      var $25=$3;
      var $26=___gmpn_sub_n($20, $21, $24, $25);
      var $27=((($19)+($26))|0);
      $cy=$27;
      var $28=$3;
      var $29=$1;
      var $30=(($29+($28<<2))|0);
      HEAP32[(($30)>>2)]=0;
      label = 9; break;
    case 9: 
      var $32=$1;
      $__p=$32;
      var $33=$__p;
      var $34=HEAP32[(($33)>>2)];
      var $35=$cy;
      var $36=((($34)+($35))|0);
      $__x=$36;
      var $37=$__x;
      var $38=$__p;
      HEAP32[(($38)>>2)]=$37;
      var $39=$__x;
      var $40=$cy;
      var $41=(($39)>>>0) < (($40)>>>0);
      if ($41) { label = 10; break; } else { label = 14; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $44=$__p;
      var $45=(($44+4)|0);
      $__p=$45;
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)+(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($47)|0)==0;
      if ($48) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_bc_sqrmod_bnp1["X"]=1;

function _mpn_sub_nc139($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_sqrmod_bnm1_next_size($n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $nh;
      $2=$n;
      var $3=$2;
      var $4=(($3)|0) >= 16;
      if ($4) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$2;
      $1=$6;
      label = 11; break;
    case 4: 
      var $8=$2;
      var $9=(($8)|0) >= 61;
      if ($9) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $11=$2;
      var $12=((($11)+(1))|0);
      var $13=$12 & -2;
      $1=$13;
      label = 11; break;
    case 6: 
      var $15=$2;
      var $16=(($15)|0) >= 121;
      if ($16) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $18=$2;
      var $19=((($18)+(3))|0);
      var $20=$19 & -4;
      $1=$20;
      label = 11; break;
    case 8: 
      var $22=$2;
      var $23=((($22)+(1))|0);
      var $24=$23 >> 1;
      $nh=$24;
      var $25=$nh;
      var $26=(($25)|0) >= 360;
      if ($26) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $28=$2;
      var $29=((($28)+(7))|0);
      var $30=$29 & -8;
      $1=$30;
      label = 11; break;
    case 10: 
      var $32=$nh;
      var $33=$nh;
      var $34=___gmpn_fft_best_k($33, 1);
      var $35=___gmpn_fft_next_size($32, $34);
      var $36=($35<<1);
      $1=$36;
      label = 11; break;
    case 11: 
      var $38=$1;

      return $38;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_sub_1($__gmp_dst, $__gmp_src, $__gmp_size, $__gmp_n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $__gmp_c;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_r;
      var $__gmp_j;
      var $__gmp_j1;
      $1=$__gmp_dst;
      $2=$__gmp_src;
      $3=$__gmp_size;
      $4=$__gmp_n;
      label = 3; break;
    case 3: 
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $__gmp_x=$8;
      var $9=$__gmp_x;
      var $10=$4;
      var $11=((($9)-($10))|0);
      $__gmp_r=$11;
      var $12=$__gmp_r;
      var $13=$1;
      var $14=(($13)|0);
      HEAP32[(($14)>>2)]=$12;
      var $15=$__gmp_x;
      var $16=$4;
      var $17=(($15)>>>0) < (($16)>>>0);
      if ($17) { label = 4; break; } else { label = 18; break; }
    case 4: 
      $__gmp_c=1;
      $__gmp_i=1;
      label = 5; break;
    case 5: 
      var $20=$__gmp_i;
      var $21=$3;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { label = 6; break; } else { label = 17; break; }
    case 6: 
      var $24=$__gmp_i;
      var $25=$2;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $__gmp_x=$27;
      var $28=$__gmp_x;
      var $29=((($28)-(1))|0);
      $__gmp_r=$29;
      var $30=$__gmp_r;
      var $31=$__gmp_i;
      var $32=$1;
      var $33=(($32+($31<<2))|0);
      HEAP32[(($33)>>2)]=$30;
      var $34=$__gmp_i;
      var $35=((($34)+(1))|0);
      $__gmp_i=$35;
      var $36=$__gmp_x;
      var $37=(($36)>>>0) < 1;
      if ($37) { label = 16; break; } else { label = 7; break; }
    case 7: 
      var $39=$2;
      var $40=$1;
      var $41=(($39)|0)!=(($40)|0);
      if ($41) { label = 8; break; } else { label = 15; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $44=$__gmp_i;
      $__gmp_j=$44;
      label = 10; break;
    case 10: 
      var $46=$__gmp_j;
      var $47=$3;
      var $48=(($46)|0) < (($47)|0);
      if ($48) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $50=$__gmp_j;
      var $51=$2;
      var $52=(($51+($50<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$__gmp_j;
      var $55=$1;
      var $56=(($55+($54<<2))|0);
      HEAP32[(($56)>>2)]=$53;
      label = 12; break;
    case 12: 
      var $58=$__gmp_j;
      var $59=((($58)+(1))|0);
      $__gmp_j=$59;
      label = 10; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $__gmp_c=0;
      label = 17; break;
    case 16: 
      label = 5; break;
    case 17: 
      label = 27; break;
    case 18: 
      var $66=$2;
      var $67=$1;
      var $68=(($66)|0)!=(($67)|0);
      if ($68) { label = 19; break; } else { label = 26; break; }
    case 19: 
      label = 20; break;
    case 20: 
      $__gmp_j1=1;
      label = 21; break;
    case 21: 
      var $72=$__gmp_j1;
      var $73=$3;
      var $74=(($72)|0) < (($73)|0);
      if ($74) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $76=$__gmp_j1;
      var $77=$2;
      var $78=(($77+($76<<2))|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$__gmp_j1;
      var $81=$1;
      var $82=(($81+($80<<2))|0);
      HEAP32[(($82)>>2)]=$79;
      label = 23; break;
    case 23: 
      var $84=$__gmp_j1;
      var $85=((($84)+(1))|0);
      $__gmp_j1=$85;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $__gmp_c=0;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $91=$__gmp_c;

      return $91;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sub_1["X"]=1;

function ___gmpn_sub_n($rp, $up, $vp, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $vl;
      var $sl;
      var $rl;
      var $cy;
      var $cy1;
      var $cy2;
      $1=$rp;
      $2=$up;
      $3=$vp;
      $4=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      $cy=0;
      label = 9; break;
    case 9: 
      var $12=$2;
      var $13=(($12+4)|0);
      $2=$13;
      var $14=HEAP32[(($12)>>2)];
      $ul=$14;
      var $15=$3;
      var $16=(($15+4)|0);
      $3=$16;
      var $17=HEAP32[(($15)>>2)];
      $vl=$17;
      var $18=$ul;
      var $19=$vl;
      var $20=((($18)-($19))|0);
      $sl=$20;
      var $21=$sl;
      var $22=$ul;
      var $23=(($21)>>>0) > (($22)>>>0);
      var $24=(($23)&1);
      $cy1=$24;
      var $25=$sl;
      var $26=$cy;
      var $27=((($25)-($26))|0);
      $rl=$27;
      var $28=$rl;
      var $29=$sl;
      var $30=(($28)>>>0) > (($29)>>>0);
      var $31=(($30)&1);
      $cy2=$31;
      var $32=$cy1;
      var $33=$cy2;
      var $34=$32 | $33;
      $cy=$34;
      var $35=$rl;
      var $36=$1;
      var $37=(($36+4)|0);
      $1=$37;
      HEAP32[(($36)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $39=$4;
      var $40=((($39)-(1))|0);
      $4=$40;
      var $41=(($40)|0)!=0;
      if ($41) { label = 9; break; } else { label = 11; break; }
    case 11: 
      var $43=$cy;

      return $43;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sub_n["X"]=1;

function ___gmpn_submul_1($rp, $up, $n, $vl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $cl;
      var $hpl;
      var $lpl;
      var $rl;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$vl;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      $cl=0;
      label = 7; break;
    case 7: 
      var $10=$2;
      var $11=(($10+4)|0);
      $2=$11;
      var $12=HEAP32[(($10)>>2)];
      $ul=$12;
      label = 8; break;
    case 8: 
      var $14=$ul;
      $__u=$14;
      var $15=$4;
      $__v=$15;
      var $16=$__u;
      var $17=$16 & 65535;
      $__ul=$17;
      var $18=$__u;
      var $19=$18 >>> 16;
      $__uh=$19;
      var $20=$__v;
      var $21=$20 & 65535;
      $__vl=$21;
      var $22=$__v;
      var $23=$22 >>> 16;
      $__vh=$23;
      var $24=$__ul;
      var $25=$__vl;
      var $26=Math.imul($24,$25);
      $__x0=$26;
      var $27=$__ul;
      var $28=$__vh;
      var $29=Math.imul($27,$28);
      $__x1=$29;
      var $30=$__uh;
      var $31=$__vl;
      var $32=Math.imul($30,$31);
      $__x2=$32;
      var $33=$__uh;
      var $34=$__vh;
      var $35=Math.imul($33,$34);
      $__x3=$35;
      var $36=$__x0;
      var $37=$36 >>> 16;
      var $38=$__x1;
      var $39=((($38)+($37))|0);
      $__x1=$39;
      var $40=$__x2;
      var $41=$__x1;
      var $42=((($41)+($40))|0);
      $__x1=$42;
      var $43=$__x1;
      var $44=$__x2;
      var $45=(($43)>>>0) < (($44)>>>0);
      if ($45) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $47=$__x3;
      var $48=((($47)+(65536))|0);
      $__x3=$48;
      label = 10; break;
    case 10: 
      var $50=$__x3;
      var $51=$__x1;
      var $52=$51 >>> 16;
      var $53=((($50)+($52))|0);
      $hpl=$53;
      var $54=$__x1;
      var $55=$54 << 16;
      var $56=$__x0;
      var $57=$56 & 65535;
      var $58=((($55)+($57))|0);
      $lpl=$58;
      label = 11; break;
    case 11: 
      var $60=$cl;
      var $61=$lpl;
      var $62=((($61)+($60))|0);
      $lpl=$62;
      var $63=$lpl;
      var $64=$cl;
      var $65=(($63)>>>0) < (($64)>>>0);
      var $66=(($65)&1);
      var $67=$hpl;
      var $68=((($66)+($67))|0);
      $cl=$68;
      var $69=$1;
      var $70=HEAP32[(($69)>>2)];
      $rl=$70;
      var $71=$rl;
      var $72=$lpl;
      var $73=((($71)-($72))|0);
      $lpl=$73;
      var $74=$lpl;
      var $75=$rl;
      var $76=(($74)>>>0) > (($75)>>>0);
      var $77=(($76)&1);
      var $78=$cl;
      var $79=((($78)+($77))|0);
      $cl=$79;
      var $80=$lpl;
      var $81=$1;
      var $82=(($81+4)|0);
      $1=$82;
      HEAP32[(($81)>>2)]=$80;
      label = 12; break;
    case 12: 
      var $84=$3;
      var $85=((($84)-(1))|0);
      $3=$85;
      var $86=(($85)|0)!=0;
      if ($86) { label = 7; break; } else { label = 13; break; }
    case 13: 
      var $88=$cl;

      return $88;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_submul_1["X"]=1;

function _mpn_zero_p($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$ap;
      $3=$n;
      var $4=$3;
      var $5=((($4)-(1))|0);
      $i=$5;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=(($7)|0) >= 0;
      if ($8) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $10=$i;
      var $11=$2;
      var $12=(($11+($10<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$i;
      var $19=((($18)-(1))|0);
      $i=$19;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $22=$1;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_toom22_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $vm1_neg;
      var $cy;
      var $cy2;
      var $asm1;
      var $bsm1;
      var $__dst;
      var $__n;
      var $__dst1;
      var $__n2;
      var $__x;
      var $__p;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      var $7=$3;
      var $8=$7 >> 1;
      $s=$8;
      var $9=$3;
      var $10=$s;
      var $11=((($9)-($10))|0);
      $n=$11;
      var $12=$5;
      var $13=$n;
      var $14=((($12)-($13))|0);
      $t=$14;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $21=$1;
      $asm1=$21;
      var $22=$1;
      var $23=$n;
      var $24=(($22+($23<<2))|0);
      $bsm1=$24;
      $vm1_neg=0;
      var $25=$s;
      var $26=$n;
      var $27=(($25)|0)==(($26)|0);
      if ($27) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $29=$2;
      var $30=$2;
      var $31=$n;
      var $32=(($30+($31<<2))|0);
      var $33=$n;
      var $34=___gmpn_cmp($29, $32, $33);
      var $35=(($34)|0) < 0;
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $37=$asm1;
      var $38=$2;
      var $39=$n;
      var $40=(($38+($39<<2))|0);
      var $41=$2;
      var $42=$n;
      var $43=___gmpn_sub_n($37, $40, $41, $42);
      $vm1_neg=1;
      label = 12; break;
    case 11: 
      var $45=$asm1;
      var $46=$2;
      var $47=$2;
      var $48=$n;
      var $49=(($47+($48<<2))|0);
      var $50=$n;
      var $51=___gmpn_sub_n($45, $46, $49, $50);
      label = 12; break;
    case 12: 
      label = 27; break;
    case 13: 
      var $54=$2;
      var $55=$s;
      var $56=(($54+($55<<2))|0);
      var $57=$n;
      var $58=$s;
      var $59=((($57)-($58))|0);
      var $60=_mpn_zero_p($56, $59);
      var $61=(($60)|0)!=0;
      if ($61) { label = 14; break; } else { label = 25; break; }
    case 14: 
      var $63=$2;
      var $64=$2;
      var $65=$n;
      var $66=(($64+($65<<2))|0);
      var $67=$s;
      var $68=___gmpn_cmp($63, $66, $67);
      var $69=(($68)|0) < 0;
      if ($69) { label = 15; break; } else { label = 25; break; }
    case 15: 
      var $71=$asm1;
      var $72=$2;
      var $73=$n;
      var $74=(($72+($73<<2))|0);
      var $75=$2;
      var $76=$s;
      var $77=___gmpn_sub_n($71, $74, $75, $76);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $81=$n;
      var $82=$s;
      var $83=((($81)-($82))|0);
      var $84=(($83)|0)!=0;
      if ($84) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $86=$asm1;
      var $87=$s;
      var $88=(($86+($87<<2))|0);
      $__dst=$88;
      var $89=$n;
      var $90=$s;
      var $91=((($89)-($90))|0);
      $__n=$91;
      label = 20; break;
    case 20: 
      var $93=$__dst;
      var $94=(($93+4)|0);
      $__dst=$94;
      HEAP32[(($93)>>2)]=0;
      label = 21; break;
    case 21: 
      var $96=$__n;
      var $97=((($96)-(1))|0);
      $__n=$97;
      var $98=(($97)|0)!=0;
      if ($98) { label = 20; break; } else { label = 22; break; }
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      $vm1_neg=1;
      label = 26; break;
    case 25: 
      var $103=$asm1;
      var $104=$2;
      var $105=$n;
      var $106=$2;
      var $107=$n;
      var $108=(($106+($107<<2))|0);
      var $109=$s;
      var $110=___gmpn_sub($103, $104, $105, $108, $109);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $113=$t;
      var $114=$n;
      var $115=(($113)|0)==(($114)|0);
      if ($115) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $117=$4;
      var $118=$4;
      var $119=$n;
      var $120=(($118+($119<<2))|0);
      var $121=$n;
      var $122=___gmpn_cmp($117, $120, $121);
      var $123=(($122)|0) < 0;
      if ($123) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $125=$bsm1;
      var $126=$4;
      var $127=$n;
      var $128=(($126+($127<<2))|0);
      var $129=$4;
      var $130=$n;
      var $131=___gmpn_sub_n($125, $128, $129, $130);
      var $132=$vm1_neg;
      var $133=$132 ^ 1;
      $vm1_neg=$133;
      label = 31; break;
    case 30: 
      var $135=$bsm1;
      var $136=$4;
      var $137=$4;
      var $138=$n;
      var $139=(($137+($138<<2))|0);
      var $140=$n;
      var $141=___gmpn_sub_n($135, $136, $139, $140);
      label = 31; break;
    case 31: 
      label = 46; break;
    case 32: 
      var $144=$4;
      var $145=$t;
      var $146=(($144+($145<<2))|0);
      var $147=$n;
      var $148=$t;
      var $149=((($147)-($148))|0);
      var $150=_mpn_zero_p($146, $149);
      var $151=(($150)|0)!=0;
      if ($151) { label = 33; break; } else { label = 44; break; }
    case 33: 
      var $153=$4;
      var $154=$4;
      var $155=$n;
      var $156=(($154+($155<<2))|0);
      var $157=$t;
      var $158=___gmpn_cmp($153, $156, $157);
      var $159=(($158)|0) < 0;
      if ($159) { label = 34; break; } else { label = 44; break; }
    case 34: 
      var $161=$bsm1;
      var $162=$4;
      var $163=$n;
      var $164=(($162+($163<<2))|0);
      var $165=$4;
      var $166=$t;
      var $167=___gmpn_sub_n($161, $164, $165, $166);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $171=$n;
      var $172=$t;
      var $173=((($171)-($172))|0);
      var $174=(($173)|0)!=0;
      if ($174) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $176=$bsm1;
      var $177=$t;
      var $178=(($176+($177<<2))|0);
      $__dst1=$178;
      var $179=$n;
      var $180=$t;
      var $181=((($179)-($180))|0);
      $__n2=$181;
      label = 39; break;
    case 39: 
      var $183=$__dst1;
      var $184=(($183+4)|0);
      $__dst1=$184;
      HEAP32[(($183)>>2)]=0;
      label = 40; break;
    case 40: 
      var $186=$__n2;
      var $187=((($186)-(1))|0);
      $__n2=$187;
      var $188=(($187)|0)!=0;
      if ($188) { label = 39; break; } else { label = 41; break; }
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $192=$vm1_neg;
      var $193=$192 ^ 1;
      $vm1_neg=$193;
      label = 45; break;
    case 44: 
      var $195=$bsm1;
      var $196=$4;
      var $197=$n;
      var $198=$4;
      var $199=$n;
      var $200=(($198+($199<<2))|0);
      var $201=$t;
      var $202=___gmpn_sub($195, $196, $197, $200, $201);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $206=$n;
      var $207=(($206)|0) >= 30;
      if ($207) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $209=$6;
      var $210=$asm1;
      var $211=$n;
      var $212=$bsm1;
      var $213=$n;
      ___gmpn_mul_basecase($209, $210, $211, $212, $213);
      label = 50; break;
    case 49: 
      var $215=$6;
      var $216=$asm1;
      var $217=$n;
      var $218=$bsm1;
      var $219=$n;
      var $220=$6;
      var $221=$n;
      var $222=($221<<1);
      var $223=(($220+($222<<2))|0);
      ___gmpn_toom22_mul($215, $216, $217, $218, $219, $223);
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $226=$s;
      var $227=$t;
      var $228=(($226)|0) > (($227)|0);
      if ($228) { label = 52; break; } else { label = 61; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $231=$t;
      var $232=(($231)|0) >= 30;
      if ($232) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $234=$1;
      var $235=$n;
      var $236=($235<<1);
      var $237=(($234+($236<<2))|0);
      var $238=$2;
      var $239=$n;
      var $240=(($238+($239<<2))|0);
      var $241=$s;
      var $242=$4;
      var $243=$n;
      var $244=(($242+($243<<2))|0);
      var $245=$t;
      ___gmpn_mul_basecase($237, $240, $241, $244, $245);
      label = 59; break;
    case 55: 
      var $247=$s;
      var $248=($247<<2);
      var $249=$t;
      var $250=((($249)*(5))&-1);
      var $251=(($248)|0) < (($250)|0);
      if ($251) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $253=$1;
      var $254=$n;
      var $255=($254<<1);
      var $256=(($253+($255<<2))|0);
      var $257=$2;
      var $258=$n;
      var $259=(($257+($258<<2))|0);
      var $260=$s;
      var $261=$4;
      var $262=$n;
      var $263=(($261+($262<<2))|0);
      var $264=$t;
      var $265=$6;
      var $266=$n;
      var $267=($266<<1);
      var $268=(($265+($267<<2))|0);
      ___gmpn_toom22_mul($256, $259, $260, $263, $264, $268);
      label = 58; break;
    case 57: 
      var $270=$1;
      var $271=$n;
      var $272=($271<<1);
      var $273=(($270+($272<<2))|0);
      var $274=$2;
      var $275=$n;
      var $276=(($274+($275<<2))|0);
      var $277=$s;
      var $278=$4;
      var $279=$n;
      var $280=(($278+($279<<2))|0);
      var $281=$t;
      var $282=$6;
      var $283=$n;
      var $284=($283<<1);
      var $285=(($282+($284<<2))|0);
      ___gmpn_toom32_mul($273, $276, $277, $280, $281, $285);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 67; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $291=$s;
      var $292=(($291)|0) >= 30;
      if ($292) { label = 64; break; } else { label = 63; break; }
    case 63: 
      var $294=$1;
      var $295=$n;
      var $296=($295<<1);
      var $297=(($294+($296<<2))|0);
      var $298=$2;
      var $299=$n;
      var $300=(($298+($299<<2))|0);
      var $301=$s;
      var $302=$4;
      var $303=$n;
      var $304=(($302+($303<<2))|0);
      var $305=$s;
      ___gmpn_mul_basecase($297, $300, $301, $304, $305);
      label = 65; break;
    case 64: 
      var $307=$1;
      var $308=$n;
      var $309=($308<<1);
      var $310=(($307+($309<<2))|0);
      var $311=$2;
      var $312=$n;
      var $313=(($311+($312<<2))|0);
      var $314=$s;
      var $315=$4;
      var $316=$n;
      var $317=(($315+($316<<2))|0);
      var $318=$s;
      var $319=$6;
      var $320=$n;
      var $321=($320<<1);
      var $322=(($319+($321<<2))|0);
      ___gmpn_toom22_mul($310, $313, $314, $317, $318, $322);
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $327=$n;
      var $328=(($327)|0) >= 30;
      if ($328) { label = 70; break; } else { label = 69; break; }
    case 69: 
      var $330=$1;
      var $331=$2;
      var $332=$n;
      var $333=$4;
      var $334=$n;
      ___gmpn_mul_basecase($330, $331, $332, $333, $334);
      label = 71; break;
    case 70: 
      var $336=$1;
      var $337=$2;
      var $338=$n;
      var $339=$4;
      var $340=$n;
      var $341=$6;
      var $342=$n;
      var $343=($342<<1);
      var $344=(($341+($343<<2))|0);
      ___gmpn_toom22_mul($336, $337, $338, $339, $340, $344);
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $347=$1;
      var $348=$n;
      var $349=($348<<1);
      var $350=(($347+($349<<2))|0);
      var $351=$1;
      var $352=$n;
      var $353=(($351+($352<<2))|0);
      var $354=$1;
      var $355=$n;
      var $356=($355<<1);
      var $357=(($354+($356<<2))|0);
      var $358=$n;
      var $359=___gmpn_add_n($350, $353, $357, $358);
      $cy=$359;
      var $360=$cy;
      var $361=$1;
      var $362=$n;
      var $363=(($361+($362<<2))|0);
      var $364=$1;
      var $365=$n;
      var $366=($365<<1);
      var $367=(($364+($366<<2))|0);
      var $368=$1;
      var $369=$n;
      var $370=___gmpn_add_n($363, $367, $368, $369);
      var $371=((($360)+($370))|0);
      $cy2=$371;
      var $372=$1;
      var $373=$n;
      var $374=($373<<1);
      var $375=(($372+($374<<2))|0);
      var $376=$1;
      var $377=$n;
      var $378=($377<<1);
      var $379=(($376+($378<<2))|0);
      var $380=$n;
      var $381=$1;
      var $382=$n;
      var $383=($382<<1);
      var $384=(($381+($383<<2))|0);
      var $385=$n;
      var $386=(($384+($385<<2))|0);
      var $387=$s;
      var $388=$t;
      var $389=((($387)+($388))|0);
      var $390=$n;
      var $391=((($389)-($390))|0);
      var $392=___gmpn_add($375, $379, $380, $386, $391);
      var $393=$cy;
      var $394=((($393)+($392))|0);
      $cy=$394;
      var $395=$vm1_neg;
      var $396=(($395)|0)!=0;
      if ($396) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $398=$1;
      var $399=$n;
      var $400=(($398+($399<<2))|0);
      var $401=$1;
      var $402=$n;
      var $403=(($401+($402<<2))|0);
      var $404=$6;
      var $405=$n;
      var $406=($405<<1);
      var $407=___gmpn_add_n($400, $403, $404, $406);
      var $408=$cy;
      var $409=((($408)+($407))|0);
      $cy=$409;
      label = 75; break;
    case 74: 
      var $411=$1;
      var $412=$n;
      var $413=(($411+($412<<2))|0);
      var $414=$1;
      var $415=$n;
      var $416=(($414+($415<<2))|0);
      var $417=$6;
      var $418=$n;
      var $419=($418<<1);
      var $420=___gmpn_sub_n($413, $416, $417, $419);
      var $421=$cy;
      var $422=((($421)-($420))|0);
      $cy=$422;
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $429=$1;
      var $430=$n;
      var $431=($430<<1);
      var $432=(($429+($431<<2))|0);
      $__p=$432;
      var $433=$__p;
      var $434=HEAP32[(($433)>>2)];
      var $435=$cy2;
      var $436=((($434)+($435))|0);
      $__x=$436;
      var $437=$__x;
      var $438=$__p;
      HEAP32[(($438)>>2)]=$437;
      var $439=$__x;
      var $440=$cy2;
      var $441=(($439)>>>0) < (($440)>>>0);
      if ($441) { label = 81; break; } else { label = 85; break; }
    case 81: 
      label = 82; break;
    case 82: 
      var $444=$__p;
      var $445=(($444+4)|0);
      $__p=$445;
      var $446=HEAP32[(($445)>>2)];
      var $447=((($446)+(1))|0);
      HEAP32[(($445)>>2)]=$447;
      var $448=(($447)|0)==0;
      if ($448) { label = 83; break; } else { label = 84; break; }
    case 83: 
      label = 82; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $453=$cy;
      var $454=(($453)>>>0) <= 2;
      if ($454) { label = 87; break; } else { label = 95; break; }
    case 87: 
      label = 88; break;
    case 88: 
      var $457=$1;
      var $458=$n;
      var $459=((($458)*(3))&-1);
      var $460=(($457+($459<<2))|0);
      $__p4=$460;
      var $461=$__p4;
      var $462=HEAP32[(($461)>>2)];
      var $463=$cy;
      var $464=((($462)+($463))|0);
      $__x3=$464;
      var $465=$__x3;
      var $466=$__p4;
      HEAP32[(($466)>>2)]=$465;
      var $467=$__x3;
      var $468=$cy;
      var $469=(($467)>>>0) < (($468)>>>0);
      if ($469) { label = 89; break; } else { label = 93; break; }
    case 89: 
      label = 90; break;
    case 90: 
      var $472=$__p4;
      var $473=(($472+4)|0);
      $__p4=$473;
      var $474=HEAP32[(($473)>>2)];
      var $475=((($474)+(1))|0);
      HEAP32[(($473)>>2)]=$475;
      var $476=(($475)|0)==0;
      if ($476) { label = 91; break; } else { label = 92; break; }
    case 91: 
      label = 90; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 101; break;
    case 95: 
      label = 96; break;
    case 96: 
      var $483=$1;
      var $484=$n;
      var $485=((($484)*(3))&-1);
      var $486=(($483+($485<<2))|0);
      $__p6=$486;
      label = 97; break;
    case 97: 
      var $488=$__p6;
      var $489=(($488+4)|0);
      $__p6=$489;
      var $490=HEAP32[(($488)>>2)];
      var $491=((($490)-(1))|0);
      HEAP32[(($488)>>2)]=$491;
      var $492=(($490)|0)==0;
      if ($492) { label = 98; break; } else { label = 99; break; }
    case 98: 
      label = 97; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom22_mul["X"]=1;

function _mpn_zero_p152($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$ap;
      $3=$n;
      var $4=$3;
      var $5=((($4)-(1))|0);
      $i=$5;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=(($7)|0) >= 0;
      if ($8) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $10=$i;
      var $11=$2;
      var $12=(($11+($10<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$i;
      var $19=((($18)-(1))|0);
      $i=$19;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $22=$1;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_toom2_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      var $s;
      var $cy;
      var $cy2;
      var $asm1;
      var $__dst;
      var $__n;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      var $5=$3;
      var $6=$5 >> 1;
      $s=$6;
      var $7=$3;
      var $8=$s;
      var $9=((($7)-($8))|0);
      $n=$9;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $12=$1;
      $asm1=$12;
      var $13=$s;
      var $14=$n;
      var $15=(($13)|0)==(($14)|0);
      if ($15) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $17=$2;
      var $18=$2;
      var $19=$n;
      var $20=(($18+($19<<2))|0);
      var $21=$n;
      var $22=___gmpn_cmp($17, $20, $21);
      var $23=(($22)|0) < 0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$asm1;
      var $26=$2;
      var $27=$n;
      var $28=(($26+($27<<2))|0);
      var $29=$2;
      var $30=$n;
      var $31=___gmpn_sub_n($25, $28, $29, $30);
      label = 8; break;
    case 7: 
      var $33=$asm1;
      var $34=$2;
      var $35=$2;
      var $36=$n;
      var $37=(($35+($36<<2))|0);
      var $38=$n;
      var $39=___gmpn_sub_n($33, $34, $37, $38);
      label = 8; break;
    case 8: 
      label = 23; break;
    case 9: 
      var $42=$2;
      var $43=$s;
      var $44=(($42+($43<<2))|0);
      var $45=$n;
      var $46=$s;
      var $47=((($45)-($46))|0);
      var $48=_mpn_zero_p152($44, $47);
      var $49=(($48)|0)!=0;
      if ($49) { label = 10; break; } else { label = 21; break; }
    case 10: 
      var $51=$2;
      var $52=$2;
      var $53=$n;
      var $54=(($52+($53<<2))|0);
      var $55=$s;
      var $56=___gmpn_cmp($51, $54, $55);
      var $57=(($56)|0) < 0;
      if ($57) { label = 11; break; } else { label = 21; break; }
    case 11: 
      var $59=$asm1;
      var $60=$2;
      var $61=$n;
      var $62=(($60+($61<<2))|0);
      var $63=$2;
      var $64=$s;
      var $65=___gmpn_sub_n($59, $62, $63, $64);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $69=$n;
      var $70=$s;
      var $71=((($69)-($70))|0);
      var $72=(($71)|0)!=0;
      if ($72) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $74=$asm1;
      var $75=$s;
      var $76=(($74+($75<<2))|0);
      $__dst=$76;
      var $77=$n;
      var $78=$s;
      var $79=((($77)-($78))|0);
      $__n=$79;
      label = 16; break;
    case 16: 
      var $81=$__dst;
      var $82=(($81+4)|0);
      $__dst=$82;
      HEAP32[(($81)>>2)]=0;
      label = 17; break;
    case 17: 
      var $84=$__n;
      var $85=((($84)-(1))|0);
      $__n=$85;
      var $86=(($85)|0)!=0;
      if ($86) { label = 16; break; } else { label = 18; break; }
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 22; break;
    case 21: 
      var $91=$asm1;
      var $92=$2;
      var $93=$n;
      var $94=$2;
      var $95=$n;
      var $96=(($94+($95<<2))|0);
      var $97=$s;
      var $98=___gmpn_sub($91, $92, $93, $96, $97);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $102=$n;
      var $103=(($102)|0) >= 50;
      if ($103) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $105=$4;
      var $106=$asm1;
      var $107=$n;
      ___gmpn_sqr_basecase($105, $106, $107);
      label = 27; break;
    case 26: 
      var $109=$4;
      var $110=$asm1;
      var $111=$n;
      var $112=$4;
      var $113=$n;
      var $114=($113<<1);
      var $115=(($112+($114<<2))|0);
      ___gmpn_toom2_sqr($109, $110, $111, $115);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $119=$s;
      var $120=(($119)|0) >= 50;
      if ($120) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $122=$1;
      var $123=$n;
      var $124=($123<<1);
      var $125=(($122+($124<<2))|0);
      var $126=$2;
      var $127=$n;
      var $128=(($126+($127<<2))|0);
      var $129=$s;
      ___gmpn_sqr_basecase($125, $128, $129);
      label = 32; break;
    case 31: 
      var $131=$1;
      var $132=$n;
      var $133=($132<<1);
      var $134=(($131+($133<<2))|0);
      var $135=$2;
      var $136=$n;
      var $137=(($135+($136<<2))|0);
      var $138=$s;
      var $139=$4;
      var $140=$n;
      var $141=($140<<1);
      var $142=(($139+($141<<2))|0);
      ___gmpn_toom2_sqr($134, $137, $138, $142);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $146=$n;
      var $147=(($146)|0) >= 50;
      if ($147) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $149=$1;
      var $150=$2;
      var $151=$n;
      ___gmpn_sqr_basecase($149, $150, $151);
      label = 37; break;
    case 36: 
      var $153=$1;
      var $154=$2;
      var $155=$n;
      var $156=$4;
      var $157=$n;
      var $158=($157<<1);
      var $159=(($156+($158<<2))|0);
      ___gmpn_toom2_sqr($153, $154, $155, $159);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $162=$1;
      var $163=$n;
      var $164=($163<<1);
      var $165=(($162+($164<<2))|0);
      var $166=$1;
      var $167=$n;
      var $168=(($166+($167<<2))|0);
      var $169=$1;
      var $170=$n;
      var $171=($170<<1);
      var $172=(($169+($171<<2))|0);
      var $173=$n;
      var $174=___gmpn_add_n($165, $168, $172, $173);
      $cy=$174;
      var $175=$cy;
      var $176=$1;
      var $177=$n;
      var $178=(($176+($177<<2))|0);
      var $179=$1;
      var $180=$n;
      var $181=($180<<1);
      var $182=(($179+($181<<2))|0);
      var $183=$1;
      var $184=$n;
      var $185=___gmpn_add_n($178, $182, $183, $184);
      var $186=((($175)+($185))|0);
      $cy2=$186;
      var $187=$1;
      var $188=$n;
      var $189=($188<<1);
      var $190=(($187+($189<<2))|0);
      var $191=$1;
      var $192=$n;
      var $193=($192<<1);
      var $194=(($191+($193<<2))|0);
      var $195=$n;
      var $196=$1;
      var $197=$n;
      var $198=($197<<1);
      var $199=(($196+($198<<2))|0);
      var $200=$n;
      var $201=(($199+($200<<2))|0);
      var $202=$s;
      var $203=$s;
      var $204=((($202)+($203))|0);
      var $205=$n;
      var $206=((($204)-($205))|0);
      var $207=___gmpn_add($190, $194, $195, $201, $206);
      var $208=$cy;
      var $209=((($208)+($207))|0);
      $cy=$209;
      var $210=$1;
      var $211=$n;
      var $212=(($210+($211<<2))|0);
      var $213=$1;
      var $214=$n;
      var $215=(($213+($214<<2))|0);
      var $216=$4;
      var $217=$n;
      var $218=($217<<1);
      var $219=___gmpn_sub_n($212, $215, $216, $218);
      var $220=$cy;
      var $221=((($220)-($219))|0);
      $cy=$221;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $227=$1;
      var $228=$n;
      var $229=($228<<1);
      var $230=(($227+($229<<2))|0);
      $__p=$230;
      var $231=$__p;
      var $232=HEAP32[(($231)>>2)];
      var $233=$cy2;
      var $234=((($232)+($233))|0);
      $__x=$234;
      var $235=$__x;
      var $236=$__p;
      HEAP32[(($236)>>2)]=$235;
      var $237=$__x;
      var $238=$cy2;
      var $239=(($237)>>>0) < (($238)>>>0);
      if ($239) { label = 44; break; } else { label = 48; break; }
    case 44: 
      label = 45; break;
    case 45: 
      var $242=$__p;
      var $243=(($242+4)|0);
      $__p=$243;
      var $244=HEAP32[(($243)>>2)];
      var $245=((($244)+(1))|0);
      HEAP32[(($243)>>2)]=$245;
      var $246=(($245)|0)==0;
      if ($246) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 45; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $251=$cy;
      var $252=(($251)>>>0) <= 2;
      if ($252) { label = 50; break; } else { label = 58; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $255=$1;
      var $256=$n;
      var $257=((($256)*(3))&-1);
      var $258=(($255+($257<<2))|0);
      $__p2=$258;
      var $259=$__p2;
      var $260=HEAP32[(($259)>>2)];
      var $261=$cy;
      var $262=((($260)+($261))|0);
      $__x1=$262;
      var $263=$__x1;
      var $264=$__p2;
      HEAP32[(($264)>>2)]=$263;
      var $265=$__x1;
      var $266=$cy;
      var $267=(($265)>>>0) < (($266)>>>0);
      if ($267) { label = 52; break; } else { label = 56; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $270=$__p2;
      var $271=(($270+4)|0);
      $__p2=$271;
      var $272=HEAP32[(($271)>>2)];
      var $273=((($272)+(1))|0);
      HEAP32[(($271)>>2)]=$273;
      var $274=(($273)|0)==0;
      if ($274) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 53; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 64; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $281=$1;
      var $282=$n;
      var $283=((($282)*(3))&-1);
      var $284=(($281+($283<<2))|0);
      $__p4=$284;
      label = 60; break;
    case 60: 
      var $286=$__p4;
      var $287=(($286+4)|0);
      $__p4=$287;
      var $288=HEAP32[(($286)>>2)];
      var $289=((($288)-(1))|0);
      HEAP32[(($286)>>2)]=$289;
      var $290=(($288)|0)==0;
      if ($290) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 60; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom2_sqr["X"]=1;

function ___gmpn_toom32_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $vm1_neg;
      var $cy;
      var $hi;
      var $ap1_hi;
      var $bp1_hi;
      var $__dst;
      var $__n;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$3;
      var $10=($9<<1);
      var $11=$5;
      var $12=((($11)*(3))&-1);
      var $13=(($10)|0) >= (($12)|0);
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$3;
      var $16=((($15)-(1))|0);
      var $17=Math.floor(((($16)>>>0))/(3));
      var $23 = $17;label = 7; break;
    case 6: 
      var $19=$5;
      var $20=((($19)-(1))|0);
      var $21=$20 >> 1;
      var $23 = $21;label = 7; break;
    case 7: 
      var $23;
      var $24=((($23)+(1))|0);
      $n=$24;
      var $25=$3;
      var $26=$n;
      var $27=($26<<1);
      var $28=((($25)-($27))|0);
      $s=$28;
      var $29=$5;
      var $30=$n;
      var $31=((($29)-($30))|0);
      $t=$31;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $38=$1;
      var $39=$2;
      var $40=$n;
      var $41=$2;
      var $42=$n;
      var $43=($42<<1);
      var $44=(($41+($43<<2))|0);
      var $45=$s;
      var $46=___gmpn_add($38, $39, $40, $44, $45);
      $ap1_hi=$46;
      var $47=$ap1_hi;
      var $48=(($47)|0)==0;
      if ($48) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $50=$1;
      var $51=$2;
      var $52=$n;
      var $53=(($51+($52<<2))|0);
      var $54=$n;
      var $55=___gmpn_cmp($50, $53, $54);
      var $56=(($55)|0) < 0;
      if ($56) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $58=$1;
      var $59=$n;
      var $60=($59<<1);
      var $61=(($58+($60<<2))|0);
      var $62=$2;
      var $63=$n;
      var $64=(($62+($63<<2))|0);
      var $65=$1;
      var $66=$n;
      var $67=___gmpn_sub_n($61, $64, $65, $66);
      $hi=0;
      $vm1_neg=1;
      label = 17; break;
    case 16: 
      var $69=$ap1_hi;
      var $70=$1;
      var $71=$n;
      var $72=($71<<1);
      var $73=(($70+($72<<2))|0);
      var $74=$1;
      var $75=$2;
      var $76=$n;
      var $77=(($75+($76<<2))|0);
      var $78=$n;
      var $79=___gmpn_sub_n($73, $74, $77, $78);
      var $80=((($69)-($79))|0);
      $hi=$80;
      $vm1_neg=0;
      label = 17; break;
    case 17: 
      var $82=$1;
      var $83=$1;
      var $84=$2;
      var $85=$n;
      var $86=(($84+($85<<2))|0);
      var $87=$n;
      var $88=___gmpn_add_n($82, $83, $86, $87);
      var $89=$ap1_hi;
      var $90=((($89)+($88))|0);
      $ap1_hi=$90;
      var $91=$t;
      var $92=$n;
      var $93=(($91)|0)==(($92)|0);
      if ($93) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $95=$1;
      var $96=$n;
      var $97=(($95+($96<<2))|0);
      var $98=$4;
      var $99=$4;
      var $100=$n;
      var $101=(($99+($100<<2))|0);
      var $102=$n;
      var $103=___gmpn_add_n($97, $98, $101, $102);
      $bp1_hi=$103;
      var $104=$4;
      var $105=$4;
      var $106=$n;
      var $107=(($105+($106<<2))|0);
      var $108=$n;
      var $109=___gmpn_cmp($104, $107, $108);
      var $110=(($109)|0) < 0;
      if ($110) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $112=$1;
      var $113=$n;
      var $114=((($113)*(3))&-1);
      var $115=(($112+($114<<2))|0);
      var $116=$4;
      var $117=$n;
      var $118=(($116+($117<<2))|0);
      var $119=$4;
      var $120=$n;
      var $121=___gmpn_sub_n($115, $118, $119, $120);
      var $122=$vm1_neg;
      var $123=$122 ^ 1;
      $vm1_neg=$123;
      label = 21; break;
    case 20: 
      var $125=$1;
      var $126=$n;
      var $127=((($126)*(3))&-1);
      var $128=(($125+($127<<2))|0);
      var $129=$4;
      var $130=$4;
      var $131=$n;
      var $132=(($130+($131<<2))|0);
      var $133=$n;
      var $134=___gmpn_sub_n($128, $129, $132, $133);
      label = 21; break;
    case 21: 
      label = 36; break;
    case 22: 
      var $137=$1;
      var $138=$n;
      var $139=(($137+($138<<2))|0);
      var $140=$4;
      var $141=$n;
      var $142=$4;
      var $143=$n;
      var $144=(($142+($143<<2))|0);
      var $145=$t;
      var $146=___gmpn_add($139, $140, $141, $144, $145);
      $bp1_hi=$146;
      var $147=$4;
      var $148=$t;
      var $149=(($147+($148<<2))|0);
      var $150=$n;
      var $151=$t;
      var $152=((($150)-($151))|0);
      var $153=_mpn_zero_p155($149, $152);
      var $154=(($153)|0)!=0;
      if ($154) { label = 23; break; } else { label = 34; break; }
    case 23: 
      var $156=$4;
      var $157=$4;
      var $158=$n;
      var $159=(($157+($158<<2))|0);
      var $160=$t;
      var $161=___gmpn_cmp($156, $159, $160);
      var $162=(($161)|0) < 0;
      if ($162) { label = 24; break; } else { label = 34; break; }
    case 24: 
      var $164=$1;
      var $165=$n;
      var $166=((($165)*(3))&-1);
      var $167=(($164+($166<<2))|0);
      var $168=$4;
      var $169=$n;
      var $170=(($168+($169<<2))|0);
      var $171=$4;
      var $172=$t;
      var $173=___gmpn_sub_n($167, $170, $171, $172);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $177=$n;
      var $178=$t;
      var $179=((($177)-($178))|0);
      var $180=(($179)|0)!=0;
      if ($180) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $182=$1;
      var $183=$n;
      var $184=((($183)*(3))&-1);
      var $185=(($182+($184<<2))|0);
      var $186=$t;
      var $187=(($185+($186<<2))|0);
      $__dst=$187;
      var $188=$n;
      var $189=$t;
      var $190=((($188)-($189))|0);
      $__n=$190;
      label = 29; break;
    case 29: 
      var $192=$__dst;
      var $193=(($192+4)|0);
      $__dst=$193;
      HEAP32[(($192)>>2)]=0;
      label = 30; break;
    case 30: 
      var $195=$__n;
      var $196=((($195)-(1))|0);
      $__n=$196;
      var $197=(($196)|0)!=0;
      if ($197) { label = 29; break; } else { label = 31; break; }
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $201=$vm1_neg;
      var $202=$201 ^ 1;
      $vm1_neg=$202;
      label = 35; break;
    case 34: 
      var $204=$1;
      var $205=$n;
      var $206=((($205)*(3))&-1);
      var $207=(($204+($206<<2))|0);
      var $208=$4;
      var $209=$n;
      var $210=$4;
      var $211=$n;
      var $212=(($210+($211<<2))|0);
      var $213=$t;
      var $214=___gmpn_sub($207, $208, $209, $212, $213);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $218=$6;
      var $219=$1;
      var $220=$1;
      var $221=$n;
      var $222=(($220+($221<<2))|0);
      var $223=$n;
      ___gmpn_mul_n($218, $219, $222, $223);
      label = 38; break;
    case 38: 
      var $225=$ap1_hi;
      var $226=(($225)|0)==1;
      if ($226) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $228=$bp1_hi;
      var $229=$6;
      var $230=$n;
      var $231=(($229+($230<<2))|0);
      var $232=$6;
      var $233=$n;
      var $234=(($232+($233<<2))|0);
      var $235=$1;
      var $236=$n;
      var $237=(($235+($236<<2))|0);
      var $238=$n;
      var $239=___gmpn_add_n($231, $234, $237, $238);
      var $240=((($228)+($239))|0);
      $cy=$240;
      label = 44; break;
    case 40: 
      var $242=$ap1_hi;
      var $243=(($242)|0)==2;
      if ($243) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $245=$bp1_hi;
      var $246=($245<<1);
      var $247=$6;
      var $248=$n;
      var $249=(($247+($248<<2))|0);
      var $250=$1;
      var $251=$n;
      var $252=(($250+($251<<2))|0);
      var $253=$n;
      var $254=___gmpn_addmul_1($249, $252, $253, 2);
      var $255=((($246)+($254))|0);
      $cy=$255;
      label = 43; break;
    case 42: 
      $cy=0;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $259=$bp1_hi;
      var $260=(($259)|0)!=0;
      if ($260) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $262=$6;
      var $263=$n;
      var $264=(($262+($263<<2))|0);
      var $265=$6;
      var $266=$n;
      var $267=(($265+($266<<2))|0);
      var $268=$1;
      var $269=$n;
      var $270=___gmpn_add_n($264, $267, $268, $269);
      var $271=$cy;
      var $272=((($271)+($270))|0);
      $cy=$272;
      label = 46; break;
    case 46: 
      var $274=$cy;
      var $275=$n;
      var $276=($275<<1);
      var $277=$6;
      var $278=(($277+($276<<2))|0);
      HEAP32[(($278)>>2)]=$274;
      label = 47; break;
    case 47: 
      var $280=$1;
      var $281=$1;
      var $282=$n;
      var $283=($282<<1);
      var $284=(($281+($283<<2))|0);
      var $285=$1;
      var $286=$n;
      var $287=((($286)*(3))&-1);
      var $288=(($285+($287<<2))|0);
      var $289=$n;
      ___gmpn_mul_n($280, $284, $288, $289);
      label = 48; break;
    case 48: 
      var $291=$hi;
      var $292=(($291)|0)!=0;
      if ($292) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $294=$1;
      var $295=$n;
      var $296=(($294+($295<<2))|0);
      var $297=$1;
      var $298=$n;
      var $299=(($297+($298<<2))|0);
      var $300=$1;
      var $301=$n;
      var $302=((($301)*(3))&-1);
      var $303=(($300+($302<<2))|0);
      var $304=$n;
      var $305=___gmpn_add_n($296, $299, $303, $304);
      $hi=$305;
      label = 50; break;
    case 50: 
      var $307=$hi;
      var $308=$n;
      var $309=($308<<1);
      var $310=$1;
      var $311=(($310+($309<<2))|0);
      HEAP32[(($311)>>2)]=$307;
      var $312=$vm1_neg;
      var $313=(($312)|0)!=0;
      if ($313) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $315=$6;
      var $316=$6;
      var $317=$1;
      var $318=$n;
      var $319=($318<<1);
      var $320=((($319)+(1))|0);
      var $321=___gmpn_sub_n($315, $316, $317, $320);
      var $322=$6;
      var $323=$6;
      var $324=$n;
      var $325=($324<<1);
      var $326=((($325)+(1))|0);
      var $327=___gmpn_rshift($322, $323, $326, 1);
      label = 53; break;
    case 52: 
      var $329=$6;
      var $330=$6;
      var $331=$1;
      var $332=$n;
      var $333=($332<<1);
      var $334=((($333)+(1))|0);
      var $335=___gmpn_add_n($329, $330, $331, $334);
      var $336=$6;
      var $337=$6;
      var $338=$n;
      var $339=($338<<1);
      var $340=((($339)+(1))|0);
      var $341=___gmpn_rshift($336, $337, $340, 1);
      label = 53; break;
    case 53: 
      var $343=$n;
      var $344=($343<<1);
      var $345=$1;
      var $346=(($345+($344<<2))|0);
      var $347=HEAP32[(($346)>>2)];
      $hi=$347;
      var $348=$1;
      var $349=$n;
      var $350=($349<<1);
      var $351=(($348+($350<<2))|0);
      var $352=$6;
      var $353=$6;
      var $354=$n;
      var $355=(($353+($354<<2))|0);
      var $356=$n;
      var $357=___gmpn_add_n($351, $352, $355, $356);
      $cy=$357;
      label = 54; break;
    case 54: 
      var $359=$6;
      var $360=$n;
      var $361=(($359+($360<<2))|0);
      $__p=$361;
      var $362=$__p;
      var $363=HEAP32[(($362)>>2)];
      var $364=$cy;
      var $365=$n;
      var $366=($365<<1);
      var $367=$6;
      var $368=(($367+($366<<2))|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=((($364)+($369))|0);
      var $371=((($363)+($370))|0);
      $__x=$371;
      var $372=$__x;
      var $373=$__p;
      HEAP32[(($373)>>2)]=$372;
      var $374=$__x;
      var $375=$cy;
      var $376=$n;
      var $377=($376<<1);
      var $378=$6;
      var $379=(($378+($377<<2))|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=((($375)+($380))|0);
      var $382=(($374)>>>0) < (($381)>>>0);
      if ($382) { label = 55; break; } else { label = 59; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $385=$__p;
      var $386=(($385+4)|0);
      $__p=$386;
      var $387=HEAP32[(($386)>>2)];
      var $388=((($387)+(1))|0);
      HEAP32[(($386)>>2)]=$388;
      var $389=(($388)|0)==0;
      if ($389) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 56; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $394=$vm1_neg;
      var $395=(($394)|0)!=0;
      if ($395) { label = 61; break; } else { label = 69; break; }
    case 61: 
      var $397=$6;
      var $398=$6;
      var $399=$1;
      var $400=$n;
      var $401=___gmpn_add_n($397, $398, $399, $400);
      $cy=$401;
      var $402=$1;
      var $403=$n;
      var $404=($403<<1);
      var $405=(($402+($404<<2))|0);
      var $406=$1;
      var $407=$n;
      var $408=($407<<1);
      var $409=(($406+($408<<2))|0);
      var $410=$1;
      var $411=$n;
      var $412=(($410+($411<<2))|0);
      var $413=$n;
      var $414=$cy;
      var $415=_mpn_add_nc($405, $409, $412, $413, $414);
      var $416=$hi;
      var $417=((($416)+($415))|0);
      $hi=$417;
      label = 62; break;
    case 62: 
      var $419=$6;
      var $420=$n;
      var $421=(($419+($420<<2))|0);
      $__p2=$421;
      var $422=$__p2;
      var $423=HEAP32[(($422)>>2)];
      var $424=$hi;
      var $425=((($423)+($424))|0);
      $__x1=$425;
      var $426=$__x1;
      var $427=$__p2;
      HEAP32[(($427)>>2)]=$426;
      var $428=$__x1;
      var $429=$hi;
      var $430=(($428)>>>0) < (($429)>>>0);
      if ($430) { label = 63; break; } else { label = 67; break; }
    case 63: 
      label = 64; break;
    case 64: 
      var $433=$__p2;
      var $434=(($433+4)|0);
      $__p2=$434;
      var $435=HEAP32[(($434)>>2)];
      var $436=((($435)+(1))|0);
      HEAP32[(($434)>>2)]=$436;
      var $437=(($436)|0)==0;
      if ($437) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 64; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 77; break;
    case 69: 
      var $443=$6;
      var $444=$6;
      var $445=$1;
      var $446=$n;
      var $447=___gmpn_sub_n($443, $444, $445, $446);
      $cy=$447;
      var $448=$1;
      var $449=$n;
      var $450=($449<<1);
      var $451=(($448+($450<<2))|0);
      var $452=$1;
      var $453=$n;
      var $454=($453<<1);
      var $455=(($452+($454<<2))|0);
      var $456=$1;
      var $457=$n;
      var $458=(($456+($457<<2))|0);
      var $459=$n;
      var $460=$cy;
      var $461=_mpn_sub_nc156($451, $455, $458, $459, $460);
      var $462=$hi;
      var $463=((($462)+($461))|0);
      $hi=$463;
      label = 70; break;
    case 70: 
      var $465=$6;
      var $466=$n;
      var $467=(($465+($466<<2))|0);
      $__p4=$467;
      var $468=$__p4;
      var $469=HEAP32[(($468)>>2)];
      $__x3=$469;
      var $470=$__x3;
      var $471=$hi;
      var $472=((($470)-($471))|0);
      var $473=$__p4;
      HEAP32[(($473)>>2)]=$472;
      var $474=$__x3;
      var $475=$hi;
      var $476=(($474)>>>0) < (($475)>>>0);
      if ($476) { label = 71; break; } else { label = 75; break; }
    case 71: 
      label = 72; break;
    case 72: 
      var $479=$__p4;
      var $480=(($479+4)|0);
      $__p4=$480;
      var $481=HEAP32[(($480)>>2)];
      var $482=((($481)-(1))|0);
      HEAP32[(($480)>>2)]=$482;
      var $483=(($481)|0)==0;
      if ($483) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 72; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $490=$1;
      var $491=$2;
      var $492=$4;
      var $493=$n;
      ___gmpn_mul_n($490, $491, $492, $493);
      label = 79; break;
    case 79: 
      var $495=$s;
      var $496=$t;
      var $497=(($495)|0) > (($496)|0);
      if ($497) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $499=$1;
      var $500=$n;
      var $501=((($500)*(3))&-1);
      var $502=(($499+($501<<2))|0);
      var $503=$2;
      var $504=$n;
      var $505=($504<<1);
      var $506=(($503+($505<<2))|0);
      var $507=$s;
      var $508=$4;
      var $509=$n;
      var $510=(($508+($509<<2))|0);
      var $511=$t;
      var $512=___gmpn_mul($502, $506, $507, $510, $511);
      label = 82; break;
    case 81: 
      var $514=$1;
      var $515=$n;
      var $516=((($515)*(3))&-1);
      var $517=(($514+($516<<2))|0);
      var $518=$4;
      var $519=$n;
      var $520=(($518+($519<<2))|0);
      var $521=$t;
      var $522=$2;
      var $523=$n;
      var $524=($523<<1);
      var $525=(($522+($524<<2))|0);
      var $526=$s;
      var $527=___gmpn_mul($517, $520, $521, $525, $526);
      label = 82; break;
    case 82: 
      var $529=$1;
      var $530=$n;
      var $531=(($529+($530<<2))|0);
      var $532=$1;
      var $533=$n;
      var $534=(($532+($533<<2))|0);
      var $535=$1;
      var $536=$n;
      var $537=((($536)*(3))&-1);
      var $538=(($535+($537<<2))|0);
      var $539=$n;
      var $540=___gmpn_sub_n($531, $534, $538, $539);
      $cy=$540;
      var $541=$n;
      var $542=($541<<1);
      var $543=$6;
      var $544=(($543+($542<<2))|0);
      var $545=HEAP32[(($544)>>2)];
      var $546=$cy;
      var $547=((($545)+($546))|0);
      $hi=$547;
      var $548=$1;
      var $549=$n;
      var $550=($549<<1);
      var $551=(($548+($550<<2))|0);
      var $552=$1;
      var $553=$n;
      var $554=($553<<1);
      var $555=(($552+($554<<2))|0);
      var $556=$1;
      var $557=$n;
      var $558=$cy;
      var $559=_mpn_sub_nc156($551, $555, $556, $557, $558);
      $cy=$559;
      var $560=$1;
      var $561=$n;
      var $562=((($561)*(3))&-1);
      var $563=(($560+($562<<2))|0);
      var $564=$6;
      var $565=$n;
      var $566=(($564+($565<<2))|0);
      var $567=$1;
      var $568=$n;
      var $569=(($567+($568<<2))|0);
      var $570=$n;
      var $571=$cy;
      var $572=_mpn_sub_nc156($563, $566, $569, $570, $571);
      var $573=$hi;
      var $574=((($573)-($572))|0);
      $hi=$574;
      var $575=$1;
      var $576=$n;
      var $577=(($575+($576<<2))|0);
      var $578=$1;
      var $579=$n;
      var $580=(($578+($579<<2))|0);
      var $581=$n;
      var $582=((($581)*(3))&-1);
      var $583=$6;
      var $584=$n;
      var $585=___gmpn_add($577, $580, $582, $583, $584);
      var $586=$hi;
      var $587=((($586)+($585))|0);
      $hi=$587;
      var $588=$s;
      var $589=$t;
      var $590=((($588)+($589))|0);
      var $591=$n;
      var $592=(($590)|0) > (($591)|0);
      if ($592) { label = 83; break; } else { label = 101; break; }
    case 83: 
      var $594=$1;
      var $595=$n;
      var $596=($595<<1);
      var $597=(($594+($596<<2))|0);
      var $598=$1;
      var $599=$n;
      var $600=($599<<1);
      var $601=(($598+($600<<2))|0);
      var $602=$n;
      var $603=($602<<1);
      var $604=$1;
      var $605=$n;
      var $606=($605<<2);
      var $607=(($604+($606<<2))|0);
      var $608=$s;
      var $609=$t;
      var $610=((($608)+($609))|0);
      var $611=$n;
      var $612=((($610)-($611))|0);
      var $613=___gmpn_sub($597, $601, $603, $607, $612);
      var $614=$hi;
      var $615=((($614)-($613))|0);
      $hi=$615;
      var $616=$hi;
      var $617=(($616)|0) < 0;
      if ($617) { label = 84; break; } else { label = 92; break; }
    case 84: 
      label = 85; break;
    case 85: 
      var $620=$1;
      var $621=$n;
      var $622=($621<<2);
      var $623=(($620+($622<<2))|0);
      $__p6=$623;
      var $624=$__p6;
      var $625=HEAP32[(($624)>>2)];
      $__x5=$625;
      var $626=$__x5;
      var $627=$hi;
      var $628=(((-$627))|0);
      var $629=((($626)-($628))|0);
      var $630=$__p6;
      HEAP32[(($630)>>2)]=$629;
      var $631=$__x5;
      var $632=$hi;
      var $633=(((-$632))|0);
      var $634=(($631)>>>0) < (($633)>>>0);
      if ($634) { label = 86; break; } else { label = 90; break; }
    case 86: 
      label = 87; break;
    case 87: 
      var $637=$__p6;
      var $638=(($637+4)|0);
      $__p6=$638;
      var $639=HEAP32[(($638)>>2)];
      var $640=((($639)-(1))|0);
      HEAP32[(($638)>>2)]=$640;
      var $641=(($639)|0)==0;
      if ($641) { label = 88; break; } else { label = 89; break; }
    case 88: 
      label = 87; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 100; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $648=$1;
      var $649=$n;
      var $650=($649<<2);
      var $651=(($648+($650<<2))|0);
      $__p8=$651;
      var $652=$__p8;
      var $653=HEAP32[(($652)>>2)];
      var $654=$hi;
      var $655=((($653)+($654))|0);
      $__x7=$655;
      var $656=$__x7;
      var $657=$__p8;
      HEAP32[(($657)>>2)]=$656;
      var $658=$__x7;
      var $659=$hi;
      var $660=(($658)>>>0) < (($659)>>>0);
      if ($660) { label = 94; break; } else { label = 98; break; }
    case 94: 
      label = 95; break;
    case 95: 
      var $663=$__p8;
      var $664=(($663+4)|0);
      $__p8=$664;
      var $665=HEAP32[(($664)>>2)];
      var $666=((($665)+(1))|0);
      HEAP32[(($664)>>2)]=$666;
      var $667=(($666)|0)==0;
      if ($667) { label = 96; break; } else { label = 97; break; }
    case 96: 
      label = 95; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 104; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom32_mul["X"]=1;

function _mpn_zero_p155($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$ap;
      $3=$n;
      var $4=$3;
      var $5=((($4)-(1))|0);
      $i=$5;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=(($7)|0) >= 0;
      if ($8) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $10=$i;
      var $11=$2;
      var $12=(($11+($10<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$i;
      var $19=((($18)-(1))|0);
      $i=$19;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $22=$1;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}


function _mpn_add_nc($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_add_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_add_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function _mpn_sub_nc156($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_toom33_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $vm1_neg;
      var $cy;
      var $vinf0;
      var $gp;
      var $as1;
      var $asm1;
      var $as2;
      var $bs1;
      var $bsm1;
      var $bs2;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      var $7=$3;
      var $8=((($7)+(2))|0);
      var $9=Math.floor(((($8)>>>0))/(3));
      $n=$9;
      var $10=$3;
      var $11=$n;
      var $12=($11<<1);
      var $13=((($10)-($12))|0);
      $s=$13;
      var $14=$5;
      var $15=$n;
      var $16=($15<<1);
      var $17=((($14)-($16))|0);
      $t=$17;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $24=$6;
      var $25=$n;
      var $26=($25<<2);
      var $27=(($24+($26<<2))|0);
      var $28=(($27+16)|0);
      $as1=$28;
      var $29=$6;
      var $30=$n;
      var $31=($30<<1);
      var $32=(($29+($31<<2))|0);
      var $33=(($32+8)|0);
      $asm1=$33;
      var $34=$1;
      var $35=$n;
      var $36=(($34+($35<<2))|0);
      var $37=(($36+4)|0);
      $as2=$37;
      var $38=$1;
      $bs1=$38;
      var $39=$6;
      var $40=$n;
      var $41=((($40)*(3))&-1);
      var $42=(($39+($41<<2))|0);
      var $43=(($42+12)|0);
      $bsm1=$43;
      var $44=$1;
      var $45=$n;
      var $46=($45<<1);
      var $47=(($44+($46<<2))|0);
      var $48=(($47+8)|0);
      $bs2=$48;
      var $49=$6;
      $gp=$49;
      $vm1_neg=0;
      var $50=$gp;
      var $51=$2;
      var $52=$n;
      var $53=$2;
      var $54=$n;
      var $55=($54<<1);
      var $56=(($53+($55<<2))|0);
      var $57=$s;
      var $58=___gmpn_add($50, $51, $52, $56, $57);
      $cy=$58;
      var $59=$cy;
      var $60=$as1;
      var $61=$gp;
      var $62=$2;
      var $63=$n;
      var $64=(($62+($63<<2))|0);
      var $65=$n;
      var $66=___gmpn_add_n($60, $61, $64, $65);
      var $67=((($59)+($66))|0);
      var $68=$n;
      var $69=$as1;
      var $70=(($69+($68<<2))|0);
      HEAP32[(($70)>>2)]=$67;
      var $71=$cy;
      var $72=(($71)|0)==0;
      if ($72) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $74=$gp;
      var $75=$2;
      var $76=$n;
      var $77=(($75+($76<<2))|0);
      var $78=$n;
      var $79=___gmpn_cmp($74, $77, $78);
      var $80=(($79)|0) < 0;
      if ($80) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $82=$asm1;
      var $83=$2;
      var $84=$n;
      var $85=(($83+($84<<2))|0);
      var $86=$gp;
      var $87=$n;
      var $88=___gmpn_sub_n($82, $85, $86, $87);
      var $89=$n;
      var $90=$asm1;
      var $91=(($90+($89<<2))|0);
      HEAP32[(($91)>>2)]=0;
      $vm1_neg=1;
      label = 12; break;
    case 11: 
      var $93=$asm1;
      var $94=$gp;
      var $95=$2;
      var $96=$n;
      var $97=(($95+($96<<2))|0);
      var $98=$n;
      var $99=___gmpn_sub_n($93, $94, $97, $98);
      var $100=$cy;
      var $101=((($100)-($99))|0);
      $cy=$101;
      var $102=$cy;
      var $103=$n;
      var $104=$asm1;
      var $105=(($104+($103<<2))|0);
      HEAP32[(($105)>>2)]=$102;
      label = 12; break;
    case 12: 
      var $107=$as2;
      var $108=$2;
      var $109=$n;
      var $110=($109<<1);
      var $111=(($108+($110<<2))|0);
      var $112=$as1;
      var $113=$s;
      var $114=___gmpn_add_n($107, $111, $112, $113);
      $cy=$114;
      var $115=$s;
      var $116=$n;
      var $117=(($115)|0)!=(($116)|0);
      if ($117) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $119=$as2;
      var $120=$s;
      var $121=(($119+($120<<2))|0);
      var $122=$as1;
      var $123=$s;
      var $124=(($122+($123<<2))|0);
      var $125=$n;
      var $126=$s;
      var $127=((($125)-($126))|0);
      var $128=$cy;
      var $129=___gmpn_add_1($121, $124, $127, $128);
      $cy=$129;
      label = 14; break;
    case 14: 
      var $131=$n;
      var $132=$as1;
      var $133=(($132+($131<<2))|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=$cy;
      var $136=((($135)+($134))|0);
      $cy=$136;
      var $137=$cy;
      var $138=($137<<1);
      var $139=$as2;
      var $140=$as2;
      var $141=$n;
      var $142=___gmpn_lshift($139, $140, $141, 1);
      var $143=((($138)+($142))|0);
      $cy=$143;
      var $144=$as2;
      var $145=$as2;
      var $146=$2;
      var $147=$n;
      var $148=___gmpn_sub_n($144, $145, $146, $147);
      var $149=$cy;
      var $150=((($149)-($148))|0);
      $cy=$150;
      var $151=$cy;
      var $152=$n;
      var $153=$as2;
      var $154=(($153+($152<<2))|0);
      HEAP32[(($154)>>2)]=$151;
      var $155=$gp;
      var $156=$4;
      var $157=$n;
      var $158=$4;
      var $159=$n;
      var $160=($159<<1);
      var $161=(($158+($160<<2))|0);
      var $162=$t;
      var $163=___gmpn_add($155, $156, $157, $161, $162);
      $cy=$163;
      var $164=$cy;
      var $165=$bs1;
      var $166=$gp;
      var $167=$4;
      var $168=$n;
      var $169=(($167+($168<<2))|0);
      var $170=$n;
      var $171=___gmpn_add_n($165, $166, $169, $170);
      var $172=((($164)+($171))|0);
      var $173=$n;
      var $174=$bs1;
      var $175=(($174+($173<<2))|0);
      HEAP32[(($175)>>2)]=$172;
      var $176=$cy;
      var $177=(($176)|0)==0;
      if ($177) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $179=$gp;
      var $180=$4;
      var $181=$n;
      var $182=(($180+($181<<2))|0);
      var $183=$n;
      var $184=___gmpn_cmp($179, $182, $183);
      var $185=(($184)|0) < 0;
      if ($185) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $187=$bsm1;
      var $188=$4;
      var $189=$n;
      var $190=(($188+($189<<2))|0);
      var $191=$gp;
      var $192=$n;
      var $193=___gmpn_sub_n($187, $190, $191, $192);
      var $194=$n;
      var $195=$bsm1;
      var $196=(($195+($194<<2))|0);
      HEAP32[(($196)>>2)]=0;
      var $197=$vm1_neg;
      var $198=$197 ^ 1;
      $vm1_neg=$198;
      label = 18; break;
    case 17: 
      var $200=$bsm1;
      var $201=$gp;
      var $202=$4;
      var $203=$n;
      var $204=(($202+($203<<2))|0);
      var $205=$n;
      var $206=___gmpn_sub_n($200, $201, $204, $205);
      var $207=$cy;
      var $208=((($207)-($206))|0);
      $cy=$208;
      var $209=$cy;
      var $210=$n;
      var $211=$bsm1;
      var $212=(($211+($210<<2))|0);
      HEAP32[(($212)>>2)]=$209;
      label = 18; break;
    case 18: 
      var $214=$bs2;
      var $215=$bs1;
      var $216=$4;
      var $217=$n;
      var $218=($217<<1);
      var $219=(($216+($218<<2))|0);
      var $220=$t;
      var $221=___gmpn_add_n($214, $215, $219, $220);
      $cy=$221;
      var $222=$t;
      var $223=$n;
      var $224=(($222)|0)!=(($223)|0);
      if ($224) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $226=$bs2;
      var $227=$t;
      var $228=(($226+($227<<2))|0);
      var $229=$bs1;
      var $230=$t;
      var $231=(($229+($230<<2))|0);
      var $232=$n;
      var $233=$t;
      var $234=((($232)-($233))|0);
      var $235=$cy;
      var $236=___gmpn_add_1($228, $231, $234, $235);
      $cy=$236;
      label = 20; break;
    case 20: 
      var $238=$n;
      var $239=$bs1;
      var $240=(($239+($238<<2))|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=$cy;
      var $243=((($242)+($241))|0);
      $cy=$243;
      var $244=$cy;
      var $245=($244<<1);
      var $246=$bs2;
      var $247=$bs2;
      var $248=$n;
      var $249=___gmpn_lshift($246, $247, $248, 1);
      var $250=((($245)+($249))|0);
      $cy=$250;
      var $251=$bs2;
      var $252=$bs2;
      var $253=$4;
      var $254=$n;
      var $255=___gmpn_sub_n($251, $252, $253, $254);
      var $256=$cy;
      var $257=((($256)-($255))|0);
      $cy=$257;
      var $258=$cy;
      var $259=$n;
      var $260=$bs2;
      var $261=(($260+($259<<2))|0);
      HEAP32[(($261)>>2)]=$258;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $275=$n;
      var $276=((($275)+(1))|0);
      var $277=(($276)|0) >= 100;
      if ($277) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $279=$6;
      var $280=$asm1;
      var $281=$n;
      var $282=((($281)+(1))|0);
      var $283=$bsm1;
      var $284=$n;
      var $285=((($284)+(1))|0);
      var $286=$6;
      var $287=$n;
      var $288=((($287)*(5))&-1);
      var $289=(($286+($288<<2))|0);
      var $290=(($289+20)|0);
      ___gmpn_toom22_mul($279, $280, $282, $283, $285, $290);
      label = 36; break;
    case 35: 
      var $292=$6;
      var $293=$asm1;
      var $294=$n;
      var $295=((($294)+(1))|0);
      var $296=$bsm1;
      var $297=$n;
      var $298=((($297)+(1))|0);
      var $299=$6;
      var $300=$n;
      var $301=((($300)*(5))&-1);
      var $302=(($299+($301<<2))|0);
      var $303=(($302+20)|0);
      ___gmpn_toom33_mul($292, $293, $295, $296, $298, $303);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $307=$n;
      var $308=((($307)+(1))|0);
      var $309=(($308)|0) >= 100;
      if ($309) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $311=$6;
      var $312=$n;
      var $313=($312<<1);
      var $314=(($311+($313<<2))|0);
      var $315=(($314+4)|0);
      var $316=$as2;
      var $317=$n;
      var $318=((($317)+(1))|0);
      var $319=$bs2;
      var $320=$n;
      var $321=((($320)+(1))|0);
      var $322=$6;
      var $323=$n;
      var $324=((($323)*(5))&-1);
      var $325=(($322+($324<<2))|0);
      var $326=(($325+20)|0);
      ___gmpn_toom22_mul($315, $316, $318, $319, $321, $326);
      label = 41; break;
    case 40: 
      var $328=$6;
      var $329=$n;
      var $330=($329<<1);
      var $331=(($328+($330<<2))|0);
      var $332=(($331+4)|0);
      var $333=$as2;
      var $334=$n;
      var $335=((($334)+(1))|0);
      var $336=$bs2;
      var $337=$n;
      var $338=((($337)+(1))|0);
      var $339=$6;
      var $340=$n;
      var $341=((($340)*(5))&-1);
      var $342=(($339+($341<<2))|0);
      var $343=(($342+20)|0);
      ___gmpn_toom33_mul($332, $333, $335, $336, $338, $343);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $346=$s;
      var $347=$t;
      var $348=(($346)|0) > (($347)|0);
      if ($348) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $350=$1;
      var $351=$n;
      var $352=($351<<2);
      var $353=(($350+($352<<2))|0);
      var $354=$2;
      var $355=$n;
      var $356=($355<<1);
      var $357=(($354+($356<<2))|0);
      var $358=$s;
      var $359=$4;
      var $360=$n;
      var $361=($360<<1);
      var $362=(($359+($361<<2))|0);
      var $363=$t;
      var $364=___gmpn_mul($353, $357, $358, $362, $363);
      label = 50; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $367=$s;
      var $368=(($367)|0) >= 100;
      if ($368) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $370=$1;
      var $371=$n;
      var $372=($371<<2);
      var $373=(($370+($372<<2))|0);
      var $374=$2;
      var $375=$n;
      var $376=($375<<1);
      var $377=(($374+($376<<2))|0);
      var $378=$s;
      var $379=$4;
      var $380=$n;
      var $381=($380<<1);
      var $382=(($379+($381<<2))|0);
      var $383=$s;
      var $384=$6;
      var $385=$n;
      var $386=((($385)*(5))&-1);
      var $387=(($384+($386<<2))|0);
      var $388=(($387+20)|0);
      ___gmpn_toom22_mul($373, $377, $378, $382, $383, $388);
      label = 48; break;
    case 47: 
      var $390=$1;
      var $391=$n;
      var $392=($391<<2);
      var $393=(($390+($392<<2))|0);
      var $394=$2;
      var $395=$n;
      var $396=($395<<1);
      var $397=(($394+($396<<2))|0);
      var $398=$s;
      var $399=$4;
      var $400=$n;
      var $401=($400<<1);
      var $402=(($399+($401<<2))|0);
      var $403=$s;
      var $404=$6;
      var $405=$n;
      var $406=((($405)*(5))&-1);
      var $407=(($404+($406<<2))|0);
      var $408=(($407+20)|0);
      ___gmpn_toom33_mul($393, $397, $398, $402, $403, $408);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $412=$1;
      var $413=$n;
      var $414=($413<<2);
      var $415=(($412+($414<<2))|0);
      var $416=(($415)|0);
      var $417=HEAP32[(($416)>>2)];
      $vinf0=$417;
      var $418=$1;
      var $419=$n;
      var $420=($419<<2);
      var $421=(($418+($420<<2))|0);
      var $422=(($421+4)|0);
      var $423=HEAP32[(($422)>>2)];
      $cy=$423;
      label = 51; break;
    case 51: 
      var $425=$n;
      var $426=((($425)+(1))|0);
      var $427=(($426)|0) >= 100;
      if ($427) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $429=$1;
      var $430=$n;
      var $431=($430<<1);
      var $432=(($429+($431<<2))|0);
      var $433=$as1;
      var $434=$n;
      var $435=((($434)+(1))|0);
      var $436=$bs1;
      var $437=$n;
      var $438=((($437)+(1))|0);
      var $439=$6;
      var $440=$n;
      var $441=((($440)*(5))&-1);
      var $442=(($439+($441<<2))|0);
      var $443=(($442+20)|0);
      ___gmpn_toom22_mul($432, $433, $435, $436, $438, $443);
      label = 54; break;
    case 53: 
      var $445=$1;
      var $446=$n;
      var $447=($446<<1);
      var $448=(($445+($447<<2))|0);
      var $449=$as1;
      var $450=$n;
      var $451=((($450)+(1))|0);
      var $452=$bs1;
      var $453=$n;
      var $454=((($453)+(1))|0);
      var $455=$6;
      var $456=$n;
      var $457=((($456)*(5))&-1);
      var $458=(($455+($457<<2))|0);
      var $459=(($458+20)|0);
      ___gmpn_toom33_mul($448, $449, $451, $452, $454, $459);
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $462=$cy;
      var $463=$1;
      var $464=$n;
      var $465=($464<<2);
      var $466=(($463+($465<<2))|0);
      var $467=(($466+4)|0);
      HEAP32[(($467)>>2)]=$462;
      label = 56; break;
    case 56: 
      var $469=$n;
      var $470=(($469)|0) >= 100;
      if ($470) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $472=$1;
      var $473=$2;
      var $474=$n;
      var $475=$4;
      var $476=$n;
      var $477=$6;
      var $478=$n;
      var $479=((($478)*(5))&-1);
      var $480=(($477+($479<<2))|0);
      var $481=(($480+20)|0);
      ___gmpn_toom22_mul($472, $473, $474, $475, $476, $481);
      label = 59; break;
    case 58: 
      var $483=$1;
      var $484=$2;
      var $485=$n;
      var $486=$4;
      var $487=$n;
      var $488=$6;
      var $489=$n;
      var $490=((($489)*(5))&-1);
      var $491=(($488+($490<<2))|0);
      var $492=(($491+20)|0);
      ___gmpn_toom33_mul($483, $484, $485, $486, $487, $492);
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $495=$1;
      var $496=$6;
      var $497=$n;
      var $498=($497<<1);
      var $499=(($496+($498<<2))|0);
      var $500=(($499+4)|0);
      var $501=$6;
      var $502=$n;
      var $503=$s;
      var $504=$t;
      var $505=((($503)+($504))|0);
      var $506=$vm1_neg;
      var $507=$vinf0;
      ___gmpn_toom_interpolate_5pts($495, $500, $501, $502, $505, $506, $507);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom33_mul["X"]=1;

function ___gmpn_toom3_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      var $s;
      var $cy;
      var $vinf0;
      var $gp;
      var $as1;
      var $asm1;
      var $as2;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      var $5=$3;
      var $6=((($5)+(2))|0);
      var $7=Math.floor(((($6)>>>0))/(3));
      $n=$7;
      var $8=$3;
      var $9=$n;
      var $10=($9<<1);
      var $11=((($8)-($10))|0);
      $s=$11;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $14=$4;
      var $15=$n;
      var $16=($15<<2);
      var $17=(($14+($16<<2))|0);
      var $18=(($17+16)|0);
      $as1=$18;
      var $19=$4;
      var $20=$n;
      var $21=($20<<1);
      var $22=(($19+($21<<2))|0);
      var $23=(($22+8)|0);
      $asm1=$23;
      var $24=$1;
      var $25=$n;
      var $26=(($24+($25<<2))|0);
      var $27=(($26+4)|0);
      $as2=$27;
      var $28=$4;
      $gp=$28;
      var $29=$gp;
      var $30=$2;
      var $31=$n;
      var $32=$2;
      var $33=$n;
      var $34=($33<<1);
      var $35=(($32+($34<<2))|0);
      var $36=$s;
      var $37=___gmpn_add($29, $30, $31, $35, $36);
      $cy=$37;
      var $38=$cy;
      var $39=$as1;
      var $40=$gp;
      var $41=$2;
      var $42=$n;
      var $43=(($41+($42<<2))|0);
      var $44=$n;
      var $45=___gmpn_add_n($39, $40, $43, $44);
      var $46=((($38)+($45))|0);
      var $47=$n;
      var $48=$as1;
      var $49=(($48+($47<<2))|0);
      HEAP32[(($49)>>2)]=$46;
      var $50=$cy;
      var $51=(($50)|0)==0;
      if ($51) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $53=$gp;
      var $54=$2;
      var $55=$n;
      var $56=(($54+($55<<2))|0);
      var $57=$n;
      var $58=___gmpn_cmp($53, $56, $57);
      var $59=(($58)|0) < 0;
      if ($59) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $61=$asm1;
      var $62=$2;
      var $63=$n;
      var $64=(($62+($63<<2))|0);
      var $65=$gp;
      var $66=$n;
      var $67=___gmpn_sub_n($61, $64, $65, $66);
      var $68=$n;
      var $69=$asm1;
      var $70=(($69+($68<<2))|0);
      HEAP32[(($70)>>2)]=0;
      label = 8; break;
    case 7: 
      var $72=$asm1;
      var $73=$gp;
      var $74=$2;
      var $75=$n;
      var $76=(($74+($75<<2))|0);
      var $77=$n;
      var $78=___gmpn_sub_n($72, $73, $76, $77);
      var $79=$cy;
      var $80=((($79)-($78))|0);
      $cy=$80;
      var $81=$cy;
      var $82=$n;
      var $83=$asm1;
      var $84=(($83+($82<<2))|0);
      HEAP32[(($84)>>2)]=$81;
      label = 8; break;
    case 8: 
      var $86=$as2;
      var $87=$2;
      var $88=$n;
      var $89=($88<<1);
      var $90=(($87+($89<<2))|0);
      var $91=$as1;
      var $92=$s;
      var $93=___gmpn_add_n($86, $90, $91, $92);
      $cy=$93;
      var $94=$s;
      var $95=$n;
      var $96=(($94)|0)!=(($95)|0);
      if ($96) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $98=$as2;
      var $99=$s;
      var $100=(($98+($99<<2))|0);
      var $101=$as1;
      var $102=$s;
      var $103=(($101+($102<<2))|0);
      var $104=$n;
      var $105=$s;
      var $106=((($104)-($105))|0);
      var $107=$cy;
      var $108=___gmpn_add_1($100, $103, $106, $107);
      $cy=$108;
      label = 10; break;
    case 10: 
      var $110=$n;
      var $111=$as1;
      var $112=(($111+($110<<2))|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$cy;
      var $115=((($114)+($113))|0);
      $cy=$115;
      var $116=$cy;
      var $117=($116<<1);
      var $118=$as2;
      var $119=$as2;
      var $120=$n;
      var $121=___gmpn_lshift($118, $119, $120, 1);
      var $122=((($117)+($121))|0);
      $cy=$122;
      var $123=$as2;
      var $124=$as2;
      var $125=$2;
      var $126=$n;
      var $127=___gmpn_sub_n($123, $124, $125, $126);
      var $128=$cy;
      var $129=((($128)-($127))|0);
      $cy=$129;
      var $130=$cy;
      var $131=$n;
      var $132=$as2;
      var $133=(($132+($131<<2))|0);
      HEAP32[(($133)>>2)]=$130;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $139=$n;
      var $140=((($139)+(1))|0);
      var $141=(($140)|0) >= 50;
      if ($141) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $143=$4;
      var $144=$asm1;
      var $145=$n;
      var $146=((($145)+(1))|0);
      ___gmpn_sqr_basecase($143, $144, $146);
      label = 21; break;
    case 17: 
      var $148=$n;
      var $149=((($148)+(1))|0);
      var $150=(($149)|0) >= 120;
      if ($150) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $152=$4;
      var $153=$asm1;
      var $154=$n;
      var $155=((($154)+(1))|0);
      var $156=$4;
      var $157=$n;
      var $158=((($157)*(5))&-1);
      var $159=(($156+($158<<2))|0);
      var $160=(($159+20)|0);
      ___gmpn_toom2_sqr($152, $153, $155, $160);
      label = 20; break;
    case 19: 
      var $162=$4;
      var $163=$asm1;
      var $164=$n;
      var $165=((($164)+(1))|0);
      var $166=$4;
      var $167=$n;
      var $168=((($167)*(5))&-1);
      var $169=(($166+($168<<2))|0);
      var $170=(($169+20)|0);
      ___gmpn_toom3_sqr($162, $163, $165, $170);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $175=$n;
      var $176=((($175)+(1))|0);
      var $177=(($176)|0) >= 50;
      if ($177) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $179=$4;
      var $180=$n;
      var $181=($180<<1);
      var $182=(($179+($181<<2))|0);
      var $183=(($182+4)|0);
      var $184=$as2;
      var $185=$n;
      var $186=((($185)+(1))|0);
      ___gmpn_sqr_basecase($183, $184, $186);
      label = 29; break;
    case 25: 
      var $188=$n;
      var $189=((($188)+(1))|0);
      var $190=(($189)|0) >= 120;
      if ($190) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $192=$4;
      var $193=$n;
      var $194=($193<<1);
      var $195=(($192+($194<<2))|0);
      var $196=(($195+4)|0);
      var $197=$as2;
      var $198=$n;
      var $199=((($198)+(1))|0);
      var $200=$4;
      var $201=$n;
      var $202=((($201)*(5))&-1);
      var $203=(($200+($202<<2))|0);
      var $204=(($203+20)|0);
      ___gmpn_toom2_sqr($196, $197, $199, $204);
      label = 28; break;
    case 27: 
      var $206=$4;
      var $207=$n;
      var $208=($207<<1);
      var $209=(($206+($208<<2))|0);
      var $210=(($209+4)|0);
      var $211=$as2;
      var $212=$n;
      var $213=((($212)+(1))|0);
      var $214=$4;
      var $215=$n;
      var $216=((($215)*(5))&-1);
      var $217=(($214+($216<<2))|0);
      var $218=(($217+20)|0);
      ___gmpn_toom3_sqr($210, $211, $213, $218);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $223=$s;
      var $224=(($223)|0) >= 50;
      if ($224) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $226=$1;
      var $227=$n;
      var $228=($227<<2);
      var $229=(($226+($228<<2))|0);
      var $230=$2;
      var $231=$n;
      var $232=($231<<1);
      var $233=(($230+($232<<2))|0);
      var $234=$s;
      ___gmpn_sqr_basecase($229, $233, $234);
      label = 37; break;
    case 33: 
      var $236=$s;
      var $237=(($236)|0) >= 120;
      if ($237) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $239=$1;
      var $240=$n;
      var $241=($240<<2);
      var $242=(($239+($241<<2))|0);
      var $243=$2;
      var $244=$n;
      var $245=($244<<1);
      var $246=(($243+($245<<2))|0);
      var $247=$s;
      var $248=$4;
      var $249=$n;
      var $250=((($249)*(5))&-1);
      var $251=(($248+($250<<2))|0);
      var $252=(($251+20)|0);
      ___gmpn_toom2_sqr($242, $246, $247, $252);
      label = 36; break;
    case 35: 
      var $254=$1;
      var $255=$n;
      var $256=($255<<2);
      var $257=(($254+($256<<2))|0);
      var $258=$2;
      var $259=$n;
      var $260=($259<<1);
      var $261=(($258+($260<<2))|0);
      var $262=$s;
      var $263=$4;
      var $264=$n;
      var $265=((($264)*(5))&-1);
      var $266=(($263+($265<<2))|0);
      var $267=(($266+20)|0);
      ___gmpn_toom3_sqr($257, $261, $262, $267);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $271=$1;
      var $272=$n;
      var $273=($272<<2);
      var $274=(($271+($273<<2))|0);
      var $275=(($274)|0);
      var $276=HEAP32[(($275)>>2)];
      $vinf0=$276;
      var $277=$1;
      var $278=$n;
      var $279=($278<<2);
      var $280=(($277+($279<<2))|0);
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      $cy=$282;
      label = 39; break;
    case 39: 
      var $284=$n;
      var $285=((($284)+(1))|0);
      var $286=(($285)|0) >= 50;
      if ($286) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $288=$1;
      var $289=$n;
      var $290=($289<<1);
      var $291=(($288+($290<<2))|0);
      var $292=$as1;
      var $293=$n;
      var $294=((($293)+(1))|0);
      ___gmpn_sqr_basecase($291, $292, $294);
      label = 45; break;
    case 41: 
      var $296=$n;
      var $297=((($296)+(1))|0);
      var $298=(($297)|0) >= 120;
      if ($298) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $300=$1;
      var $301=$n;
      var $302=($301<<1);
      var $303=(($300+($302<<2))|0);
      var $304=$as1;
      var $305=$n;
      var $306=((($305)+(1))|0);
      var $307=$4;
      var $308=$n;
      var $309=((($308)*(5))&-1);
      var $310=(($307+($309<<2))|0);
      var $311=(($310+20)|0);
      ___gmpn_toom2_sqr($303, $304, $306, $311);
      label = 44; break;
    case 43: 
      var $313=$1;
      var $314=$n;
      var $315=($314<<1);
      var $316=(($313+($315<<2))|0);
      var $317=$as1;
      var $318=$n;
      var $319=((($318)+(1))|0);
      var $320=$4;
      var $321=$n;
      var $322=((($321)*(5))&-1);
      var $323=(($320+($322<<2))|0);
      var $324=(($323+20)|0);
      ___gmpn_toom3_sqr($316, $317, $319, $324);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $328=$cy;
      var $329=$1;
      var $330=$n;
      var $331=($330<<2);
      var $332=(($329+($331<<2))|0);
      var $333=(($332+4)|0);
      HEAP32[(($333)>>2)]=$328;
      label = 47; break;
    case 47: 
      var $335=$n;
      var $336=(($335)|0) >= 50;
      if ($336) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $338=$1;
      var $339=$2;
      var $340=$n;
      ___gmpn_sqr_basecase($338, $339, $340);
      label = 53; break;
    case 49: 
      var $342=$n;
      var $343=(($342)|0) >= 120;
      if ($343) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $345=$1;
      var $346=$2;
      var $347=$n;
      var $348=$4;
      var $349=$n;
      var $350=((($349)*(5))&-1);
      var $351=(($348+($350<<2))|0);
      var $352=(($351+20)|0);
      ___gmpn_toom2_sqr($345, $346, $347, $352);
      label = 52; break;
    case 51: 
      var $354=$1;
      var $355=$2;
      var $356=$n;
      var $357=$4;
      var $358=$n;
      var $359=((($358)*(5))&-1);
      var $360=(($357+($359<<2))|0);
      var $361=(($360+20)|0);
      ___gmpn_toom3_sqr($354, $355, $356, $361);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $365=$1;
      var $366=$4;
      var $367=$n;
      var $368=($367<<1);
      var $369=(($366+($368<<2))|0);
      var $370=(($369+4)|0);
      var $371=$4;
      var $372=$n;
      var $373=$s;
      var $374=$s;
      var $375=((($373)+($374))|0);
      var $376=$vinf0;
      ___gmpn_toom_interpolate_5pts($365, $370, $371, $372, $375, 0, $376);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom3_sqr["X"]=1;

function _mpn_zero_p163($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$ap;
      $3=$n;
      var $4=$3;
      var $5=((($4)-(1))|0);
      $i=$5;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=(($7)|0) >= 0;
      if ($8) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $10=$i;
      var $11=$2;
      var $12=(($11+($10<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$i;
      var $19=((($18)-(1))|0);
      $i=$19;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $22=$1;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_toom42_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $vm1_neg;
      var $cy;
      var $vinf0;
      var $a0_a2;
      var $a1_a3;
      var $as1;
      var $asm1;
      var $as2;
      var $bs1;
      var $bsm1;
      var $bs2;
      var $__tmp_marker;
      var $__dst;
      var $__n;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      var $7=$3;
      var $8=$5;
      var $9=($8<<1);
      var $10=(($7)|0) >= (($9)|0);
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$3;
      var $13=((($12)+(3))|0);
      var $14=$13 >> 2;
      var $20 = $14;label = 5; break;
    case 4: 
      var $16=$5;
      var $17=((($16)+(1))|0);
      var $18=$17 >> 1;
      var $20 = $18;label = 5; break;
    case 5: 
      var $20;
      $n=$20;
      var $21=$3;
      var $22=$n;
      var $23=((($22)*(3))&-1);
      var $24=((($21)-($23))|0);
      $s=$24;
      var $25=$5;
      var $26=$n;
      var $27=((($25)-($26))|0);
      $t=$27;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $__tmp_marker=0;
      var $32=$n;
      var $33=((($32)+(1))|0);
      var $34=($33<<2);
      var $35=STACKTOP;STACKTOP = (STACKTOP + $34)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $36=$35;
      $as1=$36;
      var $37=$n;
      var $38=((($37)+(1))|0);
      var $39=($38<<2);
      var $40=STACKTOP;STACKTOP = (STACKTOP + $39)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $41=$40;
      $asm1=$41;
      var $42=$n;
      var $43=((($42)+(1))|0);
      var $44=($43<<2);
      var $45=STACKTOP;STACKTOP = (STACKTOP + $44)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $46=$45;
      $as2=$46;
      var $47=$n;
      var $48=((($47)+(1))|0);
      var $49=($48<<2);
      var $50=STACKTOP;STACKTOP = (STACKTOP + $49)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $51=$50;
      $bs1=$51;
      var $52=$n;
      var $53=($52<<2);
      var $54=STACKTOP;STACKTOP = (STACKTOP + $53)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $55=$54;
      $bsm1=$55;
      var $56=$n;
      var $57=((($56)+(1))|0);
      var $58=($57<<2);
      var $59=STACKTOP;STACKTOP = (STACKTOP + $58)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $60=$59;
      $bs2=$60;
      var $61=$1;
      $a0_a2=$61;
      var $62=$1;
      var $63=$n;
      var $64=(($62+($63<<2))|0);
      var $65=(($64+4)|0);
      $a1_a3=$65;
      var $66=$as1;
      var $67=$asm1;
      var $68=$2;
      var $69=$n;
      var $70=$s;
      var $71=$a0_a2;
      var $72=___gmpn_toom_eval_dgr3_pm1($66, $67, $68, $69, $70, $71);
      var $73=$72 & 1;
      $vm1_neg=$73;
      var $74=$as2;
      var $75=$2;
      var $76=$n;
      var $77=((($76)*(3))&-1);
      var $78=(($75+($77<<2))|0);
      var $79=$s;
      var $80=___gmpn_lshift($74, $78, $79, 1);
      $cy=$80;
      var $81=$as2;
      var $82=$2;
      var $83=$n;
      var $84=($83<<1);
      var $85=(($82+($84<<2))|0);
      var $86=$as2;
      var $87=$s;
      var $88=___gmpn_add_n($81, $85, $86, $87);
      var $89=$cy;
      var $90=((($89)+($88))|0);
      $cy=$90;
      var $91=$s;
      var $92=$n;
      var $93=(($91)|0)!=(($92)|0);
      if ($93) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $95=$as2;
      var $96=$s;
      var $97=(($95+($96<<2))|0);
      var $98=$2;
      var $99=$n;
      var $100=($99<<1);
      var $101=(($98+($100<<2))|0);
      var $102=$s;
      var $103=(($101+($102<<2))|0);
      var $104=$n;
      var $105=$s;
      var $106=((($104)-($105))|0);
      var $107=$cy;
      var $108=___gmpn_add_1($97, $103, $106, $107);
      $cy=$108;
      label = 11; break;
    case 11: 
      var $110=$cy;
      var $111=($110<<1);
      var $112=$as2;
      var $113=$as2;
      var $114=$n;
      var $115=___gmpn_lshift($112, $113, $114, 1);
      var $116=((($111)+($115))|0);
      $cy=$116;
      var $117=$as2;
      var $118=$2;
      var $119=$n;
      var $120=(($118+($119<<2))|0);
      var $121=$as2;
      var $122=$n;
      var $123=___gmpn_add_n($117, $120, $121, $122);
      var $124=$cy;
      var $125=((($124)+($123))|0);
      $cy=$125;
      var $126=$cy;
      var $127=($126<<1);
      var $128=$as2;
      var $129=$as2;
      var $130=$n;
      var $131=___gmpn_lshift($128, $129, $130, 1);
      var $132=((($127)+($131))|0);
      $cy=$132;
      var $133=$as2;
      var $134=$2;
      var $135=$as2;
      var $136=$n;
      var $137=___gmpn_add_n($133, $134, $135, $136);
      var $138=$cy;
      var $139=((($138)+($137))|0);
      $cy=$139;
      var $140=$cy;
      var $141=$n;
      var $142=$as2;
      var $143=(($142+($141<<2))|0);
      HEAP32[(($143)>>2)]=$140;
      var $144=$t;
      var $145=$n;
      var $146=(($144)|0)==(($145)|0);
      if ($146) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $148=$bs1;
      var $149=$4;
      var $150=$4;
      var $151=$n;
      var $152=(($150+($151<<2))|0);
      var $153=$n;
      var $154=___gmpn_add_n($148, $149, $152, $153);
      var $155=$n;
      var $156=$bs1;
      var $157=(($156+($155<<2))|0);
      HEAP32[(($157)>>2)]=$154;
      var $158=$4;
      var $159=$4;
      var $160=$n;
      var $161=(($159+($160<<2))|0);
      var $162=$n;
      var $163=___gmpn_cmp($158, $161, $162);
      var $164=(($163)|0) < 0;
      if ($164) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $166=$bsm1;
      var $167=$4;
      var $168=$n;
      var $169=(($167+($168<<2))|0);
      var $170=$4;
      var $171=$n;
      var $172=___gmpn_sub_n($166, $169, $170, $171);
      var $173=$vm1_neg;
      var $174=$173 ^ 1;
      $vm1_neg=$174;
      label = 15; break;
    case 14: 
      var $176=$bsm1;
      var $177=$4;
      var $178=$4;
      var $179=$n;
      var $180=(($178+($179<<2))|0);
      var $181=$n;
      var $182=___gmpn_sub_n($176, $177, $180, $181);
      label = 15; break;
    case 15: 
      label = 30; break;
    case 16: 
      var $185=$bs1;
      var $186=$4;
      var $187=$n;
      var $188=$4;
      var $189=$n;
      var $190=(($188+($189<<2))|0);
      var $191=$t;
      var $192=___gmpn_add($185, $186, $187, $190, $191);
      var $193=$n;
      var $194=$bs1;
      var $195=(($194+($193<<2))|0);
      HEAP32[(($195)>>2)]=$192;
      var $196=$4;
      var $197=$t;
      var $198=(($196+($197<<2))|0);
      var $199=$n;
      var $200=$t;
      var $201=((($199)-($200))|0);
      var $202=_mpn_zero_p163($198, $201);
      var $203=(($202)|0)!=0;
      if ($203) { label = 17; break; } else { label = 28; break; }
    case 17: 
      var $205=$4;
      var $206=$4;
      var $207=$n;
      var $208=(($206+($207<<2))|0);
      var $209=$t;
      var $210=___gmpn_cmp($205, $208, $209);
      var $211=(($210)|0) < 0;
      if ($211) { label = 18; break; } else { label = 28; break; }
    case 18: 
      var $213=$bsm1;
      var $214=$4;
      var $215=$n;
      var $216=(($214+($215<<2))|0);
      var $217=$4;
      var $218=$t;
      var $219=___gmpn_sub_n($213, $216, $217, $218);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $223=$n;
      var $224=$t;
      var $225=((($223)-($224))|0);
      var $226=(($225)|0)!=0;
      if ($226) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $228=$bsm1;
      var $229=$t;
      var $230=(($228+($229<<2))|0);
      $__dst=$230;
      var $231=$n;
      var $232=$t;
      var $233=((($231)-($232))|0);
      $__n=$233;
      label = 23; break;
    case 23: 
      var $235=$__dst;
      var $236=(($235+4)|0);
      $__dst=$236;
      HEAP32[(($235)>>2)]=0;
      label = 24; break;
    case 24: 
      var $238=$__n;
      var $239=((($238)-(1))|0);
      $__n=$239;
      var $240=(($239)|0)!=0;
      if ($240) { label = 23; break; } else { label = 25; break; }
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $244=$vm1_neg;
      var $245=$244 ^ 1;
      $vm1_neg=$245;
      label = 29; break;
    case 28: 
      var $247=$bsm1;
      var $248=$4;
      var $249=$n;
      var $250=$4;
      var $251=$n;
      var $252=(($250+($251<<2))|0);
      var $253=$t;
      var $254=___gmpn_sub($247, $248, $249, $252, $253);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $257=$bs2;
      var $258=$bs1;
      var $259=$n;
      var $260=((($259)+(1))|0);
      var $261=$4;
      var $262=$n;
      var $263=(($261+($262<<2))|0);
      var $264=$t;
      var $265=___gmpn_add($257, $258, $260, $263, $264);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $277=$6;
      var $278=$asm1;
      var $279=$bsm1;
      var $280=$n;
      ___gmpn_mul_n($277, $278, $279, $280);
      label = 42; break;
    case 42: 
      $cy=0;
      var $282=$n;
      var $283=$asm1;
      var $284=(($283+($282<<2))|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=(($285)|0)!=0;
      if ($286) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $288=$6;
      var $289=$n;
      var $290=(($288+($289<<2))|0);
      var $291=$6;
      var $292=$n;
      var $293=(($291+($292<<2))|0);
      var $294=$bsm1;
      var $295=$n;
      var $296=___gmpn_add_n($290, $293, $294, $295);
      $cy=$296;
      label = 44; break;
    case 44: 
      var $298=$cy;
      var $299=$n;
      var $300=($299<<1);
      var $301=$6;
      var $302=(($301+($300<<2))|0);
      HEAP32[(($302)>>2)]=$298;
      label = 45; break;
    case 45: 
      var $304=$6;
      var $305=$n;
      var $306=($305<<1);
      var $307=(($304+($306<<2))|0);
      var $308=(($307+4)|0);
      var $309=$as2;
      var $310=$bs2;
      var $311=$n;
      var $312=((($311)+(1))|0);
      ___gmpn_mul_n($308, $309, $310, $312);
      label = 46; break;
    case 46: 
      var $314=$s;
      var $315=$t;
      var $316=(($314)|0) > (($315)|0);
      if ($316) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $318=$1;
      var $319=$n;
      var $320=($319<<2);
      var $321=(($318+($320<<2))|0);
      var $322=$2;
      var $323=$n;
      var $324=((($323)*(3))&-1);
      var $325=(($322+($324<<2))|0);
      var $326=$s;
      var $327=$4;
      var $328=$n;
      var $329=(($327+($328<<2))|0);
      var $330=$t;
      var $331=___gmpn_mul($321, $325, $326, $329, $330);
      label = 49; break;
    case 48: 
      var $333=$1;
      var $334=$n;
      var $335=($334<<2);
      var $336=(($333+($335<<2))|0);
      var $337=$4;
      var $338=$n;
      var $339=(($337+($338<<2))|0);
      var $340=$t;
      var $341=$2;
      var $342=$n;
      var $343=((($342)*(3))&-1);
      var $344=(($341+($343<<2))|0);
      var $345=$s;
      var $346=___gmpn_mul($336, $339, $340, $344, $345);
      label = 49; break;
    case 49: 
      var $348=$1;
      var $349=$n;
      var $350=($349<<2);
      var $351=(($348+($350<<2))|0);
      var $352=(($351)|0);
      var $353=HEAP32[(($352)>>2)];
      $vinf0=$353;
      label = 50; break;
    case 50: 
      var $355=$1;
      var $356=$n;
      var $357=($356<<1);
      var $358=(($355+($357<<2))|0);
      var $359=$as1;
      var $360=$bs1;
      var $361=$n;
      ___gmpn_mul_n($358, $359, $360, $361);
      label = 51; break;
    case 51: 
      var $363=$n;
      var $364=$as1;
      var $365=(($364+($363<<2))|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=(($366)|0)==1;
      if ($367) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $369=$n;
      var $370=$bs1;
      var $371=(($370+($369<<2))|0);
      var $372=HEAP32[(($371)>>2)];
      var $373=$1;
      var $374=$n;
      var $375=($374<<1);
      var $376=(($373+($375<<2))|0);
      var $377=$n;
      var $378=(($376+($377<<2))|0);
      var $379=$1;
      var $380=$n;
      var $381=($380<<1);
      var $382=(($379+($381<<2))|0);
      var $383=$n;
      var $384=(($382+($383<<2))|0);
      var $385=$bs1;
      var $386=$n;
      var $387=___gmpn_add_n($378, $384, $385, $386);
      var $388=((($372)+($387))|0);
      $cy=$388;
      label = 60; break;
    case 53: 
      var $390=$n;
      var $391=$as1;
      var $392=(($391+($390<<2))|0);
      var $393=HEAP32[(($392)>>2)];
      var $394=(($393)|0)==2;
      if ($394) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $396=$n;
      var $397=$bs1;
      var $398=(($397+($396<<2))|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=($399<<1);
      var $401=$1;
      var $402=$n;
      var $403=($402<<1);
      var $404=(($401+($403<<2))|0);
      var $405=$n;
      var $406=(($404+($405<<2))|0);
      var $407=$bs1;
      var $408=$n;
      var $409=___gmpn_addmul_1($406, $407, $408, 2);
      var $410=((($400)+($409))|0);
      $cy=$410;
      label = 59; break;
    case 55: 
      var $412=$n;
      var $413=$as1;
      var $414=(($413+($412<<2))|0);
      var $415=HEAP32[(($414)>>2)];
      var $416=(($415)|0)==3;
      if ($416) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $418=$n;
      var $419=$bs1;
      var $420=(($419+($418<<2))|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=((($421)*(3))&-1);
      var $423=$1;
      var $424=$n;
      var $425=($424<<1);
      var $426=(($423+($425<<2))|0);
      var $427=$n;
      var $428=(($426+($427<<2))|0);
      var $429=$bs1;
      var $430=$n;
      var $431=___gmpn_addmul_1($428, $429, $430, 3);
      var $432=((($422)+($431))|0);
      $cy=$432;
      label = 58; break;
    case 57: 
      $cy=0;
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $437=$n;
      var $438=$bs1;
      var $439=(($438+($437<<2))|0);
      var $440=HEAP32[(($439)>>2)];
      var $441=(($440)|0)!=0;
      if ($441) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $443=$1;
      var $444=$n;
      var $445=($444<<1);
      var $446=(($443+($445<<2))|0);
      var $447=$n;
      var $448=(($446+($447<<2))|0);
      var $449=$1;
      var $450=$n;
      var $451=($450<<1);
      var $452=(($449+($451<<2))|0);
      var $453=$n;
      var $454=(($452+($453<<2))|0);
      var $455=$as1;
      var $456=$n;
      var $457=___gmpn_add_n($448, $454, $455, $456);
      var $458=$cy;
      var $459=((($458)+($457))|0);
      $cy=$459;
      label = 62; break;
    case 62: 
      var $461=$cy;
      var $462=$n;
      var $463=($462<<1);
      var $464=$1;
      var $465=$n;
      var $466=($465<<1);
      var $467=(($464+($466<<2))|0);
      var $468=(($467+($463<<2))|0);
      HEAP32[(($468)>>2)]=$461;
      label = 63; break;
    case 63: 
      var $470=$1;
      var $471=$2;
      var $472=$4;
      var $473=$n;
      ___gmpn_mul_n($470, $471, $472, $473);
      label = 64; break;
    case 64: 
      var $475=$1;
      var $476=$6;
      var $477=$n;
      var $478=($477<<1);
      var $479=(($476+($478<<2))|0);
      var $480=(($479+4)|0);
      var $481=$6;
      var $482=$n;
      var $483=$s;
      var $484=$t;
      var $485=((($483)+($484))|0);
      var $486=$vm1_neg;
      var $487=$vinf0;
      ___gmpn_toom_interpolate_5pts($475, $480, $481, $482, $485, $486, $487);
      label = 65; break;
    case 65: 
      var $489=$__tmp_marker;
      var $490=(($489)|0)!=0;
      if ($490) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $492=$__tmp_marker;
      ___gmp_tmp_reentrant_free($492);
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom42_mul["X"]=1;

function ___gmpn_toom43_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $flags;
      var $cy;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      var $7=$3;
      var $8=((($7)*(3))&-1);
      var $9=$5;
      var $10=($9<<2);
      var $11=(($8)|0) >= (($10)|0);
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$3;
      var $14=((($13)-(1))|0);
      var $15=$14 >> 2;
      var $21 = $15;label = 5; break;
    case 4: 
      var $17=$5;
      var $18=((($17)-(1))|0);
      var $19=Math.floor(((($18)>>>0))/(3));
      var $21 = $19;label = 5; break;
    case 5: 
      var $21;
      var $22=((($21)+(1))|0);
      $n=$22;
      var $23=$3;
      var $24=$n;
      var $25=((($24)*(3))&-1);
      var $26=((($23)-($25))|0);
      $s=$26;
      var $27=$5;
      var $28=$n;
      var $29=($28<<1);
      var $30=((($27)-($29))|0);
      $t=$30;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $37=$1;
      var $38=$n;
      var $39=((($38)*(3))&-1);
      var $40=(($37+($39<<2))|0);
      var $41=(($40+12)|0);
      var $42=$6;
      var $43=$n;
      var $44=($43<<2);
      var $45=(($42+($44<<2))|0);
      var $46=(($45+16)|0);
      var $47=$2;
      var $48=$n;
      var $49=$s;
      var $50=$6;
      var $51=$n;
      var $52=((($51)*(3))&-1);
      var $53=(($50+($52<<2))|0);
      var $54=(($53+12)|0);
      var $55=___gmpn_toom_eval_dgr3_pm2($41, $46, $47, $48, $49, $54);
      var $56=2 & $55;
      $flags=$56;
      var $57=$6;
      var $58=$n;
      var $59=($58<<1);
      var $60=(($57+($59<<2))|0);
      var $61=(($60+8)|0);
      var $62=$4;
      var $63=$n;
      var $64=(($62+($63<<2))|0);
      var $65=$n;
      var $66=___gmpn_lshift($61, $64, $65, 1);
      var $67=$n;
      var $68=$6;
      var $69=$n;
      var $70=($69<<1);
      var $71=(($68+($70<<2))|0);
      var $72=(($71+8)|0);
      var $73=(($72+($67<<2))|0);
      HEAP32[(($73)>>2)]=$66;
      var $74=$6;
      var $75=$4;
      var $76=$n;
      var $77=($76<<1);
      var $78=(($75+($77<<2))|0);
      var $79=$t;
      var $80=___gmpn_lshift($74, $78, $79, 2);
      $cy=$80;
      var $81=$6;
      var $82=$6;
      var $83=$4;
      var $84=$t;
      var $85=___gmpn_add_n($81, $82, $83, $84);
      var $86=$cy;
      var $87=((($86)+($85))|0);
      $cy=$87;
      var $88=$t;
      var $89=$n;
      var $90=(($88)|0)!=(($89)|0);
      if ($90) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $92=$6;
      var $93=$t;
      var $94=(($92+($93<<2))|0);
      var $95=$4;
      var $96=$t;
      var $97=(($95+($96<<2))|0);
      var $98=$n;
      var $99=$t;
      var $100=((($98)-($99))|0);
      var $101=$cy;
      var $102=___gmpn_add_1($94, $97, $100, $101);
      $cy=$102;
      label = 13; break;
    case 13: 
      var $104=$cy;
      var $105=$n;
      var $106=$6;
      var $107=(($106+($105<<2))|0);
      HEAP32[(($107)>>2)]=$104;
      var $108=$1;
      var $109=$n;
      var $110=($109<<1);
      var $111=(($108+($110<<2))|0);
      var $112=(($111+8)|0);
      var $113=$6;
      var $114=$6;
      var $115=$n;
      var $116=($115<<1);
      var $117=(($114+($116<<2))|0);
      var $118=(($117+8)|0);
      var $119=$n;
      var $120=((($119)+(1))|0);
      var $121=___gmpn_add_n($112, $113, $118, $120);
      var $122=$6;
      var $123=$6;
      var $124=$n;
      var $125=($124<<1);
      var $126=(($123+($125<<2))|0);
      var $127=(($126+8)|0);
      var $128=$n;
      var $129=((($128)+(1))|0);
      var $130=___gmpn_cmp($122, $127, $129);
      var $131=(($130)|0) < 0;
      if ($131) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $133=$1;
      var $134=$n;
      var $135=(($133+($134<<2))|0);
      var $136=(($135+4)|0);
      var $137=$6;
      var $138=$n;
      var $139=($138<<1);
      var $140=(($137+($139<<2))|0);
      var $141=(($140+8)|0);
      var $142=$6;
      var $143=$n;
      var $144=((($143)+(1))|0);
      var $145=___gmpn_sub_n($136, $141, $142, $144);
      var $146=$flags;
      var $147=$146 ^ 2;
      $flags=$147;
      label = 16; break;
    case 15: 
      var $149=$1;
      var $150=$n;
      var $151=(($149+($150<<2))|0);
      var $152=(($151+4)|0);
      var $153=$6;
      var $154=$6;
      var $155=$n;
      var $156=($155<<1);
      var $157=(($154+($156<<2))|0);
      var $158=(($157+8)|0);
      var $159=$n;
      var $160=((($159)+(1))|0);
      var $161=___gmpn_sub_n($152, $153, $158, $160);
      label = 16; break;
    case 16: 
      var $163=$1;
      var $164=$n;
      var $165=($164<<2);
      var $166=(($163+($165<<2))|0);
      var $167=(($166+16)|0);
      var $168=$6;
      var $169=$n;
      var $170=((($169)*(3))&-1);
      var $171=(($168+($170<<2))|0);
      var $172=(($171+12)|0);
      var $173=$2;
      var $174=$n;
      var $175=$s;
      var $176=$6;
      var $177=___gmpn_toom_eval_dgr3_pm1($167, $172, $173, $174, $175, $176);
      var $178=1 & $177;
      var $179=$flags;
      var $180=$179 ^ $178;
      $flags=$180;
      var $181=$6;
      var $182=$n;
      var $183=($182<<1);
      var $184=(($181+($183<<2))|0);
      var $185=(($184+8)|0);
      var $186=$4;
      var $187=$n;
      var $188=$4;
      var $189=$n;
      var $190=($189<<1);
      var $191=(($188+($190<<2))|0);
      var $192=$t;
      var $193=___gmpn_add($185, $186, $187, $191, $192);
      var $194=$n;
      var $195=$6;
      var $196=$n;
      var $197=($196<<1);
      var $198=(($195+($197<<2))|0);
      var $199=(($198+8)|0);
      var $200=(($199+($194<<2))|0);
      HEAP32[(($200)>>2)]=$193;
      var $201=$n;
      var $202=$6;
      var $203=$n;
      var $204=($203<<1);
      var $205=(($202+($204<<2))|0);
      var $206=(($205+8)|0);
      var $207=(($206+($201<<2))|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$1;
      var $210=$6;
      var $211=$n;
      var $212=($211<<1);
      var $213=(($210+($212<<2))|0);
      var $214=(($213+8)|0);
      var $215=$4;
      var $216=$n;
      var $217=(($215+($216<<2))|0);
      var $218=$n;
      var $219=___gmpn_add_n($209, $214, $217, $218);
      var $220=((($208)+($219))|0);
      var $221=$n;
      var $222=$1;
      var $223=(($222+($221<<2))|0);
      HEAP32[(($223)>>2)]=$220;
      var $224=$n;
      var $225=$6;
      var $226=$n;
      var $227=($226<<1);
      var $228=(($225+($227<<2))|0);
      var $229=(($228+8)|0);
      var $230=(($229+($224<<2))|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231)|0)==0;
      if ($232) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $234=$6;
      var $235=$n;
      var $236=($235<<1);
      var $237=(($234+($236<<2))|0);
      var $238=(($237+8)|0);
      var $239=$4;
      var $240=$n;
      var $241=(($239+($240<<2))|0);
      var $242=$n;
      var $243=___gmpn_cmp($238, $241, $242);
      var $244=(($243)|0) < 0;
      if ($244) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $246=$6;
      var $247=$n;
      var $248=($247<<1);
      var $249=(($246+($248<<2))|0);
      var $250=(($249+8)|0);
      var $251=$4;
      var $252=$n;
      var $253=(($251+($252<<2))|0);
      var $254=$6;
      var $255=$n;
      var $256=($255<<1);
      var $257=(($254+($256<<2))|0);
      var $258=(($257+8)|0);
      var $259=$n;
      var $260=___gmpn_sub_n($250, $253, $258, $259);
      var $261=$flags;
      var $262=$261 ^ 1;
      $flags=$262;
      label = 20; break;
    case 19: 
      var $264=$6;
      var $265=$n;
      var $266=($265<<1);
      var $267=(($264+($266<<2))|0);
      var $268=(($267+8)|0);
      var $269=$6;
      var $270=$n;
      var $271=($270<<1);
      var $272=(($269+($271<<2))|0);
      var $273=(($272+8)|0);
      var $274=$4;
      var $275=$n;
      var $276=(($274+($275<<2))|0);
      var $277=$n;
      var $278=___gmpn_sub_n($268, $273, $276, $277);
      var $279=$n;
      var $280=$6;
      var $281=$n;
      var $282=($281<<1);
      var $283=(($280+($282<<2))|0);
      var $284=(($283+8)|0);
      var $285=(($284+($279<<2))|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=((($286)-($278))|0);
      HEAP32[(($285)>>2)]=$287;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $305=$6;
      var $306=$6;
      var $307=$n;
      var $308=((($307)*(3))&-1);
      var $309=(($306+($308<<2))|0);
      var $310=(($309+12)|0);
      var $311=$6;
      var $312=$n;
      var $313=($312<<1);
      var $314=(($311+($313<<2))|0);
      var $315=(($314+8)|0);
      var $316=$n;
      var $317=((($316)+(1))|0);
      ___gmpn_mul_n($305, $310, $315, $317);
      var $318=$6;
      var $319=$n;
      var $320=($319<<1);
      var $321=(($318+($320<<2))|0);
      var $322=(($321+4)|0);
      var $323=$6;
      var $324=$n;
      var $325=($324<<2);
      var $326=(($323+($325<<2))|0);
      var $327=(($326+16)|0);
      var $328=$1;
      var $329=$n;
      var $330=(($328+($329<<2))|0);
      var $331=(($330+4)|0);
      var $332=$n;
      var $333=((($332)+(1))|0);
      ___gmpn_mul_n($322, $327, $331, $333);
      var $334=$6;
      var $335=$n;
      var $336=($335<<2);
      var $337=(($334+($336<<2))|0);
      var $338=(($337+8)|0);
      var $339=$1;
      var $340=$n;
      var $341=((($340)*(3))&-1);
      var $342=(($339+($341<<2))|0);
      var $343=(($342+12)|0);
      var $344=$1;
      var $345=$n;
      var $346=($345<<1);
      var $347=(($344+($346<<2))|0);
      var $348=(($347+8)|0);
      var $349=$n;
      var $350=((($349)+(1))|0);
      ___gmpn_mul_n($338, $343, $348, $350);
      var $351=$1;
      var $352=$n;
      var $353=($352<<1);
      var $354=(($351+($353<<2))|0);
      var $355=$1;
      var $356=$n;
      var $357=($356<<2);
      var $358=(($355+($357<<2))|0);
      var $359=(($358+16)|0);
      var $360=$1;
      var $361=$n;
      var $362=((($361)+(1))|0);
      ___gmpn_mul_n($354, $359, $360, $362);
      var $363=$s;
      var $364=$t;
      var $365=(($363)|0) > (($364)|0);
      if ($365) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $367=$1;
      var $368=$n;
      var $369=((($368)*(5))&-1);
      var $370=(($367+($369<<2))|0);
      var $371=$2;
      var $372=$n;
      var $373=((($372)*(3))&-1);
      var $374=(($371+($373<<2))|0);
      var $375=$s;
      var $376=$4;
      var $377=$n;
      var $378=($377<<1);
      var $379=(($376+($378<<2))|0);
      var $380=$t;
      var $381=___gmpn_mul($370, $374, $375, $379, $380);
      label = 39; break;
    case 38: 
      var $383=$1;
      var $384=$n;
      var $385=((($384)*(5))&-1);
      var $386=(($383+($385<<2))|0);
      var $387=$4;
      var $388=$n;
      var $389=($388<<1);
      var $390=(($387+($389<<2))|0);
      var $391=$t;
      var $392=$2;
      var $393=$n;
      var $394=((($393)*(3))&-1);
      var $395=(($392+($394<<2))|0);
      var $396=$s;
      var $397=___gmpn_mul($386, $390, $391, $395, $396);
      label = 39; break;
    case 39: 
      var $399=$1;
      var $400=$2;
      var $401=$4;
      var $402=$n;
      ___gmpn_mul_n($399, $400, $401, $402);
      var $403=$1;
      var $404=$n;
      var $405=$flags;
      var $406=$6;
      var $407=$6;
      var $408=$n;
      var $409=($408<<1);
      var $410=(($407+($409<<2))|0);
      var $411=(($410+4)|0);
      var $412=$6;
      var $413=$n;
      var $414=($413<<2);
      var $415=(($412+($414<<2))|0);
      var $416=(($415+8)|0);
      var $417=$t;
      var $418=$s;
      var $419=((($417)+($418))|0);
      ___gmpn_toom_interpolate_6pts($403, $404, $405, $406, $411, $416, $419);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom43_mul["X"]=1;

function ___gmpn_toom44_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $cy;
      var $flags;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$3;
      var $10=((($9)+(3))|0);
      var $11=$10 >> 2;
      $n=$11;
      var $12=$3;
      var $13=$n;
      var $14=((($13)*(3))&-1);
      var $15=((($12)-($14))|0);
      $s=$15;
      var $16=$5;
      var $17=$n;
      var $18=((($17)*(3))&-1);
      var $19=((($16)-($18))|0);
      $t=$19;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $26=$1;
      var $27=$1;
      var $28=$n;
      var $29=(($27+($28<<2))|0);
      var $30=(($29+4)|0);
      var $31=$2;
      var $32=$n;
      var $33=$s;
      var $34=$6;
      var $35=$n;
      var $36=($35<<3);
      var $37=(($34+($36<<2))|0);
      var $38=(($37+20)|0);
      var $39=___gmpn_toom_eval_dgr3_pm2($26, $30, $31, $32, $33, $38);
      var $40=1 & $39;
      $flags=$40;
      var $41=$1;
      var $42=$n;
      var $43=($42<<2);
      var $44=(($41+($43<<2))|0);
      var $45=(($44+8)|0);
      var $46=$1;
      var $47=$n;
      var $48=($47<<1);
      var $49=(($46+($48<<2))|0);
      var $50=(($49+8)|0);
      var $51=$4;
      var $52=$n;
      var $53=$t;
      var $54=$6;
      var $55=$n;
      var $56=($55<<3);
      var $57=(($54+($56<<2))|0);
      var $58=(($57+20)|0);
      var $59=___gmpn_toom_eval_dgr3_pm2($45, $50, $51, $52, $53, $58);
      var $60=1 & $59;
      var $61=$flags;
      var $62=$61 ^ $60;
      $flags=$62;
      label = 11; break;
    case 11: 
      var $64=$n;
      var $65=((($64)+(1))|0);
      var $66=(($65)|0) >= 100;
      if ($66) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $68=$6;
      var $69=$1;
      var $70=$n;
      var $71=((($70)+(1))|0);
      var $72=$1;
      var $73=$n;
      var $74=($73<<2);
      var $75=(($72+($74<<2))|0);
      var $76=(($75+8)|0);
      var $77=$n;
      var $78=((($77)+(1))|0);
      var $79=$6;
      var $80=$n;
      var $81=($80<<3);
      var $82=(($79+($81<<2))|0);
      var $83=(($82+20)|0);
      ___gmpn_toom22_mul($68, $69, $71, $76, $78, $83);
      label = 17; break;
    case 13: 
      var $85=$n;
      var $86=((($85)+(1))|0);
      var $87=(($86)|0) >= 300;
      if ($87) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $89=$6;
      var $90=$1;
      var $91=$n;
      var $92=((($91)+(1))|0);
      var $93=$1;
      var $94=$n;
      var $95=($94<<2);
      var $96=(($93+($95<<2))|0);
      var $97=(($96+8)|0);
      var $98=$n;
      var $99=((($98)+(1))|0);
      var $100=$6;
      var $101=$n;
      var $102=($101<<3);
      var $103=(($100+($102<<2))|0);
      var $104=(($103+20)|0);
      ___gmpn_toom33_mul($89, $90, $92, $97, $99, $104);
      label = 16; break;
    case 15: 
      var $106=$6;
      var $107=$1;
      var $108=$n;
      var $109=((($108)+(1))|0);
      var $110=$1;
      var $111=$n;
      var $112=($111<<2);
      var $113=(($110+($112<<2))|0);
      var $114=(($113+8)|0);
      var $115=$n;
      var $116=((($115)+(1))|0);
      var $117=$6;
      var $118=$n;
      var $119=($118<<3);
      var $120=(($117+($119<<2))|0);
      var $121=(($120+20)|0);
      ___gmpn_toom44_mul($106, $107, $109, $114, $116, $121);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $126=$n;
      var $127=((($126)+(1))|0);
      var $128=(($127)|0) >= 100;
      if ($128) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $130=$6;
      var $131=$n;
      var $132=($131<<1);
      var $133=(($130+($132<<2))|0);
      var $134=(($133+4)|0);
      var $135=$1;
      var $136=$n;
      var $137=(($135+($136<<2))|0);
      var $138=(($137+4)|0);
      var $139=$n;
      var $140=((($139)+(1))|0);
      var $141=$1;
      var $142=$n;
      var $143=($142<<1);
      var $144=(($141+($143<<2))|0);
      var $145=(($144+8)|0);
      var $146=$n;
      var $147=((($146)+(1))|0);
      var $148=$6;
      var $149=$n;
      var $150=($149<<3);
      var $151=(($148+($150<<2))|0);
      var $152=(($151+20)|0);
      ___gmpn_toom22_mul($134, $138, $140, $145, $147, $152);
      label = 25; break;
    case 21: 
      var $154=$n;
      var $155=((($154)+(1))|0);
      var $156=(($155)|0) >= 300;
      if ($156) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $158=$6;
      var $159=$n;
      var $160=($159<<1);
      var $161=(($158+($160<<2))|0);
      var $162=(($161+4)|0);
      var $163=$1;
      var $164=$n;
      var $165=(($163+($164<<2))|0);
      var $166=(($165+4)|0);
      var $167=$n;
      var $168=((($167)+(1))|0);
      var $169=$1;
      var $170=$n;
      var $171=($170<<1);
      var $172=(($169+($171<<2))|0);
      var $173=(($172+8)|0);
      var $174=$n;
      var $175=((($174)+(1))|0);
      var $176=$6;
      var $177=$n;
      var $178=($177<<3);
      var $179=(($176+($178<<2))|0);
      var $180=(($179+20)|0);
      ___gmpn_toom33_mul($162, $166, $168, $173, $175, $180);
      label = 24; break;
    case 23: 
      var $182=$6;
      var $183=$n;
      var $184=($183<<1);
      var $185=(($182+($184<<2))|0);
      var $186=(($185+4)|0);
      var $187=$1;
      var $188=$n;
      var $189=(($187+($188<<2))|0);
      var $190=(($189+4)|0);
      var $191=$n;
      var $192=((($191)+(1))|0);
      var $193=$1;
      var $194=$n;
      var $195=($194<<1);
      var $196=(($193+($195<<2))|0);
      var $197=(($196+8)|0);
      var $198=$n;
      var $199=((($198)+(1))|0);
      var $200=$6;
      var $201=$n;
      var $202=($201<<3);
      var $203=(($200+($202<<2))|0);
      var $204=(($203+20)|0);
      ___gmpn_toom44_mul($186, $190, $192, $197, $199, $204);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $208=$1;
      var $209=$2;
      var $210=$n;
      var $211=___gmpn_lshift($208, $209, $210, 1);
      $cy=$211;
      var $212=$1;
      var $213=$1;
      var $214=$2;
      var $215=$n;
      var $216=(($214+($215<<2))|0);
      var $217=$n;
      var $218=___gmpn_add_n($212, $213, $216, $217);
      var $219=$cy;
      var $220=((($219)+($218))|0);
      $cy=$220;
      var $221=$cy;
      var $222=($221<<1);
      var $223=$1;
      var $224=$1;
      var $225=$n;
      var $226=___gmpn_lshift($223, $224, $225, 1);
      var $227=((($222)+($226))|0);
      $cy=$227;
      var $228=$1;
      var $229=$1;
      var $230=$2;
      var $231=$n;
      var $232=($231<<1);
      var $233=(($230+($232<<2))|0);
      var $234=$n;
      var $235=___gmpn_add_n($228, $229, $233, $234);
      var $236=$cy;
      var $237=((($236)+($235))|0);
      $cy=$237;
      var $238=$cy;
      var $239=($238<<1);
      var $240=$1;
      var $241=$1;
      var $242=$n;
      var $243=___gmpn_lshift($240, $241, $242, 1);
      var $244=((($239)+($243))|0);
      $cy=$244;
      var $245=$cy;
      var $246=$1;
      var $247=$1;
      var $248=$n;
      var $249=$2;
      var $250=$n;
      var $251=((($250)*(3))&-1);
      var $252=(($249+($251<<2))|0);
      var $253=$s;
      var $254=___gmpn_add($246, $247, $248, $252, $253);
      var $255=((($245)+($254))|0);
      var $256=$n;
      var $257=$1;
      var $258=(($257+($256<<2))|0);
      HEAP32[(($258)>>2)]=$255;
      var $259=$1;
      var $260=$n;
      var $261=($260<<2);
      var $262=(($259+($261<<2))|0);
      var $263=(($262+8)|0);
      var $264=$4;
      var $265=$n;
      var $266=___gmpn_lshift($263, $264, $265, 1);
      $cy=$266;
      var $267=$1;
      var $268=$n;
      var $269=($268<<2);
      var $270=(($267+($269<<2))|0);
      var $271=(($270+8)|0);
      var $272=$1;
      var $273=$n;
      var $274=($273<<2);
      var $275=(($272+($274<<2))|0);
      var $276=(($275+8)|0);
      var $277=$4;
      var $278=$n;
      var $279=(($277+($278<<2))|0);
      var $280=$n;
      var $281=___gmpn_add_n($271, $276, $279, $280);
      var $282=$cy;
      var $283=((($282)+($281))|0);
      $cy=$283;
      var $284=$cy;
      var $285=($284<<1);
      var $286=$1;
      var $287=$n;
      var $288=($287<<2);
      var $289=(($286+($288<<2))|0);
      var $290=(($289+8)|0);
      var $291=$1;
      var $292=$n;
      var $293=($292<<2);
      var $294=(($291+($293<<2))|0);
      var $295=(($294+8)|0);
      var $296=$n;
      var $297=___gmpn_lshift($290, $295, $296, 1);
      var $298=((($285)+($297))|0);
      $cy=$298;
      var $299=$1;
      var $300=$n;
      var $301=($300<<2);
      var $302=(($299+($301<<2))|0);
      var $303=(($302+8)|0);
      var $304=$1;
      var $305=$n;
      var $306=($305<<2);
      var $307=(($304+($306<<2))|0);
      var $308=(($307+8)|0);
      var $309=$4;
      var $310=$n;
      var $311=($310<<1);
      var $312=(($309+($311<<2))|0);
      var $313=$n;
      var $314=___gmpn_add_n($303, $308, $312, $313);
      var $315=$cy;
      var $316=((($315)+($314))|0);
      $cy=$316;
      var $317=$cy;
      var $318=($317<<1);
      var $319=$1;
      var $320=$n;
      var $321=($320<<2);
      var $322=(($319+($321<<2))|0);
      var $323=(($322+8)|0);
      var $324=$1;
      var $325=$n;
      var $326=($325<<2);
      var $327=(($324+($326<<2))|0);
      var $328=(($327+8)|0);
      var $329=$n;
      var $330=___gmpn_lshift($323, $328, $329, 1);
      var $331=((($318)+($330))|0);
      $cy=$331;
      var $332=$cy;
      var $333=$1;
      var $334=$n;
      var $335=($334<<2);
      var $336=(($333+($335<<2))|0);
      var $337=(($336+8)|0);
      var $338=$1;
      var $339=$n;
      var $340=($339<<2);
      var $341=(($338+($340<<2))|0);
      var $342=(($341+8)|0);
      var $343=$n;
      var $344=$4;
      var $345=$n;
      var $346=((($345)*(3))&-1);
      var $347=(($344+($346<<2))|0);
      var $348=$t;
      var $349=___gmpn_add($337, $342, $343, $347, $348);
      var $350=((($332)+($349))|0);
      var $351=$n;
      var $352=$1;
      var $353=$n;
      var $354=($353<<2);
      var $355=(($352+($354<<2))|0);
      var $356=(($355+8)|0);
      var $357=(($356+($351<<2))|0);
      HEAP32[(($357)>>2)]=$350;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $363=$n;
      var $364=((($363)+(1))|0);
      var $365=(($364)|0) >= 100;
      if ($365) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $367=$6;
      var $368=$n;
      var $369=($368<<2);
      var $370=(($367+($369<<2))|0);
      var $371=(($370+8)|0);
      var $372=$1;
      var $373=$n;
      var $374=((($373)+(1))|0);
      var $375=$1;
      var $376=$n;
      var $377=($376<<2);
      var $378=(($375+($377<<2))|0);
      var $379=(($378+8)|0);
      var $380=$n;
      var $381=((($380)+(1))|0);
      var $382=$6;
      var $383=$n;
      var $384=($383<<3);
      var $385=(($382+($384<<2))|0);
      var $386=(($385+20)|0);
      ___gmpn_toom22_mul($371, $372, $374, $379, $381, $386);
      label = 37; break;
    case 33: 
      var $388=$n;
      var $389=((($388)+(1))|0);
      var $390=(($389)|0) >= 300;
      if ($390) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $392=$6;
      var $393=$n;
      var $394=($393<<2);
      var $395=(($392+($394<<2))|0);
      var $396=(($395+8)|0);
      var $397=$1;
      var $398=$n;
      var $399=((($398)+(1))|0);
      var $400=$1;
      var $401=$n;
      var $402=($401<<2);
      var $403=(($400+($402<<2))|0);
      var $404=(($403+8)|0);
      var $405=$n;
      var $406=((($405)+(1))|0);
      var $407=$6;
      var $408=$n;
      var $409=($408<<3);
      var $410=(($407+($409<<2))|0);
      var $411=(($410+20)|0);
      ___gmpn_toom33_mul($396, $397, $399, $404, $406, $411);
      label = 36; break;
    case 35: 
      var $413=$6;
      var $414=$n;
      var $415=($414<<2);
      var $416=(($413+($415<<2))|0);
      var $417=(($416+8)|0);
      var $418=$1;
      var $419=$n;
      var $420=((($419)+(1))|0);
      var $421=$1;
      var $422=$n;
      var $423=($422<<2);
      var $424=(($421+($423<<2))|0);
      var $425=(($424+8)|0);
      var $426=$n;
      var $427=((($426)+(1))|0);
      var $428=$6;
      var $429=$n;
      var $430=($429<<3);
      var $431=(($428+($430<<2))|0);
      var $432=(($431+20)|0);
      ___gmpn_toom44_mul($417, $418, $420, $425, $427, $432);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $436=$1;
      var $437=$1;
      var $438=$n;
      var $439=(($437+($438<<2))|0);
      var $440=(($439+4)|0);
      var $441=$2;
      var $442=$n;
      var $443=$s;
      var $444=$6;
      var $445=$n;
      var $446=($445<<3);
      var $447=(($444+($446<<2))|0);
      var $448=(($447+20)|0);
      var $449=___gmpn_toom_eval_dgr3_pm1($436, $440, $441, $442, $443, $448);
      var $450=2 & $449;
      var $451=$flags;
      var $452=$451 | $450;
      $flags=$452;
      var $453=$1;
      var $454=$n;
      var $455=($454<<2);
      var $456=(($453+($455<<2))|0);
      var $457=(($456+8)|0);
      var $458=$1;
      var $459=$n;
      var $460=($459<<1);
      var $461=(($458+($460<<2))|0);
      var $462=(($461+8)|0);
      var $463=$4;
      var $464=$n;
      var $465=$t;
      var $466=$6;
      var $467=$n;
      var $468=($467<<3);
      var $469=(($466+($468<<2))|0);
      var $470=(($469+20)|0);
      var $471=___gmpn_toom_eval_dgr3_pm1($457, $462, $463, $464, $465, $470);
      var $472=2 & $471;
      var $473=$flags;
      var $474=$473 ^ $472;
      $flags=$474;
      label = 39; break;
    case 39: 
      var $476=$n;
      var $477=((($476)+(1))|0);
      var $478=(($477)|0) >= 100;
      if ($478) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $480=$6;
      var $481=$n;
      var $482=((($481)*(6))&-1);
      var $483=(($480+($482<<2))|0);
      var $484=(($483+12)|0);
      var $485=$1;
      var $486=$n;
      var $487=(($485+($486<<2))|0);
      var $488=(($487+4)|0);
      var $489=$n;
      var $490=((($489)+(1))|0);
      var $491=$1;
      var $492=$n;
      var $493=($492<<1);
      var $494=(($491+($493<<2))|0);
      var $495=(($494+8)|0);
      var $496=$n;
      var $497=((($496)+(1))|0);
      var $498=$6;
      var $499=$n;
      var $500=($499<<3);
      var $501=(($498+($500<<2))|0);
      var $502=(($501+20)|0);
      ___gmpn_toom22_mul($484, $488, $490, $495, $497, $502);
      label = 45; break;
    case 41: 
      var $504=$n;
      var $505=((($504)+(1))|0);
      var $506=(($505)|0) >= 300;
      if ($506) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $508=$6;
      var $509=$n;
      var $510=((($509)*(6))&-1);
      var $511=(($508+($510<<2))|0);
      var $512=(($511+12)|0);
      var $513=$1;
      var $514=$n;
      var $515=(($513+($514<<2))|0);
      var $516=(($515+4)|0);
      var $517=$n;
      var $518=((($517)+(1))|0);
      var $519=$1;
      var $520=$n;
      var $521=($520<<1);
      var $522=(($519+($521<<2))|0);
      var $523=(($522+8)|0);
      var $524=$n;
      var $525=((($524)+(1))|0);
      var $526=$6;
      var $527=$n;
      var $528=($527<<3);
      var $529=(($526+($528<<2))|0);
      var $530=(($529+20)|0);
      ___gmpn_toom33_mul($512, $516, $518, $523, $525, $530);
      label = 44; break;
    case 43: 
      var $532=$6;
      var $533=$n;
      var $534=((($533)*(6))&-1);
      var $535=(($532+($534<<2))|0);
      var $536=(($535+12)|0);
      var $537=$1;
      var $538=$n;
      var $539=(($537+($538<<2))|0);
      var $540=(($539+4)|0);
      var $541=$n;
      var $542=((($541)+(1))|0);
      var $543=$1;
      var $544=$n;
      var $545=($544<<1);
      var $546=(($543+($545<<2))|0);
      var $547=(($546+8)|0);
      var $548=$n;
      var $549=((($548)+(1))|0);
      var $550=$6;
      var $551=$n;
      var $552=($551<<3);
      var $553=(($550+($552<<2))|0);
      var $554=(($553+20)|0);
      ___gmpn_toom44_mul($536, $540, $542, $547, $549, $554);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $559=$n;
      var $560=((($559)+(1))|0);
      var $561=(($560)|0) >= 100;
      if ($561) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $563=$1;
      var $564=$n;
      var $565=($564<<1);
      var $566=(($563+($565<<2))|0);
      var $567=$1;
      var $568=$n;
      var $569=((($568)+(1))|0);
      var $570=$1;
      var $571=$n;
      var $572=($571<<2);
      var $573=(($570+($572<<2))|0);
      var $574=(($573+8)|0);
      var $575=$n;
      var $576=((($575)+(1))|0);
      var $577=$6;
      var $578=$n;
      var $579=($578<<3);
      var $580=(($577+($579<<2))|0);
      var $581=(($580+20)|0);
      ___gmpn_toom22_mul($566, $567, $569, $574, $576, $581);
      label = 53; break;
    case 49: 
      var $583=$n;
      var $584=((($583)+(1))|0);
      var $585=(($584)|0) >= 300;
      if ($585) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $587=$1;
      var $588=$n;
      var $589=($588<<1);
      var $590=(($587+($589<<2))|0);
      var $591=$1;
      var $592=$n;
      var $593=((($592)+(1))|0);
      var $594=$1;
      var $595=$n;
      var $596=($595<<2);
      var $597=(($594+($596<<2))|0);
      var $598=(($597+8)|0);
      var $599=$n;
      var $600=((($599)+(1))|0);
      var $601=$6;
      var $602=$n;
      var $603=($602<<3);
      var $604=(($601+($603<<2))|0);
      var $605=(($604+20)|0);
      ___gmpn_toom33_mul($590, $591, $593, $598, $600, $605);
      label = 52; break;
    case 51: 
      var $607=$1;
      var $608=$n;
      var $609=($608<<1);
      var $610=(($607+($609<<2))|0);
      var $611=$1;
      var $612=$n;
      var $613=((($612)+(1))|0);
      var $614=$1;
      var $615=$n;
      var $616=($615<<2);
      var $617=(($614+($616<<2))|0);
      var $618=(($617+8)|0);
      var $619=$n;
      var $620=((($619)+(1))|0);
      var $621=$6;
      var $622=$n;
      var $623=($622<<3);
      var $624=(($621+($623<<2))|0);
      var $625=(($624+20)|0);
      ___gmpn_toom44_mul($610, $611, $613, $618, $620, $625);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $630=$n;
      var $631=(($630)|0) >= 100;
      if ($631) { label = 57; break; } else { label = 56; break; }
    case 56: 
      var $633=$1;
      var $634=$2;
      var $635=$n;
      var $636=$4;
      var $637=$n;
      var $638=$6;
      var $639=$n;
      var $640=($639<<3);
      var $641=(($638+($640<<2))|0);
      var $642=(($641+20)|0);
      ___gmpn_toom22_mul($633, $634, $635, $636, $637, $642);
      label = 61; break;
    case 57: 
      var $644=$n;
      var $645=(($644)|0) >= 300;
      if ($645) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $647=$1;
      var $648=$2;
      var $649=$n;
      var $650=$4;
      var $651=$n;
      var $652=$6;
      var $653=$n;
      var $654=($653<<3);
      var $655=(($652+($654<<2))|0);
      var $656=(($655+20)|0);
      ___gmpn_toom33_mul($647, $648, $649, $650, $651, $656);
      label = 60; break;
    case 59: 
      var $658=$1;
      var $659=$2;
      var $660=$n;
      var $661=$4;
      var $662=$n;
      var $663=$6;
      var $664=$n;
      var $665=($664<<3);
      var $666=(($663+($665<<2))|0);
      var $667=(($666+20)|0);
      ___gmpn_toom44_mul($658, $659, $660, $661, $662, $667);
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $671=$s;
      var $672=$t;
      var $673=(($671)|0) > (($672)|0);
      if ($673) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $675=$1;
      var $676=$n;
      var $677=((($676)*(6))&-1);
      var $678=(($675+($677<<2))|0);
      var $679=$2;
      var $680=$n;
      var $681=((($680)*(3))&-1);
      var $682=(($679+($681<<2))|0);
      var $683=$s;
      var $684=$4;
      var $685=$n;
      var $686=((($685)*(3))&-1);
      var $687=(($684+($686<<2))|0);
      var $688=$t;
      var $689=___gmpn_mul($678, $682, $683, $687, $688);
      label = 73; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $692=$s;
      var $693=(($692)|0) >= 100;
      if ($693) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $695=$1;
      var $696=$n;
      var $697=((($696)*(6))&-1);
      var $698=(($695+($697<<2))|0);
      var $699=$2;
      var $700=$n;
      var $701=((($700)*(3))&-1);
      var $702=(($699+($701<<2))|0);
      var $703=$s;
      var $704=$4;
      var $705=$n;
      var $706=((($705)*(3))&-1);
      var $707=(($704+($706<<2))|0);
      var $708=$s;
      var $709=$6;
      var $710=$n;
      var $711=($710<<3);
      var $712=(($709+($711<<2))|0);
      var $713=(($712+20)|0);
      ___gmpn_toom22_mul($698, $702, $703, $707, $708, $713);
      label = 71; break;
    case 67: 
      var $715=$s;
      var $716=(($715)|0) >= 300;
      if ($716) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $718=$1;
      var $719=$n;
      var $720=((($719)*(6))&-1);
      var $721=(($718+($720<<2))|0);
      var $722=$2;
      var $723=$n;
      var $724=((($723)*(3))&-1);
      var $725=(($722+($724<<2))|0);
      var $726=$s;
      var $727=$4;
      var $728=$n;
      var $729=((($728)*(3))&-1);
      var $730=(($727+($729<<2))|0);
      var $731=$s;
      var $732=$6;
      var $733=$n;
      var $734=($733<<3);
      var $735=(($732+($734<<2))|0);
      var $736=(($735+20)|0);
      ___gmpn_toom33_mul($721, $725, $726, $730, $731, $736);
      label = 70; break;
    case 69: 
      var $738=$1;
      var $739=$n;
      var $740=((($739)*(6))&-1);
      var $741=(($738+($740<<2))|0);
      var $742=$2;
      var $743=$n;
      var $744=((($743)*(3))&-1);
      var $745=(($742+($744<<2))|0);
      var $746=$s;
      var $747=$4;
      var $748=$n;
      var $749=((($748)*(3))&-1);
      var $750=(($747+($749<<2))|0);
      var $751=$s;
      var $752=$6;
      var $753=$n;
      var $754=($753<<3);
      var $755=(($752+($754<<2))|0);
      var $756=(($755+20)|0);
      ___gmpn_toom44_mul($741, $745, $746, $750, $751, $756);
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $761=$1;
      var $762=$n;
      var $763=$flags;
      var $764=$6;
      var $765=$n;
      var $766=($765<<1);
      var $767=(($764+($766<<2))|0);
      var $768=(($767+4)|0);
      var $769=$6;
      var $770=$n;
      var $771=((($770)*(6))&-1);
      var $772=(($769+($771<<2))|0);
      var $773=(($772+12)|0);
      var $774=$6;
      var $775=$6;
      var $776=$n;
      var $777=($776<<2);
      var $778=(($775+($777<<2))|0);
      var $779=(($778+8)|0);
      var $780=$s;
      var $781=$t;
      var $782=((($780)+($781))|0);
      var $783=$6;
      var $784=$n;
      var $785=($784<<3);
      var $786=(($783+($785<<2))|0);
      var $787=(($786+20)|0);
      ___gmpn_toom_interpolate_7pts($761, $762, $763, $768, $773, $774, $779, $782, $787);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom44_mul["X"]=1;

function ___gmpn_toom4_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      var $s;
      var $cy;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      var $5=$3;
      var $6=((($5)+(3))|0);
      var $7=$6 >> 2;
      $n=$7;
      var $8=$3;
      var $9=$n;
      var $10=((($9)*(3))&-1);
      var $11=((($8)-($10))|0);
      $s=$11;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $14=$1;
      var $15=$1;
      var $16=$n;
      var $17=($16<<2);
      var $18=(($15+($17<<2))|0);
      var $19=(($18+8)|0);
      var $20=$2;
      var $21=$n;
      var $22=$s;
      var $23=$4;
      var $24=$n;
      var $25=($24<<3);
      var $26=(($23+($25<<2))|0);
      var $27=(($26+20)|0);
      var $28=___gmpn_toom_eval_dgr3_pm2($14, $19, $20, $21, $22, $27);
      label = 5; break;
    case 5: 
      var $30=$n;
      var $31=((($30)+(1))|0);
      var $32=(($31)|0) >= 120;
      if ($32) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $34=$4;
      var $35=$1;
      var $36=$n;
      var $37=((($36)+(1))|0);
      var $38=$4;
      var $39=$n;
      var $40=($39<<3);
      var $41=(($38+($40<<2))|0);
      var $42=(($41+20)|0);
      ___gmpn_toom2_sqr($34, $35, $37, $42);
      label = 11; break;
    case 7: 
      var $44=$n;
      var $45=((($44)+(1))|0);
      var $46=(($45)|0) >= 400;
      if ($46) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $48=$4;
      var $49=$1;
      var $50=$n;
      var $51=((($50)+(1))|0);
      var $52=$4;
      var $53=$n;
      var $54=($53<<3);
      var $55=(($52+($54<<2))|0);
      var $56=(($55+20)|0);
      ___gmpn_toom3_sqr($48, $49, $51, $56);
      label = 10; break;
    case 9: 
      var $58=$4;
      var $59=$1;
      var $60=$n;
      var $61=((($60)+(1))|0);
      var $62=$4;
      var $63=$n;
      var $64=($63<<3);
      var $65=(($62+($64<<2))|0);
      var $66=(($65+20)|0);
      ___gmpn_toom4_sqr($58, $59, $61, $66);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $71=$n;
      var $72=((($71)+(1))|0);
      var $73=(($72)|0) >= 120;
      if ($73) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $75=$4;
      var $76=$n;
      var $77=($76<<1);
      var $78=(($75+($77<<2))|0);
      var $79=(($78+4)|0);
      var $80=$1;
      var $81=$n;
      var $82=($81<<2);
      var $83=(($80+($82<<2))|0);
      var $84=(($83+8)|0);
      var $85=$n;
      var $86=((($85)+(1))|0);
      var $87=$4;
      var $88=$n;
      var $89=($88<<3);
      var $90=(($87+($89<<2))|0);
      var $91=(($90+20)|0);
      ___gmpn_toom2_sqr($79, $84, $86, $91);
      label = 19; break;
    case 15: 
      var $93=$n;
      var $94=((($93)+(1))|0);
      var $95=(($94)|0) >= 400;
      if ($95) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $97=$4;
      var $98=$n;
      var $99=($98<<1);
      var $100=(($97+($99<<2))|0);
      var $101=(($100+4)|0);
      var $102=$1;
      var $103=$n;
      var $104=($103<<2);
      var $105=(($102+($104<<2))|0);
      var $106=(($105+8)|0);
      var $107=$n;
      var $108=((($107)+(1))|0);
      var $109=$4;
      var $110=$n;
      var $111=($110<<3);
      var $112=(($109+($111<<2))|0);
      var $113=(($112+20)|0);
      ___gmpn_toom3_sqr($101, $106, $108, $113);
      label = 18; break;
    case 17: 
      var $115=$4;
      var $116=$n;
      var $117=($116<<1);
      var $118=(($115+($117<<2))|0);
      var $119=(($118+4)|0);
      var $120=$1;
      var $121=$n;
      var $122=($121<<2);
      var $123=(($120+($122<<2))|0);
      var $124=(($123+8)|0);
      var $125=$n;
      var $126=((($125)+(1))|0);
      var $127=$4;
      var $128=$n;
      var $129=($128<<3);
      var $130=(($127+($129<<2))|0);
      var $131=(($130+20)|0);
      ___gmpn_toom4_sqr($119, $124, $126, $131);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $135=$1;
      var $136=$2;
      var $137=$n;
      var $138=___gmpn_lshift($135, $136, $137, 1);
      $cy=$138;
      var $139=$1;
      var $140=$1;
      var $141=$2;
      var $142=$n;
      var $143=(($141+($142<<2))|0);
      var $144=$n;
      var $145=___gmpn_add_n($139, $140, $143, $144);
      var $146=$cy;
      var $147=((($146)+($145))|0);
      $cy=$147;
      var $148=$cy;
      var $149=($148<<1);
      var $150=$1;
      var $151=$1;
      var $152=$n;
      var $153=___gmpn_lshift($150, $151, $152, 1);
      var $154=((($149)+($153))|0);
      $cy=$154;
      var $155=$1;
      var $156=$1;
      var $157=$2;
      var $158=$n;
      var $159=($158<<1);
      var $160=(($157+($159<<2))|0);
      var $161=$n;
      var $162=___gmpn_add_n($155, $156, $160, $161);
      var $163=$cy;
      var $164=((($163)+($162))|0);
      $cy=$164;
      var $165=$cy;
      var $166=($165<<1);
      var $167=$1;
      var $168=$1;
      var $169=$n;
      var $170=___gmpn_lshift($167, $168, $169, 1);
      var $171=((($166)+($170))|0);
      $cy=$171;
      var $172=$cy;
      var $173=$1;
      var $174=$1;
      var $175=$n;
      var $176=$2;
      var $177=$n;
      var $178=((($177)*(3))&-1);
      var $179=(($176+($178<<2))|0);
      var $180=$s;
      var $181=___gmpn_add($173, $174, $175, $179, $180);
      var $182=((($172)+($181))|0);
      var $183=$n;
      var $184=$1;
      var $185=(($184+($183<<2))|0);
      HEAP32[(($185)>>2)]=$182;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $189=$n;
      var $190=((($189)+(1))|0);
      var $191=(($190)|0) >= 120;
      if ($191) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $193=$4;
      var $194=$n;
      var $195=($194<<2);
      var $196=(($193+($195<<2))|0);
      var $197=(($196+8)|0);
      var $198=$1;
      var $199=$n;
      var $200=((($199)+(1))|0);
      var $201=$4;
      var $202=$n;
      var $203=($202<<3);
      var $204=(($201+($203<<2))|0);
      var $205=(($204+20)|0);
      ___gmpn_toom2_sqr($197, $198, $200, $205);
      label = 29; break;
    case 25: 
      var $207=$n;
      var $208=((($207)+(1))|0);
      var $209=(($208)|0) >= 400;
      if ($209) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $211=$4;
      var $212=$n;
      var $213=($212<<2);
      var $214=(($211+($213<<2))|0);
      var $215=(($214+8)|0);
      var $216=$1;
      var $217=$n;
      var $218=((($217)+(1))|0);
      var $219=$4;
      var $220=$n;
      var $221=($220<<3);
      var $222=(($219+($221<<2))|0);
      var $223=(($222+20)|0);
      ___gmpn_toom3_sqr($215, $216, $218, $223);
      label = 28; break;
    case 27: 
      var $225=$4;
      var $226=$n;
      var $227=($226<<2);
      var $228=(($225+($227<<2))|0);
      var $229=(($228+8)|0);
      var $230=$1;
      var $231=$n;
      var $232=((($231)+(1))|0);
      var $233=$4;
      var $234=$n;
      var $235=($234<<3);
      var $236=(($233+($235<<2))|0);
      var $237=(($236+20)|0);
      ___gmpn_toom4_sqr($229, $230, $232, $237);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $241=$1;
      var $242=$1;
      var $243=$n;
      var $244=($243<<2);
      var $245=(($242+($244<<2))|0);
      var $246=(($245+8)|0);
      var $247=$2;
      var $248=$n;
      var $249=$s;
      var $250=$4;
      var $251=$n;
      var $252=($251<<3);
      var $253=(($250+($252<<2))|0);
      var $254=(($253+20)|0);
      var $255=___gmpn_toom_eval_dgr3_pm1($241, $246, $247, $248, $249, $254);
      label = 31; break;
    case 31: 
      var $257=$n;
      var $258=((($257)+(1))|0);
      var $259=(($258)|0) >= 120;
      if ($259) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $261=$1;
      var $262=$n;
      var $263=($262<<1);
      var $264=(($261+($263<<2))|0);
      var $265=$1;
      var $266=$n;
      var $267=((($266)+(1))|0);
      var $268=$4;
      var $269=$n;
      var $270=($269<<3);
      var $271=(($268+($270<<2))|0);
      var $272=(($271+20)|0);
      ___gmpn_toom2_sqr($264, $265, $267, $272);
      label = 37; break;
    case 33: 
      var $274=$n;
      var $275=((($274)+(1))|0);
      var $276=(($275)|0) >= 400;
      if ($276) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $278=$1;
      var $279=$n;
      var $280=($279<<1);
      var $281=(($278+($280<<2))|0);
      var $282=$1;
      var $283=$n;
      var $284=((($283)+(1))|0);
      var $285=$4;
      var $286=$n;
      var $287=($286<<3);
      var $288=(($285+($287<<2))|0);
      var $289=(($288+20)|0);
      ___gmpn_toom3_sqr($281, $282, $284, $289);
      label = 36; break;
    case 35: 
      var $291=$1;
      var $292=$n;
      var $293=($292<<1);
      var $294=(($291+($293<<2))|0);
      var $295=$1;
      var $296=$n;
      var $297=((($296)+(1))|0);
      var $298=$4;
      var $299=$n;
      var $300=($299<<3);
      var $301=(($298+($300<<2))|0);
      var $302=(($301+20)|0);
      ___gmpn_toom4_sqr($294, $295, $297, $302);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $307=$n;
      var $308=((($307)+(1))|0);
      var $309=(($308)|0) >= 120;
      if ($309) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $311=$4;
      var $312=$n;
      var $313=((($312)*(6))&-1);
      var $314=(($311+($313<<2))|0);
      var $315=(($314+12)|0);
      var $316=$1;
      var $317=$n;
      var $318=($317<<2);
      var $319=(($316+($318<<2))|0);
      var $320=(($319+8)|0);
      var $321=$n;
      var $322=((($321)+(1))|0);
      var $323=$4;
      var $324=$n;
      var $325=($324<<3);
      var $326=(($323+($325<<2))|0);
      var $327=(($326+20)|0);
      ___gmpn_toom2_sqr($315, $320, $322, $327);
      label = 45; break;
    case 41: 
      var $329=$n;
      var $330=((($329)+(1))|0);
      var $331=(($330)|0) >= 400;
      if ($331) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $333=$4;
      var $334=$n;
      var $335=((($334)*(6))&-1);
      var $336=(($333+($335<<2))|0);
      var $337=(($336+12)|0);
      var $338=$1;
      var $339=$n;
      var $340=($339<<2);
      var $341=(($338+($340<<2))|0);
      var $342=(($341+8)|0);
      var $343=$n;
      var $344=((($343)+(1))|0);
      var $345=$4;
      var $346=$n;
      var $347=($346<<3);
      var $348=(($345+($347<<2))|0);
      var $349=(($348+20)|0);
      ___gmpn_toom3_sqr($337, $342, $344, $349);
      label = 44; break;
    case 43: 
      var $351=$4;
      var $352=$n;
      var $353=((($352)*(6))&-1);
      var $354=(($351+($353<<2))|0);
      var $355=(($354+12)|0);
      var $356=$1;
      var $357=$n;
      var $358=($357<<2);
      var $359=(($356+($358<<2))|0);
      var $360=(($359+8)|0);
      var $361=$n;
      var $362=((($361)+(1))|0);
      var $363=$4;
      var $364=$n;
      var $365=($364<<3);
      var $366=(($363+($365<<2))|0);
      var $367=(($366+20)|0);
      ___gmpn_toom4_sqr($355, $360, $362, $367);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $372=$n;
      var $373=(($372)|0) >= 120;
      if ($373) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $375=$1;
      var $376=$2;
      var $377=$n;
      var $378=$4;
      var $379=$n;
      var $380=($379<<3);
      var $381=(($378+($380<<2))|0);
      var $382=(($381+20)|0);
      ___gmpn_toom2_sqr($375, $376, $377, $382);
      label = 53; break;
    case 49: 
      var $384=$n;
      var $385=(($384)|0) >= 400;
      if ($385) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $387=$1;
      var $388=$2;
      var $389=$n;
      var $390=$4;
      var $391=$n;
      var $392=($391<<3);
      var $393=(($390+($392<<2))|0);
      var $394=(($393+20)|0);
      ___gmpn_toom3_sqr($387, $388, $389, $394);
      label = 52; break;
    case 51: 
      var $396=$1;
      var $397=$2;
      var $398=$n;
      var $399=$4;
      var $400=$n;
      var $401=($400<<3);
      var $402=(($399+($401<<2))|0);
      var $403=(($402+20)|0);
      ___gmpn_toom4_sqr($396, $397, $398, $403);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $408=$s;
      var $409=(($408)|0) >= 120;
      if ($409) { label = 57; break; } else { label = 56; break; }
    case 56: 
      var $411=$1;
      var $412=$n;
      var $413=((($412)*(6))&-1);
      var $414=(($411+($413<<2))|0);
      var $415=$2;
      var $416=$n;
      var $417=((($416)*(3))&-1);
      var $418=(($415+($417<<2))|0);
      var $419=$s;
      var $420=$4;
      var $421=$n;
      var $422=($421<<3);
      var $423=(($420+($422<<2))|0);
      var $424=(($423+20)|0);
      ___gmpn_toom2_sqr($414, $418, $419, $424);
      label = 61; break;
    case 57: 
      var $426=$s;
      var $427=(($426)|0) >= 400;
      if ($427) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $429=$1;
      var $430=$n;
      var $431=((($430)*(6))&-1);
      var $432=(($429+($431<<2))|0);
      var $433=$2;
      var $434=$n;
      var $435=((($434)*(3))&-1);
      var $436=(($433+($435<<2))|0);
      var $437=$s;
      var $438=$4;
      var $439=$n;
      var $440=($439<<3);
      var $441=(($438+($440<<2))|0);
      var $442=(($441+20)|0);
      ___gmpn_toom3_sqr($432, $436, $437, $442);
      label = 60; break;
    case 59: 
      var $444=$1;
      var $445=$n;
      var $446=((($445)*(6))&-1);
      var $447=(($444+($446<<2))|0);
      var $448=$2;
      var $449=$n;
      var $450=((($449)*(3))&-1);
      var $451=(($448+($450<<2))|0);
      var $452=$s;
      var $453=$4;
      var $454=$n;
      var $455=($454<<3);
      var $456=(($453+($455<<2))|0);
      var $457=(($456+20)|0);
      ___gmpn_toom4_sqr($447, $451, $452, $457);
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $461=$1;
      var $462=$n;
      var $463=$4;
      var $464=$n;
      var $465=($464<<1);
      var $466=(($463+($465<<2))|0);
      var $467=(($466+4)|0);
      var $468=$4;
      var $469=$n;
      var $470=((($469)*(6))&-1);
      var $471=(($468+($470<<2))|0);
      var $472=(($471+12)|0);
      var $473=$4;
      var $474=$4;
      var $475=$n;
      var $476=($475<<2);
      var $477=(($474+($476<<2))|0);
      var $478=(($477+8)|0);
      var $479=$s;
      var $480=($479<<1);
      var $481=$4;
      var $482=$n;
      var $483=($482<<3);
      var $484=(($481+($483<<2))|0);
      var $485=(($484+20)|0);
      ___gmpn_toom_interpolate_7pts($461, $462, 0, $467, $472, $473, $478, $480, $485);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom4_sqr["X"]=1;

function ___gmpn_toom53_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $cy;
      var $gp;
      var $as1;
      var $asm1;
      var $as2;
      var $asm2;
      var $ash;
      var $bs1;
      var $bsm1;
      var $bs2;
      var $bsm2;
      var $bsh;
      var $flags;
      var $__tmp_marker;
      var $__x;
      var $__p;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      var $7=$3;
      var $8=((($7)*(3))&-1);
      var $9=$5;
      var $10=((($9)*(5))&-1);
      var $11=(($8)|0) >= (($10)|0);
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$3;
      var $14=((($13)-(1))|0);
      var $15=Math.floor(((($14)>>>0))/(5));
      var $21 = $15;label = 5; break;
    case 4: 
      var $17=$5;
      var $18=((($17)-(1))|0);
      var $19=Math.floor(((($18)>>>0))/(3));
      var $21 = $19;label = 5; break;
    case 5: 
      var $21;
      var $22=((($21)+(1))|0);
      $n=$22;
      var $23=$3;
      var $24=$n;
      var $25=($24<<2);
      var $26=((($23)-($25))|0);
      $s=$26;
      var $27=$5;
      var $28=$n;
      var $29=($28<<1);
      var $30=((($27)-($29))|0);
      $t=$30;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $__tmp_marker=0;
      var $35=$n;
      var $36=((($35)+(1))|0);
      var $37=($36<<2);
      var $38=STACKTOP;STACKTOP = (STACKTOP + $37)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $39=$38;
      $as1=$39;
      var $40=$n;
      var $41=((($40)+(1))|0);
      var $42=($41<<2);
      var $43=STACKTOP;STACKTOP = (STACKTOP + $42)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $44=$43;
      $asm1=$44;
      var $45=$n;
      var $46=((($45)+(1))|0);
      var $47=($46<<2);
      var $48=STACKTOP;STACKTOP = (STACKTOP + $47)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $49=$48;
      $as2=$49;
      var $50=$n;
      var $51=((($50)+(1))|0);
      var $52=($51<<2);
      var $53=STACKTOP;STACKTOP = (STACKTOP + $52)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $54=$53;
      $asm2=$54;
      var $55=$n;
      var $56=((($55)+(1))|0);
      var $57=($56<<2);
      var $58=STACKTOP;STACKTOP = (STACKTOP + $57)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $59=$58;
      $ash=$59;
      var $60=$n;
      var $61=((($60)+(1))|0);
      var $62=($61<<2);
      var $63=STACKTOP;STACKTOP = (STACKTOP + $62)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $64=$63;
      $bs1=$64;
      var $65=$n;
      var $66=((($65)+(1))|0);
      var $67=($66<<2);
      var $68=STACKTOP;STACKTOP = (STACKTOP + $67)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $69=$68;
      $bsm1=$69;
      var $70=$n;
      var $71=((($70)+(1))|0);
      var $72=($71<<2);
      var $73=STACKTOP;STACKTOP = (STACKTOP + $72)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $74=$73;
      $bs2=$74;
      var $75=$n;
      var $76=((($75)+(1))|0);
      var $77=($76<<2);
      var $78=STACKTOP;STACKTOP = (STACKTOP + $77)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $79=$78;
      $bsm2=$79;
      var $80=$n;
      var $81=((($80)+(1))|0);
      var $82=($81<<2);
      var $83=STACKTOP;STACKTOP = (STACKTOP + $82)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $84=$83;
      $bsh=$84;
      var $85=$1;
      $gp=$85;
      var $86=$as1;
      var $87=$asm1;
      var $88=$2;
      var $89=$n;
      var $90=$s;
      var $91=$gp;
      var $92=___gmpn_toom_eval_pm1($86, $87, 4, $88, $89, $90, $91);
      var $93=2 & $92;
      $flags=$93;
      var $94=$as2;
      var $95=$asm2;
      var $96=$2;
      var $97=$n;
      var $98=$s;
      var $99=$gp;
      var $100=___gmpn_toom_eval_pm2($94, $95, 4, $96, $97, $98, $99);
      var $101=1 & $100;
      var $102=$flags;
      var $103=$102 | $101;
      $flags=$103;
      var $104=$ash;
      var $105=$2;
      var $106=$n;
      var $107=___gmpn_lshift($104, $105, $106, 1);
      $cy=$107;
      var $108=$ash;
      var $109=$ash;
      var $110=$2;
      var $111=$n;
      var $112=(($110+($111<<2))|0);
      var $113=$n;
      var $114=___gmpn_add_n($108, $109, $112, $113);
      var $115=$cy;
      var $116=((($115)+($114))|0);
      $cy=$116;
      var $117=$cy;
      var $118=($117<<1);
      var $119=$ash;
      var $120=$ash;
      var $121=$n;
      var $122=___gmpn_lshift($119, $120, $121, 1);
      var $123=((($118)+($122))|0);
      $cy=$123;
      var $124=$ash;
      var $125=$ash;
      var $126=$2;
      var $127=$n;
      var $128=($127<<1);
      var $129=(($126+($128<<2))|0);
      var $130=$n;
      var $131=___gmpn_add_n($124, $125, $129, $130);
      var $132=$cy;
      var $133=((($132)+($131))|0);
      $cy=$133;
      var $134=$cy;
      var $135=($134<<1);
      var $136=$ash;
      var $137=$ash;
      var $138=$n;
      var $139=___gmpn_lshift($136, $137, $138, 1);
      var $140=((($135)+($139))|0);
      $cy=$140;
      var $141=$ash;
      var $142=$ash;
      var $143=$2;
      var $144=$n;
      var $145=((($144)*(3))&-1);
      var $146=(($143+($145<<2))|0);
      var $147=$n;
      var $148=___gmpn_add_n($141, $142, $146, $147);
      var $149=$cy;
      var $150=((($149)+($148))|0);
      $cy=$150;
      var $151=$cy;
      var $152=($151<<1);
      var $153=$ash;
      var $154=$ash;
      var $155=$n;
      var $156=___gmpn_lshift($153, $154, $155, 1);
      var $157=((($152)+($156))|0);
      $cy=$157;
      var $158=$cy;
      var $159=$ash;
      var $160=$ash;
      var $161=$n;
      var $162=$2;
      var $163=$n;
      var $164=($163<<2);
      var $165=(($162+($164<<2))|0);
      var $166=$s;
      var $167=___gmpn_add($159, $160, $161, $165, $166);
      var $168=((($158)+($167))|0);
      var $169=$n;
      var $170=$ash;
      var $171=(($170+($169<<2))|0);
      HEAP32[(($171)>>2)]=$168;
      var $172=$bs1;
      var $173=$4;
      var $174=$n;
      var $175=$4;
      var $176=$n;
      var $177=($176<<1);
      var $178=(($175+($177<<2))|0);
      var $179=$t;
      var $180=___gmpn_add($172, $173, $174, $178, $179);
      var $181=$n;
      var $182=$bs1;
      var $183=(($182+($181<<2))|0);
      HEAP32[(($183)>>2)]=$180;
      var $184=$n;
      var $185=$bs1;
      var $186=(($185+($184<<2))|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($187)|0)==0;
      if ($188) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $190=$bs1;
      var $191=$4;
      var $192=$n;
      var $193=(($191+($192<<2))|0);
      var $194=$n;
      var $195=___gmpn_cmp($190, $193, $194);
      var $196=(($195)|0) < 0;
      if ($196) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $198=$bsm1;
      var $199=$4;
      var $200=$n;
      var $201=(($199+($200<<2))|0);
      var $202=$bs1;
      var $203=$n;
      var $204=___gmpn_sub_n($198, $201, $202, $203);
      var $205=$n;
      var $206=$bsm1;
      var $207=(($206+($205<<2))|0);
      HEAP32[(($207)>>2)]=0;
      var $208=$flags;
      var $209=$208 ^ 2;
      $flags=$209;
      label = 13; break;
    case 12: 
      var $211=$n;
      var $212=$bs1;
      var $213=(($212+($211<<2))|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$bsm1;
      var $216=$bs1;
      var $217=$4;
      var $218=$n;
      var $219=(($217+($218<<2))|0);
      var $220=$n;
      var $221=___gmpn_sub_n($215, $216, $219, $220);
      var $222=((($214)-($221))|0);
      var $223=$n;
      var $224=$bsm1;
      var $225=(($224+($223<<2))|0);
      HEAP32[(($225)>>2)]=$222;
      label = 13; break;
    case 13: 
      var $227=$bs1;
      var $228=$bs1;
      var $229=$4;
      var $230=$n;
      var $231=(($229+($230<<2))|0);
      var $232=$n;
      var $233=___gmpn_add_n($227, $228, $231, $232);
      var $234=$n;
      var $235=$bs1;
      var $236=(($235+($234<<2))|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=((($237)+($233))|0);
      HEAP32[(($236)>>2)]=$238;
      var $239=$gp;
      var $240=$4;
      var $241=$n;
      var $242=($241<<1);
      var $243=(($240+($242<<2))|0);
      var $244=$t;
      var $245=___gmpn_lshift($239, $243, $244, 2);
      $cy=$245;
      var $246=$bs2;
      var $247=$4;
      var $248=$n;
      var $249=$gp;
      var $250=$t;
      var $251=___gmpn_add($246, $247, $248, $249, $250);
      var $252=$n;
      var $253=$bs2;
      var $254=(($253+($252<<2))|0);
      HEAP32[(($254)>>2)]=$251;
      label = 14; break;
    case 14: 
      var $256=$bs2;
      var $257=$t;
      var $258=(($256+($257<<2))|0);
      $__p=$258;
      var $259=$__p;
      var $260=HEAP32[(($259)>>2)];
      var $261=$cy;
      var $262=((($260)+($261))|0);
      $__x=$262;
      var $263=$__x;
      var $264=$__p;
      HEAP32[(($264)>>2)]=$263;
      var $265=$__x;
      var $266=$cy;
      var $267=(($265)>>>0) < (($266)>>>0);
      if ($267) { label = 15; break; } else { label = 19; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $270=$__p;
      var $271=(($270+4)|0);
      $__p=$271;
      var $272=HEAP32[(($271)>>2)];
      var $273=((($272)+(1))|0);
      HEAP32[(($271)>>2)]=$273;
      var $274=(($273)|0)==0;
      if ($274) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 16; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $279=$gp;
      var $280=$4;
      var $281=$n;
      var $282=(($280+($281<<2))|0);
      var $283=$n;
      var $284=___gmpn_lshift($279, $282, $283, 1);
      var $285=$n;
      var $286=$gp;
      var $287=(($286+($285<<2))|0);
      HEAP32[(($287)>>2)]=$284;
      var $288=$bs2;
      var $289=$gp;
      var $290=$n;
      var $291=((($290)+(1))|0);
      var $292=___gmpn_cmp($288, $289, $291);
      var $293=(($292)|0) < 0;
      if ($293) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $295=$bsm2;
      var $296=$gp;
      var $297=$bs2;
      var $298=$n;
      var $299=((($298)+(1))|0);
      var $300=___gmpn_sub_n($295, $296, $297, $299);
      var $301=$flags;
      var $302=$301 ^ 1;
      $flags=$302;
      label = 23; break;
    case 22: 
      var $304=$bsm2;
      var $305=$bs2;
      var $306=$gp;
      var $307=$n;
      var $308=((($307)+(1))|0);
      var $309=___gmpn_sub_n($304, $305, $306, $308);
      label = 23; break;
    case 23: 
      var $311=$bs2;
      var $312=$bs2;
      var $313=$gp;
      var $314=$n;
      var $315=((($314)+(1))|0);
      var $316=___gmpn_add_n($311, $312, $313, $315);
      var $317=$bsh;
      var $318=$4;
      var $319=$n;
      var $320=___gmpn_lshift($317, $318, $319, 1);
      $cy=$320;
      var $321=$bsh;
      var $322=$bsh;
      var $323=$4;
      var $324=$n;
      var $325=(($323+($324<<2))|0);
      var $326=$n;
      var $327=___gmpn_add_n($321, $322, $325, $326);
      var $328=$cy;
      var $329=((($328)+($327))|0);
      $cy=$329;
      var $330=$cy;
      var $331=($330<<1);
      var $332=$bsh;
      var $333=$bsh;
      var $334=$n;
      var $335=___gmpn_lshift($332, $333, $334, 1);
      var $336=((($331)+($335))|0);
      $cy=$336;
      var $337=$cy;
      var $338=$bsh;
      var $339=$bsh;
      var $340=$n;
      var $341=$4;
      var $342=$n;
      var $343=($342<<1);
      var $344=(($341+($343<<2))|0);
      var $345=$t;
      var $346=___gmpn_add($338, $339, $340, $344, $345);
      var $347=((($337)+($346))|0);
      var $348=$n;
      var $349=$bsh;
      var $350=(($349+($348<<2))|0);
      HEAP32[(($350)>>2)]=$347;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $371=$6;
      var $372=$as2;
      var $373=$bs2;
      var $374=$n;
      var $375=((($374)+(1))|0);
      ___gmpn_mul_n($371, $372, $373, $375);
      var $376=$6;
      var $377=$n;
      var $378=($377<<1);
      var $379=(($376+($378<<2))|0);
      var $380=(($379+4)|0);
      var $381=$asm2;
      var $382=$bsm2;
      var $383=$n;
      var $384=((($383)+(1))|0);
      ___gmpn_mul_n($380, $381, $382, $384);
      var $385=$6;
      var $386=$n;
      var $387=($386<<2);
      var $388=(($385+($387<<2))|0);
      var $389=(($388+8)|0);
      var $390=$ash;
      var $391=$bsh;
      var $392=$n;
      var $393=((($392)+(1))|0);
      ___gmpn_mul_n($389, $390, $391, $393);
      var $394=$n;
      var $395=($394<<1);
      var $396=$6;
      var $397=$n;
      var $398=((($397)*(6))&-1);
      var $399=(($396+($398<<2))|0);
      var $400=(($399+12)|0);
      var $401=(($400+($395<<2))|0);
      HEAP32[(($401)>>2)]=0;
      var $402=$6;
      var $403=$n;
      var $404=((($403)*(6))&-1);
      var $405=(($402+($404<<2))|0);
      var $406=(($405+12)|0);
      var $407=$asm1;
      var $408=$bsm1;
      var $409=$n;
      var $410=$n;
      var $411=$asm1;
      var $412=(($411+($410<<2))|0);
      var $413=HEAP32[(($412)>>2)];
      var $414=$n;
      var $415=$bsm1;
      var $416=(($415+($414<<2))|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=$413 | $417;
      var $419=(($418)|0)!=0;
      var $420=(($419)&1);
      var $421=((($409)+($420))|0);
      ___gmpn_mul_n($406, $407, $408, $421);
      var $422=$n;
      var $423=($422<<1);
      var $424=$1;
      var $425=$n;
      var $426=($425<<1);
      var $427=(($424+($426<<2))|0);
      var $428=(($427+($423<<2))|0);
      HEAP32[(($428)>>2)]=0;
      var $429=$1;
      var $430=$n;
      var $431=($430<<1);
      var $432=(($429+($431<<2))|0);
      var $433=$as1;
      var $434=$bs1;
      var $435=$n;
      var $436=$n;
      var $437=$as1;
      var $438=(($437+($436<<2))|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=$n;
      var $441=$bs1;
      var $442=(($441+($440<<2))|0);
      var $443=HEAP32[(($442)>>2)];
      var $444=$439 | $443;
      var $445=(($444)|0)!=0;
      var $446=(($445)&1);
      var $447=((($435)+($446))|0);
      ___gmpn_mul_n($432, $433, $434, $447);
      var $448=$1;
      var $449=$2;
      var $450=$4;
      var $451=$n;
      ___gmpn_mul_n($448, $449, $450, $451);
      var $452=$s;
      var $453=$t;
      var $454=(($452)|0) > (($453)|0);
      if ($454) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $456=$1;
      var $457=$n;
      var $458=((($457)*(6))&-1);
      var $459=(($456+($458<<2))|0);
      var $460=$2;
      var $461=$n;
      var $462=($461<<2);
      var $463=(($460+($462<<2))|0);
      var $464=$s;
      var $465=$4;
      var $466=$n;
      var $467=($466<<1);
      var $468=(($465+($467<<2))|0);
      var $469=$t;
      var $470=___gmpn_mul($459, $463, $464, $468, $469);
      label = 46; break;
    case 45: 
      var $472=$1;
      var $473=$n;
      var $474=((($473)*(6))&-1);
      var $475=(($472+($474<<2))|0);
      var $476=$4;
      var $477=$n;
      var $478=($477<<1);
      var $479=(($476+($478<<2))|0);
      var $480=$t;
      var $481=$2;
      var $482=$n;
      var $483=($482<<2);
      var $484=(($481+($483<<2))|0);
      var $485=$s;
      var $486=___gmpn_mul($475, $479, $480, $484, $485);
      label = 46; break;
    case 46: 
      var $488=$1;
      var $489=$n;
      var $490=$flags;
      var $491=$6;
      var $492=$n;
      var $493=($492<<1);
      var $494=(($491+($493<<2))|0);
      var $495=(($494+4)|0);
      var $496=$6;
      var $497=$n;
      var $498=((($497)*(6))&-1);
      var $499=(($496+($498<<2))|0);
      var $500=(($499+12)|0);
      var $501=$6;
      var $502=$6;
      var $503=$n;
      var $504=($503<<2);
      var $505=(($502+($504<<2))|0);
      var $506=(($505+8)|0);
      var $507=$s;
      var $508=$t;
      var $509=((($507)+($508))|0);
      var $510=$6;
      var $511=$n;
      var $512=($511<<3);
      var $513=(($510+($512<<2))|0);
      var $514=(($513+16)|0);
      ___gmpn_toom_interpolate_7pts($488, $489, $490, $495, $500, $501, $506, $509, $514);
      label = 47; break;
    case 47: 
      var $516=$__tmp_marker;
      var $517=(($516)|0)!=0;
      if ($517) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $519=$__tmp_marker;
      ___gmp_tmp_reentrant_free($519);
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom53_mul["X"]=1;

function ___gmpn_toom63_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $cy;
      var $sign;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$3;
      var $10=$5;
      var $11=($10<<1);
      var $12=(($9)|0) >= (($11)|0);
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$3;
      var $15=((($14)-(1))|0);
      var $16=Math.floor(((($15)>>>0))/(6));
      var $22 = $16;label = 7; break;
    case 6: 
      var $18=$5;
      var $19=((($18)-(1))|0);
      var $20=Math.floor(((($19)>>>0))/(3));
      var $22 = $20;label = 7; break;
    case 7: 
      var $22;
      var $23=((($22)+(1))|0);
      $n=$23;
      var $24=$3;
      var $25=$n;
      var $26=((($25)*(5))&-1);
      var $27=((($24)-($26))|0);
      $s=$27;
      var $28=$5;
      var $29=$n;
      var $30=($29<<1);
      var $31=((($28)-($30))|0);
      $t=$31;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $42=$1;
      var $43=$n;
      var $44=((($43)*(5))&-1);
      var $45=(($42+($44<<2))|0);
      var $46=(($45+8)|0);
      var $47=$1;
      var $48=$n;
      var $49=((($48)*(3))&-1);
      var $50=(($47+($49<<2))|0);
      var $51=$2;
      var $52=$n;
      var $53=$s;
      var $54=$1;
      var $55=___gmpn_toom_eval_pm2exp($46, $50, 5, $51, $52, $53, 2, $54);
      $sign=$55;
      var $56=$1;
      var $57=$4;
      var $58=$n;
      var $59=$58;
      var $60=(($57+($59<<2))|0);
      var $61=$n;
      var $62=___gmpn_lshift($56, $60, $61, 2);
      var $63=$n;
      var $64=$1;
      var $65=(($64+($63<<2))|0);
      HEAP32[(($65)>>2)]=$62;
      var $66=$1;
      var $67=$n;
      var $68=((($67)*(6))&-1);
      var $69=(($66+($68<<2))|0);
      var $70=(($69+12)|0);
      var $71=$4;
      var $72=$n;
      var $73=($72<<1);
      var $74=(($71+($73<<2))|0);
      var $75=$t;
      var $76=___gmpn_lshift($70, $74, $75, 4);
      var $77=$t;
      var $78=$1;
      var $79=$n;
      var $80=((($79)*(6))&-1);
      var $81=(($78+($80<<2))|0);
      var $82=(($81+12)|0);
      var $83=(($82+($77<<2))|0);
      HEAP32[(($83)>>2)]=$76;
      var $84=$n;
      var $85=$t;
      var $86=(($84)|0)==(($85)|0);
      if ($86) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $88=$1;
      var $89=$n;
      var $90=((($89)*(6))&-1);
      var $91=(($88+($90<<2))|0);
      var $92=(($91+12)|0);
      var $93=$1;
      var $94=$n;
      var $95=((($94)*(6))&-1);
      var $96=(($93+($95<<2))|0);
      var $97=(($96+12)|0);
      var $98=$4;
      var $99=$n;
      var $100=0;
      var $101=(($98+($100<<2))|0);
      var $102=$n;
      var $103=___gmpn_add_n($92, $97, $101, $102);
      var $104=$n;
      var $105=$1;
      var $106=$n;
      var $107=((($106)*(6))&-1);
      var $108=(($105+($107<<2))|0);
      var $109=(($108+12)|0);
      var $110=(($109+($104<<2))|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=((($111)+($103))|0);
      HEAP32[(($110)>>2)]=$112;
      label = 20; break;
    case 19: 
      var $114=$1;
      var $115=$n;
      var $116=((($115)*(6))&-1);
      var $117=(($114+($116<<2))|0);
      var $118=(($117+12)|0);
      var $119=$4;
      var $120=$n;
      var $121=0;
      var $122=(($119+($121<<2))|0);
      var $123=$n;
      var $124=$1;
      var $125=$n;
      var $126=((($125)*(6))&-1);
      var $127=(($124+($126<<2))|0);
      var $128=(($127+12)|0);
      var $129=$t;
      var $130=((($129)+(1))|0);
      var $131=___gmpn_add($118, $122, $123, $128, $130);
      var $132=$n;
      var $133=$1;
      var $134=$n;
      var $135=((($134)*(6))&-1);
      var $136=(($133+($135<<2))|0);
      var $137=(($136+12)|0);
      var $138=(($137+($132<<2))|0);
      HEAP32[(($138)>>2)]=$131;
      label = 20; break;
    case 20: 
      var $140=$1;
      var $141=$n;
      var $142=($141<<2);
      var $143=(($140+($142<<2))|0);
      var $144=(($143+4)|0);
      var $145=$1;
      var $146=$n;
      var $147=((($146)*(6))&-1);
      var $148=(($145+($147<<2))|0);
      var $149=(($148+12)|0);
      var $150=$1;
      var $151=$n;
      var $152=((($151)+(1))|0);
      var $153=_abs_sub_add_n($144, $149, $150, $152);
      var $154=$sign;
      var $155=$154 ^ $153;
      $sign=$155;
      label = 21; break;
    case 21: 
      var $157=$1;
      var $158=$1;
      var $159=$n;
      var $160=((($159)*(3))&-1);
      var $161=(($158+($160<<2))|0);
      var $162=$1;
      var $163=$n;
      var $164=($163<<2);
      var $165=(($162+($164<<2))|0);
      var $166=(($165+4)|0);
      var $167=$n;
      var $168=((($167)+(1))|0);
      ___gmpn_mul_n($157, $161, $166, $168);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $171=$6;
      var $172=$n;
      var $173=((($172)*(3))&-1);
      var $174=(($171+($173<<2))|0);
      var $175=(($174+4)|0);
      var $176=$1;
      var $177=$n;
      var $178=((($177)*(5))&-1);
      var $179=(($176+($178<<2))|0);
      var $180=(($179+8)|0);
      var $181=$1;
      var $182=$n;
      var $183=((($182)*(6))&-1);
      var $184=(($181+($183<<2))|0);
      var $185=(($184+12)|0);
      var $186=$n;
      var $187=((($186)+(1))|0);
      ___gmpn_mul_n($175, $180, $185, $187);
      label = 24; break;
    case 24: 
      var $189=$6;
      var $190=$n;
      var $191=((($190)*(3))&-1);
      var $192=(($189+($191<<2))|0);
      var $193=(($192+4)|0);
      var $194=$n;
      var $195=($194<<1);
      var $196=((($195)+(1))|0);
      var $197=$1;
      var $198=$sign;
      var $199=$n;
      ___gmpn_toom_couple_handling($193, $196, $197, $198, $199, 2, 4);
      var $200=$1;
      var $201=$n;
      var $202=((($201)*(5))&-1);
      var $203=(($200+($202<<2))|0);
      var $204=(($203+8)|0);
      var $205=$1;
      var $206=$n;
      var $207=((($206)*(3))&-1);
      var $208=(($205+($207<<2))|0);
      var $209=$2;
      var $210=$n;
      var $211=$s;
      var $212=$1;
      var $213=___gmpn_toom_eval_pm1($204, $208, 5, $209, $210, $211, $212);
      $sign=$213;
      var $214=$6;
      var $215=$n;
      var $216=((($215)*(6))&-1);
      var $217=(($214+($216<<2))|0);
      var $218=(($217+8)|0);
      var $219=$4;
      var $220=$n;
      var $221=0;
      var $222=(($219+($221<<2))|0);
      var $223=$n;
      var $224=$4;
      var $225=$n;
      var $226=($225<<1);
      var $227=(($224+($226<<2))|0);
      var $228=$t;
      var $229=___gmpn_add($218, $222, $223, $227, $228);
      $cy=$229;
      var $230=$cy;
      var $231=$1;
      var $232=$n;
      var $233=((($232)*(6))&-1);
      var $234=(($231+($233<<2))|0);
      var $235=(($234+12)|0);
      var $236=$6;
      var $237=$n;
      var $238=((($237)*(6))&-1);
      var $239=(($236+($238<<2))|0);
      var $240=(($239+8)|0);
      var $241=$4;
      var $242=$n;
      var $243=$242;
      var $244=(($241+($243<<2))|0);
      var $245=$n;
      var $246=___gmpn_add_n($235, $240, $244, $245);
      var $247=((($230)+($246))|0);
      var $248=$n;
      var $249=$1;
      var $250=$n;
      var $251=((($250)*(6))&-1);
      var $252=(($249+($251<<2))|0);
      var $253=(($252+12)|0);
      var $254=(($253+($248<<2))|0);
      HEAP32[(($254)>>2)]=$247;
      var $255=$cy;
      var $256=(($255)|0)==0;
      if ($256) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $258=$6;
      var $259=$n;
      var $260=((($259)*(6))&-1);
      var $261=(($258+($260<<2))|0);
      var $262=(($261+8)|0);
      var $263=$4;
      var $264=$n;
      var $265=$264;
      var $266=(($263+($265<<2))|0);
      var $267=$n;
      var $268=___gmpn_cmp($262, $266, $267);
      var $269=(($268)|0) < 0;
      if ($269) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $271=$1;
      var $272=$n;
      var $273=($272<<2);
      var $274=(($271+($273<<2))|0);
      var $275=(($274+4)|0);
      var $276=$4;
      var $277=$n;
      var $278=$277;
      var $279=(($276+($278<<2))|0);
      var $280=$6;
      var $281=$n;
      var $282=((($281)*(6))&-1);
      var $283=(($280+($282<<2))|0);
      var $284=(($283+8)|0);
      var $285=$n;
      var $286=___gmpn_sub_n($275, $279, $284, $285);
      var $287=$n;
      var $288=$1;
      var $289=$n;
      var $290=($289<<2);
      var $291=(($288+($290<<2))|0);
      var $292=(($291+4)|0);
      var $293=(($292+($287<<2))|0);
      HEAP32[(($293)>>2)]=0;
      var $294=$sign;
      var $295=$294 ^ -1;
      $sign=$295;
      label = 28; break;
    case 27: 
      var $297=$1;
      var $298=$n;
      var $299=($298<<2);
      var $300=(($297+($299<<2))|0);
      var $301=(($300+4)|0);
      var $302=$6;
      var $303=$n;
      var $304=((($303)*(6))&-1);
      var $305=(($302+($304<<2))|0);
      var $306=(($305+8)|0);
      var $307=$4;
      var $308=$n;
      var $309=$308;
      var $310=(($307+($309<<2))|0);
      var $311=$n;
      var $312=___gmpn_sub_n($301, $306, $310, $311);
      var $313=$cy;
      var $314=((($313)-($312))|0);
      $cy=$314;
      var $315=$cy;
      var $316=$n;
      var $317=$1;
      var $318=$n;
      var $319=($318<<2);
      var $320=(($317+($319<<2))|0);
      var $321=(($320+4)|0);
      var $322=(($321+($316<<2))|0);
      HEAP32[(($322)>>2)]=$315;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $325=$1;
      var $326=$1;
      var $327=$n;
      var $328=((($327)*(3))&-1);
      var $329=(($326+($328<<2))|0);
      var $330=$1;
      var $331=$n;
      var $332=($331<<2);
      var $333=(($330+($332<<2))|0);
      var $334=(($333+4)|0);
      var $335=$n;
      var $336=((($335)+(1))|0);
      ___gmpn_mul_n($325, $329, $334, $336);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $339=$6;
      var $340=$1;
      var $341=$n;
      var $342=((($341)*(5))&-1);
      var $343=(($340+($342<<2))|0);
      var $344=(($343+8)|0);
      var $345=$1;
      var $346=$n;
      var $347=((($346)*(6))&-1);
      var $348=(($345+($347<<2))|0);
      var $349=(($348+12)|0);
      var $350=$n;
      var $351=((($350)+(1))|0);
      ___gmpn_mul_n($339, $344, $349, $351);
      label = 32; break;
    case 32: 
      var $353=$6;
      var $354=$n;
      var $355=($354<<1);
      var $356=((($355)+(1))|0);
      var $357=$1;
      var $358=$sign;
      var $359=$n;
      ___gmpn_toom_couple_handling($353, $356, $357, $358, $359, 0, 0);
      var $360=$1;
      var $361=$n;
      var $362=((($361)*(5))&-1);
      var $363=(($360+($362<<2))|0);
      var $364=(($363+8)|0);
      var $365=$1;
      var $366=$n;
      var $367=((($366)*(3))&-1);
      var $368=(($365+($367<<2))|0);
      var $369=$2;
      var $370=$n;
      var $371=$s;
      var $372=$1;
      var $373=___gmpn_toom_eval_pm2($364, $368, 5, $369, $370, $371, $372);
      $sign=$373;
      var $374=$1;
      var $375=$4;
      var $376=$n;
      var $377=$376;
      var $378=(($375+($377<<2))|0);
      var $379=$n;
      var $380=___gmpn_lshift($374, $378, $379, 1);
      var $381=$n;
      var $382=$1;
      var $383=(($382+($381<<2))|0);
      HEAP32[(($383)>>2)]=$380;
      var $384=$1;
      var $385=$n;
      var $386=((($385)*(6))&-1);
      var $387=(($384+($386<<2))|0);
      var $388=(($387+12)|0);
      var $389=$4;
      var $390=$n;
      var $391=($390<<1);
      var $392=(($389+($391<<2))|0);
      var $393=$t;
      var $394=___gmpn_lshift($388, $392, $393, 2);
      var $395=$t;
      var $396=$1;
      var $397=$n;
      var $398=((($397)*(6))&-1);
      var $399=(($396+($398<<2))|0);
      var $400=(($399+12)|0);
      var $401=(($400+($395<<2))|0);
      HEAP32[(($401)>>2)]=$394;
      var $402=$n;
      var $403=$t;
      var $404=(($402)|0)==(($403)|0);
      if ($404) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $406=$1;
      var $407=$n;
      var $408=((($407)*(6))&-1);
      var $409=(($406+($408<<2))|0);
      var $410=(($409+12)|0);
      var $411=$1;
      var $412=$n;
      var $413=((($412)*(6))&-1);
      var $414=(($411+($413<<2))|0);
      var $415=(($414+12)|0);
      var $416=$4;
      var $417=$n;
      var $418=0;
      var $419=(($416+($418<<2))|0);
      var $420=$n;
      var $421=___gmpn_add_n($410, $415, $419, $420);
      var $422=$n;
      var $423=$1;
      var $424=$n;
      var $425=((($424)*(6))&-1);
      var $426=(($423+($425<<2))|0);
      var $427=(($426+12)|0);
      var $428=(($427+($422<<2))|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=((($429)+($421))|0);
      HEAP32[(($428)>>2)]=$430;
      label = 35; break;
    case 34: 
      var $432=$1;
      var $433=$n;
      var $434=((($433)*(6))&-1);
      var $435=(($432+($434<<2))|0);
      var $436=(($435+12)|0);
      var $437=$4;
      var $438=$n;
      var $439=0;
      var $440=(($437+($439<<2))|0);
      var $441=$n;
      var $442=$1;
      var $443=$n;
      var $444=((($443)*(6))&-1);
      var $445=(($442+($444<<2))|0);
      var $446=(($445+12)|0);
      var $447=$t;
      var $448=((($447)+(1))|0);
      var $449=___gmpn_add($436, $440, $441, $446, $448);
      var $450=$n;
      var $451=$1;
      var $452=$n;
      var $453=((($452)*(6))&-1);
      var $454=(($451+($453<<2))|0);
      var $455=(($454+12)|0);
      var $456=(($455+($450<<2))|0);
      HEAP32[(($456)>>2)]=$449;
      label = 35; break;
    case 35: 
      var $458=$1;
      var $459=$n;
      var $460=($459<<2);
      var $461=(($458+($460<<2))|0);
      var $462=(($461+4)|0);
      var $463=$1;
      var $464=$n;
      var $465=((($464)*(6))&-1);
      var $466=(($463+($465<<2))|0);
      var $467=(($466+12)|0);
      var $468=$1;
      var $469=$n;
      var $470=((($469)+(1))|0);
      var $471=_abs_sub_add_n($462, $467, $468, $470);
      var $472=$sign;
      var $473=$472 ^ $471;
      $sign=$473;
      label = 36; break;
    case 36: 
      var $475=$1;
      var $476=$1;
      var $477=$n;
      var $478=((($477)*(3))&-1);
      var $479=(($476+($478<<2))|0);
      var $480=$1;
      var $481=$n;
      var $482=($481<<2);
      var $483=(($480+($482<<2))|0);
      var $484=(($483+4)|0);
      var $485=$n;
      var $486=((($485)+(1))|0);
      ___gmpn_mul_n($475, $479, $484, $486);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $489=$1;
      var $490=$n;
      var $491=((($490)*(3))&-1);
      var $492=(($489+($491<<2))|0);
      var $493=$1;
      var $494=$n;
      var $495=((($494)*(5))&-1);
      var $496=(($493+($495<<2))|0);
      var $497=(($496+8)|0);
      var $498=$1;
      var $499=$n;
      var $500=((($499)*(6))&-1);
      var $501=(($498+($500<<2))|0);
      var $502=(($501+12)|0);
      var $503=$n;
      var $504=((($503)+(1))|0);
      ___gmpn_mul_n($492, $497, $502, $504);
      label = 39; break;
    case 39: 
      var $506=$1;
      var $507=$n;
      var $508=((($507)*(3))&-1);
      var $509=(($506+($508<<2))|0);
      var $510=$n;
      var $511=($510<<1);
      var $512=((($511)+(1))|0);
      var $513=$1;
      var $514=$sign;
      var $515=$n;
      ___gmpn_toom_couple_handling($509, $512, $513, $514, $515, 1, 2);
      label = 40; break;
    case 40: 
      var $517=$1;
      var $518=$2;
      var $519=$4;
      var $520=$n;
      ___gmpn_mul_n($517, $518, $519, $520);
      label = 41; break;
    case 41: 
      var $522=$s;
      var $523=$t;
      var $524=(($522)|0) > (($523)|0);
      if ($524) { label = 42; break; } else { label = 45; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $527=$1;
      var $528=$n;
      var $529=((($528)*(7))&-1);
      var $530=(($527+($529<<2))|0);
      var $531=$2;
      var $532=$n;
      var $533=((($532)*(5))&-1);
      var $534=(($531+($533<<2))|0);
      var $535=$s;
      var $536=$4;
      var $537=$n;
      var $538=($537<<1);
      var $539=(($536+($538<<2))|0);
      var $540=$t;
      var $541=___gmpn_mul($530, $534, $535, $539, $540);
      label = 44; break;
    case 44: 
      label = 48; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $545=$1;
      var $546=$n;
      var $547=((($546)*(7))&-1);
      var $548=(($545+($547<<2))|0);
      var $549=$4;
      var $550=$n;
      var $551=($550<<1);
      var $552=(($549+($551<<2))|0);
      var $553=$t;
      var $554=$2;
      var $555=$n;
      var $556=((($555)*(5))&-1);
      var $557=(($554+($556<<2))|0);
      var $558=$s;
      var $559=___gmpn_mul($548, $552, $553, $557, $558);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $562=$1;
      var $563=$n;
      var $564=$6;
      var $565=$n;
      var $566=((($565)*(3))&-1);
      var $567=(($564+($566<<2))|0);
      var $568=(($567+4)|0);
      var $569=$6;
      var $570=$s;
      var $571=$t;
      var $572=((($570)+($571))|0);
      var $573=$6;
      var $574=$n;
      var $575=((($574)*(6))&-1);
      var $576=(($573+($575<<2))|0);
      var $577=(($576+8)|0);
      ___gmpn_toom_interpolate_8pts($562, $563, $568, $569, $572, $577);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom63_mul["X"]=1;

function _abs_sub_add_n($rm, $rp, $rs, $n) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $result;
  $1=$rm;
  $2=$rp;
  $3=$rs;
  $4=$n;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=_abs_sub_n($5, $6, $7, $8);
  $result=$9;
  var $10=$2;
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=___gmpn_add_n($10, $11, $12, $13);
  var $15=$result;

  return $15;
}


function _abs_sub_n($rp, $ap, $bp, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $x;
      var $y;
      $2=$rp;
      $3=$ap;
      $4=$bp;
      $5=$n;
      label = 3; break;
    case 3: 
      var $7=$5;
      var $8=((($7)-(1))|0);
      $5=$8;
      var $9=(($8)|0) >= 0;
      if ($9) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $11=$5;
      var $12=$3;
      var $13=(($12+($11<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      $x=$14;
      var $15=$5;
      var $16=$4;
      var $17=(($16+($15<<2))|0);
      var $18=HEAP32[(($17)>>2)];
      $y=$18;
      var $19=$x;
      var $20=$y;
      var $21=(($19)|0)!=(($20)|0);
      if ($21) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $23=$5;
      var $24=((($23)+(1))|0);
      $5=$24;
      var $25=$x;
      var $26=$y;
      var $27=(($25)>>>0) > (($26)>>>0);
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$2;
      var $30=$3;
      var $31=$4;
      var $32=$5;
      var $33=___gmpn_sub_n($29, $30, $31, $32);
      $1=0;
      label = 10; break;
    case 7: 
      var $35=$2;
      var $36=$4;
      var $37=$3;
      var $38=$5;
      var $39=___gmpn_sub_n($35, $36, $37, $38);
      $1=-1;
      label = 10; break;
    case 8: 
      var $41=$5;
      var $42=$2;
      var $43=(($42+($41<<2))|0);
      HEAP32[(($43)>>2)]=0;
      label = 3; break;
    case 9: 
      $1=0;
      label = 10; break;
    case 10: 
      var $46=$1;

      return $46;
    default: assert(0, "bad label: " + label);
  }

}
_abs_sub_n["X"]=1;

function ___gmpn_toom6_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      var $s;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$3;
      var $8=((($7)-(1))|0);
      var $9=Math.floor(((($8)>>>0))/(6));
      var $10=((($9)+(1))|0);
      $n=$10;
      var $11=$3;
      var $12=$n;
      var $13=((($12)*(5))&-1);
      var $14=((($11)-($13))|0);
      $s=$14;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $17=$1;
      var $18=$n;
      var $19=((($18)*(9))&-1);
      var $20=(($17+($19<<2))|0);
      var $21=(($20+8)|0);
      var $22=$1;
      var $23=$n;
      var $24=((($23)*(7))&-1);
      var $25=(($22+($24<<2))|0);
      var $26=$2;
      var $27=$n;
      var $28=$s;
      var $29=$1;
      var $30=___gmpn_toom_eval_pm2rexp($21, $25, 5, $26, $27, $28, 1, $29);
      label = 7; break;
    case 7: 
      var $32=$1;
      var $33=$1;
      var $34=$n;
      var $35=((($34)*(7))&-1);
      var $36=(($33+($35<<2))|0);
      var $37=$n;
      var $38=((($37)+(1))|0);
      var $39=$4;
      var $40=$n;
      var $41=((($40)*(9))&-1);
      var $42=(($39+($41<<2))|0);
      var $43=(($42+12)|0);
      ___gmpn_toom2_sqr($32, $36, $38, $43);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $46=$4;
      var $47=$1;
      var $48=$n;
      var $49=((($48)*(9))&-1);
      var $50=(($47+($49<<2))|0);
      var $51=(($50+8)|0);
      var $52=$n;
      var $53=((($52)+(1))|0);
      var $54=$4;
      var $55=$n;
      var $56=((($55)*(9))&-1);
      var $57=(($54+($56<<2))|0);
      var $58=(($57+12)|0);
      ___gmpn_toom2_sqr($46, $51, $53, $58);
      label = 10; break;
    case 10: 
      var $60=$4;
      var $61=$n;
      var $62=($61<<1);
      var $63=((($62)+(1))|0);
      var $64=$1;
      var $65=$n;
      ___gmpn_toom_couple_handling($60, $63, $64, 0, $65, 1, 0);
      var $66=$1;
      var $67=$n;
      var $68=((($67)*(9))&-1);
      var $69=(($66+($68<<2))|0);
      var $70=(($69+8)|0);
      var $71=$1;
      var $72=$n;
      var $73=((($72)*(7))&-1);
      var $74=(($71+($73<<2))|0);
      var $75=$2;
      var $76=$n;
      var $77=$s;
      var $78=$1;
      var $79=___gmpn_toom_eval_pm1($70, $74, 5, $75, $76, $77, $78);
      label = 11; break;
    case 11: 
      var $81=$1;
      var $82=$1;
      var $83=$n;
      var $84=((($83)*(7))&-1);
      var $85=(($82+($84<<2))|0);
      var $86=$n;
      var $87=((($86)+(1))|0);
      var $88=$4;
      var $89=$n;
      var $90=((($89)*(9))&-1);
      var $91=(($88+($90<<2))|0);
      var $92=(($91+12)|0);
      ___gmpn_toom2_sqr($81, $85, $87, $92);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $95=$4;
      var $96=$n;
      var $97=((($96)*(3))&-1);
      var $98=(($95+($97<<2))|0);
      var $99=(($98+4)|0);
      var $100=$1;
      var $101=$n;
      var $102=((($101)*(9))&-1);
      var $103=(($100+($102<<2))|0);
      var $104=(($103+8)|0);
      var $105=$n;
      var $106=((($105)+(1))|0);
      var $107=$4;
      var $108=$n;
      var $109=((($108)*(9))&-1);
      var $110=(($107+($109<<2))|0);
      var $111=(($110+12)|0);
      ___gmpn_toom2_sqr($99, $104, $106, $111);
      label = 14; break;
    case 14: 
      var $113=$4;
      var $114=$n;
      var $115=((($114)*(3))&-1);
      var $116=(($113+($115<<2))|0);
      var $117=(($116+4)|0);
      var $118=$n;
      var $119=($118<<1);
      var $120=((($119)+(1))|0);
      var $121=$1;
      var $122=$n;
      ___gmpn_toom_couple_handling($117, $120, $121, 0, $122, 0, 0);
      var $123=$1;
      var $124=$n;
      var $125=((($124)*(9))&-1);
      var $126=(($123+($125<<2))|0);
      var $127=(($126+8)|0);
      var $128=$1;
      var $129=$n;
      var $130=((($129)*(7))&-1);
      var $131=(($128+($130<<2))|0);
      var $132=$2;
      var $133=$n;
      var $134=$s;
      var $135=$1;
      var $136=___gmpn_toom_eval_pm2exp($127, $131, 5, $132, $133, $134, 2, $135);
      label = 15; break;
    case 15: 
      var $138=$1;
      var $139=$1;
      var $140=$n;
      var $141=((($140)*(7))&-1);
      var $142=(($139+($141<<2))|0);
      var $143=$n;
      var $144=((($143)+(1))|0);
      var $145=$4;
      var $146=$n;
      var $147=((($146)*(9))&-1);
      var $148=(($145+($147<<2))|0);
      var $149=(($148+12)|0);
      ___gmpn_toom2_sqr($138, $142, $144, $149);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $152=$4;
      var $153=$n;
      var $154=((($153)*(6))&-1);
      var $155=(($152+($154<<2))|0);
      var $156=(($155+8)|0);
      var $157=$1;
      var $158=$n;
      var $159=((($158)*(9))&-1);
      var $160=(($157+($159<<2))|0);
      var $161=(($160+8)|0);
      var $162=$n;
      var $163=((($162)+(1))|0);
      var $164=$4;
      var $165=$n;
      var $166=((($165)*(9))&-1);
      var $167=(($164+($166<<2))|0);
      var $168=(($167+12)|0);
      ___gmpn_toom2_sqr($156, $161, $163, $168);
      label = 18; break;
    case 18: 
      var $170=$4;
      var $171=$n;
      var $172=((($171)*(6))&-1);
      var $173=(($170+($172<<2))|0);
      var $174=(($173+8)|0);
      var $175=$n;
      var $176=($175<<1);
      var $177=((($176)+(1))|0);
      var $178=$1;
      var $179=$n;
      ___gmpn_toom_couple_handling($174, $177, $178, 0, $179, 2, 4);
      var $180=$1;
      var $181=$n;
      var $182=((($181)*(9))&-1);
      var $183=(($180+($182<<2))|0);
      var $184=(($183+8)|0);
      var $185=$1;
      var $186=$n;
      var $187=((($186)*(7))&-1);
      var $188=(($185+($187<<2))|0);
      var $189=$2;
      var $190=$n;
      var $191=$s;
      var $192=$1;
      var $193=___gmpn_toom_eval_pm2rexp($184, $188, 5, $189, $190, $191, 2, $192);
      label = 19; break;
    case 19: 
      var $195=$1;
      var $196=$1;
      var $197=$n;
      var $198=((($197)*(7))&-1);
      var $199=(($196+($198<<2))|0);
      var $200=$n;
      var $201=((($200)+(1))|0);
      var $202=$4;
      var $203=$n;
      var $204=((($203)*(9))&-1);
      var $205=(($202+($204<<2))|0);
      var $206=(($205+12)|0);
      ___gmpn_toom2_sqr($195, $199, $201, $206);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $209=$1;
      var $210=$n;
      var $211=((($210)*(3))&-1);
      var $212=(($209+($211<<2))|0);
      var $213=$1;
      var $214=$n;
      var $215=((($214)*(9))&-1);
      var $216=(($213+($215<<2))|0);
      var $217=(($216+8)|0);
      var $218=$n;
      var $219=((($218)+(1))|0);
      var $220=$4;
      var $221=$n;
      var $222=((($221)*(9))&-1);
      var $223=(($220+($222<<2))|0);
      var $224=(($223+12)|0);
      ___gmpn_toom2_sqr($212, $217, $219, $224);
      label = 22; break;
    case 22: 
      var $226=$1;
      var $227=$n;
      var $228=((($227)*(3))&-1);
      var $229=(($226+($228<<2))|0);
      var $230=$n;
      var $231=($230<<1);
      var $232=((($231)+(1))|0);
      var $233=$1;
      var $234=$n;
      ___gmpn_toom_couple_handling($229, $232, $233, 0, $234, 2, 0);
      var $235=$1;
      var $236=$n;
      var $237=((($236)*(9))&-1);
      var $238=(($235+($237<<2))|0);
      var $239=(($238+8)|0);
      var $240=$1;
      var $241=$n;
      var $242=((($241)*(7))&-1);
      var $243=(($240+($242<<2))|0);
      var $244=$2;
      var $245=$n;
      var $246=$s;
      var $247=$1;
      var $248=___gmpn_toom_eval_pm2($239, $243, 5, $244, $245, $246, $247);
      label = 23; break;
    case 23: 
      var $250=$1;
      var $251=$1;
      var $252=$n;
      var $253=((($252)*(7))&-1);
      var $254=(($251+($253<<2))|0);
      var $255=$n;
      var $256=((($255)+(1))|0);
      var $257=$4;
      var $258=$n;
      var $259=((($258)*(9))&-1);
      var $260=(($257+($259<<2))|0);
      var $261=(($260+12)|0);
      ___gmpn_toom2_sqr($250, $254, $256, $261);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $264=$1;
      var $265=$n;
      var $266=((($265)*(7))&-1);
      var $267=(($264+($266<<2))|0);
      var $268=$1;
      var $269=$n;
      var $270=((($269)*(9))&-1);
      var $271=(($268+($270<<2))|0);
      var $272=(($271+8)|0);
      var $273=$n;
      var $274=((($273)+(1))|0);
      var $275=$4;
      var $276=$n;
      var $277=((($276)*(9))&-1);
      var $278=(($275+($277<<2))|0);
      var $279=(($278+12)|0);
      ___gmpn_toom2_sqr($267, $272, $274, $279);
      label = 26; break;
    case 26: 
      var $281=$1;
      var $282=$n;
      var $283=((($282)*(7))&-1);
      var $284=(($281+($283<<2))|0);
      var $285=$n;
      var $286=($285<<1);
      var $287=((($286)+(1))|0);
      var $288=$1;
      var $289=$n;
      ___gmpn_toom_couple_handling($284, $287, $288, 0, $289, 1, 2);
      label = 27; break;
    case 27: 
      var $291=$1;
      var $292=$2;
      var $293=$n;
      var $294=$4;
      var $295=$n;
      var $296=((($295)*(9))&-1);
      var $297=(($294+($296<<2))|0);
      var $298=(($297+12)|0);
      ___gmpn_toom2_sqr($291, $292, $293, $298);
      label = 28; break;
    case 28: 
      var $300=$1;
      var $301=$4;
      var $302=$n;
      var $303=((($302)*(6))&-1);
      var $304=(($301+($303<<2))|0);
      var $305=(($304+8)|0);
      var $306=$4;
      var $307=$n;
      var $308=((($307)*(3))&-1);
      var $309=(($306+($308<<2))|0);
      var $310=(($309+4)|0);
      var $311=$4;
      var $312=$n;
      var $313=$s;
      var $314=($313<<1);
      var $315=$4;
      var $316=$n;
      var $317=((($316)*(9))&-1);
      var $318=(($315+($317<<2))|0);
      var $319=(($318+12)|0);
      ___gmpn_toom_interpolate_12pts($300, $305, $310, $311, $312, $314, 0, $319);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom6_sqr["X"]=1;

function ___gmpn_toom6h_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $p;
      var $q;
      var $half;
      var $sign;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$3;
      var $14=((($13)*(17))&-1);
      var $15=$5;
      var $16=((($15)*(18))&-1);
      var $17=(($14)|0) < (($16)|0);
      if ($17) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $q=6;
      $p=6;
      label = 23; break;
    case 10: 
      var $20=$3;
      var $21=((($20)*(5))&-1);
      var $22=((($21)*(18))&-1);
      var $23=$5;
      var $24=((($23)*(119))&-1);
      var $25=(($22)|0) < (($24)|0);
      if ($25) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $p=7;
      $q=6;
      label = 22; break;
    case 12: 
      var $28=$3;
      var $29=((($28)*(5))&-1);
      var $30=((($29)*(17))&-1);
      var $31=$5;
      var $32=((($31)*(126))&-1);
      var $33=(($30)|0) < (($32)|0);
      if ($33) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $p=7;
      $q=5;
      label = 21; break;
    case 14: 
      var $36=$3;
      var $37=((($36)*(18))&-1);
      var $38=$5;
      var $39=((($38)*(34))&-1);
      var $40=(($37)|0) < (($39)|0);
      if ($40) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $p=8;
      $q=5;
      label = 20; break;
    case 16: 
      var $43=$3;
      var $44=((($43)*(17))&-1);
      var $45=$5;
      var $46=((($45)*(36))&-1);
      var $47=(($44)|0) < (($46)|0);
      if ($47) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $p=8;
      $q=4;
      label = 19; break;
    case 18: 
      $p=9;
      $q=4;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $55=$p;
      var $56=$q;
      var $57=$55 ^ $56;
      var $58=$57 & 1;
      $half=$58;
      var $59=$q;
      var $60=$3;
      var $61=Math.imul($59,$60);
      var $62=$p;
      var $63=$5;
      var $64=Math.imul($62,$63);
      var $65=(($61)|0) >= (($64)|0);
      if ($65) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $67=$3;
      var $68=((($67)-(1))|0);
      var $69=$p;
      var $70=Math.floor(((($68)>>>0))/((($69)>>>0)));
      var $77 = $70;label = 26; break;
    case 25: 
      var $72=$5;
      var $73=((($72)-(1))|0);
      var $74=$q;
      var $75=Math.floor(((($73)>>>0))/((($74)>>>0)));
      var $77 = $75;label = 26; break;
    case 26: 
      var $77;
      var $78=((($77)+(1))|0);
      $n=$78;
      var $79=$p;
      var $80=((($79)-(1))|0);
      $p=$80;
      var $81=$q;
      var $82=((($81)-(1))|0);
      $q=$82;
      var $83=$3;
      var $84=$p;
      var $85=$n;
      var $86=Math.imul($84,$85);
      var $87=((($83)-($86))|0);
      $s=$87;
      var $88=$5;
      var $89=$q;
      var $90=$n;
      var $91=Math.imul($89,$90);
      var $92=((($88)-($91))|0);
      $t=$92;
      var $93=$half;
      var $94=(($93)|0)!=0;
      if ($94) { label = 27; break; } else { label = 33; break; }
    case 27: 
      var $96=$s;
      var $97=(($96)|0) < 1;
      if ($97) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $99=$p;
      var $100=((($99)-(1))|0);
      $p=$100;
      var $101=$n;
      var $102=$s;
      var $103=((($102)+($101))|0);
      $s=$103;
      $half=0;
      label = 32; break;
    case 29: 
      var $105=$t;
      var $106=(($105)|0) < 1;
      if ($106) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $108=$q;
      var $109=((($108)-(1))|0);
      $q=$109;
      var $110=$n;
      var $111=$t;
      var $112=((($111)+($110))|0);
      $t=$112;
      $half=0;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $128=$1;
      var $129=$n;
      var $130=((($129)*(9))&-1);
      var $131=(($128+($130<<2))|0);
      var $132=(($131+8)|0);
      var $133=$1;
      var $134=$n;
      var $135=((($134)*(7))&-1);
      var $136=(($133+($135<<2))|0);
      var $137=$p;
      var $138=$2;
      var $139=$n;
      var $140=$s;
      var $141=$1;
      var $142=___gmpn_toom_eval_pm2rexp($132, $136, $137, $138, $139, $140, 1, $141);
      var $143=$6;
      var $144=$n;
      var $145=((($144)*(9))&-1);
      var $146=(($143+($145<<2))|0);
      var $147=(($146+12)|0);
      var $148=$1;
      var $149=$n;
      var $150=($149<<3);
      var $151=(($148+($150<<2))|0);
      var $152=(($151+4)|0);
      var $153=$q;
      var $154=$4;
      var $155=$n;
      var $156=$t;
      var $157=$1;
      var $158=___gmpn_toom_eval_pm2rexp($147, $152, $153, $154, $155, $156, 1, $157);
      var $159=$142 ^ $158;
      $sign=$159;
      label = 46; break;
    case 46: 
      var $161=$n;
      var $162=((($161)+(1))|0);
      var $163=(($162)|0) >= 100;
      if ($163) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $165=$1;
      var $166=$1;
      var $167=$n;
      var $168=((($167)*(7))&-1);
      var $169=(($166+($168<<2))|0);
      var $170=$n;
      var $171=((($170)+(1))|0);
      var $172=$1;
      var $173=$n;
      var $174=($173<<3);
      var $175=(($172+($174<<2))|0);
      var $176=(($175+4)|0);
      var $177=$n;
      var $178=((($177)+(1))|0);
      var $179=$6;
      var $180=$n;
      var $181=((($180)*(10))&-1);
      var $182=(($179+($181<<2))|0);
      var $183=(($182+16)|0);
      ___gmpn_toom22_mul($165, $169, $171, $176, $178, $183);
      label = 55; break;
    case 48: 
      var $185=$n;
      var $186=((($185)+(1))|0);
      var $187=(($186)|0) >= 300;
      if ($187) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $189=$1;
      var $190=$1;
      var $191=$n;
      var $192=((($191)*(7))&-1);
      var $193=(($190+($192<<2))|0);
      var $194=$n;
      var $195=((($194)+(1))|0);
      var $196=$1;
      var $197=$n;
      var $198=($197<<3);
      var $199=(($196+($198<<2))|0);
      var $200=(($199+4)|0);
      var $201=$n;
      var $202=((($201)+(1))|0);
      var $203=$6;
      var $204=$n;
      var $205=((($204)*(10))&-1);
      var $206=(($203+($205<<2))|0);
      var $207=(($206+16)|0);
      ___gmpn_toom33_mul($189, $193, $195, $200, $202, $207);
      label = 54; break;
    case 50: 
      var $209=$n;
      var $210=((($209)+(1))|0);
      var $211=(($210)|0) >= 350;
      if ($211) { label = 52; break; } else { label = 51; break; }
    case 51: 
      var $213=$1;
      var $214=$1;
      var $215=$n;
      var $216=((($215)*(7))&-1);
      var $217=(($214+($216<<2))|0);
      var $218=$n;
      var $219=((($218)+(1))|0);
      var $220=$1;
      var $221=$n;
      var $222=($221<<3);
      var $223=(($220+($222<<2))|0);
      var $224=(($223+4)|0);
      var $225=$n;
      var $226=((($225)+(1))|0);
      var $227=$6;
      var $228=$n;
      var $229=((($228)*(10))&-1);
      var $230=(($227+($229<<2))|0);
      var $231=(($230+16)|0);
      ___gmpn_toom44_mul($213, $217, $219, $224, $226, $231);
      label = 53; break;
    case 52: 
      var $233=$1;
      var $234=$1;
      var $235=$n;
      var $236=((($235)*(7))&-1);
      var $237=(($234+($236<<2))|0);
      var $238=$n;
      var $239=((($238)+(1))|0);
      var $240=$1;
      var $241=$n;
      var $242=($241<<3);
      var $243=(($240+($242<<2))|0);
      var $244=(($243+4)|0);
      var $245=$n;
      var $246=((($245)+(1))|0);
      var $247=$6;
      var $248=$n;
      var $249=((($248)*(10))&-1);
      var $250=(($247+($249<<2))|0);
      var $251=(($250+16)|0);
      ___gmpn_toom6h_mul($233, $237, $239, $244, $246, $251);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $257=$n;
      var $258=((($257)+(1))|0);
      var $259=(($258)|0) >= 100;
      if ($259) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $261=$6;
      var $262=$1;
      var $263=$n;
      var $264=((($263)*(9))&-1);
      var $265=(($262+($264<<2))|0);
      var $266=(($265+8)|0);
      var $267=$n;
      var $268=((($267)+(1))|0);
      var $269=$6;
      var $270=$n;
      var $271=((($270)*(9))&-1);
      var $272=(($269+($271<<2))|0);
      var $273=(($272+12)|0);
      var $274=$n;
      var $275=((($274)+(1))|0);
      var $276=$6;
      var $277=$n;
      var $278=((($277)*(10))&-1);
      var $279=(($276+($278<<2))|0);
      var $280=(($279+16)|0);
      ___gmpn_toom22_mul($261, $266, $268, $273, $275, $280);
      label = 66; break;
    case 59: 
      var $282=$n;
      var $283=((($282)+(1))|0);
      var $284=(($283)|0) >= 300;
      if ($284) { label = 61; break; } else { label = 60; break; }
    case 60: 
      var $286=$6;
      var $287=$1;
      var $288=$n;
      var $289=((($288)*(9))&-1);
      var $290=(($287+($289<<2))|0);
      var $291=(($290+8)|0);
      var $292=$n;
      var $293=((($292)+(1))|0);
      var $294=$6;
      var $295=$n;
      var $296=((($295)*(9))&-1);
      var $297=(($294+($296<<2))|0);
      var $298=(($297+12)|0);
      var $299=$n;
      var $300=((($299)+(1))|0);
      var $301=$6;
      var $302=$n;
      var $303=((($302)*(10))&-1);
      var $304=(($301+($303<<2))|0);
      var $305=(($304+16)|0);
      ___gmpn_toom33_mul($286, $291, $293, $298, $300, $305);
      label = 65; break;
    case 61: 
      var $307=$n;
      var $308=((($307)+(1))|0);
      var $309=(($308)|0) >= 350;
      if ($309) { label = 63; break; } else { label = 62; break; }
    case 62: 
      var $311=$6;
      var $312=$1;
      var $313=$n;
      var $314=((($313)*(9))&-1);
      var $315=(($312+($314<<2))|0);
      var $316=(($315+8)|0);
      var $317=$n;
      var $318=((($317)+(1))|0);
      var $319=$6;
      var $320=$n;
      var $321=((($320)*(9))&-1);
      var $322=(($319+($321<<2))|0);
      var $323=(($322+12)|0);
      var $324=$n;
      var $325=((($324)+(1))|0);
      var $326=$6;
      var $327=$n;
      var $328=((($327)*(10))&-1);
      var $329=(($326+($328<<2))|0);
      var $330=(($329+16)|0);
      ___gmpn_toom44_mul($311, $316, $318, $323, $325, $330);
      label = 64; break;
    case 63: 
      var $332=$6;
      var $333=$1;
      var $334=$n;
      var $335=((($334)*(9))&-1);
      var $336=(($333+($335<<2))|0);
      var $337=(($336+8)|0);
      var $338=$n;
      var $339=((($338)+(1))|0);
      var $340=$6;
      var $341=$n;
      var $342=((($341)*(9))&-1);
      var $343=(($340+($342<<2))|0);
      var $344=(($343+12)|0);
      var $345=$n;
      var $346=((($345)+(1))|0);
      var $347=$6;
      var $348=$n;
      var $349=((($348)*(10))&-1);
      var $350=(($347+($349<<2))|0);
      var $351=(($350+16)|0);
      ___gmpn_toom6h_mul($332, $337, $339, $344, $346, $351);
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $356=$6;
      var $357=$n;
      var $358=($357<<1);
      var $359=((($358)+(1))|0);
      var $360=$1;
      var $361=$sign;
      var $362=$n;
      var $363=$half;
      var $364=((($363)+(1))|0);
      var $365=$half;
      ___gmpn_toom_couple_handling($356, $359, $360, $361, $362, $364, $365);
      var $366=$1;
      var $367=$n;
      var $368=((($367)*(9))&-1);
      var $369=(($366+($368<<2))|0);
      var $370=(($369+8)|0);
      var $371=$1;
      var $372=$n;
      var $373=((($372)*(7))&-1);
      var $374=(($371+($373<<2))|0);
      var $375=$p;
      var $376=$2;
      var $377=$n;
      var $378=$s;
      var $379=$1;
      var $380=___gmpn_toom_eval_pm1($370, $374, $375, $376, $377, $378, $379);
      $sign=$380;
      var $381=$q;
      var $382=(($381)|0)==3;
      if ($382) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $384=$6;
      var $385=$n;
      var $386=((($385)*(9))&-1);
      var $387=(($384+($386<<2))|0);
      var $388=(($387+12)|0);
      var $389=$1;
      var $390=$n;
      var $391=($390<<3);
      var $392=(($389+($391<<2))|0);
      var $393=(($392+4)|0);
      var $394=$4;
      var $395=$n;
      var $396=$t;
      var $397=$1;
      var $398=___gmpn_toom_eval_dgr3_pm1($388, $393, $394, $395, $396, $397);
      var $399=$sign;
      var $400=$399 ^ $398;
      $sign=$400;
      label = 70; break;
    case 69: 
      var $402=$6;
      var $403=$n;
      var $404=((($403)*(9))&-1);
      var $405=(($402+($404<<2))|0);
      var $406=(($405+12)|0);
      var $407=$1;
      var $408=$n;
      var $409=($408<<3);
      var $410=(($407+($409<<2))|0);
      var $411=(($410+4)|0);
      var $412=$q;
      var $413=$4;
      var $414=$n;
      var $415=$t;
      var $416=$1;
      var $417=___gmpn_toom_eval_pm1($406, $411, $412, $413, $414, $415, $416);
      var $418=$sign;
      var $419=$418 ^ $417;
      $sign=$419;
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $422=$n;
      var $423=((($422)+(1))|0);
      var $424=(($423)|0) >= 100;
      if ($424) { label = 73; break; } else { label = 72; break; }
    case 72: 
      var $426=$1;
      var $427=$1;
      var $428=$n;
      var $429=((($428)*(7))&-1);
      var $430=(($427+($429<<2))|0);
      var $431=$n;
      var $432=((($431)+(1))|0);
      var $433=$1;
      var $434=$n;
      var $435=($434<<3);
      var $436=(($433+($435<<2))|0);
      var $437=(($436+4)|0);
      var $438=$n;
      var $439=((($438)+(1))|0);
      var $440=$6;
      var $441=$n;
      var $442=((($441)*(10))&-1);
      var $443=(($440+($442<<2))|0);
      var $444=(($443+16)|0);
      ___gmpn_toom22_mul($426, $430, $432, $437, $439, $444);
      label = 80; break;
    case 73: 
      var $446=$n;
      var $447=((($446)+(1))|0);
      var $448=(($447)|0) >= 300;
      if ($448) { label = 75; break; } else { label = 74; break; }
    case 74: 
      var $450=$1;
      var $451=$1;
      var $452=$n;
      var $453=((($452)*(7))&-1);
      var $454=(($451+($453<<2))|0);
      var $455=$n;
      var $456=((($455)+(1))|0);
      var $457=$1;
      var $458=$n;
      var $459=($458<<3);
      var $460=(($457+($459<<2))|0);
      var $461=(($460+4)|0);
      var $462=$n;
      var $463=((($462)+(1))|0);
      var $464=$6;
      var $465=$n;
      var $466=((($465)*(10))&-1);
      var $467=(($464+($466<<2))|0);
      var $468=(($467+16)|0);
      ___gmpn_toom33_mul($450, $454, $456, $461, $463, $468);
      label = 79; break;
    case 75: 
      var $470=$n;
      var $471=((($470)+(1))|0);
      var $472=(($471)|0) >= 350;
      if ($472) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $474=$1;
      var $475=$1;
      var $476=$n;
      var $477=((($476)*(7))&-1);
      var $478=(($475+($477<<2))|0);
      var $479=$n;
      var $480=((($479)+(1))|0);
      var $481=$1;
      var $482=$n;
      var $483=($482<<3);
      var $484=(($481+($483<<2))|0);
      var $485=(($484+4)|0);
      var $486=$n;
      var $487=((($486)+(1))|0);
      var $488=$6;
      var $489=$n;
      var $490=((($489)*(10))&-1);
      var $491=(($488+($490<<2))|0);
      var $492=(($491+16)|0);
      ___gmpn_toom44_mul($474, $478, $480, $485, $487, $492);
      label = 78; break;
    case 77: 
      var $494=$1;
      var $495=$1;
      var $496=$n;
      var $497=((($496)*(7))&-1);
      var $498=(($495+($497<<2))|0);
      var $499=$n;
      var $500=((($499)+(1))|0);
      var $501=$1;
      var $502=$n;
      var $503=($502<<3);
      var $504=(($501+($503<<2))|0);
      var $505=(($504+4)|0);
      var $506=$n;
      var $507=((($506)+(1))|0);
      var $508=$6;
      var $509=$n;
      var $510=((($509)*(10))&-1);
      var $511=(($508+($510<<2))|0);
      var $512=(($511+16)|0);
      ___gmpn_toom6h_mul($494, $498, $500, $505, $507, $512);
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $518=$n;
      var $519=((($518)+(1))|0);
      var $520=(($519)|0) >= 100;
      if ($520) { label = 84; break; } else { label = 83; break; }
    case 83: 
      var $522=$6;
      var $523=$n;
      var $524=((($523)*(3))&-1);
      var $525=(($522+($524<<2))|0);
      var $526=(($525+4)|0);
      var $527=$1;
      var $528=$n;
      var $529=((($528)*(9))&-1);
      var $530=(($527+($529<<2))|0);
      var $531=(($530+8)|0);
      var $532=$n;
      var $533=((($532)+(1))|0);
      var $534=$6;
      var $535=$n;
      var $536=((($535)*(9))&-1);
      var $537=(($534+($536<<2))|0);
      var $538=(($537+12)|0);
      var $539=$n;
      var $540=((($539)+(1))|0);
      var $541=$6;
      var $542=$n;
      var $543=((($542)*(10))&-1);
      var $544=(($541+($543<<2))|0);
      var $545=(($544+16)|0);
      ___gmpn_toom22_mul($526, $531, $533, $538, $540, $545);
      label = 91; break;
    case 84: 
      var $547=$n;
      var $548=((($547)+(1))|0);
      var $549=(($548)|0) >= 300;
      if ($549) { label = 86; break; } else { label = 85; break; }
    case 85: 
      var $551=$6;
      var $552=$n;
      var $553=((($552)*(3))&-1);
      var $554=(($551+($553<<2))|0);
      var $555=(($554+4)|0);
      var $556=$1;
      var $557=$n;
      var $558=((($557)*(9))&-1);
      var $559=(($556+($558<<2))|0);
      var $560=(($559+8)|0);
      var $561=$n;
      var $562=((($561)+(1))|0);
      var $563=$6;
      var $564=$n;
      var $565=((($564)*(9))&-1);
      var $566=(($563+($565<<2))|0);
      var $567=(($566+12)|0);
      var $568=$n;
      var $569=((($568)+(1))|0);
      var $570=$6;
      var $571=$n;
      var $572=((($571)*(10))&-1);
      var $573=(($570+($572<<2))|0);
      var $574=(($573+16)|0);
      ___gmpn_toom33_mul($555, $560, $562, $567, $569, $574);
      label = 90; break;
    case 86: 
      var $576=$n;
      var $577=((($576)+(1))|0);
      var $578=(($577)|0) >= 350;
      if ($578) { label = 88; break; } else { label = 87; break; }
    case 87: 
      var $580=$6;
      var $581=$n;
      var $582=((($581)*(3))&-1);
      var $583=(($580+($582<<2))|0);
      var $584=(($583+4)|0);
      var $585=$1;
      var $586=$n;
      var $587=((($586)*(9))&-1);
      var $588=(($585+($587<<2))|0);
      var $589=(($588+8)|0);
      var $590=$n;
      var $591=((($590)+(1))|0);
      var $592=$6;
      var $593=$n;
      var $594=((($593)*(9))&-1);
      var $595=(($592+($594<<2))|0);
      var $596=(($595+12)|0);
      var $597=$n;
      var $598=((($597)+(1))|0);
      var $599=$6;
      var $600=$n;
      var $601=((($600)*(10))&-1);
      var $602=(($599+($601<<2))|0);
      var $603=(($602+16)|0);
      ___gmpn_toom44_mul($584, $589, $591, $596, $598, $603);
      label = 89; break;
    case 88: 
      var $605=$6;
      var $606=$n;
      var $607=((($606)*(3))&-1);
      var $608=(($605+($607<<2))|0);
      var $609=(($608+4)|0);
      var $610=$1;
      var $611=$n;
      var $612=((($611)*(9))&-1);
      var $613=(($610+($612<<2))|0);
      var $614=(($613+8)|0);
      var $615=$n;
      var $616=((($615)+(1))|0);
      var $617=$6;
      var $618=$n;
      var $619=((($618)*(9))&-1);
      var $620=(($617+($619<<2))|0);
      var $621=(($620+12)|0);
      var $622=$n;
      var $623=((($622)+(1))|0);
      var $624=$6;
      var $625=$n;
      var $626=((($625)*(10))&-1);
      var $627=(($624+($626<<2))|0);
      var $628=(($627+16)|0);
      ___gmpn_toom6h_mul($609, $614, $616, $621, $623, $628);
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $633=$6;
      var $634=$n;
      var $635=((($634)*(3))&-1);
      var $636=(($633+($635<<2))|0);
      var $637=(($636+4)|0);
      var $638=$n;
      var $639=($638<<1);
      var $640=((($639)+(1))|0);
      var $641=$1;
      var $642=$sign;
      var $643=$n;
      ___gmpn_toom_couple_handling($637, $640, $641, $642, $643, 0, 0);
      var $644=$1;
      var $645=$n;
      var $646=((($645)*(9))&-1);
      var $647=(($644+($646<<2))|0);
      var $648=(($647+8)|0);
      var $649=$1;
      var $650=$n;
      var $651=((($650)*(7))&-1);
      var $652=(($649+($651<<2))|0);
      var $653=$p;
      var $654=$2;
      var $655=$n;
      var $656=$s;
      var $657=$1;
      var $658=___gmpn_toom_eval_pm2exp($648, $652, $653, $654, $655, $656, 2, $657);
      var $659=$6;
      var $660=$n;
      var $661=((($660)*(9))&-1);
      var $662=(($659+($661<<2))|0);
      var $663=(($662+12)|0);
      var $664=$1;
      var $665=$n;
      var $666=($665<<3);
      var $667=(($664+($666<<2))|0);
      var $668=(($667+4)|0);
      var $669=$q;
      var $670=$4;
      var $671=$n;
      var $672=$t;
      var $673=$1;
      var $674=___gmpn_toom_eval_pm2exp($663, $668, $669, $670, $671, $672, 2, $673);
      var $675=$658 ^ $674;
      $sign=$675;
      label = 93; break;
    case 93: 
      var $677=$n;
      var $678=((($677)+(1))|0);
      var $679=(($678)|0) >= 100;
      if ($679) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $681=$1;
      var $682=$1;
      var $683=$n;
      var $684=((($683)*(7))&-1);
      var $685=(($682+($684<<2))|0);
      var $686=$n;
      var $687=((($686)+(1))|0);
      var $688=$1;
      var $689=$n;
      var $690=($689<<3);
      var $691=(($688+($690<<2))|0);
      var $692=(($691+4)|0);
      var $693=$n;
      var $694=((($693)+(1))|0);
      var $695=$6;
      var $696=$n;
      var $697=((($696)*(10))&-1);
      var $698=(($695+($697<<2))|0);
      var $699=(($698+16)|0);
      ___gmpn_toom22_mul($681, $685, $687, $692, $694, $699);
      label = 102; break;
    case 95: 
      var $701=$n;
      var $702=((($701)+(1))|0);
      var $703=(($702)|0) >= 300;
      if ($703) { label = 97; break; } else { label = 96; break; }
    case 96: 
      var $705=$1;
      var $706=$1;
      var $707=$n;
      var $708=((($707)*(7))&-1);
      var $709=(($706+($708<<2))|0);
      var $710=$n;
      var $711=((($710)+(1))|0);
      var $712=$1;
      var $713=$n;
      var $714=($713<<3);
      var $715=(($712+($714<<2))|0);
      var $716=(($715+4)|0);
      var $717=$n;
      var $718=((($717)+(1))|0);
      var $719=$6;
      var $720=$n;
      var $721=((($720)*(10))&-1);
      var $722=(($719+($721<<2))|0);
      var $723=(($722+16)|0);
      ___gmpn_toom33_mul($705, $709, $711, $716, $718, $723);
      label = 101; break;
    case 97: 
      var $725=$n;
      var $726=((($725)+(1))|0);
      var $727=(($726)|0) >= 350;
      if ($727) { label = 99; break; } else { label = 98; break; }
    case 98: 
      var $729=$1;
      var $730=$1;
      var $731=$n;
      var $732=((($731)*(7))&-1);
      var $733=(($730+($732<<2))|0);
      var $734=$n;
      var $735=((($734)+(1))|0);
      var $736=$1;
      var $737=$n;
      var $738=($737<<3);
      var $739=(($736+($738<<2))|0);
      var $740=(($739+4)|0);
      var $741=$n;
      var $742=((($741)+(1))|0);
      var $743=$6;
      var $744=$n;
      var $745=((($744)*(10))&-1);
      var $746=(($743+($745<<2))|0);
      var $747=(($746+16)|0);
      ___gmpn_toom44_mul($729, $733, $735, $740, $742, $747);
      label = 100; break;
    case 99: 
      var $749=$1;
      var $750=$1;
      var $751=$n;
      var $752=((($751)*(7))&-1);
      var $753=(($750+($752<<2))|0);
      var $754=$n;
      var $755=((($754)+(1))|0);
      var $756=$1;
      var $757=$n;
      var $758=($757<<3);
      var $759=(($756+($758<<2))|0);
      var $760=(($759+4)|0);
      var $761=$n;
      var $762=((($761)+(1))|0);
      var $763=$6;
      var $764=$n;
      var $765=((($764)*(10))&-1);
      var $766=(($763+($765<<2))|0);
      var $767=(($766+16)|0);
      ___gmpn_toom6h_mul($749, $753, $755, $760, $762, $767);
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $773=$n;
      var $774=((($773)+(1))|0);
      var $775=(($774)|0) >= 100;
      if ($775) { label = 106; break; } else { label = 105; break; }
    case 105: 
      var $777=$6;
      var $778=$n;
      var $779=((($778)*(6))&-1);
      var $780=(($777+($779<<2))|0);
      var $781=(($780+8)|0);
      var $782=$1;
      var $783=$n;
      var $784=((($783)*(9))&-1);
      var $785=(($782+($784<<2))|0);
      var $786=(($785+8)|0);
      var $787=$n;
      var $788=((($787)+(1))|0);
      var $789=$6;
      var $790=$n;
      var $791=((($790)*(9))&-1);
      var $792=(($789+($791<<2))|0);
      var $793=(($792+12)|0);
      var $794=$n;
      var $795=((($794)+(1))|0);
      var $796=$6;
      var $797=$n;
      var $798=((($797)*(10))&-1);
      var $799=(($796+($798<<2))|0);
      var $800=(($799+16)|0);
      ___gmpn_toom22_mul($781, $786, $788, $793, $795, $800);
      label = 113; break;
    case 106: 
      var $802=$n;
      var $803=((($802)+(1))|0);
      var $804=(($803)|0) >= 300;
      if ($804) { label = 108; break; } else { label = 107; break; }
    case 107: 
      var $806=$6;
      var $807=$n;
      var $808=((($807)*(6))&-1);
      var $809=(($806+($808<<2))|0);
      var $810=(($809+8)|0);
      var $811=$1;
      var $812=$n;
      var $813=((($812)*(9))&-1);
      var $814=(($811+($813<<2))|0);
      var $815=(($814+8)|0);
      var $816=$n;
      var $817=((($816)+(1))|0);
      var $818=$6;
      var $819=$n;
      var $820=((($819)*(9))&-1);
      var $821=(($818+($820<<2))|0);
      var $822=(($821+12)|0);
      var $823=$n;
      var $824=((($823)+(1))|0);
      var $825=$6;
      var $826=$n;
      var $827=((($826)*(10))&-1);
      var $828=(($825+($827<<2))|0);
      var $829=(($828+16)|0);
      ___gmpn_toom33_mul($810, $815, $817, $822, $824, $829);
      label = 112; break;
    case 108: 
      var $831=$n;
      var $832=((($831)+(1))|0);
      var $833=(($832)|0) >= 350;
      if ($833) { label = 110; break; } else { label = 109; break; }
    case 109: 
      var $835=$6;
      var $836=$n;
      var $837=((($836)*(6))&-1);
      var $838=(($835+($837<<2))|0);
      var $839=(($838+8)|0);
      var $840=$1;
      var $841=$n;
      var $842=((($841)*(9))&-1);
      var $843=(($840+($842<<2))|0);
      var $844=(($843+8)|0);
      var $845=$n;
      var $846=((($845)+(1))|0);
      var $847=$6;
      var $848=$n;
      var $849=((($848)*(9))&-1);
      var $850=(($847+($849<<2))|0);
      var $851=(($850+12)|0);
      var $852=$n;
      var $853=((($852)+(1))|0);
      var $854=$6;
      var $855=$n;
      var $856=((($855)*(10))&-1);
      var $857=(($854+($856<<2))|0);
      var $858=(($857+16)|0);
      ___gmpn_toom44_mul($839, $844, $846, $851, $853, $858);
      label = 111; break;
    case 110: 
      var $860=$6;
      var $861=$n;
      var $862=((($861)*(6))&-1);
      var $863=(($860+($862<<2))|0);
      var $864=(($863+8)|0);
      var $865=$1;
      var $866=$n;
      var $867=((($866)*(9))&-1);
      var $868=(($865+($867<<2))|0);
      var $869=(($868+8)|0);
      var $870=$n;
      var $871=((($870)+(1))|0);
      var $872=$6;
      var $873=$n;
      var $874=((($873)*(9))&-1);
      var $875=(($872+($874<<2))|0);
      var $876=(($875+12)|0);
      var $877=$n;
      var $878=((($877)+(1))|0);
      var $879=$6;
      var $880=$n;
      var $881=((($880)*(10))&-1);
      var $882=(($879+($881<<2))|0);
      var $883=(($882+16)|0);
      ___gmpn_toom6h_mul($864, $869, $871, $876, $878, $883);
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $888=$6;
      var $889=$n;
      var $890=((($889)*(6))&-1);
      var $891=(($888+($890<<2))|0);
      var $892=(($891+8)|0);
      var $893=$n;
      var $894=($893<<1);
      var $895=((($894)+(1))|0);
      var $896=$1;
      var $897=$sign;
      var $898=$n;
      ___gmpn_toom_couple_handling($892, $895, $896, $897, $898, 2, 4);
      var $899=$1;
      var $900=$n;
      var $901=((($900)*(9))&-1);
      var $902=(($899+($901<<2))|0);
      var $903=(($902+8)|0);
      var $904=$1;
      var $905=$n;
      var $906=((($905)*(7))&-1);
      var $907=(($904+($906<<2))|0);
      var $908=$p;
      var $909=$2;
      var $910=$n;
      var $911=$s;
      var $912=$1;
      var $913=___gmpn_toom_eval_pm2rexp($903, $907, $908, $909, $910, $911, 2, $912);
      var $914=$6;
      var $915=$n;
      var $916=((($915)*(9))&-1);
      var $917=(($914+($916<<2))|0);
      var $918=(($917+12)|0);
      var $919=$1;
      var $920=$n;
      var $921=($920<<3);
      var $922=(($919+($921<<2))|0);
      var $923=(($922+4)|0);
      var $924=$q;
      var $925=$4;
      var $926=$n;
      var $927=$t;
      var $928=$1;
      var $929=___gmpn_toom_eval_pm2rexp($918, $923, $924, $925, $926, $927, 2, $928);
      var $930=$913 ^ $929;
      $sign=$930;
      label = 115; break;
    case 115: 
      var $932=$n;
      var $933=((($932)+(1))|0);
      var $934=(($933)|0) >= 100;
      if ($934) { label = 117; break; } else { label = 116; break; }
    case 116: 
      var $936=$1;
      var $937=$1;
      var $938=$n;
      var $939=((($938)*(7))&-1);
      var $940=(($937+($939<<2))|0);
      var $941=$n;
      var $942=((($941)+(1))|0);
      var $943=$1;
      var $944=$n;
      var $945=($944<<3);
      var $946=(($943+($945<<2))|0);
      var $947=(($946+4)|0);
      var $948=$n;
      var $949=((($948)+(1))|0);
      var $950=$6;
      var $951=$n;
      var $952=((($951)*(10))&-1);
      var $953=(($950+($952<<2))|0);
      var $954=(($953+16)|0);
      ___gmpn_toom22_mul($936, $940, $942, $947, $949, $954);
      label = 124; break;
    case 117: 
      var $956=$n;
      var $957=((($956)+(1))|0);
      var $958=(($957)|0) >= 300;
      if ($958) { label = 119; break; } else { label = 118; break; }
    case 118: 
      var $960=$1;
      var $961=$1;
      var $962=$n;
      var $963=((($962)*(7))&-1);
      var $964=(($961+($963<<2))|0);
      var $965=$n;
      var $966=((($965)+(1))|0);
      var $967=$1;
      var $968=$n;
      var $969=($968<<3);
      var $970=(($967+($969<<2))|0);
      var $971=(($970+4)|0);
      var $972=$n;
      var $973=((($972)+(1))|0);
      var $974=$6;
      var $975=$n;
      var $976=((($975)*(10))&-1);
      var $977=(($974+($976<<2))|0);
      var $978=(($977+16)|0);
      ___gmpn_toom33_mul($960, $964, $966, $971, $973, $978);
      label = 123; break;
    case 119: 
      var $980=$n;
      var $981=((($980)+(1))|0);
      var $982=(($981)|0) >= 350;
      if ($982) { label = 121; break; } else { label = 120; break; }
    case 120: 
      var $984=$1;
      var $985=$1;
      var $986=$n;
      var $987=((($986)*(7))&-1);
      var $988=(($985+($987<<2))|0);
      var $989=$n;
      var $990=((($989)+(1))|0);
      var $991=$1;
      var $992=$n;
      var $993=($992<<3);
      var $994=(($991+($993<<2))|0);
      var $995=(($994+4)|0);
      var $996=$n;
      var $997=((($996)+(1))|0);
      var $998=$6;
      var $999=$n;
      var $1000=((($999)*(10))&-1);
      var $1001=(($998+($1000<<2))|0);
      var $1002=(($1001+16)|0);
      ___gmpn_toom44_mul($984, $988, $990, $995, $997, $1002);
      label = 122; break;
    case 121: 
      var $1004=$1;
      var $1005=$1;
      var $1006=$n;
      var $1007=((($1006)*(7))&-1);
      var $1008=(($1005+($1007<<2))|0);
      var $1009=$n;
      var $1010=((($1009)+(1))|0);
      var $1011=$1;
      var $1012=$n;
      var $1013=($1012<<3);
      var $1014=(($1011+($1013<<2))|0);
      var $1015=(($1014+4)|0);
      var $1016=$n;
      var $1017=((($1016)+(1))|0);
      var $1018=$6;
      var $1019=$n;
      var $1020=((($1019)*(10))&-1);
      var $1021=(($1018+($1020<<2))|0);
      var $1022=(($1021+16)|0);
      ___gmpn_toom6h_mul($1004, $1008, $1010, $1015, $1017, $1022);
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      var $1028=$n;
      var $1029=((($1028)+(1))|0);
      var $1030=(($1029)|0) >= 100;
      if ($1030) { label = 128; break; } else { label = 127; break; }
    case 127: 
      var $1032=$1;
      var $1033=$n;
      var $1034=((($1033)*(3))&-1);
      var $1035=(($1032+($1034<<2))|0);
      var $1036=$1;
      var $1037=$n;
      var $1038=((($1037)*(9))&-1);
      var $1039=(($1036+($1038<<2))|0);
      var $1040=(($1039+8)|0);
      var $1041=$n;
      var $1042=((($1041)+(1))|0);
      var $1043=$6;
      var $1044=$n;
      var $1045=((($1044)*(9))&-1);
      var $1046=(($1043+($1045<<2))|0);
      var $1047=(($1046+12)|0);
      var $1048=$n;
      var $1049=((($1048)+(1))|0);
      var $1050=$6;
      var $1051=$n;
      var $1052=((($1051)*(10))&-1);
      var $1053=(($1050+($1052<<2))|0);
      var $1054=(($1053+16)|0);
      ___gmpn_toom22_mul($1035, $1040, $1042, $1047, $1049, $1054);
      label = 135; break;
    case 128: 
      var $1056=$n;
      var $1057=((($1056)+(1))|0);
      var $1058=(($1057)|0) >= 300;
      if ($1058) { label = 130; break; } else { label = 129; break; }
    case 129: 
      var $1060=$1;
      var $1061=$n;
      var $1062=((($1061)*(3))&-1);
      var $1063=(($1060+($1062<<2))|0);
      var $1064=$1;
      var $1065=$n;
      var $1066=((($1065)*(9))&-1);
      var $1067=(($1064+($1066<<2))|0);
      var $1068=(($1067+8)|0);
      var $1069=$n;
      var $1070=((($1069)+(1))|0);
      var $1071=$6;
      var $1072=$n;
      var $1073=((($1072)*(9))&-1);
      var $1074=(($1071+($1073<<2))|0);
      var $1075=(($1074+12)|0);
      var $1076=$n;
      var $1077=((($1076)+(1))|0);
      var $1078=$6;
      var $1079=$n;
      var $1080=((($1079)*(10))&-1);
      var $1081=(($1078+($1080<<2))|0);
      var $1082=(($1081+16)|0);
      ___gmpn_toom33_mul($1063, $1068, $1070, $1075, $1077, $1082);
      label = 134; break;
    case 130: 
      var $1084=$n;
      var $1085=((($1084)+(1))|0);
      var $1086=(($1085)|0) >= 350;
      if ($1086) { label = 132; break; } else { label = 131; break; }
    case 131: 
      var $1088=$1;
      var $1089=$n;
      var $1090=((($1089)*(3))&-1);
      var $1091=(($1088+($1090<<2))|0);
      var $1092=$1;
      var $1093=$n;
      var $1094=((($1093)*(9))&-1);
      var $1095=(($1092+($1094<<2))|0);
      var $1096=(($1095+8)|0);
      var $1097=$n;
      var $1098=((($1097)+(1))|0);
      var $1099=$6;
      var $1100=$n;
      var $1101=((($1100)*(9))&-1);
      var $1102=(($1099+($1101<<2))|0);
      var $1103=(($1102+12)|0);
      var $1104=$n;
      var $1105=((($1104)+(1))|0);
      var $1106=$6;
      var $1107=$n;
      var $1108=((($1107)*(10))&-1);
      var $1109=(($1106+($1108<<2))|0);
      var $1110=(($1109+16)|0);
      ___gmpn_toom44_mul($1091, $1096, $1098, $1103, $1105, $1110);
      label = 133; break;
    case 132: 
      var $1112=$1;
      var $1113=$n;
      var $1114=((($1113)*(3))&-1);
      var $1115=(($1112+($1114<<2))|0);
      var $1116=$1;
      var $1117=$n;
      var $1118=((($1117)*(9))&-1);
      var $1119=(($1116+($1118<<2))|0);
      var $1120=(($1119+8)|0);
      var $1121=$n;
      var $1122=((($1121)+(1))|0);
      var $1123=$6;
      var $1124=$n;
      var $1125=((($1124)*(9))&-1);
      var $1126=(($1123+($1125<<2))|0);
      var $1127=(($1126+12)|0);
      var $1128=$n;
      var $1129=((($1128)+(1))|0);
      var $1130=$6;
      var $1131=$n;
      var $1132=((($1131)*(10))&-1);
      var $1133=(($1130+($1132<<2))|0);
      var $1134=(($1133+16)|0);
      ___gmpn_toom6h_mul($1115, $1120, $1122, $1127, $1129, $1134);
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      label = 136; break;
    case 136: 
      var $1139=$1;
      var $1140=$n;
      var $1141=((($1140)*(3))&-1);
      var $1142=(($1139+($1141<<2))|0);
      var $1143=$n;
      var $1144=($1143<<1);
      var $1145=((($1144)+(1))|0);
      var $1146=$1;
      var $1147=$sign;
      var $1148=$n;
      var $1149=$half;
      var $1150=((($1149)+(1))|0);
      var $1151=($1150<<1);
      var $1152=$half;
      var $1153=($1152<<1);
      ___gmpn_toom_couple_handling($1142, $1145, $1146, $1147, $1148, $1151, $1153);
      var $1154=$1;
      var $1155=$n;
      var $1156=((($1155)*(9))&-1);
      var $1157=(($1154+($1156<<2))|0);
      var $1158=(($1157+8)|0);
      var $1159=$1;
      var $1160=$n;
      var $1161=((($1160)*(7))&-1);
      var $1162=(($1159+($1161<<2))|0);
      var $1163=$p;
      var $1164=$2;
      var $1165=$n;
      var $1166=$s;
      var $1167=$1;
      var $1168=___gmpn_toom_eval_pm2($1158, $1162, $1163, $1164, $1165, $1166, $1167);
      var $1169=$6;
      var $1170=$n;
      var $1171=((($1170)*(9))&-1);
      var $1172=(($1169+($1171<<2))|0);
      var $1173=(($1172+12)|0);
      var $1174=$1;
      var $1175=$n;
      var $1176=($1175<<3);
      var $1177=(($1174+($1176<<2))|0);
      var $1178=(($1177+4)|0);
      var $1179=$q;
      var $1180=$4;
      var $1181=$n;
      var $1182=$t;
      var $1183=$1;
      var $1184=___gmpn_toom_eval_pm2($1173, $1178, $1179, $1180, $1181, $1182, $1183);
      var $1185=$1168 ^ $1184;
      $sign=$1185;
      label = 137; break;
    case 137: 
      var $1187=$n;
      var $1188=((($1187)+(1))|0);
      var $1189=(($1188)|0) >= 100;
      if ($1189) { label = 139; break; } else { label = 138; break; }
    case 138: 
      var $1191=$1;
      var $1192=$1;
      var $1193=$n;
      var $1194=((($1193)*(7))&-1);
      var $1195=(($1192+($1194<<2))|0);
      var $1196=$n;
      var $1197=((($1196)+(1))|0);
      var $1198=$1;
      var $1199=$n;
      var $1200=($1199<<3);
      var $1201=(($1198+($1200<<2))|0);
      var $1202=(($1201+4)|0);
      var $1203=$n;
      var $1204=((($1203)+(1))|0);
      var $1205=$6;
      var $1206=$n;
      var $1207=((($1206)*(10))&-1);
      var $1208=(($1205+($1207<<2))|0);
      var $1209=(($1208+16)|0);
      ___gmpn_toom22_mul($1191, $1195, $1197, $1202, $1204, $1209);
      label = 146; break;
    case 139: 
      var $1211=$n;
      var $1212=((($1211)+(1))|0);
      var $1213=(($1212)|0) >= 300;
      if ($1213) { label = 141; break; } else { label = 140; break; }
    case 140: 
      var $1215=$1;
      var $1216=$1;
      var $1217=$n;
      var $1218=((($1217)*(7))&-1);
      var $1219=(($1216+($1218<<2))|0);
      var $1220=$n;
      var $1221=((($1220)+(1))|0);
      var $1222=$1;
      var $1223=$n;
      var $1224=($1223<<3);
      var $1225=(($1222+($1224<<2))|0);
      var $1226=(($1225+4)|0);
      var $1227=$n;
      var $1228=((($1227)+(1))|0);
      var $1229=$6;
      var $1230=$n;
      var $1231=((($1230)*(10))&-1);
      var $1232=(($1229+($1231<<2))|0);
      var $1233=(($1232+16)|0);
      ___gmpn_toom33_mul($1215, $1219, $1221, $1226, $1228, $1233);
      label = 145; break;
    case 141: 
      var $1235=$n;
      var $1236=((($1235)+(1))|0);
      var $1237=(($1236)|0) >= 350;
      if ($1237) { label = 143; break; } else { label = 142; break; }
    case 142: 
      var $1239=$1;
      var $1240=$1;
      var $1241=$n;
      var $1242=((($1241)*(7))&-1);
      var $1243=(($1240+($1242<<2))|0);
      var $1244=$n;
      var $1245=((($1244)+(1))|0);
      var $1246=$1;
      var $1247=$n;
      var $1248=($1247<<3);
      var $1249=(($1246+($1248<<2))|0);
      var $1250=(($1249+4)|0);
      var $1251=$n;
      var $1252=((($1251)+(1))|0);
      var $1253=$6;
      var $1254=$n;
      var $1255=((($1254)*(10))&-1);
      var $1256=(($1253+($1255<<2))|0);
      var $1257=(($1256+16)|0);
      ___gmpn_toom44_mul($1239, $1243, $1245, $1250, $1252, $1257);
      label = 144; break;
    case 143: 
      var $1259=$1;
      var $1260=$1;
      var $1261=$n;
      var $1262=((($1261)*(7))&-1);
      var $1263=(($1260+($1262<<2))|0);
      var $1264=$n;
      var $1265=((($1264)+(1))|0);
      var $1266=$1;
      var $1267=$n;
      var $1268=($1267<<3);
      var $1269=(($1266+($1268<<2))|0);
      var $1270=(($1269+4)|0);
      var $1271=$n;
      var $1272=((($1271)+(1))|0);
      var $1273=$6;
      var $1274=$n;
      var $1275=((($1274)*(10))&-1);
      var $1276=(($1273+($1275<<2))|0);
      var $1277=(($1276+16)|0);
      ___gmpn_toom6h_mul($1259, $1263, $1265, $1270, $1272, $1277);
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      var $1283=$n;
      var $1284=((($1283)+(1))|0);
      var $1285=(($1284)|0) >= 100;
      if ($1285) { label = 150; break; } else { label = 149; break; }
    case 149: 
      var $1287=$1;
      var $1288=$n;
      var $1289=((($1288)*(7))&-1);
      var $1290=(($1287+($1289<<2))|0);
      var $1291=$1;
      var $1292=$n;
      var $1293=((($1292)*(9))&-1);
      var $1294=(($1291+($1293<<2))|0);
      var $1295=(($1294+8)|0);
      var $1296=$n;
      var $1297=((($1296)+(1))|0);
      var $1298=$6;
      var $1299=$n;
      var $1300=((($1299)*(9))&-1);
      var $1301=(($1298+($1300<<2))|0);
      var $1302=(($1301+12)|0);
      var $1303=$n;
      var $1304=((($1303)+(1))|0);
      var $1305=$6;
      var $1306=$n;
      var $1307=((($1306)*(10))&-1);
      var $1308=(($1305+($1307<<2))|0);
      var $1309=(($1308+16)|0);
      ___gmpn_toom22_mul($1290, $1295, $1297, $1302, $1304, $1309);
      label = 157; break;
    case 150: 
      var $1311=$n;
      var $1312=((($1311)+(1))|0);
      var $1313=(($1312)|0) >= 300;
      if ($1313) { label = 152; break; } else { label = 151; break; }
    case 151: 
      var $1315=$1;
      var $1316=$n;
      var $1317=((($1316)*(7))&-1);
      var $1318=(($1315+($1317<<2))|0);
      var $1319=$1;
      var $1320=$n;
      var $1321=((($1320)*(9))&-1);
      var $1322=(($1319+($1321<<2))|0);
      var $1323=(($1322+8)|0);
      var $1324=$n;
      var $1325=((($1324)+(1))|0);
      var $1326=$6;
      var $1327=$n;
      var $1328=((($1327)*(9))&-1);
      var $1329=(($1326+($1328<<2))|0);
      var $1330=(($1329+12)|0);
      var $1331=$n;
      var $1332=((($1331)+(1))|0);
      var $1333=$6;
      var $1334=$n;
      var $1335=((($1334)*(10))&-1);
      var $1336=(($1333+($1335<<2))|0);
      var $1337=(($1336+16)|0);
      ___gmpn_toom33_mul($1318, $1323, $1325, $1330, $1332, $1337);
      label = 156; break;
    case 152: 
      var $1339=$n;
      var $1340=((($1339)+(1))|0);
      var $1341=(($1340)|0) >= 350;
      if ($1341) { label = 154; break; } else { label = 153; break; }
    case 153: 
      var $1343=$1;
      var $1344=$n;
      var $1345=((($1344)*(7))&-1);
      var $1346=(($1343+($1345<<2))|0);
      var $1347=$1;
      var $1348=$n;
      var $1349=((($1348)*(9))&-1);
      var $1350=(($1347+($1349<<2))|0);
      var $1351=(($1350+8)|0);
      var $1352=$n;
      var $1353=((($1352)+(1))|0);
      var $1354=$6;
      var $1355=$n;
      var $1356=((($1355)*(9))&-1);
      var $1357=(($1354+($1356<<2))|0);
      var $1358=(($1357+12)|0);
      var $1359=$n;
      var $1360=((($1359)+(1))|0);
      var $1361=$6;
      var $1362=$n;
      var $1363=((($1362)*(10))&-1);
      var $1364=(($1361+($1363<<2))|0);
      var $1365=(($1364+16)|0);
      ___gmpn_toom44_mul($1346, $1351, $1353, $1358, $1360, $1365);
      label = 155; break;
    case 154: 
      var $1367=$1;
      var $1368=$n;
      var $1369=((($1368)*(7))&-1);
      var $1370=(($1367+($1369<<2))|0);
      var $1371=$1;
      var $1372=$n;
      var $1373=((($1372)*(9))&-1);
      var $1374=(($1371+($1373<<2))|0);
      var $1375=(($1374+8)|0);
      var $1376=$n;
      var $1377=((($1376)+(1))|0);
      var $1378=$6;
      var $1379=$n;
      var $1380=((($1379)*(9))&-1);
      var $1381=(($1378+($1380<<2))|0);
      var $1382=(($1381+12)|0);
      var $1383=$n;
      var $1384=((($1383)+(1))|0);
      var $1385=$6;
      var $1386=$n;
      var $1387=((($1386)*(10))&-1);
      var $1388=(($1385+($1387<<2))|0);
      var $1389=(($1388+16)|0);
      ___gmpn_toom6h_mul($1370, $1375, $1377, $1382, $1384, $1389);
      label = 155; break;
    case 155: 
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      var $1394=$1;
      var $1395=$n;
      var $1396=((($1395)*(7))&-1);
      var $1397=(($1394+($1396<<2))|0);
      var $1398=$n;
      var $1399=($1398<<1);
      var $1400=((($1399)+(1))|0);
      var $1401=$1;
      var $1402=$sign;
      var $1403=$n;
      ___gmpn_toom_couple_handling($1397, $1400, $1401, $1402, $1403, 1, 2);
      label = 159; break;
    case 159: 
      var $1405=$n;
      var $1406=(($1405)|0) >= 100;
      if ($1406) { label = 161; break; } else { label = 160; break; }
    case 160: 
      var $1408=$1;
      var $1409=$2;
      var $1410=$n;
      var $1411=$4;
      var $1412=$n;
      var $1413=$6;
      var $1414=$n;
      var $1415=((($1414)*(9))&-1);
      var $1416=(($1413+($1415<<2))|0);
      var $1417=(($1416+12)|0);
      ___gmpn_toom22_mul($1408, $1409, $1410, $1411, $1412, $1417);
      label = 168; break;
    case 161: 
      var $1419=$n;
      var $1420=(($1419)|0) >= 300;
      if ($1420) { label = 163; break; } else { label = 162; break; }
    case 162: 
      var $1422=$1;
      var $1423=$2;
      var $1424=$n;
      var $1425=$4;
      var $1426=$n;
      var $1427=$6;
      var $1428=$n;
      var $1429=((($1428)*(9))&-1);
      var $1430=(($1427+($1429<<2))|0);
      var $1431=(($1430+12)|0);
      ___gmpn_toom33_mul($1422, $1423, $1424, $1425, $1426, $1431);
      label = 167; break;
    case 163: 
      var $1433=$n;
      var $1434=(($1433)|0) >= 350;
      if ($1434) { label = 165; break; } else { label = 164; break; }
    case 164: 
      var $1436=$1;
      var $1437=$2;
      var $1438=$n;
      var $1439=$4;
      var $1440=$n;
      var $1441=$6;
      var $1442=$n;
      var $1443=((($1442)*(9))&-1);
      var $1444=(($1441+($1443<<2))|0);
      var $1445=(($1444+12)|0);
      ___gmpn_toom44_mul($1436, $1437, $1438, $1439, $1440, $1445);
      label = 166; break;
    case 165: 
      var $1447=$1;
      var $1448=$2;
      var $1449=$n;
      var $1450=$4;
      var $1451=$n;
      var $1452=$6;
      var $1453=$n;
      var $1454=((($1453)*(9))&-1);
      var $1455=(($1452+($1454<<2))|0);
      var $1456=(($1455+12)|0);
      ___gmpn_toom6h_mul($1447, $1448, $1449, $1450, $1451, $1456);
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $1461=$half;
      var $1462=(($1461)|0)!=0;
      if ($1462) { label = 170; break; } else { label = 178; break; }
    case 170: 
      var $1464=$s;
      var $1465=$t;
      var $1466=(($1464)|0) > (($1465)|0);
      if ($1466) { label = 171; break; } else { label = 174; break; }
    case 171: 
      label = 172; break;
    case 172: 
      var $1469=$1;
      var $1470=$n;
      var $1471=((($1470)*(11))&-1);
      var $1472=(($1469+($1471<<2))|0);
      var $1473=$2;
      var $1474=$p;
      var $1475=$n;
      var $1476=Math.imul($1474,$1475);
      var $1477=(($1473+($1476<<2))|0);
      var $1478=$s;
      var $1479=$4;
      var $1480=$q;
      var $1481=$n;
      var $1482=Math.imul($1480,$1481);
      var $1483=(($1479+($1482<<2))|0);
      var $1484=$t;
      var $1485=___gmpn_mul($1472, $1477, $1478, $1483, $1484);
      label = 173; break;
    case 173: 
      label = 177; break;
    case 174: 
      label = 175; break;
    case 175: 
      var $1489=$1;
      var $1490=$n;
      var $1491=((($1490)*(11))&-1);
      var $1492=(($1489+($1491<<2))|0);
      var $1493=$4;
      var $1494=$q;
      var $1495=$n;
      var $1496=Math.imul($1494,$1495);
      var $1497=(($1493+($1496<<2))|0);
      var $1498=$t;
      var $1499=$2;
      var $1500=$p;
      var $1501=$n;
      var $1502=Math.imul($1500,$1501);
      var $1503=(($1499+($1502<<2))|0);
      var $1504=$s;
      var $1505=___gmpn_mul($1492, $1497, $1498, $1503, $1504);
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      label = 178; break;
    case 178: 
      var $1509=$1;
      var $1510=$6;
      var $1511=$n;
      var $1512=((($1511)*(6))&-1);
      var $1513=(($1510+($1512<<2))|0);
      var $1514=(($1513+8)|0);
      var $1515=$6;
      var $1516=$n;
      var $1517=((($1516)*(3))&-1);
      var $1518=(($1515+($1517<<2))|0);
      var $1519=(($1518+4)|0);
      var $1520=$6;
      var $1521=$n;
      var $1522=$s;
      var $1523=$t;
      var $1524=((($1522)+($1523))|0);
      var $1525=$half;
      var $1526=$6;
      var $1527=$n;
      var $1528=((($1527)*(9))&-1);
      var $1529=(($1526+($1528<<2))|0);
      var $1530=(($1529+12)|0);
      ___gmpn_toom_interpolate_12pts($1509, $1514, $1519, $1520, $1521, $1524, $1525, $1530);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom6h_mul["X"]=1;

function ___gmpn_toom8_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      var $s;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$3;
      var $8=((($7)-(1))|0);
      var $9=$8 >> 3;
      var $10=((($9)+(1))|0);
      $n=$10;
      var $11=$3;
      var $12=$n;
      var $13=((($12)*(7))&-1);
      var $14=((($11)-($13))|0);
      $s=$14;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $19=$1;
      var $20=$n;
      var $21=((($20)*(13))&-1);
      var $22=(($19+($21<<2))|0);
      var $23=(($22+8)|0);
      var $24=$1;
      var $25=$n;
      var $26=((($25)*(11))&-1);
      var $27=(($24+($26<<2))|0);
      var $28=$2;
      var $29=$n;
      var $30=$s;
      var $31=$1;
      var $32=___gmpn_toom_eval_pm2rexp($23, $27, 7, $28, $29, $30, 3, $31);
      label = 9; break;
    case 9: 
      var $34=$n;
      var $35=((($34)+(1))|0);
      var $36=(($35)|0) >= 120;
      if ($36) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $38=$1;
      var $39=$1;
      var $40=$n;
      var $41=((($40)*(11))&-1);
      var $42=(($39+($41<<2))|0);
      var $43=$n;
      var $44=((($43)+(1))|0);
      var $45=$4;
      var $46=$n;
      var $47=((($46)*(12))&-1);
      var $48=(($45+($47<<2))|0);
      var $49=(($48+16)|0);
      ___gmpn_toom2_sqr($38, $42, $44, $49);
      label = 21; break;
    case 11: 
      var $51=$n;
      var $52=((($51)+(1))|0);
      var $53=(($52)|0) >= 400;
      if ($53) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $55=$1;
      var $56=$1;
      var $57=$n;
      var $58=((($57)*(11))&-1);
      var $59=(($56+($58<<2))|0);
      var $60=$n;
      var $61=((($60)+(1))|0);
      var $62=$4;
      var $63=$n;
      var $64=((($63)*(12))&-1);
      var $65=(($62+($64<<2))|0);
      var $66=(($65+16)|0);
      ___gmpn_toom3_sqr($55, $59, $61, $66);
      label = 20; break;
    case 13: 
      var $68=$n;
      var $69=((($68)+(1))|0);
      var $70=(($69)|0) >= 350;
      if ($70) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $72=$1;
      var $73=$1;
      var $74=$n;
      var $75=((($74)*(11))&-1);
      var $76=(($73+($75<<2))|0);
      var $77=$n;
      var $78=((($77)+(1))|0);
      var $79=$4;
      var $80=$n;
      var $81=((($80)*(12))&-1);
      var $82=(($79+($81<<2))|0);
      var $83=(($82+16)|0);
      ___gmpn_toom4_sqr($72, $76, $78, $83);
      label = 19; break;
    case 15: 
      var $85=$n;
      var $86=((($85)+(1))|0);
      var $87=(($86)|0) >= 450;
      if ($87) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $89=$1;
      var $90=$1;
      var $91=$n;
      var $92=((($91)*(11))&-1);
      var $93=(($90+($92<<2))|0);
      var $94=$n;
      var $95=((($94)+(1))|0);
      var $96=$4;
      var $97=$n;
      var $98=((($97)*(12))&-1);
      var $99=(($96+($98<<2))|0);
      var $100=(($99+16)|0);
      ___gmpn_toom6_sqr($89, $93, $95, $100);
      label = 18; break;
    case 17: 
      var $102=$1;
      var $103=$1;
      var $104=$n;
      var $105=((($104)*(11))&-1);
      var $106=(($103+($105<<2))|0);
      var $107=$n;
      var $108=((($107)+(1))|0);
      var $109=$4;
      var $110=$n;
      var $111=((($110)*(12))&-1);
      var $112=(($109+($111<<2))|0);
      var $113=(($112+16)|0);
      ___gmpn_toom8_sqr($102, $106, $108, $113);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $120=$n;
      var $121=((($120)+(1))|0);
      var $122=(($121)|0) >= 120;
      if ($122) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $124=$4;
      var $125=$1;
      var $126=$n;
      var $127=((($126)*(13))&-1);
      var $128=(($125+($127<<2))|0);
      var $129=(($128+8)|0);
      var $130=$n;
      var $131=((($130)+(1))|0);
      var $132=$4;
      var $133=$n;
      var $134=((($133)*(12))&-1);
      var $135=(($132+($134<<2))|0);
      var $136=(($135+16)|0);
      ___gmpn_toom2_sqr($124, $129, $131, $136);
      label = 35; break;
    case 25: 
      var $138=$n;
      var $139=((($138)+(1))|0);
      var $140=(($139)|0) >= 400;
      if ($140) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $142=$4;
      var $143=$1;
      var $144=$n;
      var $145=((($144)*(13))&-1);
      var $146=(($143+($145<<2))|0);
      var $147=(($146+8)|0);
      var $148=$n;
      var $149=((($148)+(1))|0);
      var $150=$4;
      var $151=$n;
      var $152=((($151)*(12))&-1);
      var $153=(($150+($152<<2))|0);
      var $154=(($153+16)|0);
      ___gmpn_toom3_sqr($142, $147, $149, $154);
      label = 34; break;
    case 27: 
      var $156=$n;
      var $157=((($156)+(1))|0);
      var $158=(($157)|0) >= 350;
      if ($158) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $160=$4;
      var $161=$1;
      var $162=$n;
      var $163=((($162)*(13))&-1);
      var $164=(($161+($163<<2))|0);
      var $165=(($164+8)|0);
      var $166=$n;
      var $167=((($166)+(1))|0);
      var $168=$4;
      var $169=$n;
      var $170=((($169)*(12))&-1);
      var $171=(($168+($170<<2))|0);
      var $172=(($171+16)|0);
      ___gmpn_toom4_sqr($160, $165, $167, $172);
      label = 33; break;
    case 29: 
      var $174=$n;
      var $175=((($174)+(1))|0);
      var $176=(($175)|0) >= 450;
      if ($176) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $178=$4;
      var $179=$1;
      var $180=$n;
      var $181=((($180)*(13))&-1);
      var $182=(($179+($181<<2))|0);
      var $183=(($182+8)|0);
      var $184=$n;
      var $185=((($184)+(1))|0);
      var $186=$4;
      var $187=$n;
      var $188=((($187)*(12))&-1);
      var $189=(($186+($188<<2))|0);
      var $190=(($189+16)|0);
      ___gmpn_toom6_sqr($178, $183, $185, $190);
      label = 32; break;
    case 31: 
      var $192=$4;
      var $193=$1;
      var $194=$n;
      var $195=((($194)*(13))&-1);
      var $196=(($193+($195<<2))|0);
      var $197=(($196+8)|0);
      var $198=$n;
      var $199=((($198)+(1))|0);
      var $200=$4;
      var $201=$n;
      var $202=((($201)*(12))&-1);
      var $203=(($200+($202<<2))|0);
      var $204=(($203+16)|0);
      ___gmpn_toom8_sqr($192, $197, $199, $204);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $210=$4;
      var $211=$n;
      var $212=($211<<1);
      var $213=((($212)+(1))|0);
      var $214=((($213)+(1))|0);
      var $215=$1;
      var $216=$n;
      ___gmpn_toom_couple_handling($210, $214, $215, 0, $216, 3, 0);
      var $217=$1;
      var $218=$n;
      var $219=((($218)*(13))&-1);
      var $220=(($217+($219<<2))|0);
      var $221=(($220+8)|0);
      var $222=$1;
      var $223=$n;
      var $224=((($223)*(11))&-1);
      var $225=(($222+($224<<2))|0);
      var $226=$2;
      var $227=$n;
      var $228=$s;
      var $229=$1;
      var $230=___gmpn_toom_eval_pm2rexp($221, $225, 7, $226, $227, $228, 2, $229);
      label = 37; break;
    case 37: 
      var $232=$n;
      var $233=((($232)+(1))|0);
      var $234=(($233)|0) >= 120;
      if ($234) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $236=$1;
      var $237=$1;
      var $238=$n;
      var $239=((($238)*(11))&-1);
      var $240=(($237+($239<<2))|0);
      var $241=$n;
      var $242=((($241)+(1))|0);
      var $243=$4;
      var $244=$n;
      var $245=((($244)*(12))&-1);
      var $246=(($243+($245<<2))|0);
      var $247=(($246+16)|0);
      ___gmpn_toom2_sqr($236, $240, $242, $247);
      label = 49; break;
    case 39: 
      var $249=$n;
      var $250=((($249)+(1))|0);
      var $251=(($250)|0) >= 400;
      if ($251) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $253=$1;
      var $254=$1;
      var $255=$n;
      var $256=((($255)*(11))&-1);
      var $257=(($254+($256<<2))|0);
      var $258=$n;
      var $259=((($258)+(1))|0);
      var $260=$4;
      var $261=$n;
      var $262=((($261)*(12))&-1);
      var $263=(($260+($262<<2))|0);
      var $264=(($263+16)|0);
      ___gmpn_toom3_sqr($253, $257, $259, $264);
      label = 48; break;
    case 41: 
      var $266=$n;
      var $267=((($266)+(1))|0);
      var $268=(($267)|0) >= 350;
      if ($268) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $270=$1;
      var $271=$1;
      var $272=$n;
      var $273=((($272)*(11))&-1);
      var $274=(($271+($273<<2))|0);
      var $275=$n;
      var $276=((($275)+(1))|0);
      var $277=$4;
      var $278=$n;
      var $279=((($278)*(12))&-1);
      var $280=(($277+($279<<2))|0);
      var $281=(($280+16)|0);
      ___gmpn_toom4_sqr($270, $274, $276, $281);
      label = 47; break;
    case 43: 
      var $283=$n;
      var $284=((($283)+(1))|0);
      var $285=(($284)|0) >= 450;
      if ($285) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $287=$1;
      var $288=$1;
      var $289=$n;
      var $290=((($289)*(11))&-1);
      var $291=(($288+($290<<2))|0);
      var $292=$n;
      var $293=((($292)+(1))|0);
      var $294=$4;
      var $295=$n;
      var $296=((($295)*(12))&-1);
      var $297=(($294+($296<<2))|0);
      var $298=(($297+16)|0);
      ___gmpn_toom6_sqr($287, $291, $293, $298);
      label = 46; break;
    case 45: 
      var $300=$1;
      var $301=$1;
      var $302=$n;
      var $303=((($302)*(11))&-1);
      var $304=(($301+($303<<2))|0);
      var $305=$n;
      var $306=((($305)+(1))|0);
      var $307=$4;
      var $308=$n;
      var $309=((($308)*(12))&-1);
      var $310=(($307+($309<<2))|0);
      var $311=(($310+16)|0);
      ___gmpn_toom8_sqr($300, $304, $306, $311);
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $318=$n;
      var $319=((($318)+(1))|0);
      var $320=(($319)|0) >= 120;
      if ($320) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $322=$4;
      var $323=$n;
      var $324=((($323)*(3))&-1);
      var $325=(($322+($324<<2))|0);
      var $326=(($325+4)|0);
      var $327=$1;
      var $328=$n;
      var $329=((($328)*(13))&-1);
      var $330=(($327+($329<<2))|0);
      var $331=(($330+8)|0);
      var $332=$n;
      var $333=((($332)+(1))|0);
      var $334=$4;
      var $335=$n;
      var $336=((($335)*(12))&-1);
      var $337=(($334+($336<<2))|0);
      var $338=(($337+16)|0);
      ___gmpn_toom2_sqr($326, $331, $333, $338);
      label = 63; break;
    case 53: 
      var $340=$n;
      var $341=((($340)+(1))|0);
      var $342=(($341)|0) >= 400;
      if ($342) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $344=$4;
      var $345=$n;
      var $346=((($345)*(3))&-1);
      var $347=(($344+($346<<2))|0);
      var $348=(($347+4)|0);
      var $349=$1;
      var $350=$n;
      var $351=((($350)*(13))&-1);
      var $352=(($349+($351<<2))|0);
      var $353=(($352+8)|0);
      var $354=$n;
      var $355=((($354)+(1))|0);
      var $356=$4;
      var $357=$n;
      var $358=((($357)*(12))&-1);
      var $359=(($356+($358<<2))|0);
      var $360=(($359+16)|0);
      ___gmpn_toom3_sqr($348, $353, $355, $360);
      label = 62; break;
    case 55: 
      var $362=$n;
      var $363=((($362)+(1))|0);
      var $364=(($363)|0) >= 350;
      if ($364) { label = 57; break; } else { label = 56; break; }
    case 56: 
      var $366=$4;
      var $367=$n;
      var $368=((($367)*(3))&-1);
      var $369=(($366+($368<<2))|0);
      var $370=(($369+4)|0);
      var $371=$1;
      var $372=$n;
      var $373=((($372)*(13))&-1);
      var $374=(($371+($373<<2))|0);
      var $375=(($374+8)|0);
      var $376=$n;
      var $377=((($376)+(1))|0);
      var $378=$4;
      var $379=$n;
      var $380=((($379)*(12))&-1);
      var $381=(($378+($380<<2))|0);
      var $382=(($381+16)|0);
      ___gmpn_toom4_sqr($370, $375, $377, $382);
      label = 61; break;
    case 57: 
      var $384=$n;
      var $385=((($384)+(1))|0);
      var $386=(($385)|0) >= 450;
      if ($386) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $388=$4;
      var $389=$n;
      var $390=((($389)*(3))&-1);
      var $391=(($388+($390<<2))|0);
      var $392=(($391+4)|0);
      var $393=$1;
      var $394=$n;
      var $395=((($394)*(13))&-1);
      var $396=(($393+($395<<2))|0);
      var $397=(($396+8)|0);
      var $398=$n;
      var $399=((($398)+(1))|0);
      var $400=$4;
      var $401=$n;
      var $402=((($401)*(12))&-1);
      var $403=(($400+($402<<2))|0);
      var $404=(($403+16)|0);
      ___gmpn_toom6_sqr($392, $397, $399, $404);
      label = 60; break;
    case 59: 
      var $406=$4;
      var $407=$n;
      var $408=((($407)*(3))&-1);
      var $409=(($406+($408<<2))|0);
      var $410=(($409+4)|0);
      var $411=$1;
      var $412=$n;
      var $413=((($412)*(13))&-1);
      var $414=(($411+($413<<2))|0);
      var $415=(($414+8)|0);
      var $416=$n;
      var $417=((($416)+(1))|0);
      var $418=$4;
      var $419=$n;
      var $420=((($419)*(12))&-1);
      var $421=(($418+($420<<2))|0);
      var $422=(($421+16)|0);
      ___gmpn_toom8_sqr($410, $415, $417, $422);
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $428=$4;
      var $429=$n;
      var $430=((($429)*(3))&-1);
      var $431=(($428+($430<<2))|0);
      var $432=(($431+4)|0);
      var $433=$n;
      var $434=($433<<1);
      var $435=((($434)+(1))|0);
      var $436=$1;
      var $437=$n;
      ___gmpn_toom_couple_handling($432, $435, $436, 0, $437, 2, 0);
      var $438=$1;
      var $439=$n;
      var $440=((($439)*(13))&-1);
      var $441=(($438+($440<<2))|0);
      var $442=(($441+8)|0);
      var $443=$1;
      var $444=$n;
      var $445=((($444)*(11))&-1);
      var $446=(($443+($445<<2))|0);
      var $447=$2;
      var $448=$n;
      var $449=$s;
      var $450=$1;
      var $451=___gmpn_toom_eval_pm2($442, $446, 7, $447, $448, $449, $450);
      label = 65; break;
    case 65: 
      var $453=$n;
      var $454=((($453)+(1))|0);
      var $455=(($454)|0) >= 120;
      if ($455) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $457=$1;
      var $458=$1;
      var $459=$n;
      var $460=((($459)*(11))&-1);
      var $461=(($458+($460<<2))|0);
      var $462=$n;
      var $463=((($462)+(1))|0);
      var $464=$4;
      var $465=$n;
      var $466=((($465)*(12))&-1);
      var $467=(($464+($466<<2))|0);
      var $468=(($467+16)|0);
      ___gmpn_toom2_sqr($457, $461, $463, $468);
      label = 77; break;
    case 67: 
      var $470=$n;
      var $471=((($470)+(1))|0);
      var $472=(($471)|0) >= 400;
      if ($472) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $474=$1;
      var $475=$1;
      var $476=$n;
      var $477=((($476)*(11))&-1);
      var $478=(($475+($477<<2))|0);
      var $479=$n;
      var $480=((($479)+(1))|0);
      var $481=$4;
      var $482=$n;
      var $483=((($482)*(12))&-1);
      var $484=(($481+($483<<2))|0);
      var $485=(($484+16)|0);
      ___gmpn_toom3_sqr($474, $478, $480, $485);
      label = 76; break;
    case 69: 
      var $487=$n;
      var $488=((($487)+(1))|0);
      var $489=(($488)|0) >= 350;
      if ($489) { label = 71; break; } else { label = 70; break; }
    case 70: 
      var $491=$1;
      var $492=$1;
      var $493=$n;
      var $494=((($493)*(11))&-1);
      var $495=(($492+($494<<2))|0);
      var $496=$n;
      var $497=((($496)+(1))|0);
      var $498=$4;
      var $499=$n;
      var $500=((($499)*(12))&-1);
      var $501=(($498+($500<<2))|0);
      var $502=(($501+16)|0);
      ___gmpn_toom4_sqr($491, $495, $497, $502);
      label = 75; break;
    case 71: 
      var $504=$n;
      var $505=((($504)+(1))|0);
      var $506=(($505)|0) >= 450;
      if ($506) { label = 73; break; } else { label = 72; break; }
    case 72: 
      var $508=$1;
      var $509=$1;
      var $510=$n;
      var $511=((($510)*(11))&-1);
      var $512=(($509+($511<<2))|0);
      var $513=$n;
      var $514=((($513)+(1))|0);
      var $515=$4;
      var $516=$n;
      var $517=((($516)*(12))&-1);
      var $518=(($515+($517<<2))|0);
      var $519=(($518+16)|0);
      ___gmpn_toom6_sqr($508, $512, $514, $519);
      label = 74; break;
    case 73: 
      var $521=$1;
      var $522=$1;
      var $523=$n;
      var $524=((($523)*(11))&-1);
      var $525=(($522+($524<<2))|0);
      var $526=$n;
      var $527=((($526)+(1))|0);
      var $528=$4;
      var $529=$n;
      var $530=((($529)*(12))&-1);
      var $531=(($528+($530<<2))|0);
      var $532=(($531+16)|0);
      ___gmpn_toom8_sqr($521, $525, $527, $532);
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $539=$n;
      var $540=((($539)+(1))|0);
      var $541=(($540)|0) >= 120;
      if ($541) { label = 81; break; } else { label = 80; break; }
    case 80: 
      var $543=$4;
      var $544=$n;
      var $545=((($544)*(6))&-1);
      var $546=(($543+($545<<2))|0);
      var $547=(($546+8)|0);
      var $548=$1;
      var $549=$n;
      var $550=((($549)*(13))&-1);
      var $551=(($548+($550<<2))|0);
      var $552=(($551+8)|0);
      var $553=$n;
      var $554=((($553)+(1))|0);
      var $555=$4;
      var $556=$n;
      var $557=((($556)*(12))&-1);
      var $558=(($555+($557<<2))|0);
      var $559=(($558+16)|0);
      ___gmpn_toom2_sqr($547, $552, $554, $559);
      label = 91; break;
    case 81: 
      var $561=$n;
      var $562=((($561)+(1))|0);
      var $563=(($562)|0) >= 400;
      if ($563) { label = 83; break; } else { label = 82; break; }
    case 82: 
      var $565=$4;
      var $566=$n;
      var $567=((($566)*(6))&-1);
      var $568=(($565+($567<<2))|0);
      var $569=(($568+8)|0);
      var $570=$1;
      var $571=$n;
      var $572=((($571)*(13))&-1);
      var $573=(($570+($572<<2))|0);
      var $574=(($573+8)|0);
      var $575=$n;
      var $576=((($575)+(1))|0);
      var $577=$4;
      var $578=$n;
      var $579=((($578)*(12))&-1);
      var $580=(($577+($579<<2))|0);
      var $581=(($580+16)|0);
      ___gmpn_toom3_sqr($569, $574, $576, $581);
      label = 90; break;
    case 83: 
      var $583=$n;
      var $584=((($583)+(1))|0);
      var $585=(($584)|0) >= 350;
      if ($585) { label = 85; break; } else { label = 84; break; }
    case 84: 
      var $587=$4;
      var $588=$n;
      var $589=((($588)*(6))&-1);
      var $590=(($587+($589<<2))|0);
      var $591=(($590+8)|0);
      var $592=$1;
      var $593=$n;
      var $594=((($593)*(13))&-1);
      var $595=(($592+($594<<2))|0);
      var $596=(($595+8)|0);
      var $597=$n;
      var $598=((($597)+(1))|0);
      var $599=$4;
      var $600=$n;
      var $601=((($600)*(12))&-1);
      var $602=(($599+($601<<2))|0);
      var $603=(($602+16)|0);
      ___gmpn_toom4_sqr($591, $596, $598, $603);
      label = 89; break;
    case 85: 
      var $605=$n;
      var $606=((($605)+(1))|0);
      var $607=(($606)|0) >= 450;
      if ($607) { label = 87; break; } else { label = 86; break; }
    case 86: 
      var $609=$4;
      var $610=$n;
      var $611=((($610)*(6))&-1);
      var $612=(($609+($611<<2))|0);
      var $613=(($612+8)|0);
      var $614=$1;
      var $615=$n;
      var $616=((($615)*(13))&-1);
      var $617=(($614+($616<<2))|0);
      var $618=(($617+8)|0);
      var $619=$n;
      var $620=((($619)+(1))|0);
      var $621=$4;
      var $622=$n;
      var $623=((($622)*(12))&-1);
      var $624=(($621+($623<<2))|0);
      var $625=(($624+16)|0);
      ___gmpn_toom6_sqr($613, $618, $620, $625);
      label = 88; break;
    case 87: 
      var $627=$4;
      var $628=$n;
      var $629=((($628)*(6))&-1);
      var $630=(($627+($629<<2))|0);
      var $631=(($630+8)|0);
      var $632=$1;
      var $633=$n;
      var $634=((($633)*(13))&-1);
      var $635=(($632+($634<<2))|0);
      var $636=(($635+8)|0);
      var $637=$n;
      var $638=((($637)+(1))|0);
      var $639=$4;
      var $640=$n;
      var $641=((($640)*(12))&-1);
      var $642=(($639+($641<<2))|0);
      var $643=(($642+16)|0);
      ___gmpn_toom8_sqr($631, $636, $638, $643);
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $649=$4;
      var $650=$n;
      var $651=((($650)*(6))&-1);
      var $652=(($649+($651<<2))|0);
      var $653=(($652+8)|0);
      var $654=$n;
      var $655=($654<<1);
      var $656=((($655)+(1))|0);
      var $657=$1;
      var $658=$n;
      ___gmpn_toom_couple_handling($653, $656, $657, 0, $658, 1, 2);
      var $659=$1;
      var $660=$n;
      var $661=((($660)*(13))&-1);
      var $662=(($659+($661<<2))|0);
      var $663=(($662+8)|0);
      var $664=$1;
      var $665=$n;
      var $666=((($665)*(11))&-1);
      var $667=(($664+($666<<2))|0);
      var $668=$2;
      var $669=$n;
      var $670=$s;
      var $671=$1;
      var $672=___gmpn_toom_eval_pm2exp($663, $667, 7, $668, $669, $670, 3, $671);
      label = 93; break;
    case 93: 
      var $674=$n;
      var $675=((($674)+(1))|0);
      var $676=(($675)|0) >= 120;
      if ($676) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $678=$1;
      var $679=$1;
      var $680=$n;
      var $681=((($680)*(11))&-1);
      var $682=(($679+($681<<2))|0);
      var $683=$n;
      var $684=((($683)+(1))|0);
      var $685=$4;
      var $686=$n;
      var $687=((($686)*(12))&-1);
      var $688=(($685+($687<<2))|0);
      var $689=(($688+16)|0);
      ___gmpn_toom2_sqr($678, $682, $684, $689);
      label = 105; break;
    case 95: 
      var $691=$n;
      var $692=((($691)+(1))|0);
      var $693=(($692)|0) >= 400;
      if ($693) { label = 97; break; } else { label = 96; break; }
    case 96: 
      var $695=$1;
      var $696=$1;
      var $697=$n;
      var $698=((($697)*(11))&-1);
      var $699=(($696+($698<<2))|0);
      var $700=$n;
      var $701=((($700)+(1))|0);
      var $702=$4;
      var $703=$n;
      var $704=((($703)*(12))&-1);
      var $705=(($702+($704<<2))|0);
      var $706=(($705+16)|0);
      ___gmpn_toom3_sqr($695, $699, $701, $706);
      label = 104; break;
    case 97: 
      var $708=$n;
      var $709=((($708)+(1))|0);
      var $710=(($709)|0) >= 350;
      if ($710) { label = 99; break; } else { label = 98; break; }
    case 98: 
      var $712=$1;
      var $713=$1;
      var $714=$n;
      var $715=((($714)*(11))&-1);
      var $716=(($713+($715<<2))|0);
      var $717=$n;
      var $718=((($717)+(1))|0);
      var $719=$4;
      var $720=$n;
      var $721=((($720)*(12))&-1);
      var $722=(($719+($721<<2))|0);
      var $723=(($722+16)|0);
      ___gmpn_toom4_sqr($712, $716, $718, $723);
      label = 103; break;
    case 99: 
      var $725=$n;
      var $726=((($725)+(1))|0);
      var $727=(($726)|0) >= 450;
      if ($727) { label = 101; break; } else { label = 100; break; }
    case 100: 
      var $729=$1;
      var $730=$1;
      var $731=$n;
      var $732=((($731)*(11))&-1);
      var $733=(($730+($732<<2))|0);
      var $734=$n;
      var $735=((($734)+(1))|0);
      var $736=$4;
      var $737=$n;
      var $738=((($737)*(12))&-1);
      var $739=(($736+($738<<2))|0);
      var $740=(($739+16)|0);
      ___gmpn_toom6_sqr($729, $733, $735, $740);
      label = 102; break;
    case 101: 
      var $742=$1;
      var $743=$1;
      var $744=$n;
      var $745=((($744)*(11))&-1);
      var $746=(($743+($745<<2))|0);
      var $747=$n;
      var $748=((($747)+(1))|0);
      var $749=$4;
      var $750=$n;
      var $751=((($750)*(12))&-1);
      var $752=(($749+($751<<2))|0);
      var $753=(($752+16)|0);
      ___gmpn_toom8_sqr($742, $746, $748, $753);
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $760=$n;
      var $761=((($760)+(1))|0);
      var $762=(($761)|0) >= 120;
      if ($762) { label = 109; break; } else { label = 108; break; }
    case 108: 
      var $764=$4;
      var $765=$n;
      var $766=((($765)*(9))&-1);
      var $767=(($764+($766<<2))|0);
      var $768=(($767+12)|0);
      var $769=$1;
      var $770=$n;
      var $771=((($770)*(13))&-1);
      var $772=(($769+($771<<2))|0);
      var $773=(($772+8)|0);
      var $774=$n;
      var $775=((($774)+(1))|0);
      var $776=$4;
      var $777=$n;
      var $778=((($777)*(12))&-1);
      var $779=(($776+($778<<2))|0);
      var $780=(($779+16)|0);
      ___gmpn_toom2_sqr($768, $773, $775, $780);
      label = 119; break;
    case 109: 
      var $782=$n;
      var $783=((($782)+(1))|0);
      var $784=(($783)|0) >= 400;
      if ($784) { label = 111; break; } else { label = 110; break; }
    case 110: 
      var $786=$4;
      var $787=$n;
      var $788=((($787)*(9))&-1);
      var $789=(($786+($788<<2))|0);
      var $790=(($789+12)|0);
      var $791=$1;
      var $792=$n;
      var $793=((($792)*(13))&-1);
      var $794=(($791+($793<<2))|0);
      var $795=(($794+8)|0);
      var $796=$n;
      var $797=((($796)+(1))|0);
      var $798=$4;
      var $799=$n;
      var $800=((($799)*(12))&-1);
      var $801=(($798+($800<<2))|0);
      var $802=(($801+16)|0);
      ___gmpn_toom3_sqr($790, $795, $797, $802);
      label = 118; break;
    case 111: 
      var $804=$n;
      var $805=((($804)+(1))|0);
      var $806=(($805)|0) >= 350;
      if ($806) { label = 113; break; } else { label = 112; break; }
    case 112: 
      var $808=$4;
      var $809=$n;
      var $810=((($809)*(9))&-1);
      var $811=(($808+($810<<2))|0);
      var $812=(($811+12)|0);
      var $813=$1;
      var $814=$n;
      var $815=((($814)*(13))&-1);
      var $816=(($813+($815<<2))|0);
      var $817=(($816+8)|0);
      var $818=$n;
      var $819=((($818)+(1))|0);
      var $820=$4;
      var $821=$n;
      var $822=((($821)*(12))&-1);
      var $823=(($820+($822<<2))|0);
      var $824=(($823+16)|0);
      ___gmpn_toom4_sqr($812, $817, $819, $824);
      label = 117; break;
    case 113: 
      var $826=$n;
      var $827=((($826)+(1))|0);
      var $828=(($827)|0) >= 450;
      if ($828) { label = 115; break; } else { label = 114; break; }
    case 114: 
      var $830=$4;
      var $831=$n;
      var $832=((($831)*(9))&-1);
      var $833=(($830+($832<<2))|0);
      var $834=(($833+12)|0);
      var $835=$1;
      var $836=$n;
      var $837=((($836)*(13))&-1);
      var $838=(($835+($837<<2))|0);
      var $839=(($838+8)|0);
      var $840=$n;
      var $841=((($840)+(1))|0);
      var $842=$4;
      var $843=$n;
      var $844=((($843)*(12))&-1);
      var $845=(($842+($844<<2))|0);
      var $846=(($845+16)|0);
      ___gmpn_toom6_sqr($834, $839, $841, $846);
      label = 116; break;
    case 115: 
      var $848=$4;
      var $849=$n;
      var $850=((($849)*(9))&-1);
      var $851=(($848+($850<<2))|0);
      var $852=(($851+12)|0);
      var $853=$1;
      var $854=$n;
      var $855=((($854)*(13))&-1);
      var $856=(($853+($855<<2))|0);
      var $857=(($856+8)|0);
      var $858=$n;
      var $859=((($858)+(1))|0);
      var $860=$4;
      var $861=$n;
      var $862=((($861)*(12))&-1);
      var $863=(($860+($862<<2))|0);
      var $864=(($863+16)|0);
      ___gmpn_toom8_sqr($852, $857, $859, $864);
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $870=$4;
      var $871=$n;
      var $872=((($871)*(9))&-1);
      var $873=(($870+($872<<2))|0);
      var $874=(($873+12)|0);
      var $875=$n;
      var $876=($875<<1);
      var $877=((($876)+(1))|0);
      var $878=((($877)+(1))|0);
      var $879=$1;
      var $880=$n;
      ___gmpn_toom_couple_handling($874, $878, $879, 0, $880, 3, 6);
      var $881=$1;
      var $882=$n;
      var $883=((($882)*(13))&-1);
      var $884=(($881+($883<<2))|0);
      var $885=(($884+8)|0);
      var $886=$1;
      var $887=$n;
      var $888=((($887)*(11))&-1);
      var $889=(($886+($888<<2))|0);
      var $890=$2;
      var $891=$n;
      var $892=$s;
      var $893=$1;
      var $894=___gmpn_toom_eval_pm2rexp($885, $889, 7, $890, $891, $892, 1, $893);
      label = 121; break;
    case 121: 
      var $896=$n;
      var $897=((($896)+(1))|0);
      var $898=(($897)|0) >= 120;
      if ($898) { label = 123; break; } else { label = 122; break; }
    case 122: 
      var $900=$1;
      var $901=$1;
      var $902=$n;
      var $903=((($902)*(11))&-1);
      var $904=(($901+($903<<2))|0);
      var $905=$n;
      var $906=((($905)+(1))|0);
      var $907=$4;
      var $908=$n;
      var $909=((($908)*(12))&-1);
      var $910=(($907+($909<<2))|0);
      var $911=(($910+16)|0);
      ___gmpn_toom2_sqr($900, $904, $906, $911);
      label = 133; break;
    case 123: 
      var $913=$n;
      var $914=((($913)+(1))|0);
      var $915=(($914)|0) >= 400;
      if ($915) { label = 125; break; } else { label = 124; break; }
    case 124: 
      var $917=$1;
      var $918=$1;
      var $919=$n;
      var $920=((($919)*(11))&-1);
      var $921=(($918+($920<<2))|0);
      var $922=$n;
      var $923=((($922)+(1))|0);
      var $924=$4;
      var $925=$n;
      var $926=((($925)*(12))&-1);
      var $927=(($924+($926<<2))|0);
      var $928=(($927+16)|0);
      ___gmpn_toom3_sqr($917, $921, $923, $928);
      label = 132; break;
    case 125: 
      var $930=$n;
      var $931=((($930)+(1))|0);
      var $932=(($931)|0) >= 350;
      if ($932) { label = 127; break; } else { label = 126; break; }
    case 126: 
      var $934=$1;
      var $935=$1;
      var $936=$n;
      var $937=((($936)*(11))&-1);
      var $938=(($935+($937<<2))|0);
      var $939=$n;
      var $940=((($939)+(1))|0);
      var $941=$4;
      var $942=$n;
      var $943=((($942)*(12))&-1);
      var $944=(($941+($943<<2))|0);
      var $945=(($944+16)|0);
      ___gmpn_toom4_sqr($934, $938, $940, $945);
      label = 131; break;
    case 127: 
      var $947=$n;
      var $948=((($947)+(1))|0);
      var $949=(($948)|0) >= 450;
      if ($949) { label = 129; break; } else { label = 128; break; }
    case 128: 
      var $951=$1;
      var $952=$1;
      var $953=$n;
      var $954=((($953)*(11))&-1);
      var $955=(($952+($954<<2))|0);
      var $956=$n;
      var $957=((($956)+(1))|0);
      var $958=$4;
      var $959=$n;
      var $960=((($959)*(12))&-1);
      var $961=(($958+($960<<2))|0);
      var $962=(($961+16)|0);
      ___gmpn_toom6_sqr($951, $955, $957, $962);
      label = 130; break;
    case 129: 
      var $964=$1;
      var $965=$1;
      var $966=$n;
      var $967=((($966)*(11))&-1);
      var $968=(($965+($967<<2))|0);
      var $969=$n;
      var $970=((($969)+(1))|0);
      var $971=$4;
      var $972=$n;
      var $973=((($972)*(12))&-1);
      var $974=(($971+($973<<2))|0);
      var $975=(($974+16)|0);
      ___gmpn_toom8_sqr($964, $968, $970, $975);
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      var $982=$n;
      var $983=((($982)+(1))|0);
      var $984=(($983)|0) >= 120;
      if ($984) { label = 137; break; } else { label = 136; break; }
    case 136: 
      var $986=$1;
      var $987=$n;
      var $988=((($987)*(3))&-1);
      var $989=(($986+($988<<2))|0);
      var $990=$1;
      var $991=$n;
      var $992=((($991)*(13))&-1);
      var $993=(($990+($992<<2))|0);
      var $994=(($993+8)|0);
      var $995=$n;
      var $996=((($995)+(1))|0);
      var $997=$4;
      var $998=$n;
      var $999=((($998)*(12))&-1);
      var $1000=(($997+($999<<2))|0);
      var $1001=(($1000+16)|0);
      ___gmpn_toom2_sqr($989, $994, $996, $1001);
      label = 147; break;
    case 137: 
      var $1003=$n;
      var $1004=((($1003)+(1))|0);
      var $1005=(($1004)|0) >= 400;
      if ($1005) { label = 139; break; } else { label = 138; break; }
    case 138: 
      var $1007=$1;
      var $1008=$n;
      var $1009=((($1008)*(3))&-1);
      var $1010=(($1007+($1009<<2))|0);
      var $1011=$1;
      var $1012=$n;
      var $1013=((($1012)*(13))&-1);
      var $1014=(($1011+($1013<<2))|0);
      var $1015=(($1014+8)|0);
      var $1016=$n;
      var $1017=((($1016)+(1))|0);
      var $1018=$4;
      var $1019=$n;
      var $1020=((($1019)*(12))&-1);
      var $1021=(($1018+($1020<<2))|0);
      var $1022=(($1021+16)|0);
      ___gmpn_toom3_sqr($1010, $1015, $1017, $1022);
      label = 146; break;
    case 139: 
      var $1024=$n;
      var $1025=((($1024)+(1))|0);
      var $1026=(($1025)|0) >= 350;
      if ($1026) { label = 141; break; } else { label = 140; break; }
    case 140: 
      var $1028=$1;
      var $1029=$n;
      var $1030=((($1029)*(3))&-1);
      var $1031=(($1028+($1030<<2))|0);
      var $1032=$1;
      var $1033=$n;
      var $1034=((($1033)*(13))&-1);
      var $1035=(($1032+($1034<<2))|0);
      var $1036=(($1035+8)|0);
      var $1037=$n;
      var $1038=((($1037)+(1))|0);
      var $1039=$4;
      var $1040=$n;
      var $1041=((($1040)*(12))&-1);
      var $1042=(($1039+($1041<<2))|0);
      var $1043=(($1042+16)|0);
      ___gmpn_toom4_sqr($1031, $1036, $1038, $1043);
      label = 145; break;
    case 141: 
      var $1045=$n;
      var $1046=((($1045)+(1))|0);
      var $1047=(($1046)|0) >= 450;
      if ($1047) { label = 143; break; } else { label = 142; break; }
    case 142: 
      var $1049=$1;
      var $1050=$n;
      var $1051=((($1050)*(3))&-1);
      var $1052=(($1049+($1051<<2))|0);
      var $1053=$1;
      var $1054=$n;
      var $1055=((($1054)*(13))&-1);
      var $1056=(($1053+($1055<<2))|0);
      var $1057=(($1056+8)|0);
      var $1058=$n;
      var $1059=((($1058)+(1))|0);
      var $1060=$4;
      var $1061=$n;
      var $1062=((($1061)*(12))&-1);
      var $1063=(($1060+($1062<<2))|0);
      var $1064=(($1063+16)|0);
      ___gmpn_toom6_sqr($1052, $1057, $1059, $1064);
      label = 144; break;
    case 143: 
      var $1066=$1;
      var $1067=$n;
      var $1068=((($1067)*(3))&-1);
      var $1069=(($1066+($1068<<2))|0);
      var $1070=$1;
      var $1071=$n;
      var $1072=((($1071)*(13))&-1);
      var $1073=(($1070+($1072<<2))|0);
      var $1074=(($1073+8)|0);
      var $1075=$n;
      var $1076=((($1075)+(1))|0);
      var $1077=$4;
      var $1078=$n;
      var $1079=((($1078)*(12))&-1);
      var $1080=(($1077+($1079<<2))|0);
      var $1081=(($1080+16)|0);
      ___gmpn_toom8_sqr($1069, $1074, $1076, $1081);
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      var $1087=$1;
      var $1088=$n;
      var $1089=((($1088)*(3))&-1);
      var $1090=(($1087+($1089<<2))|0);
      var $1091=$n;
      var $1092=($1091<<1);
      var $1093=((($1092)+(1))|0);
      var $1094=$1;
      var $1095=$n;
      ___gmpn_toom_couple_handling($1090, $1093, $1094, 0, $1095, 1, 0);
      var $1096=$1;
      var $1097=$n;
      var $1098=((($1097)*(13))&-1);
      var $1099=(($1096+($1098<<2))|0);
      var $1100=(($1099+8)|0);
      var $1101=$1;
      var $1102=$n;
      var $1103=((($1102)*(11))&-1);
      var $1104=(($1101+($1103<<2))|0);
      var $1105=$2;
      var $1106=$n;
      var $1107=$s;
      var $1108=$1;
      var $1109=___gmpn_toom_eval_pm1($1100, $1104, 7, $1105, $1106, $1107, $1108);
      label = 149; break;
    case 149: 
      var $1111=$n;
      var $1112=((($1111)+(1))|0);
      var $1113=(($1112)|0) >= 120;
      if ($1113) { label = 151; break; } else { label = 150; break; }
    case 150: 
      var $1115=$1;
      var $1116=$1;
      var $1117=$n;
      var $1118=((($1117)*(11))&-1);
      var $1119=(($1116+($1118<<2))|0);
      var $1120=$n;
      var $1121=((($1120)+(1))|0);
      var $1122=$4;
      var $1123=$n;
      var $1124=((($1123)*(12))&-1);
      var $1125=(($1122+($1124<<2))|0);
      var $1126=(($1125+16)|0);
      ___gmpn_toom2_sqr($1115, $1119, $1121, $1126);
      label = 161; break;
    case 151: 
      var $1128=$n;
      var $1129=((($1128)+(1))|0);
      var $1130=(($1129)|0) >= 400;
      if ($1130) { label = 153; break; } else { label = 152; break; }
    case 152: 
      var $1132=$1;
      var $1133=$1;
      var $1134=$n;
      var $1135=((($1134)*(11))&-1);
      var $1136=(($1133+($1135<<2))|0);
      var $1137=$n;
      var $1138=((($1137)+(1))|0);
      var $1139=$4;
      var $1140=$n;
      var $1141=((($1140)*(12))&-1);
      var $1142=(($1139+($1141<<2))|0);
      var $1143=(($1142+16)|0);
      ___gmpn_toom3_sqr($1132, $1136, $1138, $1143);
      label = 160; break;
    case 153: 
      var $1145=$n;
      var $1146=((($1145)+(1))|0);
      var $1147=(($1146)|0) >= 350;
      if ($1147) { label = 155; break; } else { label = 154; break; }
    case 154: 
      var $1149=$1;
      var $1150=$1;
      var $1151=$n;
      var $1152=((($1151)*(11))&-1);
      var $1153=(($1150+($1152<<2))|0);
      var $1154=$n;
      var $1155=((($1154)+(1))|0);
      var $1156=$4;
      var $1157=$n;
      var $1158=((($1157)*(12))&-1);
      var $1159=(($1156+($1158<<2))|0);
      var $1160=(($1159+16)|0);
      ___gmpn_toom4_sqr($1149, $1153, $1155, $1160);
      label = 159; break;
    case 155: 
      var $1162=$n;
      var $1163=((($1162)+(1))|0);
      var $1164=(($1163)|0) >= 450;
      if ($1164) { label = 157; break; } else { label = 156; break; }
    case 156: 
      var $1166=$1;
      var $1167=$1;
      var $1168=$n;
      var $1169=((($1168)*(11))&-1);
      var $1170=(($1167+($1169<<2))|0);
      var $1171=$n;
      var $1172=((($1171)+(1))|0);
      var $1173=$4;
      var $1174=$n;
      var $1175=((($1174)*(12))&-1);
      var $1176=(($1173+($1175<<2))|0);
      var $1177=(($1176+16)|0);
      ___gmpn_toom6_sqr($1166, $1170, $1172, $1177);
      label = 158; break;
    case 157: 
      var $1179=$1;
      var $1180=$1;
      var $1181=$n;
      var $1182=((($1181)*(11))&-1);
      var $1183=(($1180+($1182<<2))|0);
      var $1184=$n;
      var $1185=((($1184)+(1))|0);
      var $1186=$4;
      var $1187=$n;
      var $1188=((($1187)*(12))&-1);
      var $1189=(($1186+($1188<<2))|0);
      var $1190=(($1189+16)|0);
      ___gmpn_toom8_sqr($1179, $1183, $1185, $1190);
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      label = 163; break;
    case 163: 
      var $1197=$n;
      var $1198=((($1197)+(1))|0);
      var $1199=(($1198)|0) >= 120;
      if ($1199) { label = 165; break; } else { label = 164; break; }
    case 164: 
      var $1201=$1;
      var $1202=$n;
      var $1203=((($1202)*(7))&-1);
      var $1204=(($1201+($1203<<2))|0);
      var $1205=$1;
      var $1206=$n;
      var $1207=((($1206)*(13))&-1);
      var $1208=(($1205+($1207<<2))|0);
      var $1209=(($1208+8)|0);
      var $1210=$n;
      var $1211=((($1210)+(1))|0);
      var $1212=$4;
      var $1213=$n;
      var $1214=((($1213)*(12))&-1);
      var $1215=(($1212+($1214<<2))|0);
      var $1216=(($1215+16)|0);
      ___gmpn_toom2_sqr($1204, $1209, $1211, $1216);
      label = 175; break;
    case 165: 
      var $1218=$n;
      var $1219=((($1218)+(1))|0);
      var $1220=(($1219)|0) >= 400;
      if ($1220) { label = 167; break; } else { label = 166; break; }
    case 166: 
      var $1222=$1;
      var $1223=$n;
      var $1224=((($1223)*(7))&-1);
      var $1225=(($1222+($1224<<2))|0);
      var $1226=$1;
      var $1227=$n;
      var $1228=((($1227)*(13))&-1);
      var $1229=(($1226+($1228<<2))|0);
      var $1230=(($1229+8)|0);
      var $1231=$n;
      var $1232=((($1231)+(1))|0);
      var $1233=$4;
      var $1234=$n;
      var $1235=((($1234)*(12))&-1);
      var $1236=(($1233+($1235<<2))|0);
      var $1237=(($1236+16)|0);
      ___gmpn_toom3_sqr($1225, $1230, $1232, $1237);
      label = 174; break;
    case 167: 
      var $1239=$n;
      var $1240=((($1239)+(1))|0);
      var $1241=(($1240)|0) >= 350;
      if ($1241) { label = 169; break; } else { label = 168; break; }
    case 168: 
      var $1243=$1;
      var $1244=$n;
      var $1245=((($1244)*(7))&-1);
      var $1246=(($1243+($1245<<2))|0);
      var $1247=$1;
      var $1248=$n;
      var $1249=((($1248)*(13))&-1);
      var $1250=(($1247+($1249<<2))|0);
      var $1251=(($1250+8)|0);
      var $1252=$n;
      var $1253=((($1252)+(1))|0);
      var $1254=$4;
      var $1255=$n;
      var $1256=((($1255)*(12))&-1);
      var $1257=(($1254+($1256<<2))|0);
      var $1258=(($1257+16)|0);
      ___gmpn_toom4_sqr($1246, $1251, $1253, $1258);
      label = 173; break;
    case 169: 
      var $1260=$n;
      var $1261=((($1260)+(1))|0);
      var $1262=(($1261)|0) >= 450;
      if ($1262) { label = 171; break; } else { label = 170; break; }
    case 170: 
      var $1264=$1;
      var $1265=$n;
      var $1266=((($1265)*(7))&-1);
      var $1267=(($1264+($1266<<2))|0);
      var $1268=$1;
      var $1269=$n;
      var $1270=((($1269)*(13))&-1);
      var $1271=(($1268+($1270<<2))|0);
      var $1272=(($1271+8)|0);
      var $1273=$n;
      var $1274=((($1273)+(1))|0);
      var $1275=$4;
      var $1276=$n;
      var $1277=((($1276)*(12))&-1);
      var $1278=(($1275+($1277<<2))|0);
      var $1279=(($1278+16)|0);
      ___gmpn_toom6_sqr($1267, $1272, $1274, $1279);
      label = 172; break;
    case 171: 
      var $1281=$1;
      var $1282=$n;
      var $1283=((($1282)*(7))&-1);
      var $1284=(($1281+($1283<<2))|0);
      var $1285=$1;
      var $1286=$n;
      var $1287=((($1286)*(13))&-1);
      var $1288=(($1285+($1287<<2))|0);
      var $1289=(($1288+8)|0);
      var $1290=$n;
      var $1291=((($1290)+(1))|0);
      var $1292=$4;
      var $1293=$n;
      var $1294=((($1293)*(12))&-1);
      var $1295=(($1292+($1294<<2))|0);
      var $1296=(($1295+16)|0);
      ___gmpn_toom8_sqr($1284, $1289, $1291, $1296);
      label = 172; break;
    case 172: 
      label = 173; break;
    case 173: 
      label = 174; break;
    case 174: 
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      var $1302=$1;
      var $1303=$n;
      var $1304=((($1303)*(7))&-1);
      var $1305=(($1302+($1304<<2))|0);
      var $1306=$n;
      var $1307=($1306<<1);
      var $1308=((($1307)+(1))|0);
      var $1309=$1;
      var $1310=$n;
      ___gmpn_toom_couple_handling($1305, $1308, $1309, 0, $1310, 0, 0);
      var $1311=$1;
      var $1312=$n;
      var $1313=((($1312)*(13))&-1);
      var $1314=(($1311+($1313<<2))|0);
      var $1315=(($1314+8)|0);
      var $1316=$1;
      var $1317=$n;
      var $1318=((($1317)*(11))&-1);
      var $1319=(($1316+($1318<<2))|0);
      var $1320=$2;
      var $1321=$n;
      var $1322=$s;
      var $1323=$1;
      var $1324=___gmpn_toom_eval_pm2exp($1315, $1319, 7, $1320, $1321, $1322, 2, $1323);
      label = 177; break;
    case 177: 
      var $1326=$n;
      var $1327=((($1326)+(1))|0);
      var $1328=(($1327)|0) >= 120;
      if ($1328) { label = 179; break; } else { label = 178; break; }
    case 178: 
      var $1330=$1;
      var $1331=$1;
      var $1332=$n;
      var $1333=((($1332)*(11))&-1);
      var $1334=(($1331+($1333<<2))|0);
      var $1335=$n;
      var $1336=((($1335)+(1))|0);
      var $1337=$4;
      var $1338=$n;
      var $1339=((($1338)*(12))&-1);
      var $1340=(($1337+($1339<<2))|0);
      var $1341=(($1340+16)|0);
      ___gmpn_toom2_sqr($1330, $1334, $1336, $1341);
      label = 189; break;
    case 179: 
      var $1343=$n;
      var $1344=((($1343)+(1))|0);
      var $1345=(($1344)|0) >= 400;
      if ($1345) { label = 181; break; } else { label = 180; break; }
    case 180: 
      var $1347=$1;
      var $1348=$1;
      var $1349=$n;
      var $1350=((($1349)*(11))&-1);
      var $1351=(($1348+($1350<<2))|0);
      var $1352=$n;
      var $1353=((($1352)+(1))|0);
      var $1354=$4;
      var $1355=$n;
      var $1356=((($1355)*(12))&-1);
      var $1357=(($1354+($1356<<2))|0);
      var $1358=(($1357+16)|0);
      ___gmpn_toom3_sqr($1347, $1351, $1353, $1358);
      label = 188; break;
    case 181: 
      var $1360=$n;
      var $1361=((($1360)+(1))|0);
      var $1362=(($1361)|0) >= 350;
      if ($1362) { label = 183; break; } else { label = 182; break; }
    case 182: 
      var $1364=$1;
      var $1365=$1;
      var $1366=$n;
      var $1367=((($1366)*(11))&-1);
      var $1368=(($1365+($1367<<2))|0);
      var $1369=$n;
      var $1370=((($1369)+(1))|0);
      var $1371=$4;
      var $1372=$n;
      var $1373=((($1372)*(12))&-1);
      var $1374=(($1371+($1373<<2))|0);
      var $1375=(($1374+16)|0);
      ___gmpn_toom4_sqr($1364, $1368, $1370, $1375);
      label = 187; break;
    case 183: 
      var $1377=$n;
      var $1378=((($1377)+(1))|0);
      var $1379=(($1378)|0) >= 450;
      if ($1379) { label = 185; break; } else { label = 184; break; }
    case 184: 
      var $1381=$1;
      var $1382=$1;
      var $1383=$n;
      var $1384=((($1383)*(11))&-1);
      var $1385=(($1382+($1384<<2))|0);
      var $1386=$n;
      var $1387=((($1386)+(1))|0);
      var $1388=$4;
      var $1389=$n;
      var $1390=((($1389)*(12))&-1);
      var $1391=(($1388+($1390<<2))|0);
      var $1392=(($1391+16)|0);
      ___gmpn_toom6_sqr($1381, $1385, $1387, $1392);
      label = 186; break;
    case 185: 
      var $1394=$1;
      var $1395=$1;
      var $1396=$n;
      var $1397=((($1396)*(11))&-1);
      var $1398=(($1395+($1397<<2))|0);
      var $1399=$n;
      var $1400=((($1399)+(1))|0);
      var $1401=$4;
      var $1402=$n;
      var $1403=((($1402)*(12))&-1);
      var $1404=(($1401+($1403<<2))|0);
      var $1405=(($1404+16)|0);
      ___gmpn_toom8_sqr($1394, $1398, $1400, $1405);
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      label = 188; break;
    case 188: 
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      var $1412=$n;
      var $1413=((($1412)+(1))|0);
      var $1414=(($1413)|0) >= 120;
      if ($1414) { label = 193; break; } else { label = 192; break; }
    case 192: 
      var $1416=$1;
      var $1417=$n;
      var $1418=((($1417)*(11))&-1);
      var $1419=(($1416+($1418<<2))|0);
      var $1420=$1;
      var $1421=$n;
      var $1422=((($1421)*(13))&-1);
      var $1423=(($1420+($1422<<2))|0);
      var $1424=(($1423+8)|0);
      var $1425=$n;
      var $1426=((($1425)+(1))|0);
      var $1427=$4;
      var $1428=$n;
      var $1429=((($1428)*(12))&-1);
      var $1430=(($1427+($1429<<2))|0);
      var $1431=(($1430+16)|0);
      ___gmpn_toom2_sqr($1419, $1424, $1426, $1431);
      label = 203; break;
    case 193: 
      var $1433=$n;
      var $1434=((($1433)+(1))|0);
      var $1435=(($1434)|0) >= 400;
      if ($1435) { label = 195; break; } else { label = 194; break; }
    case 194: 
      var $1437=$1;
      var $1438=$n;
      var $1439=((($1438)*(11))&-1);
      var $1440=(($1437+($1439<<2))|0);
      var $1441=$1;
      var $1442=$n;
      var $1443=((($1442)*(13))&-1);
      var $1444=(($1441+($1443<<2))|0);
      var $1445=(($1444+8)|0);
      var $1446=$n;
      var $1447=((($1446)+(1))|0);
      var $1448=$4;
      var $1449=$n;
      var $1450=((($1449)*(12))&-1);
      var $1451=(($1448+($1450<<2))|0);
      var $1452=(($1451+16)|0);
      ___gmpn_toom3_sqr($1440, $1445, $1447, $1452);
      label = 202; break;
    case 195: 
      var $1454=$n;
      var $1455=((($1454)+(1))|0);
      var $1456=(($1455)|0) >= 350;
      if ($1456) { label = 197; break; } else { label = 196; break; }
    case 196: 
      var $1458=$1;
      var $1459=$n;
      var $1460=((($1459)*(11))&-1);
      var $1461=(($1458+($1460<<2))|0);
      var $1462=$1;
      var $1463=$n;
      var $1464=((($1463)*(13))&-1);
      var $1465=(($1462+($1464<<2))|0);
      var $1466=(($1465+8)|0);
      var $1467=$n;
      var $1468=((($1467)+(1))|0);
      var $1469=$4;
      var $1470=$n;
      var $1471=((($1470)*(12))&-1);
      var $1472=(($1469+($1471<<2))|0);
      var $1473=(($1472+16)|0);
      ___gmpn_toom4_sqr($1461, $1466, $1468, $1473);
      label = 201; break;
    case 197: 
      var $1475=$n;
      var $1476=((($1475)+(1))|0);
      var $1477=(($1476)|0) >= 450;
      if ($1477) { label = 199; break; } else { label = 198; break; }
    case 198: 
      var $1479=$1;
      var $1480=$n;
      var $1481=((($1480)*(11))&-1);
      var $1482=(($1479+($1481<<2))|0);
      var $1483=$1;
      var $1484=$n;
      var $1485=((($1484)*(13))&-1);
      var $1486=(($1483+($1485<<2))|0);
      var $1487=(($1486+8)|0);
      var $1488=$n;
      var $1489=((($1488)+(1))|0);
      var $1490=$4;
      var $1491=$n;
      var $1492=((($1491)*(12))&-1);
      var $1493=(($1490+($1492<<2))|0);
      var $1494=(($1493+16)|0);
      ___gmpn_toom6_sqr($1482, $1487, $1489, $1494);
      label = 200; break;
    case 199: 
      var $1496=$1;
      var $1497=$n;
      var $1498=((($1497)*(11))&-1);
      var $1499=(($1496+($1498<<2))|0);
      var $1500=$1;
      var $1501=$n;
      var $1502=((($1501)*(13))&-1);
      var $1503=(($1500+($1502<<2))|0);
      var $1504=(($1503+8)|0);
      var $1505=$n;
      var $1506=((($1505)+(1))|0);
      var $1507=$4;
      var $1508=$n;
      var $1509=((($1508)*(12))&-1);
      var $1510=(($1507+($1509<<2))|0);
      var $1511=(($1510+16)|0);
      ___gmpn_toom8_sqr($1499, $1504, $1506, $1511);
      label = 200; break;
    case 200: 
      label = 201; break;
    case 201: 
      label = 202; break;
    case 202: 
      label = 203; break;
    case 203: 
      label = 204; break;
    case 204: 
      var $1517=$1;
      var $1518=$n;
      var $1519=((($1518)*(11))&-1);
      var $1520=(($1517+($1519<<2))|0);
      var $1521=$n;
      var $1522=($1521<<1);
      var $1523=((($1522)+(1))|0);
      var $1524=$1;
      var $1525=$n;
      ___gmpn_toom_couple_handling($1520, $1523, $1524, 0, $1525, 2, 4);
      label = 205; break;
    case 205: 
      var $1527=$n;
      var $1528=(($1527)|0) >= 120;
      if ($1528) { label = 207; break; } else { label = 206; break; }
    case 206: 
      var $1530=$1;
      var $1531=$2;
      var $1532=$n;
      var $1533=$4;
      var $1534=$n;
      var $1535=((($1534)*(12))&-1);
      var $1536=(($1533+($1535<<2))|0);
      var $1537=(($1536+16)|0);
      ___gmpn_toom2_sqr($1530, $1531, $1532, $1537);
      label = 217; break;
    case 207: 
      var $1539=$n;
      var $1540=(($1539)|0) >= 400;
      if ($1540) { label = 209; break; } else { label = 208; break; }
    case 208: 
      var $1542=$1;
      var $1543=$2;
      var $1544=$n;
      var $1545=$4;
      var $1546=$n;
      var $1547=((($1546)*(12))&-1);
      var $1548=(($1545+($1547<<2))|0);
      var $1549=(($1548+16)|0);
      ___gmpn_toom3_sqr($1542, $1543, $1544, $1549);
      label = 216; break;
    case 209: 
      var $1551=$n;
      var $1552=(($1551)|0) >= 350;
      if ($1552) { label = 211; break; } else { label = 210; break; }
    case 210: 
      var $1554=$1;
      var $1555=$2;
      var $1556=$n;
      var $1557=$4;
      var $1558=$n;
      var $1559=((($1558)*(12))&-1);
      var $1560=(($1557+($1559<<2))|0);
      var $1561=(($1560+16)|0);
      ___gmpn_toom4_sqr($1554, $1555, $1556, $1561);
      label = 215; break;
    case 211: 
      var $1563=$n;
      var $1564=(($1563)|0) >= 450;
      if ($1564) { label = 213; break; } else { label = 212; break; }
    case 212: 
      var $1566=$1;
      var $1567=$2;
      var $1568=$n;
      var $1569=$4;
      var $1570=$n;
      var $1571=((($1570)*(12))&-1);
      var $1572=(($1569+($1571<<2))|0);
      var $1573=(($1572+16)|0);
      ___gmpn_toom6_sqr($1566, $1567, $1568, $1573);
      label = 214; break;
    case 213: 
      var $1575=$1;
      var $1576=$2;
      var $1577=$n;
      var $1578=$4;
      var $1579=$n;
      var $1580=((($1579)*(12))&-1);
      var $1581=(($1578+($1580<<2))|0);
      var $1582=(($1581+16)|0);
      ___gmpn_toom8_sqr($1575, $1576, $1577, $1582);
      label = 214; break;
    case 214: 
      label = 215; break;
    case 215: 
      label = 216; break;
    case 216: 
      label = 217; break;
    case 217: 
      label = 218; break;
    case 218: 
      var $1588=$1;
      var $1589=$4;
      var $1590=$n;
      var $1591=((($1590)*(9))&-1);
      var $1592=(($1589+($1591<<2))|0);
      var $1593=(($1592+12)|0);
      var $1594=$4;
      var $1595=$n;
      var $1596=((($1595)*(6))&-1);
      var $1597=(($1594+($1596<<2))|0);
      var $1598=(($1597+8)|0);
      var $1599=$4;
      var $1600=$n;
      var $1601=((($1600)*(3))&-1);
      var $1602=(($1599+($1601<<2))|0);
      var $1603=(($1602+4)|0);
      var $1604=$4;
      var $1605=$n;
      var $1606=$s;
      var $1607=($1606<<1);
      var $1608=$4;
      var $1609=$n;
      var $1610=((($1609)*(12))&-1);
      var $1611=(($1608+($1610<<2))|0);
      var $1612=(($1611+16)|0);
      ___gmpn_toom_interpolate_16pts($1588, $1593, $1598, $1603, $1604, $1605, $1607, 0, $1612);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom8_sqr["X"]=1;

function ___gmpn_toom8h_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $p;
      var $q;
      var $half;
      var $sign;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $21=$3;
      var $22=$5;
      var $23=(($21)|0)==(($22)|0);
      if ($23) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $25=$3;
      var $26=((($25)*(10))&-1);
      var $27=$5;
      var $28=$27 >> 1;
      var $29=((($28)*(21))&-1);
      var $30=(($26)|0) < (($29)|0);
      if ($30) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $half=0;
      var $32=$3;
      var $33=((($32)-(1))|0);
      var $34=$33 >> 3;
      var $35=((($34)+(1))|0);
      $n=$35;
      $q=7;
      $p=7;
      var $36=$3;
      var $37=$p;
      var $38=$n;
      var $39=Math.imul($37,$38);
      var $40=((($36)-($39))|0);
      $s=$40;
      var $41=$5;
      var $42=$q;
      var $43=$n;
      var $44=Math.imul($42,$43);
      var $45=((($41)-($44))|0);
      $t=$45;
      label = 45; break;
    case 19: 
      var $47=$3;
      var $48=((($47)*(13))&-1);
      var $49=$5;
      var $50=($49<<4);
      var $51=(($48)|0) < (($50)|0);
      if ($51) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $p=9;
      $q=8;
      label = 34; break;
    case 21: 
      var $54=$3;
      var $55=((($54)*(10))&-1);
      var $56=$5;
      var $57=$56 >> 1;
      var $58=((($57)*(27))&-1);
      var $59=(($55)|0) < (($58)|0);
      if ($59) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $p=9;
      $q=7;
      label = 33; break;
    case 23: 
      var $62=$3;
      var $63=((($62)*(10))&-1);
      var $64=$5;
      var $65=$64 >> 1;
      var $66=((($65)*(33))&-1);
      var $67=(($63)|0) < (($66)|0);
      if ($67) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $p=10;
      $q=7;
      label = 32; break;
    case 25: 
      var $70=$3;
      var $71=($70<<2);
      var $72=$5;
      var $73=((($72)*(7))&-1);
      var $74=(($71)|0) < (($73)|0);
      if ($74) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $p=10;
      $q=6;
      label = 31; break;
    case 27: 
      var $77=$3;
      var $78=((($77)*(6))&-1);
      var $79=$5;
      var $80=((($79)*(13))&-1);
      var $81=(($78)|0) < (($80)|0);
      if ($81) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $p=11;
      $q=6;
      label = 30; break;
    case 29: 
      $p=11;
      $q=5;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $89=$p;
      var $90=$q;
      var $91=((($89)+($90))|0);
      var $92=$91 & 1;
      $half=$92;
      var $93=$q;
      var $94=$3;
      var $95=Math.imul($93,$94);
      var $96=$p;
      var $97=$5;
      var $98=Math.imul($96,$97);
      var $99=(($95)|0) >= (($98)|0);
      if ($99) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $101=$3;
      var $102=((($101)-(1))|0);
      var $103=$p;
      var $104=Math.floor(((($102)>>>0))/((($103)>>>0)));
      var $111 = $104;label = 37; break;
    case 36: 
      var $106=$5;
      var $107=((($106)-(1))|0);
      var $108=$q;
      var $109=Math.floor(((($107)>>>0))/((($108)>>>0)));
      var $111 = $109;label = 37; break;
    case 37: 
      var $111;
      var $112=((($111)+(1))|0);
      $n=$112;
      var $113=$p;
      var $114=((($113)-(1))|0);
      $p=$114;
      var $115=$q;
      var $116=((($115)-(1))|0);
      $q=$116;
      var $117=$3;
      var $118=$p;
      var $119=$n;
      var $120=Math.imul($118,$119);
      var $121=((($117)-($120))|0);
      $s=$121;
      var $122=$5;
      var $123=$q;
      var $124=$n;
      var $125=Math.imul($123,$124);
      var $126=((($122)-($125))|0);
      $t=$126;
      var $127=$half;
      var $128=(($127)|0)!=0;
      if ($128) { label = 38; break; } else { label = 44; break; }
    case 38: 
      var $130=$s;
      var $131=(($130)|0) < 1;
      if ($131) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $133=$p;
      var $134=((($133)-(1))|0);
      $p=$134;
      var $135=$n;
      var $136=$s;
      var $137=((($136)+($135))|0);
      $s=$137;
      $half=0;
      label = 43; break;
    case 40: 
      var $139=$t;
      var $140=(($139)|0) < 1;
      if ($140) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $142=$q;
      var $143=((($142)-(1))|0);
      $q=$143;
      var $144=$n;
      var $145=$t;
      var $146=((($145)+($144))|0);
      $t=$146;
      $half=0;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $163=$1;
      var $164=$n;
      var $165=((($164)*(13))&-1);
      var $166=(($163+($165<<2))|0);
      var $167=(($166+8)|0);
      var $168=$1;
      var $169=$n;
      var $170=((($169)*(11))&-1);
      var $171=(($168+($170<<2))|0);
      var $172=$p;
      var $173=$2;
      var $174=$n;
      var $175=$s;
      var $176=$1;
      var $177=___gmpn_toom_eval_pm2rexp($167, $171, $172, $173, $174, $175, 3, $176);
      var $178=$6;
      var $179=$n;
      var $180=((($179)*(12))&-1);
      var $181=(($178+($180<<2))|0);
      var $182=(($181+16)|0);
      var $183=$1;
      var $184=$n;
      var $185=((($184)*(12))&-1);
      var $186=(($183+($185<<2))|0);
      var $187=(($186+4)|0);
      var $188=$q;
      var $189=$4;
      var $190=$n;
      var $191=$t;
      var $192=$1;
      var $193=___gmpn_toom_eval_pm2rexp($182, $187, $188, $189, $190, $191, 3, $192);
      var $194=$177 ^ $193;
      $sign=$194;
      label = 58; break;
    case 58: 
      var $196=$n;
      var $197=((($196)+(1))|0);
      var $198=(($197)|0) >= 100;
      if ($198) { label = 60; break; } else { label = 59; break; }
    case 59: 
      var $200=$1;
      var $201=$1;
      var $202=$n;
      var $203=((($202)*(11))&-1);
      var $204=(($201+($203<<2))|0);
      var $205=$n;
      var $206=((($205)+(1))|0);
      var $207=$1;
      var $208=$n;
      var $209=((($208)*(12))&-1);
      var $210=(($207+($209<<2))|0);
      var $211=(($210+4)|0);
      var $212=$n;
      var $213=((($212)+(1))|0);
      var $214=$6;
      var $215=$n;
      var $216=((($215)*(13))&-1);
      var $217=(($214+($216<<2))|0);
      var $218=(($217+20)|0);
      ___gmpn_toom22_mul($200, $204, $206, $211, $213, $218);
      label = 67; break;
    case 60: 
      var $220=$n;
      var $221=((($220)+(1))|0);
      var $222=(($221)|0) >= 300;
      if ($222) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $224=$1;
      var $225=$1;
      var $226=$n;
      var $227=((($226)*(11))&-1);
      var $228=(($225+($227<<2))|0);
      var $229=$n;
      var $230=((($229)+(1))|0);
      var $231=$1;
      var $232=$n;
      var $233=((($232)*(12))&-1);
      var $234=(($231+($233<<2))|0);
      var $235=(($234+4)|0);
      var $236=$n;
      var $237=((($236)+(1))|0);
      var $238=$6;
      var $239=$n;
      var $240=((($239)*(13))&-1);
      var $241=(($238+($240<<2))|0);
      var $242=(($241+20)|0);
      ___gmpn_toom33_mul($224, $228, $230, $235, $237, $242);
      label = 66; break;
    case 62: 
      var $244=$n;
      var $245=((($244)+(1))|0);
      var $246=(($245)|0) >= 350;
      if ($246) { label = 64; break; } else { label = 63; break; }
    case 63: 
      var $248=$1;
      var $249=$1;
      var $250=$n;
      var $251=((($250)*(11))&-1);
      var $252=(($249+($251<<2))|0);
      var $253=$n;
      var $254=((($253)+(1))|0);
      var $255=$1;
      var $256=$n;
      var $257=((($256)*(12))&-1);
      var $258=(($255+($257<<2))|0);
      var $259=(($258+4)|0);
      var $260=$n;
      var $261=((($260)+(1))|0);
      var $262=$6;
      var $263=$n;
      var $264=((($263)*(13))&-1);
      var $265=(($262+($264<<2))|0);
      var $266=(($265+20)|0);
      ___gmpn_toom44_mul($248, $252, $254, $259, $261, $266);
      label = 65; break;
    case 64: 
      var $268=$1;
      var $269=$1;
      var $270=$n;
      var $271=((($270)*(11))&-1);
      var $272=(($269+($271<<2))|0);
      var $273=$n;
      var $274=((($273)+(1))|0);
      var $275=$1;
      var $276=$n;
      var $277=((($276)*(12))&-1);
      var $278=(($275+($277<<2))|0);
      var $279=(($278+4)|0);
      var $280=$n;
      var $281=((($280)+(1))|0);
      var $282=$6;
      var $283=$n;
      var $284=((($283)*(13))&-1);
      var $285=(($282+($284<<2))|0);
      var $286=(($285+20)|0);
      ___gmpn_toom6h_mul($268, $272, $274, $279, $281, $286);
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $292=$n;
      var $293=((($292)+(1))|0);
      var $294=(($293)|0) >= 100;
      if ($294) { label = 71; break; } else { label = 70; break; }
    case 70: 
      var $296=$6;
      var $297=$1;
      var $298=$n;
      var $299=((($298)*(13))&-1);
      var $300=(($297+($299<<2))|0);
      var $301=(($300+8)|0);
      var $302=$n;
      var $303=((($302)+(1))|0);
      var $304=$6;
      var $305=$n;
      var $306=((($305)*(12))&-1);
      var $307=(($304+($306<<2))|0);
      var $308=(($307+16)|0);
      var $309=$n;
      var $310=((($309)+(1))|0);
      var $311=$6;
      var $312=$n;
      var $313=((($312)*(13))&-1);
      var $314=(($311+($313<<2))|0);
      var $315=(($314+20)|0);
      ___gmpn_toom22_mul($296, $301, $303, $308, $310, $315);
      label = 78; break;
    case 71: 
      var $317=$n;
      var $318=((($317)+(1))|0);
      var $319=(($318)|0) >= 300;
      if ($319) { label = 73; break; } else { label = 72; break; }
    case 72: 
      var $321=$6;
      var $322=$1;
      var $323=$n;
      var $324=((($323)*(13))&-1);
      var $325=(($322+($324<<2))|0);
      var $326=(($325+8)|0);
      var $327=$n;
      var $328=((($327)+(1))|0);
      var $329=$6;
      var $330=$n;
      var $331=((($330)*(12))&-1);
      var $332=(($329+($331<<2))|0);
      var $333=(($332+16)|0);
      var $334=$n;
      var $335=((($334)+(1))|0);
      var $336=$6;
      var $337=$n;
      var $338=((($337)*(13))&-1);
      var $339=(($336+($338<<2))|0);
      var $340=(($339+20)|0);
      ___gmpn_toom33_mul($321, $326, $328, $333, $335, $340);
      label = 77; break;
    case 73: 
      var $342=$n;
      var $343=((($342)+(1))|0);
      var $344=(($343)|0) >= 350;
      if ($344) { label = 75; break; } else { label = 74; break; }
    case 74: 
      var $346=$6;
      var $347=$1;
      var $348=$n;
      var $349=((($348)*(13))&-1);
      var $350=(($347+($349<<2))|0);
      var $351=(($350+8)|0);
      var $352=$n;
      var $353=((($352)+(1))|0);
      var $354=$6;
      var $355=$n;
      var $356=((($355)*(12))&-1);
      var $357=(($354+($356<<2))|0);
      var $358=(($357+16)|0);
      var $359=$n;
      var $360=((($359)+(1))|0);
      var $361=$6;
      var $362=$n;
      var $363=((($362)*(13))&-1);
      var $364=(($361+($363<<2))|0);
      var $365=(($364+20)|0);
      ___gmpn_toom44_mul($346, $351, $353, $358, $360, $365);
      label = 76; break;
    case 75: 
      var $367=$6;
      var $368=$1;
      var $369=$n;
      var $370=((($369)*(13))&-1);
      var $371=(($368+($370<<2))|0);
      var $372=(($371+8)|0);
      var $373=$n;
      var $374=((($373)+(1))|0);
      var $375=$6;
      var $376=$n;
      var $377=((($376)*(12))&-1);
      var $378=(($375+($377<<2))|0);
      var $379=(($378+16)|0);
      var $380=$n;
      var $381=((($380)+(1))|0);
      var $382=$6;
      var $383=$n;
      var $384=((($383)*(13))&-1);
      var $385=(($382+($384<<2))|0);
      var $386=(($385+20)|0);
      ___gmpn_toom6h_mul($367, $372, $374, $379, $381, $386);
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $391=$6;
      var $392=$n;
      var $393=($392<<1);
      var $394=((($393)+(1))|0);
      var $395=((($394)+(1))|0);
      var $396=$1;
      var $397=$sign;
      var $398=$n;
      var $399=$half;
      var $400=((($399)+(1))|0);
      var $401=((($400)*(3))&-1);
      var $402=$half;
      var $403=((($402)*(3))&-1);
      ___gmpn_toom_couple_handling($391, $395, $396, $397, $398, $401, $403);
      var $404=$1;
      var $405=$n;
      var $406=((($405)*(13))&-1);
      var $407=(($404+($406<<2))|0);
      var $408=(($407+8)|0);
      var $409=$1;
      var $410=$n;
      var $411=((($410)*(11))&-1);
      var $412=(($409+($411<<2))|0);
      var $413=$p;
      var $414=$2;
      var $415=$n;
      var $416=$s;
      var $417=$1;
      var $418=___gmpn_toom_eval_pm2rexp($408, $412, $413, $414, $415, $416, 2, $417);
      var $419=$6;
      var $420=$n;
      var $421=((($420)*(12))&-1);
      var $422=(($419+($421<<2))|0);
      var $423=(($422+16)|0);
      var $424=$1;
      var $425=$n;
      var $426=((($425)*(12))&-1);
      var $427=(($424+($426<<2))|0);
      var $428=(($427+4)|0);
      var $429=$q;
      var $430=$4;
      var $431=$n;
      var $432=$t;
      var $433=$1;
      var $434=___gmpn_toom_eval_pm2rexp($423, $428, $429, $430, $431, $432, 2, $433);
      var $435=$418 ^ $434;
      $sign=$435;
      label = 80; break;
    case 80: 
      var $437=$n;
      var $438=((($437)+(1))|0);
      var $439=(($438)|0) >= 100;
      if ($439) { label = 82; break; } else { label = 81; break; }
    case 81: 
      var $441=$1;
      var $442=$1;
      var $443=$n;
      var $444=((($443)*(11))&-1);
      var $445=(($442+($444<<2))|0);
      var $446=$n;
      var $447=((($446)+(1))|0);
      var $448=$1;
      var $449=$n;
      var $450=((($449)*(12))&-1);
      var $451=(($448+($450<<2))|0);
      var $452=(($451+4)|0);
      var $453=$n;
      var $454=((($453)+(1))|0);
      var $455=$6;
      var $456=$n;
      var $457=((($456)*(13))&-1);
      var $458=(($455+($457<<2))|0);
      var $459=(($458+20)|0);
      ___gmpn_toom22_mul($441, $445, $447, $452, $454, $459);
      label = 89; break;
    case 82: 
      var $461=$n;
      var $462=((($461)+(1))|0);
      var $463=(($462)|0) >= 300;
      if ($463) { label = 84; break; } else { label = 83; break; }
    case 83: 
      var $465=$1;
      var $466=$1;
      var $467=$n;
      var $468=((($467)*(11))&-1);
      var $469=(($466+($468<<2))|0);
      var $470=$n;
      var $471=((($470)+(1))|0);
      var $472=$1;
      var $473=$n;
      var $474=((($473)*(12))&-1);
      var $475=(($472+($474<<2))|0);
      var $476=(($475+4)|0);
      var $477=$n;
      var $478=((($477)+(1))|0);
      var $479=$6;
      var $480=$n;
      var $481=((($480)*(13))&-1);
      var $482=(($479+($481<<2))|0);
      var $483=(($482+20)|0);
      ___gmpn_toom33_mul($465, $469, $471, $476, $478, $483);
      label = 88; break;
    case 84: 
      var $485=$n;
      var $486=((($485)+(1))|0);
      var $487=(($486)|0) >= 350;
      if ($487) { label = 86; break; } else { label = 85; break; }
    case 85: 
      var $489=$1;
      var $490=$1;
      var $491=$n;
      var $492=((($491)*(11))&-1);
      var $493=(($490+($492<<2))|0);
      var $494=$n;
      var $495=((($494)+(1))|0);
      var $496=$1;
      var $497=$n;
      var $498=((($497)*(12))&-1);
      var $499=(($496+($498<<2))|0);
      var $500=(($499+4)|0);
      var $501=$n;
      var $502=((($501)+(1))|0);
      var $503=$6;
      var $504=$n;
      var $505=((($504)*(13))&-1);
      var $506=(($503+($505<<2))|0);
      var $507=(($506+20)|0);
      ___gmpn_toom44_mul($489, $493, $495, $500, $502, $507);
      label = 87; break;
    case 86: 
      var $509=$1;
      var $510=$1;
      var $511=$n;
      var $512=((($511)*(11))&-1);
      var $513=(($510+($512<<2))|0);
      var $514=$n;
      var $515=((($514)+(1))|0);
      var $516=$1;
      var $517=$n;
      var $518=((($517)*(12))&-1);
      var $519=(($516+($518<<2))|0);
      var $520=(($519+4)|0);
      var $521=$n;
      var $522=((($521)+(1))|0);
      var $523=$6;
      var $524=$n;
      var $525=((($524)*(13))&-1);
      var $526=(($523+($525<<2))|0);
      var $527=(($526+20)|0);
      ___gmpn_toom6h_mul($509, $513, $515, $520, $522, $527);
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $533=$n;
      var $534=((($533)+(1))|0);
      var $535=(($534)|0) >= 100;
      if ($535) { label = 93; break; } else { label = 92; break; }
    case 92: 
      var $537=$6;
      var $538=$n;
      var $539=((($538)*(3))&-1);
      var $540=(($537+($539<<2))|0);
      var $541=(($540+4)|0);
      var $542=$1;
      var $543=$n;
      var $544=((($543)*(13))&-1);
      var $545=(($542+($544<<2))|0);
      var $546=(($545+8)|0);
      var $547=$n;
      var $548=((($547)+(1))|0);
      var $549=$6;
      var $550=$n;
      var $551=((($550)*(12))&-1);
      var $552=(($549+($551<<2))|0);
      var $553=(($552+16)|0);
      var $554=$n;
      var $555=((($554)+(1))|0);
      var $556=$6;
      var $557=$n;
      var $558=((($557)*(13))&-1);
      var $559=(($556+($558<<2))|0);
      var $560=(($559+20)|0);
      ___gmpn_toom22_mul($541, $546, $548, $553, $555, $560);
      label = 100; break;
    case 93: 
      var $562=$n;
      var $563=((($562)+(1))|0);
      var $564=(($563)|0) >= 300;
      if ($564) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $566=$6;
      var $567=$n;
      var $568=((($567)*(3))&-1);
      var $569=(($566+($568<<2))|0);
      var $570=(($569+4)|0);
      var $571=$1;
      var $572=$n;
      var $573=((($572)*(13))&-1);
      var $574=(($571+($573<<2))|0);
      var $575=(($574+8)|0);
      var $576=$n;
      var $577=((($576)+(1))|0);
      var $578=$6;
      var $579=$n;
      var $580=((($579)*(12))&-1);
      var $581=(($578+($580<<2))|0);
      var $582=(($581+16)|0);
      var $583=$n;
      var $584=((($583)+(1))|0);
      var $585=$6;
      var $586=$n;
      var $587=((($586)*(13))&-1);
      var $588=(($585+($587<<2))|0);
      var $589=(($588+20)|0);
      ___gmpn_toom33_mul($570, $575, $577, $582, $584, $589);
      label = 99; break;
    case 95: 
      var $591=$n;
      var $592=((($591)+(1))|0);
      var $593=(($592)|0) >= 350;
      if ($593) { label = 97; break; } else { label = 96; break; }
    case 96: 
      var $595=$6;
      var $596=$n;
      var $597=((($596)*(3))&-1);
      var $598=(($595+($597<<2))|0);
      var $599=(($598+4)|0);
      var $600=$1;
      var $601=$n;
      var $602=((($601)*(13))&-1);
      var $603=(($600+($602<<2))|0);
      var $604=(($603+8)|0);
      var $605=$n;
      var $606=((($605)+(1))|0);
      var $607=$6;
      var $608=$n;
      var $609=((($608)*(12))&-1);
      var $610=(($607+($609<<2))|0);
      var $611=(($610+16)|0);
      var $612=$n;
      var $613=((($612)+(1))|0);
      var $614=$6;
      var $615=$n;
      var $616=((($615)*(13))&-1);
      var $617=(($614+($616<<2))|0);
      var $618=(($617+20)|0);
      ___gmpn_toom44_mul($599, $604, $606, $611, $613, $618);
      label = 98; break;
    case 97: 
      var $620=$6;
      var $621=$n;
      var $622=((($621)*(3))&-1);
      var $623=(($620+($622<<2))|0);
      var $624=(($623+4)|0);
      var $625=$1;
      var $626=$n;
      var $627=((($626)*(13))&-1);
      var $628=(($625+($627<<2))|0);
      var $629=(($628+8)|0);
      var $630=$n;
      var $631=((($630)+(1))|0);
      var $632=$6;
      var $633=$n;
      var $634=((($633)*(12))&-1);
      var $635=(($632+($634<<2))|0);
      var $636=(($635+16)|0);
      var $637=$n;
      var $638=((($637)+(1))|0);
      var $639=$6;
      var $640=$n;
      var $641=((($640)*(13))&-1);
      var $642=(($639+($641<<2))|0);
      var $643=(($642+20)|0);
      ___gmpn_toom6h_mul($624, $629, $631, $636, $638, $643);
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $648=$6;
      var $649=$n;
      var $650=((($649)*(3))&-1);
      var $651=(($648+($650<<2))|0);
      var $652=(($651+4)|0);
      var $653=$n;
      var $654=($653<<1);
      var $655=((($654)+(1))|0);
      var $656=$1;
      var $657=$sign;
      var $658=$n;
      var $659=$half;
      var $660=((($659)+(1))|0);
      var $661=($660<<1);
      var $662=$half;
      var $663=($662<<1);
      ___gmpn_toom_couple_handling($652, $655, $656, $657, $658, $661, $663);
      var $664=$1;
      var $665=$n;
      var $666=((($665)*(13))&-1);
      var $667=(($664+($666<<2))|0);
      var $668=(($667+8)|0);
      var $669=$1;
      var $670=$n;
      var $671=((($670)*(11))&-1);
      var $672=(($669+($671<<2))|0);
      var $673=$p;
      var $674=$2;
      var $675=$n;
      var $676=$s;
      var $677=$1;
      var $678=___gmpn_toom_eval_pm2($668, $672, $673, $674, $675, $676, $677);
      var $679=$6;
      var $680=$n;
      var $681=((($680)*(12))&-1);
      var $682=(($679+($681<<2))|0);
      var $683=(($682+16)|0);
      var $684=$1;
      var $685=$n;
      var $686=((($685)*(12))&-1);
      var $687=(($684+($686<<2))|0);
      var $688=(($687+4)|0);
      var $689=$q;
      var $690=$4;
      var $691=$n;
      var $692=$t;
      var $693=$1;
      var $694=___gmpn_toom_eval_pm2($683, $688, $689, $690, $691, $692, $693);
      var $695=$678 ^ $694;
      $sign=$695;
      label = 102; break;
    case 102: 
      var $697=$n;
      var $698=((($697)+(1))|0);
      var $699=(($698)|0) >= 100;
      if ($699) { label = 104; break; } else { label = 103; break; }
    case 103: 
      var $701=$1;
      var $702=$1;
      var $703=$n;
      var $704=((($703)*(11))&-1);
      var $705=(($702+($704<<2))|0);
      var $706=$n;
      var $707=((($706)+(1))|0);
      var $708=$1;
      var $709=$n;
      var $710=((($709)*(12))&-1);
      var $711=(($708+($710<<2))|0);
      var $712=(($711+4)|0);
      var $713=$n;
      var $714=((($713)+(1))|0);
      var $715=$6;
      var $716=$n;
      var $717=((($716)*(13))&-1);
      var $718=(($715+($717<<2))|0);
      var $719=(($718+20)|0);
      ___gmpn_toom22_mul($701, $705, $707, $712, $714, $719);
      label = 111; break;
    case 104: 
      var $721=$n;
      var $722=((($721)+(1))|0);
      var $723=(($722)|0) >= 300;
      if ($723) { label = 106; break; } else { label = 105; break; }
    case 105: 
      var $725=$1;
      var $726=$1;
      var $727=$n;
      var $728=((($727)*(11))&-1);
      var $729=(($726+($728<<2))|0);
      var $730=$n;
      var $731=((($730)+(1))|0);
      var $732=$1;
      var $733=$n;
      var $734=((($733)*(12))&-1);
      var $735=(($732+($734<<2))|0);
      var $736=(($735+4)|0);
      var $737=$n;
      var $738=((($737)+(1))|0);
      var $739=$6;
      var $740=$n;
      var $741=((($740)*(13))&-1);
      var $742=(($739+($741<<2))|0);
      var $743=(($742+20)|0);
      ___gmpn_toom33_mul($725, $729, $731, $736, $738, $743);
      label = 110; break;
    case 106: 
      var $745=$n;
      var $746=((($745)+(1))|0);
      var $747=(($746)|0) >= 350;
      if ($747) { label = 108; break; } else { label = 107; break; }
    case 107: 
      var $749=$1;
      var $750=$1;
      var $751=$n;
      var $752=((($751)*(11))&-1);
      var $753=(($750+($752<<2))|0);
      var $754=$n;
      var $755=((($754)+(1))|0);
      var $756=$1;
      var $757=$n;
      var $758=((($757)*(12))&-1);
      var $759=(($756+($758<<2))|0);
      var $760=(($759+4)|0);
      var $761=$n;
      var $762=((($761)+(1))|0);
      var $763=$6;
      var $764=$n;
      var $765=((($764)*(13))&-1);
      var $766=(($763+($765<<2))|0);
      var $767=(($766+20)|0);
      ___gmpn_toom44_mul($749, $753, $755, $760, $762, $767);
      label = 109; break;
    case 108: 
      var $769=$1;
      var $770=$1;
      var $771=$n;
      var $772=((($771)*(11))&-1);
      var $773=(($770+($772<<2))|0);
      var $774=$n;
      var $775=((($774)+(1))|0);
      var $776=$1;
      var $777=$n;
      var $778=((($777)*(12))&-1);
      var $779=(($776+($778<<2))|0);
      var $780=(($779+4)|0);
      var $781=$n;
      var $782=((($781)+(1))|0);
      var $783=$6;
      var $784=$n;
      var $785=((($784)*(13))&-1);
      var $786=(($783+($785<<2))|0);
      var $787=(($786+20)|0);
      ___gmpn_toom6h_mul($769, $773, $775, $780, $782, $787);
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      var $793=$n;
      var $794=((($793)+(1))|0);
      var $795=(($794)|0) >= 100;
      if ($795) { label = 115; break; } else { label = 114; break; }
    case 114: 
      var $797=$6;
      var $798=$n;
      var $799=((($798)*(6))&-1);
      var $800=(($797+($799<<2))|0);
      var $801=(($800+8)|0);
      var $802=$1;
      var $803=$n;
      var $804=((($803)*(13))&-1);
      var $805=(($802+($804<<2))|0);
      var $806=(($805+8)|0);
      var $807=$n;
      var $808=((($807)+(1))|0);
      var $809=$6;
      var $810=$n;
      var $811=((($810)*(12))&-1);
      var $812=(($809+($811<<2))|0);
      var $813=(($812+16)|0);
      var $814=$n;
      var $815=((($814)+(1))|0);
      var $816=$6;
      var $817=$n;
      var $818=((($817)*(13))&-1);
      var $819=(($816+($818<<2))|0);
      var $820=(($819+20)|0);
      ___gmpn_toom22_mul($801, $806, $808, $813, $815, $820);
      label = 122; break;
    case 115: 
      var $822=$n;
      var $823=((($822)+(1))|0);
      var $824=(($823)|0) >= 300;
      if ($824) { label = 117; break; } else { label = 116; break; }
    case 116: 
      var $826=$6;
      var $827=$n;
      var $828=((($827)*(6))&-1);
      var $829=(($826+($828<<2))|0);
      var $830=(($829+8)|0);
      var $831=$1;
      var $832=$n;
      var $833=((($832)*(13))&-1);
      var $834=(($831+($833<<2))|0);
      var $835=(($834+8)|0);
      var $836=$n;
      var $837=((($836)+(1))|0);
      var $838=$6;
      var $839=$n;
      var $840=((($839)*(12))&-1);
      var $841=(($838+($840<<2))|0);
      var $842=(($841+16)|0);
      var $843=$n;
      var $844=((($843)+(1))|0);
      var $845=$6;
      var $846=$n;
      var $847=((($846)*(13))&-1);
      var $848=(($845+($847<<2))|0);
      var $849=(($848+20)|0);
      ___gmpn_toom33_mul($830, $835, $837, $842, $844, $849);
      label = 121; break;
    case 117: 
      var $851=$n;
      var $852=((($851)+(1))|0);
      var $853=(($852)|0) >= 350;
      if ($853) { label = 119; break; } else { label = 118; break; }
    case 118: 
      var $855=$6;
      var $856=$n;
      var $857=((($856)*(6))&-1);
      var $858=(($855+($857<<2))|0);
      var $859=(($858+8)|0);
      var $860=$1;
      var $861=$n;
      var $862=((($861)*(13))&-1);
      var $863=(($860+($862<<2))|0);
      var $864=(($863+8)|0);
      var $865=$n;
      var $866=((($865)+(1))|0);
      var $867=$6;
      var $868=$n;
      var $869=((($868)*(12))&-1);
      var $870=(($867+($869<<2))|0);
      var $871=(($870+16)|0);
      var $872=$n;
      var $873=((($872)+(1))|0);
      var $874=$6;
      var $875=$n;
      var $876=((($875)*(13))&-1);
      var $877=(($874+($876<<2))|0);
      var $878=(($877+20)|0);
      ___gmpn_toom44_mul($859, $864, $866, $871, $873, $878);
      label = 120; break;
    case 119: 
      var $880=$6;
      var $881=$n;
      var $882=((($881)*(6))&-1);
      var $883=(($880+($882<<2))|0);
      var $884=(($883+8)|0);
      var $885=$1;
      var $886=$n;
      var $887=((($886)*(13))&-1);
      var $888=(($885+($887<<2))|0);
      var $889=(($888+8)|0);
      var $890=$n;
      var $891=((($890)+(1))|0);
      var $892=$6;
      var $893=$n;
      var $894=((($893)*(12))&-1);
      var $895=(($892+($894<<2))|0);
      var $896=(($895+16)|0);
      var $897=$n;
      var $898=((($897)+(1))|0);
      var $899=$6;
      var $900=$n;
      var $901=((($900)*(13))&-1);
      var $902=(($899+($901<<2))|0);
      var $903=(($902+20)|0);
      ___gmpn_toom6h_mul($884, $889, $891, $896, $898, $903);
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $908=$6;
      var $909=$n;
      var $910=((($909)*(6))&-1);
      var $911=(($908+($910<<2))|0);
      var $912=(($911+8)|0);
      var $913=$n;
      var $914=($913<<1);
      var $915=((($914)+(1))|0);
      var $916=$1;
      var $917=$sign;
      var $918=$n;
      ___gmpn_toom_couple_handling($912, $915, $916, $917, $918, 1, 2);
      var $919=$1;
      var $920=$n;
      var $921=((($920)*(13))&-1);
      var $922=(($919+($921<<2))|0);
      var $923=(($922+8)|0);
      var $924=$1;
      var $925=$n;
      var $926=((($925)*(11))&-1);
      var $927=(($924+($926<<2))|0);
      var $928=$p;
      var $929=$2;
      var $930=$n;
      var $931=$s;
      var $932=$1;
      var $933=___gmpn_toom_eval_pm2exp($923, $927, $928, $929, $930, $931, 3, $932);
      var $934=$6;
      var $935=$n;
      var $936=((($935)*(12))&-1);
      var $937=(($934+($936<<2))|0);
      var $938=(($937+16)|0);
      var $939=$1;
      var $940=$n;
      var $941=((($940)*(12))&-1);
      var $942=(($939+($941<<2))|0);
      var $943=(($942+4)|0);
      var $944=$q;
      var $945=$4;
      var $946=$n;
      var $947=$t;
      var $948=$1;
      var $949=___gmpn_toom_eval_pm2exp($938, $943, $944, $945, $946, $947, 3, $948);
      var $950=$933 ^ $949;
      $sign=$950;
      label = 124; break;
    case 124: 
      var $952=$n;
      var $953=((($952)+(1))|0);
      var $954=(($953)|0) >= 100;
      if ($954) { label = 126; break; } else { label = 125; break; }
    case 125: 
      var $956=$1;
      var $957=$1;
      var $958=$n;
      var $959=((($958)*(11))&-1);
      var $960=(($957+($959<<2))|0);
      var $961=$n;
      var $962=((($961)+(1))|0);
      var $963=$1;
      var $964=$n;
      var $965=((($964)*(12))&-1);
      var $966=(($963+($965<<2))|0);
      var $967=(($966+4)|0);
      var $968=$n;
      var $969=((($968)+(1))|0);
      var $970=$6;
      var $971=$n;
      var $972=((($971)*(13))&-1);
      var $973=(($970+($972<<2))|0);
      var $974=(($973+20)|0);
      ___gmpn_toom22_mul($956, $960, $962, $967, $969, $974);
      label = 133; break;
    case 126: 
      var $976=$n;
      var $977=((($976)+(1))|0);
      var $978=(($977)|0) >= 300;
      if ($978) { label = 128; break; } else { label = 127; break; }
    case 127: 
      var $980=$1;
      var $981=$1;
      var $982=$n;
      var $983=((($982)*(11))&-1);
      var $984=(($981+($983<<2))|0);
      var $985=$n;
      var $986=((($985)+(1))|0);
      var $987=$1;
      var $988=$n;
      var $989=((($988)*(12))&-1);
      var $990=(($987+($989<<2))|0);
      var $991=(($990+4)|0);
      var $992=$n;
      var $993=((($992)+(1))|0);
      var $994=$6;
      var $995=$n;
      var $996=((($995)*(13))&-1);
      var $997=(($994+($996<<2))|0);
      var $998=(($997+20)|0);
      ___gmpn_toom33_mul($980, $984, $986, $991, $993, $998);
      label = 132; break;
    case 128: 
      var $1000=$n;
      var $1001=((($1000)+(1))|0);
      var $1002=(($1001)|0) >= 350;
      if ($1002) { label = 130; break; } else { label = 129; break; }
    case 129: 
      var $1004=$1;
      var $1005=$1;
      var $1006=$n;
      var $1007=((($1006)*(11))&-1);
      var $1008=(($1005+($1007<<2))|0);
      var $1009=$n;
      var $1010=((($1009)+(1))|0);
      var $1011=$1;
      var $1012=$n;
      var $1013=((($1012)*(12))&-1);
      var $1014=(($1011+($1013<<2))|0);
      var $1015=(($1014+4)|0);
      var $1016=$n;
      var $1017=((($1016)+(1))|0);
      var $1018=$6;
      var $1019=$n;
      var $1020=((($1019)*(13))&-1);
      var $1021=(($1018+($1020<<2))|0);
      var $1022=(($1021+20)|0);
      ___gmpn_toom44_mul($1004, $1008, $1010, $1015, $1017, $1022);
      label = 131; break;
    case 130: 
      var $1024=$1;
      var $1025=$1;
      var $1026=$n;
      var $1027=((($1026)*(11))&-1);
      var $1028=(($1025+($1027<<2))|0);
      var $1029=$n;
      var $1030=((($1029)+(1))|0);
      var $1031=$1;
      var $1032=$n;
      var $1033=((($1032)*(12))&-1);
      var $1034=(($1031+($1033<<2))|0);
      var $1035=(($1034+4)|0);
      var $1036=$n;
      var $1037=((($1036)+(1))|0);
      var $1038=$6;
      var $1039=$n;
      var $1040=((($1039)*(13))&-1);
      var $1041=(($1038+($1040<<2))|0);
      var $1042=(($1041+20)|0);
      ___gmpn_toom6h_mul($1024, $1028, $1030, $1035, $1037, $1042);
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      var $1048=$n;
      var $1049=((($1048)+(1))|0);
      var $1050=(($1049)|0) >= 100;
      if ($1050) { label = 137; break; } else { label = 136; break; }
    case 136: 
      var $1052=$6;
      var $1053=$n;
      var $1054=((($1053)*(9))&-1);
      var $1055=(($1052+($1054<<2))|0);
      var $1056=(($1055+12)|0);
      var $1057=$1;
      var $1058=$n;
      var $1059=((($1058)*(13))&-1);
      var $1060=(($1057+($1059<<2))|0);
      var $1061=(($1060+8)|0);
      var $1062=$n;
      var $1063=((($1062)+(1))|0);
      var $1064=$6;
      var $1065=$n;
      var $1066=((($1065)*(12))&-1);
      var $1067=(($1064+($1066<<2))|0);
      var $1068=(($1067+16)|0);
      var $1069=$n;
      var $1070=((($1069)+(1))|0);
      var $1071=$6;
      var $1072=$n;
      var $1073=((($1072)*(13))&-1);
      var $1074=(($1071+($1073<<2))|0);
      var $1075=(($1074+20)|0);
      ___gmpn_toom22_mul($1056, $1061, $1063, $1068, $1070, $1075);
      label = 144; break;
    case 137: 
      var $1077=$n;
      var $1078=((($1077)+(1))|0);
      var $1079=(($1078)|0) >= 300;
      if ($1079) { label = 139; break; } else { label = 138; break; }
    case 138: 
      var $1081=$6;
      var $1082=$n;
      var $1083=((($1082)*(9))&-1);
      var $1084=(($1081+($1083<<2))|0);
      var $1085=(($1084+12)|0);
      var $1086=$1;
      var $1087=$n;
      var $1088=((($1087)*(13))&-1);
      var $1089=(($1086+($1088<<2))|0);
      var $1090=(($1089+8)|0);
      var $1091=$n;
      var $1092=((($1091)+(1))|0);
      var $1093=$6;
      var $1094=$n;
      var $1095=((($1094)*(12))&-1);
      var $1096=(($1093+($1095<<2))|0);
      var $1097=(($1096+16)|0);
      var $1098=$n;
      var $1099=((($1098)+(1))|0);
      var $1100=$6;
      var $1101=$n;
      var $1102=((($1101)*(13))&-1);
      var $1103=(($1100+($1102<<2))|0);
      var $1104=(($1103+20)|0);
      ___gmpn_toom33_mul($1085, $1090, $1092, $1097, $1099, $1104);
      label = 143; break;
    case 139: 
      var $1106=$n;
      var $1107=((($1106)+(1))|0);
      var $1108=(($1107)|0) >= 350;
      if ($1108) { label = 141; break; } else { label = 140; break; }
    case 140: 
      var $1110=$6;
      var $1111=$n;
      var $1112=((($1111)*(9))&-1);
      var $1113=(($1110+($1112<<2))|0);
      var $1114=(($1113+12)|0);
      var $1115=$1;
      var $1116=$n;
      var $1117=((($1116)*(13))&-1);
      var $1118=(($1115+($1117<<2))|0);
      var $1119=(($1118+8)|0);
      var $1120=$n;
      var $1121=((($1120)+(1))|0);
      var $1122=$6;
      var $1123=$n;
      var $1124=((($1123)*(12))&-1);
      var $1125=(($1122+($1124<<2))|0);
      var $1126=(($1125+16)|0);
      var $1127=$n;
      var $1128=((($1127)+(1))|0);
      var $1129=$6;
      var $1130=$n;
      var $1131=((($1130)*(13))&-1);
      var $1132=(($1129+($1131<<2))|0);
      var $1133=(($1132+20)|0);
      ___gmpn_toom44_mul($1114, $1119, $1121, $1126, $1128, $1133);
      label = 142; break;
    case 141: 
      var $1135=$6;
      var $1136=$n;
      var $1137=((($1136)*(9))&-1);
      var $1138=(($1135+($1137<<2))|0);
      var $1139=(($1138+12)|0);
      var $1140=$1;
      var $1141=$n;
      var $1142=((($1141)*(13))&-1);
      var $1143=(($1140+($1142<<2))|0);
      var $1144=(($1143+8)|0);
      var $1145=$n;
      var $1146=((($1145)+(1))|0);
      var $1147=$6;
      var $1148=$n;
      var $1149=((($1148)*(12))&-1);
      var $1150=(($1147+($1149<<2))|0);
      var $1151=(($1150+16)|0);
      var $1152=$n;
      var $1153=((($1152)+(1))|0);
      var $1154=$6;
      var $1155=$n;
      var $1156=((($1155)*(13))&-1);
      var $1157=(($1154+($1156<<2))|0);
      var $1158=(($1157+20)|0);
      ___gmpn_toom6h_mul($1139, $1144, $1146, $1151, $1153, $1158);
      label = 142; break;
    case 142: 
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      var $1163=$6;
      var $1164=$n;
      var $1165=((($1164)*(9))&-1);
      var $1166=(($1163+($1165<<2))|0);
      var $1167=(($1166+12)|0);
      var $1168=$n;
      var $1169=($1168<<1);
      var $1170=((($1169)+(1))|0);
      var $1171=((($1170)+(1))|0);
      var $1172=$1;
      var $1173=$sign;
      var $1174=$n;
      ___gmpn_toom_couple_handling($1167, $1171, $1172, $1173, $1174, 3, 6);
      var $1175=$1;
      var $1176=$n;
      var $1177=((($1176)*(13))&-1);
      var $1178=(($1175+($1177<<2))|0);
      var $1179=(($1178+8)|0);
      var $1180=$1;
      var $1181=$n;
      var $1182=((($1181)*(11))&-1);
      var $1183=(($1180+($1182<<2))|0);
      var $1184=$p;
      var $1185=$2;
      var $1186=$n;
      var $1187=$s;
      var $1188=$1;
      var $1189=___gmpn_toom_eval_pm2rexp($1179, $1183, $1184, $1185, $1186, $1187, 1, $1188);
      var $1190=$6;
      var $1191=$n;
      var $1192=((($1191)*(12))&-1);
      var $1193=(($1190+($1192<<2))|0);
      var $1194=(($1193+16)|0);
      var $1195=$1;
      var $1196=$n;
      var $1197=((($1196)*(12))&-1);
      var $1198=(($1195+($1197<<2))|0);
      var $1199=(($1198+4)|0);
      var $1200=$q;
      var $1201=$4;
      var $1202=$n;
      var $1203=$t;
      var $1204=$1;
      var $1205=___gmpn_toom_eval_pm2rexp($1194, $1199, $1200, $1201, $1202, $1203, 1, $1204);
      var $1206=$1189 ^ $1205;
      $sign=$1206;
      label = 146; break;
    case 146: 
      var $1208=$n;
      var $1209=((($1208)+(1))|0);
      var $1210=(($1209)|0) >= 100;
      if ($1210) { label = 148; break; } else { label = 147; break; }
    case 147: 
      var $1212=$1;
      var $1213=$1;
      var $1214=$n;
      var $1215=((($1214)*(11))&-1);
      var $1216=(($1213+($1215<<2))|0);
      var $1217=$n;
      var $1218=((($1217)+(1))|0);
      var $1219=$1;
      var $1220=$n;
      var $1221=((($1220)*(12))&-1);
      var $1222=(($1219+($1221<<2))|0);
      var $1223=(($1222+4)|0);
      var $1224=$n;
      var $1225=((($1224)+(1))|0);
      var $1226=$6;
      var $1227=$n;
      var $1228=((($1227)*(13))&-1);
      var $1229=(($1226+($1228<<2))|0);
      var $1230=(($1229+20)|0);
      ___gmpn_toom22_mul($1212, $1216, $1218, $1223, $1225, $1230);
      label = 155; break;
    case 148: 
      var $1232=$n;
      var $1233=((($1232)+(1))|0);
      var $1234=(($1233)|0) >= 300;
      if ($1234) { label = 150; break; } else { label = 149; break; }
    case 149: 
      var $1236=$1;
      var $1237=$1;
      var $1238=$n;
      var $1239=((($1238)*(11))&-1);
      var $1240=(($1237+($1239<<2))|0);
      var $1241=$n;
      var $1242=((($1241)+(1))|0);
      var $1243=$1;
      var $1244=$n;
      var $1245=((($1244)*(12))&-1);
      var $1246=(($1243+($1245<<2))|0);
      var $1247=(($1246+4)|0);
      var $1248=$n;
      var $1249=((($1248)+(1))|0);
      var $1250=$6;
      var $1251=$n;
      var $1252=((($1251)*(13))&-1);
      var $1253=(($1250+($1252<<2))|0);
      var $1254=(($1253+20)|0);
      ___gmpn_toom33_mul($1236, $1240, $1242, $1247, $1249, $1254);
      label = 154; break;
    case 150: 
      var $1256=$n;
      var $1257=((($1256)+(1))|0);
      var $1258=(($1257)|0) >= 350;
      if ($1258) { label = 152; break; } else { label = 151; break; }
    case 151: 
      var $1260=$1;
      var $1261=$1;
      var $1262=$n;
      var $1263=((($1262)*(11))&-1);
      var $1264=(($1261+($1263<<2))|0);
      var $1265=$n;
      var $1266=((($1265)+(1))|0);
      var $1267=$1;
      var $1268=$n;
      var $1269=((($1268)*(12))&-1);
      var $1270=(($1267+($1269<<2))|0);
      var $1271=(($1270+4)|0);
      var $1272=$n;
      var $1273=((($1272)+(1))|0);
      var $1274=$6;
      var $1275=$n;
      var $1276=((($1275)*(13))&-1);
      var $1277=(($1274+($1276<<2))|0);
      var $1278=(($1277+20)|0);
      ___gmpn_toom44_mul($1260, $1264, $1266, $1271, $1273, $1278);
      label = 153; break;
    case 152: 
      var $1280=$1;
      var $1281=$1;
      var $1282=$n;
      var $1283=((($1282)*(11))&-1);
      var $1284=(($1281+($1283<<2))|0);
      var $1285=$n;
      var $1286=((($1285)+(1))|0);
      var $1287=$1;
      var $1288=$n;
      var $1289=((($1288)*(12))&-1);
      var $1290=(($1287+($1289<<2))|0);
      var $1291=(($1290+4)|0);
      var $1292=$n;
      var $1293=((($1292)+(1))|0);
      var $1294=$6;
      var $1295=$n;
      var $1296=((($1295)*(13))&-1);
      var $1297=(($1294+($1296<<2))|0);
      var $1298=(($1297+20)|0);
      ___gmpn_toom6h_mul($1280, $1284, $1286, $1291, $1293, $1298);
      label = 153; break;
    case 153: 
      label = 154; break;
    case 154: 
      label = 155; break;
    case 155: 
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      var $1304=$n;
      var $1305=((($1304)+(1))|0);
      var $1306=(($1305)|0) >= 100;
      if ($1306) { label = 159; break; } else { label = 158; break; }
    case 158: 
      var $1308=$1;
      var $1309=$n;
      var $1310=((($1309)*(3))&-1);
      var $1311=(($1308+($1310<<2))|0);
      var $1312=$1;
      var $1313=$n;
      var $1314=((($1313)*(13))&-1);
      var $1315=(($1312+($1314<<2))|0);
      var $1316=(($1315+8)|0);
      var $1317=$n;
      var $1318=((($1317)+(1))|0);
      var $1319=$6;
      var $1320=$n;
      var $1321=((($1320)*(12))&-1);
      var $1322=(($1319+($1321<<2))|0);
      var $1323=(($1322+16)|0);
      var $1324=$n;
      var $1325=((($1324)+(1))|0);
      var $1326=$6;
      var $1327=$n;
      var $1328=((($1327)*(13))&-1);
      var $1329=(($1326+($1328<<2))|0);
      var $1330=(($1329+20)|0);
      ___gmpn_toom22_mul($1311, $1316, $1318, $1323, $1325, $1330);
      label = 166; break;
    case 159: 
      var $1332=$n;
      var $1333=((($1332)+(1))|0);
      var $1334=(($1333)|0) >= 300;
      if ($1334) { label = 161; break; } else { label = 160; break; }
    case 160: 
      var $1336=$1;
      var $1337=$n;
      var $1338=((($1337)*(3))&-1);
      var $1339=(($1336+($1338<<2))|0);
      var $1340=$1;
      var $1341=$n;
      var $1342=((($1341)*(13))&-1);
      var $1343=(($1340+($1342<<2))|0);
      var $1344=(($1343+8)|0);
      var $1345=$n;
      var $1346=((($1345)+(1))|0);
      var $1347=$6;
      var $1348=$n;
      var $1349=((($1348)*(12))&-1);
      var $1350=(($1347+($1349<<2))|0);
      var $1351=(($1350+16)|0);
      var $1352=$n;
      var $1353=((($1352)+(1))|0);
      var $1354=$6;
      var $1355=$n;
      var $1356=((($1355)*(13))&-1);
      var $1357=(($1354+($1356<<2))|0);
      var $1358=(($1357+20)|0);
      ___gmpn_toom33_mul($1339, $1344, $1346, $1351, $1353, $1358);
      label = 165; break;
    case 161: 
      var $1360=$n;
      var $1361=((($1360)+(1))|0);
      var $1362=(($1361)|0) >= 350;
      if ($1362) { label = 163; break; } else { label = 162; break; }
    case 162: 
      var $1364=$1;
      var $1365=$n;
      var $1366=((($1365)*(3))&-1);
      var $1367=(($1364+($1366<<2))|0);
      var $1368=$1;
      var $1369=$n;
      var $1370=((($1369)*(13))&-1);
      var $1371=(($1368+($1370<<2))|0);
      var $1372=(($1371+8)|0);
      var $1373=$n;
      var $1374=((($1373)+(1))|0);
      var $1375=$6;
      var $1376=$n;
      var $1377=((($1376)*(12))&-1);
      var $1378=(($1375+($1377<<2))|0);
      var $1379=(($1378+16)|0);
      var $1380=$n;
      var $1381=((($1380)+(1))|0);
      var $1382=$6;
      var $1383=$n;
      var $1384=((($1383)*(13))&-1);
      var $1385=(($1382+($1384<<2))|0);
      var $1386=(($1385+20)|0);
      ___gmpn_toom44_mul($1367, $1372, $1374, $1379, $1381, $1386);
      label = 164; break;
    case 163: 
      var $1388=$1;
      var $1389=$n;
      var $1390=((($1389)*(3))&-1);
      var $1391=(($1388+($1390<<2))|0);
      var $1392=$1;
      var $1393=$n;
      var $1394=((($1393)*(13))&-1);
      var $1395=(($1392+($1394<<2))|0);
      var $1396=(($1395+8)|0);
      var $1397=$n;
      var $1398=((($1397)+(1))|0);
      var $1399=$6;
      var $1400=$n;
      var $1401=((($1400)*(12))&-1);
      var $1402=(($1399+($1401<<2))|0);
      var $1403=(($1402+16)|0);
      var $1404=$n;
      var $1405=((($1404)+(1))|0);
      var $1406=$6;
      var $1407=$n;
      var $1408=((($1407)*(13))&-1);
      var $1409=(($1406+($1408<<2))|0);
      var $1410=(($1409+20)|0);
      ___gmpn_toom6h_mul($1391, $1396, $1398, $1403, $1405, $1410);
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      var $1415=$1;
      var $1416=$n;
      var $1417=((($1416)*(3))&-1);
      var $1418=(($1415+($1417<<2))|0);
      var $1419=$n;
      var $1420=($1419<<1);
      var $1421=((($1420)+(1))|0);
      var $1422=$1;
      var $1423=$sign;
      var $1424=$n;
      var $1425=$half;
      var $1426=((($1425)+(1))|0);
      var $1427=$half;
      ___gmpn_toom_couple_handling($1418, $1421, $1422, $1423, $1424, $1426, $1427);
      var $1428=$1;
      var $1429=$n;
      var $1430=((($1429)*(13))&-1);
      var $1431=(($1428+($1430<<2))|0);
      var $1432=(($1431+8)|0);
      var $1433=$1;
      var $1434=$n;
      var $1435=((($1434)*(11))&-1);
      var $1436=(($1433+($1435<<2))|0);
      var $1437=$p;
      var $1438=$2;
      var $1439=$n;
      var $1440=$s;
      var $1441=$1;
      var $1442=___gmpn_toom_eval_pm1($1432, $1436, $1437, $1438, $1439, $1440, $1441);
      $sign=$1442;
      var $1443=$q;
      var $1444=(($1443)|0)==3;
      if ($1444) { label = 168; break; } else { label = 169; break; }
    case 168: 
      var $1446=$6;
      var $1447=$n;
      var $1448=((($1447)*(12))&-1);
      var $1449=(($1446+($1448<<2))|0);
      var $1450=(($1449+16)|0);
      var $1451=$1;
      var $1452=$n;
      var $1453=((($1452)*(12))&-1);
      var $1454=(($1451+($1453<<2))|0);
      var $1455=(($1454+4)|0);
      var $1456=$4;
      var $1457=$n;
      var $1458=$t;
      var $1459=$1;
      var $1460=___gmpn_toom_eval_dgr3_pm1($1450, $1455, $1456, $1457, $1458, $1459);
      var $1461=$sign;
      var $1462=$1461 ^ $1460;
      $sign=$1462;
      label = 170; break;
    case 169: 
      var $1464=$6;
      var $1465=$n;
      var $1466=((($1465)*(12))&-1);
      var $1467=(($1464+($1466<<2))|0);
      var $1468=(($1467+16)|0);
      var $1469=$1;
      var $1470=$n;
      var $1471=((($1470)*(12))&-1);
      var $1472=(($1469+($1471<<2))|0);
      var $1473=(($1472+4)|0);
      var $1474=$q;
      var $1475=$4;
      var $1476=$n;
      var $1477=$t;
      var $1478=$1;
      var $1479=___gmpn_toom_eval_pm1($1468, $1473, $1474, $1475, $1476, $1477, $1478);
      var $1480=$sign;
      var $1481=$1480 ^ $1479;
      $sign=$1481;
      label = 170; break;
    case 170: 
      label = 171; break;
    case 171: 
      var $1484=$n;
      var $1485=((($1484)+(1))|0);
      var $1486=(($1485)|0) >= 100;
      if ($1486) { label = 173; break; } else { label = 172; break; }
    case 172: 
      var $1488=$1;
      var $1489=$1;
      var $1490=$n;
      var $1491=((($1490)*(11))&-1);
      var $1492=(($1489+($1491<<2))|0);
      var $1493=$n;
      var $1494=((($1493)+(1))|0);
      var $1495=$1;
      var $1496=$n;
      var $1497=((($1496)*(12))&-1);
      var $1498=(($1495+($1497<<2))|0);
      var $1499=(($1498+4)|0);
      var $1500=$n;
      var $1501=((($1500)+(1))|0);
      var $1502=$6;
      var $1503=$n;
      var $1504=((($1503)*(13))&-1);
      var $1505=(($1502+($1504<<2))|0);
      var $1506=(($1505+20)|0);
      ___gmpn_toom22_mul($1488, $1492, $1494, $1499, $1501, $1506);
      label = 180; break;
    case 173: 
      var $1508=$n;
      var $1509=((($1508)+(1))|0);
      var $1510=(($1509)|0) >= 300;
      if ($1510) { label = 175; break; } else { label = 174; break; }
    case 174: 
      var $1512=$1;
      var $1513=$1;
      var $1514=$n;
      var $1515=((($1514)*(11))&-1);
      var $1516=(($1513+($1515<<2))|0);
      var $1517=$n;
      var $1518=((($1517)+(1))|0);
      var $1519=$1;
      var $1520=$n;
      var $1521=((($1520)*(12))&-1);
      var $1522=(($1519+($1521<<2))|0);
      var $1523=(($1522+4)|0);
      var $1524=$n;
      var $1525=((($1524)+(1))|0);
      var $1526=$6;
      var $1527=$n;
      var $1528=((($1527)*(13))&-1);
      var $1529=(($1526+($1528<<2))|0);
      var $1530=(($1529+20)|0);
      ___gmpn_toom33_mul($1512, $1516, $1518, $1523, $1525, $1530);
      label = 179; break;
    case 175: 
      var $1532=$n;
      var $1533=((($1532)+(1))|0);
      var $1534=(($1533)|0) >= 350;
      if ($1534) { label = 177; break; } else { label = 176; break; }
    case 176: 
      var $1536=$1;
      var $1537=$1;
      var $1538=$n;
      var $1539=((($1538)*(11))&-1);
      var $1540=(($1537+($1539<<2))|0);
      var $1541=$n;
      var $1542=((($1541)+(1))|0);
      var $1543=$1;
      var $1544=$n;
      var $1545=((($1544)*(12))&-1);
      var $1546=(($1543+($1545<<2))|0);
      var $1547=(($1546+4)|0);
      var $1548=$n;
      var $1549=((($1548)+(1))|0);
      var $1550=$6;
      var $1551=$n;
      var $1552=((($1551)*(13))&-1);
      var $1553=(($1550+($1552<<2))|0);
      var $1554=(($1553+20)|0);
      ___gmpn_toom44_mul($1536, $1540, $1542, $1547, $1549, $1554);
      label = 178; break;
    case 177: 
      var $1556=$1;
      var $1557=$1;
      var $1558=$n;
      var $1559=((($1558)*(11))&-1);
      var $1560=(($1557+($1559<<2))|0);
      var $1561=$n;
      var $1562=((($1561)+(1))|0);
      var $1563=$1;
      var $1564=$n;
      var $1565=((($1564)*(12))&-1);
      var $1566=(($1563+($1565<<2))|0);
      var $1567=(($1566+4)|0);
      var $1568=$n;
      var $1569=((($1568)+(1))|0);
      var $1570=$6;
      var $1571=$n;
      var $1572=((($1571)*(13))&-1);
      var $1573=(($1570+($1572<<2))|0);
      var $1574=(($1573+20)|0);
      ___gmpn_toom6h_mul($1556, $1560, $1562, $1567, $1569, $1574);
      label = 178; break;
    case 178: 
      label = 179; break;
    case 179: 
      label = 180; break;
    case 180: 
      label = 181; break;
    case 181: 
      label = 182; break;
    case 182: 
      var $1580=$n;
      var $1581=((($1580)+(1))|0);
      var $1582=(($1581)|0) >= 100;
      if ($1582) { label = 184; break; } else { label = 183; break; }
    case 183: 
      var $1584=$1;
      var $1585=$n;
      var $1586=((($1585)*(7))&-1);
      var $1587=(($1584+($1586<<2))|0);
      var $1588=$1;
      var $1589=$n;
      var $1590=((($1589)*(13))&-1);
      var $1591=(($1588+($1590<<2))|0);
      var $1592=(($1591+8)|0);
      var $1593=$n;
      var $1594=((($1593)+(1))|0);
      var $1595=$6;
      var $1596=$n;
      var $1597=((($1596)*(12))&-1);
      var $1598=(($1595+($1597<<2))|0);
      var $1599=(($1598+16)|0);
      var $1600=$n;
      var $1601=((($1600)+(1))|0);
      var $1602=$6;
      var $1603=$n;
      var $1604=((($1603)*(13))&-1);
      var $1605=(($1602+($1604<<2))|0);
      var $1606=(($1605+20)|0);
      ___gmpn_toom22_mul($1587, $1592, $1594, $1599, $1601, $1606);
      label = 191; break;
    case 184: 
      var $1608=$n;
      var $1609=((($1608)+(1))|0);
      var $1610=(($1609)|0) >= 300;
      if ($1610) { label = 186; break; } else { label = 185; break; }
    case 185: 
      var $1612=$1;
      var $1613=$n;
      var $1614=((($1613)*(7))&-1);
      var $1615=(($1612+($1614<<2))|0);
      var $1616=$1;
      var $1617=$n;
      var $1618=((($1617)*(13))&-1);
      var $1619=(($1616+($1618<<2))|0);
      var $1620=(($1619+8)|0);
      var $1621=$n;
      var $1622=((($1621)+(1))|0);
      var $1623=$6;
      var $1624=$n;
      var $1625=((($1624)*(12))&-1);
      var $1626=(($1623+($1625<<2))|0);
      var $1627=(($1626+16)|0);
      var $1628=$n;
      var $1629=((($1628)+(1))|0);
      var $1630=$6;
      var $1631=$n;
      var $1632=((($1631)*(13))&-1);
      var $1633=(($1630+($1632<<2))|0);
      var $1634=(($1633+20)|0);
      ___gmpn_toom33_mul($1615, $1620, $1622, $1627, $1629, $1634);
      label = 190; break;
    case 186: 
      var $1636=$n;
      var $1637=((($1636)+(1))|0);
      var $1638=(($1637)|0) >= 350;
      if ($1638) { label = 188; break; } else { label = 187; break; }
    case 187: 
      var $1640=$1;
      var $1641=$n;
      var $1642=((($1641)*(7))&-1);
      var $1643=(($1640+($1642<<2))|0);
      var $1644=$1;
      var $1645=$n;
      var $1646=((($1645)*(13))&-1);
      var $1647=(($1644+($1646<<2))|0);
      var $1648=(($1647+8)|0);
      var $1649=$n;
      var $1650=((($1649)+(1))|0);
      var $1651=$6;
      var $1652=$n;
      var $1653=((($1652)*(12))&-1);
      var $1654=(($1651+($1653<<2))|0);
      var $1655=(($1654+16)|0);
      var $1656=$n;
      var $1657=((($1656)+(1))|0);
      var $1658=$6;
      var $1659=$n;
      var $1660=((($1659)*(13))&-1);
      var $1661=(($1658+($1660<<2))|0);
      var $1662=(($1661+20)|0);
      ___gmpn_toom44_mul($1643, $1648, $1650, $1655, $1657, $1662);
      label = 189; break;
    case 188: 
      var $1664=$1;
      var $1665=$n;
      var $1666=((($1665)*(7))&-1);
      var $1667=(($1664+($1666<<2))|0);
      var $1668=$1;
      var $1669=$n;
      var $1670=((($1669)*(13))&-1);
      var $1671=(($1668+($1670<<2))|0);
      var $1672=(($1671+8)|0);
      var $1673=$n;
      var $1674=((($1673)+(1))|0);
      var $1675=$6;
      var $1676=$n;
      var $1677=((($1676)*(12))&-1);
      var $1678=(($1675+($1677<<2))|0);
      var $1679=(($1678+16)|0);
      var $1680=$n;
      var $1681=((($1680)+(1))|0);
      var $1682=$6;
      var $1683=$n;
      var $1684=((($1683)*(13))&-1);
      var $1685=(($1682+($1684<<2))|0);
      var $1686=(($1685+20)|0);
      ___gmpn_toom6h_mul($1667, $1672, $1674, $1679, $1681, $1686);
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      var $1691=$1;
      var $1692=$n;
      var $1693=((($1692)*(7))&-1);
      var $1694=(($1691+($1693<<2))|0);
      var $1695=$n;
      var $1696=($1695<<1);
      var $1697=((($1696)+(1))|0);
      var $1698=$1;
      var $1699=$sign;
      var $1700=$n;
      ___gmpn_toom_couple_handling($1694, $1697, $1698, $1699, $1700, 0, 0);
      var $1701=$1;
      var $1702=$n;
      var $1703=((($1702)*(13))&-1);
      var $1704=(($1701+($1703<<2))|0);
      var $1705=(($1704+8)|0);
      var $1706=$1;
      var $1707=$n;
      var $1708=((($1707)*(11))&-1);
      var $1709=(($1706+($1708<<2))|0);
      var $1710=$p;
      var $1711=$2;
      var $1712=$n;
      var $1713=$s;
      var $1714=$1;
      var $1715=___gmpn_toom_eval_pm2exp($1705, $1709, $1710, $1711, $1712, $1713, 2, $1714);
      var $1716=$6;
      var $1717=$n;
      var $1718=((($1717)*(12))&-1);
      var $1719=(($1716+($1718<<2))|0);
      var $1720=(($1719+16)|0);
      var $1721=$1;
      var $1722=$n;
      var $1723=((($1722)*(12))&-1);
      var $1724=(($1721+($1723<<2))|0);
      var $1725=(($1724+4)|0);
      var $1726=$q;
      var $1727=$4;
      var $1728=$n;
      var $1729=$t;
      var $1730=$1;
      var $1731=___gmpn_toom_eval_pm2exp($1720, $1725, $1726, $1727, $1728, $1729, 2, $1730);
      var $1732=$1715 ^ $1731;
      $sign=$1732;
      label = 193; break;
    case 193: 
      var $1734=$n;
      var $1735=((($1734)+(1))|0);
      var $1736=(($1735)|0) >= 100;
      if ($1736) { label = 195; break; } else { label = 194; break; }
    case 194: 
      var $1738=$1;
      var $1739=$1;
      var $1740=$n;
      var $1741=((($1740)*(11))&-1);
      var $1742=(($1739+($1741<<2))|0);
      var $1743=$n;
      var $1744=((($1743)+(1))|0);
      var $1745=$1;
      var $1746=$n;
      var $1747=((($1746)*(12))&-1);
      var $1748=(($1745+($1747<<2))|0);
      var $1749=(($1748+4)|0);
      var $1750=$n;
      var $1751=((($1750)+(1))|0);
      var $1752=$6;
      var $1753=$n;
      var $1754=((($1753)*(13))&-1);
      var $1755=(($1752+($1754<<2))|0);
      var $1756=(($1755+20)|0);
      ___gmpn_toom22_mul($1738, $1742, $1744, $1749, $1751, $1756);
      label = 202; break;
    case 195: 
      var $1758=$n;
      var $1759=((($1758)+(1))|0);
      var $1760=(($1759)|0) >= 300;
      if ($1760) { label = 197; break; } else { label = 196; break; }
    case 196: 
      var $1762=$1;
      var $1763=$1;
      var $1764=$n;
      var $1765=((($1764)*(11))&-1);
      var $1766=(($1763+($1765<<2))|0);
      var $1767=$n;
      var $1768=((($1767)+(1))|0);
      var $1769=$1;
      var $1770=$n;
      var $1771=((($1770)*(12))&-1);
      var $1772=(($1769+($1771<<2))|0);
      var $1773=(($1772+4)|0);
      var $1774=$n;
      var $1775=((($1774)+(1))|0);
      var $1776=$6;
      var $1777=$n;
      var $1778=((($1777)*(13))&-1);
      var $1779=(($1776+($1778<<2))|0);
      var $1780=(($1779+20)|0);
      ___gmpn_toom33_mul($1762, $1766, $1768, $1773, $1775, $1780);
      label = 201; break;
    case 197: 
      var $1782=$n;
      var $1783=((($1782)+(1))|0);
      var $1784=(($1783)|0) >= 350;
      if ($1784) { label = 199; break; } else { label = 198; break; }
    case 198: 
      var $1786=$1;
      var $1787=$1;
      var $1788=$n;
      var $1789=((($1788)*(11))&-1);
      var $1790=(($1787+($1789<<2))|0);
      var $1791=$n;
      var $1792=((($1791)+(1))|0);
      var $1793=$1;
      var $1794=$n;
      var $1795=((($1794)*(12))&-1);
      var $1796=(($1793+($1795<<2))|0);
      var $1797=(($1796+4)|0);
      var $1798=$n;
      var $1799=((($1798)+(1))|0);
      var $1800=$6;
      var $1801=$n;
      var $1802=((($1801)*(13))&-1);
      var $1803=(($1800+($1802<<2))|0);
      var $1804=(($1803+20)|0);
      ___gmpn_toom44_mul($1786, $1790, $1792, $1797, $1799, $1804);
      label = 200; break;
    case 199: 
      var $1806=$1;
      var $1807=$1;
      var $1808=$n;
      var $1809=((($1808)*(11))&-1);
      var $1810=(($1807+($1809<<2))|0);
      var $1811=$n;
      var $1812=((($1811)+(1))|0);
      var $1813=$1;
      var $1814=$n;
      var $1815=((($1814)*(12))&-1);
      var $1816=(($1813+($1815<<2))|0);
      var $1817=(($1816+4)|0);
      var $1818=$n;
      var $1819=((($1818)+(1))|0);
      var $1820=$6;
      var $1821=$n;
      var $1822=((($1821)*(13))&-1);
      var $1823=(($1820+($1822<<2))|0);
      var $1824=(($1823+20)|0);
      ___gmpn_toom6h_mul($1806, $1810, $1812, $1817, $1819, $1824);
      label = 200; break;
    case 200: 
      label = 201; break;
    case 201: 
      label = 202; break;
    case 202: 
      label = 203; break;
    case 203: 
      label = 204; break;
    case 204: 
      var $1830=$n;
      var $1831=((($1830)+(1))|0);
      var $1832=(($1831)|0) >= 100;
      if ($1832) { label = 206; break; } else { label = 205; break; }
    case 205: 
      var $1834=$1;
      var $1835=$n;
      var $1836=((($1835)*(11))&-1);
      var $1837=(($1834+($1836<<2))|0);
      var $1838=$1;
      var $1839=$n;
      var $1840=((($1839)*(13))&-1);
      var $1841=(($1838+($1840<<2))|0);
      var $1842=(($1841+8)|0);
      var $1843=$n;
      var $1844=((($1843)+(1))|0);
      var $1845=$6;
      var $1846=$n;
      var $1847=((($1846)*(12))&-1);
      var $1848=(($1845+($1847<<2))|0);
      var $1849=(($1848+16)|0);
      var $1850=$n;
      var $1851=((($1850)+(1))|0);
      var $1852=$6;
      var $1853=$n;
      var $1854=((($1853)*(13))&-1);
      var $1855=(($1852+($1854<<2))|0);
      var $1856=(($1855+20)|0);
      ___gmpn_toom22_mul($1837, $1842, $1844, $1849, $1851, $1856);
      label = 213; break;
    case 206: 
      var $1858=$n;
      var $1859=((($1858)+(1))|0);
      var $1860=(($1859)|0) >= 300;
      if ($1860) { label = 208; break; } else { label = 207; break; }
    case 207: 
      var $1862=$1;
      var $1863=$n;
      var $1864=((($1863)*(11))&-1);
      var $1865=(($1862+($1864<<2))|0);
      var $1866=$1;
      var $1867=$n;
      var $1868=((($1867)*(13))&-1);
      var $1869=(($1866+($1868<<2))|0);
      var $1870=(($1869+8)|0);
      var $1871=$n;
      var $1872=((($1871)+(1))|0);
      var $1873=$6;
      var $1874=$n;
      var $1875=((($1874)*(12))&-1);
      var $1876=(($1873+($1875<<2))|0);
      var $1877=(($1876+16)|0);
      var $1878=$n;
      var $1879=((($1878)+(1))|0);
      var $1880=$6;
      var $1881=$n;
      var $1882=((($1881)*(13))&-1);
      var $1883=(($1880+($1882<<2))|0);
      var $1884=(($1883+20)|0);
      ___gmpn_toom33_mul($1865, $1870, $1872, $1877, $1879, $1884);
      label = 212; break;
    case 208: 
      var $1886=$n;
      var $1887=((($1886)+(1))|0);
      var $1888=(($1887)|0) >= 350;
      if ($1888) { label = 210; break; } else { label = 209; break; }
    case 209: 
      var $1890=$1;
      var $1891=$n;
      var $1892=((($1891)*(11))&-1);
      var $1893=(($1890+($1892<<2))|0);
      var $1894=$1;
      var $1895=$n;
      var $1896=((($1895)*(13))&-1);
      var $1897=(($1894+($1896<<2))|0);
      var $1898=(($1897+8)|0);
      var $1899=$n;
      var $1900=((($1899)+(1))|0);
      var $1901=$6;
      var $1902=$n;
      var $1903=((($1902)*(12))&-1);
      var $1904=(($1901+($1903<<2))|0);
      var $1905=(($1904+16)|0);
      var $1906=$n;
      var $1907=((($1906)+(1))|0);
      var $1908=$6;
      var $1909=$n;
      var $1910=((($1909)*(13))&-1);
      var $1911=(($1908+($1910<<2))|0);
      var $1912=(($1911+20)|0);
      ___gmpn_toom44_mul($1893, $1898, $1900, $1905, $1907, $1912);
      label = 211; break;
    case 210: 
      var $1914=$1;
      var $1915=$n;
      var $1916=((($1915)*(11))&-1);
      var $1917=(($1914+($1916<<2))|0);
      var $1918=$1;
      var $1919=$n;
      var $1920=((($1919)*(13))&-1);
      var $1921=(($1918+($1920<<2))|0);
      var $1922=(($1921+8)|0);
      var $1923=$n;
      var $1924=((($1923)+(1))|0);
      var $1925=$6;
      var $1926=$n;
      var $1927=((($1926)*(12))&-1);
      var $1928=(($1925+($1927<<2))|0);
      var $1929=(($1928+16)|0);
      var $1930=$n;
      var $1931=((($1930)+(1))|0);
      var $1932=$6;
      var $1933=$n;
      var $1934=((($1933)*(13))&-1);
      var $1935=(($1932+($1934<<2))|0);
      var $1936=(($1935+20)|0);
      ___gmpn_toom6h_mul($1917, $1922, $1924, $1929, $1931, $1936);
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      label = 214; break;
    case 214: 
      var $1941=$1;
      var $1942=$n;
      var $1943=((($1942)*(11))&-1);
      var $1944=(($1941+($1943<<2))|0);
      var $1945=$n;
      var $1946=($1945<<1);
      var $1947=((($1946)+(1))|0);
      var $1948=$1;
      var $1949=$sign;
      var $1950=$n;
      ___gmpn_toom_couple_handling($1944, $1947, $1948, $1949, $1950, 2, 4);
      label = 215; break;
    case 215: 
      var $1952=$n;
      var $1953=(($1952)|0) >= 100;
      if ($1953) { label = 217; break; } else { label = 216; break; }
    case 216: 
      var $1955=$1;
      var $1956=$2;
      var $1957=$n;
      var $1958=$4;
      var $1959=$n;
      var $1960=$6;
      var $1961=$n;
      var $1962=((($1961)*(12))&-1);
      var $1963=(($1960+($1962<<2))|0);
      var $1964=(($1963+16)|0);
      ___gmpn_toom22_mul($1955, $1956, $1957, $1958, $1959, $1964);
      label = 224; break;
    case 217: 
      var $1966=$n;
      var $1967=(($1966)|0) >= 300;
      if ($1967) { label = 219; break; } else { label = 218; break; }
    case 218: 
      var $1969=$1;
      var $1970=$2;
      var $1971=$n;
      var $1972=$4;
      var $1973=$n;
      var $1974=$6;
      var $1975=$n;
      var $1976=((($1975)*(12))&-1);
      var $1977=(($1974+($1976<<2))|0);
      var $1978=(($1977+16)|0);
      ___gmpn_toom33_mul($1969, $1970, $1971, $1972, $1973, $1978);
      label = 223; break;
    case 219: 
      var $1980=$n;
      var $1981=(($1980)|0) >= 350;
      if ($1981) { label = 221; break; } else { label = 220; break; }
    case 220: 
      var $1983=$1;
      var $1984=$2;
      var $1985=$n;
      var $1986=$4;
      var $1987=$n;
      var $1988=$6;
      var $1989=$n;
      var $1990=((($1989)*(12))&-1);
      var $1991=(($1988+($1990<<2))|0);
      var $1992=(($1991+16)|0);
      ___gmpn_toom44_mul($1983, $1984, $1985, $1986, $1987, $1992);
      label = 222; break;
    case 221: 
      var $1994=$1;
      var $1995=$2;
      var $1996=$n;
      var $1997=$4;
      var $1998=$n;
      var $1999=$6;
      var $2000=$n;
      var $2001=((($2000)*(12))&-1);
      var $2002=(($1999+($2001<<2))|0);
      var $2003=(($2002+16)|0);
      ___gmpn_toom6h_mul($1994, $1995, $1996, $1997, $1998, $2003);
      label = 222; break;
    case 222: 
      label = 223; break;
    case 223: 
      label = 224; break;
    case 224: 
      label = 225; break;
    case 225: 
      var $2008=$half;
      var $2009=(($2008)|0)!=0;
      if ($2009) { label = 226; break; } else { label = 234; break; }
    case 226: 
      var $2011=$s;
      var $2012=$t;
      var $2013=(($2011)|0) > (($2012)|0);
      if ($2013) { label = 227; break; } else { label = 230; break; }
    case 227: 
      label = 228; break;
    case 228: 
      var $2016=$1;
      var $2017=$n;
      var $2018=((($2017)*(15))&-1);
      var $2019=(($2016+($2018<<2))|0);
      var $2020=$2;
      var $2021=$p;
      var $2022=$n;
      var $2023=Math.imul($2021,$2022);
      var $2024=(($2020+($2023<<2))|0);
      var $2025=$s;
      var $2026=$4;
      var $2027=$q;
      var $2028=$n;
      var $2029=Math.imul($2027,$2028);
      var $2030=(($2026+($2029<<2))|0);
      var $2031=$t;
      var $2032=___gmpn_mul($2019, $2024, $2025, $2030, $2031);
      label = 229; break;
    case 229: 
      label = 233; break;
    case 230: 
      label = 231; break;
    case 231: 
      var $2036=$1;
      var $2037=$n;
      var $2038=((($2037)*(15))&-1);
      var $2039=(($2036+($2038<<2))|0);
      var $2040=$4;
      var $2041=$q;
      var $2042=$n;
      var $2043=Math.imul($2041,$2042);
      var $2044=(($2040+($2043<<2))|0);
      var $2045=$t;
      var $2046=$2;
      var $2047=$p;
      var $2048=$n;
      var $2049=Math.imul($2047,$2048);
      var $2050=(($2046+($2049<<2))|0);
      var $2051=$s;
      var $2052=___gmpn_mul($2039, $2044, $2045, $2050, $2051);
      label = 232; break;
    case 232: 
      label = 233; break;
    case 233: 
      label = 234; break;
    case 234: 
      var $2056=$1;
      var $2057=$6;
      var $2058=$n;
      var $2059=((($2058)*(9))&-1);
      var $2060=(($2057+($2059<<2))|0);
      var $2061=(($2060+12)|0);
      var $2062=$6;
      var $2063=$n;
      var $2064=((($2063)*(6))&-1);
      var $2065=(($2062+($2064<<2))|0);
      var $2066=(($2065+8)|0);
      var $2067=$6;
      var $2068=$n;
      var $2069=((($2068)*(3))&-1);
      var $2070=(($2067+($2069<<2))|0);
      var $2071=(($2070+4)|0);
      var $2072=$6;
      var $2073=$n;
      var $2074=$s;
      var $2075=$t;
      var $2076=((($2074)+($2075))|0);
      var $2077=$half;
      var $2078=$6;
      var $2079=$n;
      var $2080=((($2079)*(12))&-1);
      var $2081=(($2078+($2080<<2))|0);
      var $2082=(($2081+16)|0);
      ___gmpn_toom_interpolate_16pts($2056, $2061, $2066, $2071, $2072, $2073, $2076, $2077, $2082);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom8h_mul["X"]=1;

function ___gmpn_toom_couple_handling($pp, $n, $np, $nsign, $off, $ps, $ns) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      $1=$pp;
      $2=$n;
      $3=$np;
      $4=$nsign;
      $5=$off;
      $6=$ps;
      $7=$ns;
      var $8=$4;
      var $9=(($8)|0)!=0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$3;
      var $12=$1;
      var $13=$3;
      var $14=$2;
      var $15=___gmpn_sub_n($11, $12, $13, $14);
      var $16=$3;
      var $17=$3;
      var $18=$2;
      var $19=___gmpn_rshift($16, $17, $18, 1);
      label = 5; break;
    case 4: 
      var $21=$3;
      var $22=$1;
      var $23=$3;
      var $24=$2;
      var $25=___gmpn_add_n($21, $22, $23, $24);
      var $26=$3;
      var $27=$3;
      var $28=$2;
      var $29=___gmpn_rshift($26, $27, $28, 1);
      label = 5; break;
    case 5: 
      var $31=$1;
      var $32=$1;
      var $33=$3;
      var $34=$2;
      var $35=___gmpn_sub_n($31, $32, $33, $34);
      var $36=$6;
      var $37=(($36)|0) > 0;
      if ($37) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $39=$1;
      var $40=$1;
      var $41=$2;
      var $42=$6;
      var $43=___gmpn_rshift($39, $40, $41, $42);
      label = 7; break;
    case 7: 
      var $45=$7;
      var $46=(($45)|0) > 0;
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$3;
      var $49=$3;
      var $50=$2;
      var $51=$7;
      var $52=___gmpn_rshift($48, $49, $50, $51);
      label = 9; break;
    case 9: 
      var $54=$1;
      var $55=$5;
      var $56=(($54+($55<<2))|0);
      var $57=$1;
      var $58=$5;
      var $59=(($57+($58<<2))|0);
      var $60=$3;
      var $61=$2;
      var $62=$5;
      var $63=((($61)-($62))|0);
      var $64=___gmpn_add_n($56, $59, $60, $63);
      var $65=$2;
      var $66=$1;
      var $67=(($66+($65<<2))|0);
      HEAP32[(($67)>>2)]=$64;
      var $68=$1;
      var $69=$2;
      var $70=(($68+($69<<2))|0);
      var $71=$3;
      var $72=$2;
      var $73=(($71+($72<<2))|0);
      var $74=$5;
      var $75=(((-$74))|0);
      var $76=(($73+($75<<2))|0);
      var $77=$5;
      var $78=$2;
      var $79=$1;
      var $80=(($79+($78<<2))|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=___gmpn_add_1($70, $76, $77, $81);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_couple_handling["X"]=1;

function ___gmpn_toom_eval_dgr3_pm1($xp1, $xm1, $xp, $n, $x3n, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $neg;
      $1=$xp1;
      $2=$xm1;
      $3=$xp;
      $4=$n;
      $5=$x3n;
      $6=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $11=$1;
      var $12=$3;
      var $13=$3;
      var $14=$4;
      var $15=($14<<1);
      var $16=(($13+($15<<2))|0);
      var $17=$4;
      var $18=___gmpn_add_n($11, $12, $16, $17);
      var $19=$4;
      var $20=$1;
      var $21=(($20+($19<<2))|0);
      HEAP32[(($21)>>2)]=$18;
      var $22=$6;
      var $23=$3;
      var $24=$4;
      var $25=(($23+($24<<2))|0);
      var $26=$4;
      var $27=$3;
      var $28=$4;
      var $29=((($28)*(3))&-1);
      var $30=(($27+($29<<2))|0);
      var $31=$5;
      var $32=___gmpn_add($22, $25, $26, $30, $31);
      var $33=$4;
      var $34=$6;
      var $35=(($34+($33<<2))|0);
      HEAP32[(($35)>>2)]=$32;
      var $36=$1;
      var $37=$6;
      var $38=$4;
      var $39=((($38)+(1))|0);
      var $40=___gmpn_cmp($36, $37, $39);
      var $41=(($40)|0) < 0;
      var $42=$41 ? -1 : 0;
      $neg=$42;
      var $43=$neg;
      var $44=(($43)|0)!=0;
      if ($44) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $46=$2;
      var $47=$6;
      var $48=$1;
      var $49=$4;
      var $50=((($49)+(1))|0);
      var $51=___gmpn_sub_n($46, $47, $48, $50);
      label = 9; break;
    case 8: 
      var $53=$2;
      var $54=$1;
      var $55=$6;
      var $56=$4;
      var $57=((($56)+(1))|0);
      var $58=___gmpn_sub_n($53, $54, $55, $57);
      label = 9; break;
    case 9: 
      var $60=$1;
      var $61=$1;
      var $62=$6;
      var $63=$4;
      var $64=((($63)+(1))|0);
      var $65=___gmpn_add_n($60, $61, $62, $64);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $70=$neg;

      return $70;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_dgr3_pm1["X"]=1;

function ___gmpn_toom_eval_dgr3_pm2($xp2, $xm2, $xp, $n, $x3n, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $cy;
      var $neg;
      $1=$xp2;
      $2=$xm2;
      $3=$xp;
      $4=$n;
      $5=$x3n;
      $6=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $11=$6;
      var $12=$3;
      var $13=$4;
      var $14=($13<<1);
      var $15=(($12+($14<<2))|0);
      var $16=$4;
      var $17=___gmpn_lshift($11, $15, $16, 2);
      $cy=$17;
      var $18=$cy;
      var $19=$1;
      var $20=$6;
      var $21=$3;
      var $22=$4;
      var $23=___gmpn_add_n($19, $20, $21, $22);
      var $24=((($18)+($23))|0);
      var $25=$4;
      var $26=$1;
      var $27=(($26+($25<<2))|0);
      HEAP32[(($27)>>2)]=$24;
      var $28=$6;
      var $29=$3;
      var $30=$4;
      var $31=((($30)*(3))&-1);
      var $32=(($29+($31<<2))|0);
      var $33=$5;
      var $34=___gmpn_lshift($28, $32, $33, 2);
      var $35=$5;
      var $36=$6;
      var $37=(($36+($35<<2))|0);
      HEAP32[(($37)>>2)]=$34;
      var $38=$5;
      var $39=$4;
      var $40=(($38)|0) < (($39)|0);
      if ($40) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $42=$6;
      var $43=$3;
      var $44=$4;
      var $45=(($43+($44<<2))|0);
      var $46=$4;
      var $47=$6;
      var $48=$5;
      var $49=((($48)+(1))|0);
      var $50=___gmpn_add($42, $45, $46, $47, $49);
      var $51=$4;
      var $52=$6;
      var $53=(($52+($51<<2))|0);
      HEAP32[(($53)>>2)]=$50;
      label = 9; break;
    case 8: 
      var $55=$6;
      var $56=$3;
      var $57=$4;
      var $58=(($56+($57<<2))|0);
      var $59=$6;
      var $60=$4;
      var $61=___gmpn_add_n($55, $58, $59, $60);
      var $62=$4;
      var $63=$6;
      var $64=(($63+($62<<2))|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=((($65)+($61))|0);
      HEAP32[(($64)>>2)]=$66;
      label = 9; break;
    case 9: 
      var $68=$6;
      var $69=$6;
      var $70=$4;
      var $71=((($70)+(1))|0);
      var $72=___gmpn_lshift($68, $69, $71, 1);
      var $73=$1;
      var $74=$6;
      var $75=$4;
      var $76=((($75)+(1))|0);
      var $77=___gmpn_cmp($73, $74, $76);
      var $78=(($77)|0) < 0;
      var $79=$78 ? -1 : 0;
      $neg=$79;
      var $80=$neg;
      var $81=(($80)|0)!=0;
      if ($81) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $83=$2;
      var $84=$6;
      var $85=$1;
      var $86=$4;
      var $87=((($86)+(1))|0);
      var $88=___gmpn_sub_n($83, $84, $85, $87);
      label = 12; break;
    case 11: 
      var $90=$2;
      var $91=$1;
      var $92=$6;
      var $93=$4;
      var $94=((($93)+(1))|0);
      var $95=___gmpn_sub_n($90, $91, $92, $94);
      label = 12; break;
    case 12: 
      var $97=$1;
      var $98=$1;
      var $99=$6;
      var $100=$4;
      var $101=((($100)+(1))|0);
      var $102=___gmpn_add_n($97, $98, $99, $101);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $107=$neg;

      return $107;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_dgr3_pm2["X"]=1;

function ___gmpn_toom_eval_pm1($xp1, $xm1, $k, $xp, $n, $hn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $i;
      var $neg;
      $1=$xp1;
      $2=$xm1;
      $3=$k;
      $4=$xp;
      $5=$n;
      $6=$hn;
      $7=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$1;
      var $15=$4;
      var $16=$4;
      var $17=$5;
      var $18=($17<<1);
      var $19=(($16+($18<<2))|0);
      var $20=$5;
      var $21=___gmpn_add_n($14, $15, $19, $20);
      var $22=$5;
      var $23=$1;
      var $24=(($23+($22<<2))|0);
      HEAP32[(($24)>>2)]=$21;
      $i=4;
      label = 9; break;
    case 9: 
      var $26=$i;
      var $27=$3;
      var $28=(($26)>>>0) < (($27)>>>0);
      if ($28) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $30=$1;
      var $31=$1;
      var $32=$5;
      var $33=((($32)+(1))|0);
      var $34=$4;
      var $35=$i;
      var $36=$5;
      var $37=Math.imul($35,$36);
      var $38=(($34+($37<<2))|0);
      var $39=$5;
      var $40=___gmpn_add($30, $31, $33, $38, $39);
      label = 11; break;
    case 11: 
      var $42=$i;
      var $43=((($42)+(2))|0);
      $i=$43;
      label = 9; break;
    case 12: 
      var $45=$7;
      var $46=$4;
      var $47=$5;
      var $48=(($46+($47<<2))|0);
      var $49=$4;
      var $50=$5;
      var $51=((($50)*(3))&-1);
      var $52=(($49+($51<<2))|0);
      var $53=$5;
      var $54=___gmpn_add_n($45, $48, $52, $53);
      var $55=$5;
      var $56=$7;
      var $57=(($56+($55<<2))|0);
      HEAP32[(($57)>>2)]=$54;
      $i=5;
      label = 13; break;
    case 13: 
      var $59=$i;
      var $60=$3;
      var $61=(($59)>>>0) < (($60)>>>0);
      if ($61) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $63=$7;
      var $64=$7;
      var $65=$5;
      var $66=((($65)+(1))|0);
      var $67=$4;
      var $68=$i;
      var $69=$5;
      var $70=Math.imul($68,$69);
      var $71=(($67+($70<<2))|0);
      var $72=$5;
      var $73=___gmpn_add($63, $64, $66, $71, $72);
      label = 15; break;
    case 15: 
      var $75=$i;
      var $76=((($75)+(2))|0);
      $i=$76;
      label = 13; break;
    case 16: 
      var $78=$3;
      var $79=$78 & 1;
      var $80=(($79)|0)!=0;
      if ($80) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $82=$7;
      var $83=$7;
      var $84=$5;
      var $85=((($84)+(1))|0);
      var $86=$4;
      var $87=$3;
      var $88=$5;
      var $89=Math.imul($87,$88);
      var $90=(($86+($89<<2))|0);
      var $91=$6;
      var $92=___gmpn_add($82, $83, $85, $90, $91);
      label = 19; break;
    case 18: 
      var $94=$1;
      var $95=$1;
      var $96=$5;
      var $97=((($96)+(1))|0);
      var $98=$4;
      var $99=$3;
      var $100=$5;
      var $101=Math.imul($99,$100);
      var $102=(($98+($101<<2))|0);
      var $103=$6;
      var $104=___gmpn_add($94, $95, $97, $102, $103);
      label = 19; break;
    case 19: 
      var $106=$1;
      var $107=$7;
      var $108=$5;
      var $109=((($108)+(1))|0);
      var $110=___gmpn_cmp($106, $107, $109);
      var $111=(($110)|0) < 0;
      var $112=$111 ? -1 : 0;
      $neg=$112;
      var $113=$neg;
      var $114=(($113)|0)!=0;
      if ($114) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $116=$2;
      var $117=$7;
      var $118=$1;
      var $119=$5;
      var $120=((($119)+(1))|0);
      var $121=___gmpn_sub_n($116, $117, $118, $120);
      label = 22; break;
    case 21: 
      var $123=$2;
      var $124=$1;
      var $125=$7;
      var $126=$5;
      var $127=((($126)+(1))|0);
      var $128=___gmpn_sub_n($123, $124, $125, $127);
      label = 22; break;
    case 22: 
      var $130=$1;
      var $131=$1;
      var $132=$7;
      var $133=$5;
      var $134=((($133)+(1))|0);
      var $135=___gmpn_add_n($130, $131, $132, $134);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $140=$neg;

      return $140;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_pm1["X"]=1;

function ___gmpn_toom_eval_pm2($xp2, $xm2, $k, $xp, $n, $hn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $i;
      var $neg;
      var $cy;
      $1=$xp2;
      $2=$xm2;
      $3=$k;
      $4=$xp;
      $5=$n;
      $6=$hn;
      $7=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $cy=0;
      label = 11; break;
    case 11: 
      var $17=$cy;
      var $18=$17 << 2;
      $cy=$18;
      var $19=$1;
      var $20=$4;
      var $21=$3;
      var $22=$5;
      var $23=Math.imul($21,$22);
      var $24=(($20+($23<<2))|0);
      var $25=$6;
      var $26=___gmpn_lshift($19, $24, $25, 2);
      var $27=$cy;
      var $28=((($27)+($26))|0);
      $cy=$28;
      var $29=$1;
      var $30=$1;
      var $31=$4;
      var $32=$3;
      var $33=((($32)-(2))|0);
      var $34=$5;
      var $35=Math.imul($33,$34);
      var $36=(($31+($35<<2))|0);
      var $37=$6;
      var $38=___gmpn_add_n($29, $30, $36, $37);
      var $39=$cy;
      var $40=((($39)+($38))|0);
      $cy=$40;
      label = 12; break;
    case 12: 
      var $42=$6;
      var $43=$5;
      var $44=(($42)|0)!=(($43)|0);
      if ($44) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $46=$1;
      var $47=$6;
      var $48=(($46+($47<<2))|0);
      var $49=$4;
      var $50=$3;
      var $51=((($50)-(2))|0);
      var $52=$5;
      var $53=Math.imul($51,$52);
      var $54=(($49+($53<<2))|0);
      var $55=$6;
      var $56=(($54+($55<<2))|0);
      var $57=$5;
      var $58=$6;
      var $59=((($57)-($58))|0);
      var $60=$cy;
      var $61=___gmpn_add_1($48, $56, $59, $60);
      $cy=$61;
      label = 14; break;
    case 14: 
      var $63=$3;
      var $64=((($63)-(4))|0);
      $i=$64;
      label = 15; break;
    case 15: 
      var $66=$i;
      var $67=(($66)|0) >= 0;
      if ($67) { label = 16; break; } else { label = 20; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $70=$cy;
      var $71=$70 << 2;
      $cy=$71;
      var $72=$1;
      var $73=$1;
      var $74=$5;
      var $75=___gmpn_lshift($72, $73, $74, 2);
      var $76=$cy;
      var $77=((($76)+($75))|0);
      $cy=$77;
      var $78=$1;
      var $79=$1;
      var $80=$4;
      var $81=$i;
      var $82=$5;
      var $83=Math.imul($81,$82);
      var $84=(($80+($83<<2))|0);
      var $85=$5;
      var $86=___gmpn_add_n($78, $79, $84, $85);
      var $87=$cy;
      var $88=((($87)+($86))|0);
      $cy=$88;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $91=$i;
      var $92=((($91)-(2))|0);
      $i=$92;
      label = 15; break;
    case 20: 
      var $94=$cy;
      var $95=$5;
      var $96=$1;
      var $97=(($96+($95<<2))|0);
      HEAP32[(($97)>>2)]=$94;
      var $98=$3;
      var $99=((($98)-(1))|0);
      $3=$99;
      $cy=0;
      label = 21; break;
    case 21: 
      var $101=$cy;
      var $102=$101 << 2;
      $cy=$102;
      var $103=$7;
      var $104=$4;
      var $105=$3;
      var $106=$5;
      var $107=Math.imul($105,$106);
      var $108=(($104+($107<<2))|0);
      var $109=$5;
      var $110=___gmpn_lshift($103, $108, $109, 2);
      var $111=$cy;
      var $112=((($111)+($110))|0);
      $cy=$112;
      var $113=$7;
      var $114=$7;
      var $115=$4;
      var $116=$3;
      var $117=((($116)-(2))|0);
      var $118=$5;
      var $119=Math.imul($117,$118);
      var $120=(($115+($119<<2))|0);
      var $121=$5;
      var $122=___gmpn_add_n($113, $114, $120, $121);
      var $123=$cy;
      var $124=((($123)+($122))|0);
      $cy=$124;
      label = 22; break;
    case 22: 
      var $126=$3;
      var $127=((($126)-(4))|0);
      $i=$127;
      label = 23; break;
    case 23: 
      var $129=$i;
      var $130=(($129)|0) >= 0;
      if ($130) { label = 24; break; } else { label = 28; break; }
    case 24: 
      label = 25; break;
    case 25: 
      var $133=$cy;
      var $134=$133 << 2;
      $cy=$134;
      var $135=$7;
      var $136=$7;
      var $137=$5;
      var $138=___gmpn_lshift($135, $136, $137, 2);
      var $139=$cy;
      var $140=((($139)+($138))|0);
      $cy=$140;
      var $141=$7;
      var $142=$7;
      var $143=$4;
      var $144=$i;
      var $145=$5;
      var $146=Math.imul($144,$145);
      var $147=(($143+($146<<2))|0);
      var $148=$5;
      var $149=___gmpn_add_n($141, $142, $147, $148);
      var $150=$cy;
      var $151=((($150)+($149))|0);
      $cy=$151;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $154=$i;
      var $155=((($154)-(2))|0);
      $i=$155;
      label = 23; break;
    case 28: 
      var $157=$cy;
      var $158=$5;
      var $159=$7;
      var $160=(($159+($158<<2))|0);
      HEAP32[(($160)>>2)]=$157;
      var $161=$3;
      var $162=$161 & 1;
      var $163=(($162)|0)!=0;
      if ($163) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $165=$7;
      var $166=$7;
      var $167=$5;
      var $168=((($167)+(1))|0);
      var $169=___gmpn_lshift($165, $166, $168, 1);
      label = 31; break;
    case 30: 
      var $171=$1;
      var $172=$1;
      var $173=$5;
      var $174=((($173)+(1))|0);
      var $175=___gmpn_lshift($171, $172, $174, 1);
      label = 31; break;
    case 31: 
      var $177=$1;
      var $178=$7;
      var $179=$5;
      var $180=((($179)+(1))|0);
      var $181=___gmpn_cmp($177, $178, $180);
      var $182=(($181)|0) < 0;
      var $183=$182 ? -1 : 0;
      $neg=$183;
      var $184=$neg;
      var $185=(($184)|0)!=0;
      if ($185) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $187=$2;
      var $188=$7;
      var $189=$1;
      var $190=$5;
      var $191=((($190)+(1))|0);
      var $192=___gmpn_sub_n($187, $188, $189, $191);
      label = 34; break;
    case 33: 
      var $194=$2;
      var $195=$1;
      var $196=$7;
      var $197=$5;
      var $198=((($197)+(1))|0);
      var $199=___gmpn_sub_n($194, $195, $196, $198);
      label = 34; break;
    case 34: 
      var $201=$1;
      var $202=$1;
      var $203=$7;
      var $204=$5;
      var $205=((($204)+(1))|0);
      var $206=___gmpn_add_n($201, $202, $203, $205);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $211=$3;
      var $212=$211 & 1;
      var $213=((($212)-(1))|0);
      var $214=$neg;
      var $215=$214 ^ $213;
      $neg=$215;
      var $216=$neg;

      return $216;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_pm2["X"]=1;

function ___gmpn_toom_eval_pm2exp($xp2, $xm2, $k, $xp, $n, $hn, $shift, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $neg;
      $1=$xp2;
      $2=$xm2;
      $3=$k;
      $4=$xp;
      $5=$n;
      $6=$hn;
      $7=$shift;
      $8=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $17=$8;
      var $18=$4;
      var $19=$5;
      var $20=($19<<1);
      var $21=(($18+($20<<2))|0);
      var $22=$5;
      var $23=$7;
      var $24=($23<<1);
      var $25=___gmpn_lshift($17, $21, $22, $24);
      var $26=$5;
      var $27=$1;
      var $28=(($27+($26<<2))|0);
      HEAP32[(($28)>>2)]=$25;
      var $29=$1;
      var $30=$4;
      var $31=$8;
      var $32=$5;
      var $33=___gmpn_add_n($29, $30, $31, $32);
      var $34=$5;
      var $35=$1;
      var $36=(($35+($34<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37)+($33))|0);
      HEAP32[(($36)>>2)]=$38;
      $i=4;
      label = 11; break;
    case 11: 
      var $40=$i;
      var $41=$3;
      var $42=(($40)>>>0) < (($41)>>>0);
      if ($42) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $44=$8;
      var $45=$4;
      var $46=$i;
      var $47=$5;
      var $48=Math.imul($46,$47);
      var $49=(($45+($48<<2))|0);
      var $50=$5;
      var $51=$i;
      var $52=$7;
      var $53=Math.imul($51,$52);
      var $54=___gmpn_lshift($44, $49, $50, $53);
      var $55=$5;
      var $56=$1;
      var $57=(($56+($55<<2))|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)+($54))|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=$1;
      var $61=$1;
      var $62=$8;
      var $63=$5;
      var $64=___gmpn_add_n($60, $61, $62, $63);
      var $65=$5;
      var $66=$1;
      var $67=(($66+($65<<2))|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=((($68)+($64))|0);
      HEAP32[(($67)>>2)]=$69;
      label = 13; break;
    case 13: 
      var $71=$i;
      var $72=((($71)+(2))|0);
      $i=$72;
      label = 11; break;
    case 14: 
      var $74=$8;
      var $75=$4;
      var $76=$5;
      var $77=(($75+($76<<2))|0);
      var $78=$5;
      var $79=$7;
      var $80=___gmpn_lshift($74, $77, $78, $79);
      var $81=$5;
      var $82=$8;
      var $83=(($82+($81<<2))|0);
      HEAP32[(($83)>>2)]=$80;
      $i=3;
      label = 15; break;
    case 15: 
      var $85=$i;
      var $86=$3;
      var $87=(($85)>>>0) < (($86)>>>0);
      if ($87) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $89=$2;
      var $90=$4;
      var $91=$i;
      var $92=$5;
      var $93=Math.imul($91,$92);
      var $94=(($90+($93<<2))|0);
      var $95=$5;
      var $96=$i;
      var $97=$7;
      var $98=Math.imul($96,$97);
      var $99=___gmpn_lshift($89, $94, $95, $98);
      var $100=$5;
      var $101=$8;
      var $102=(($101+($100<<2))|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)+($99))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=$8;
      var $106=$8;
      var $107=$2;
      var $108=$5;
      var $109=___gmpn_add_n($105, $106, $107, $108);
      var $110=$5;
      var $111=$8;
      var $112=(($111+($110<<2))|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=((($113)+($109))|0);
      HEAP32[(($112)>>2)]=$114;
      label = 17; break;
    case 17: 
      var $116=$i;
      var $117=((($116)+(2))|0);
      $i=$117;
      label = 15; break;
    case 18: 
      var $119=$2;
      var $120=$4;
      var $121=$3;
      var $122=$5;
      var $123=Math.imul($121,$122);
      var $124=(($120+($123<<2))|0);
      var $125=$6;
      var $126=$3;
      var $127=$7;
      var $128=Math.imul($126,$127);
      var $129=___gmpn_lshift($119, $124, $125, $128);
      var $130=$6;
      var $131=$2;
      var $132=(($131+($130<<2))|0);
      HEAP32[(($132)>>2)]=$129;
      var $133=$3;
      var $134=$133 & 1;
      var $135=(($134)|0)!=0;
      if ($135) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $137=$8;
      var $138=$8;
      var $139=$5;
      var $140=((($139)+(1))|0);
      var $141=$2;
      var $142=$6;
      var $143=((($142)+(1))|0);
      var $144=___gmpn_add($137, $138, $140, $141, $143);
      label = 21; break;
    case 20: 
      var $146=$1;
      var $147=$1;
      var $148=$5;
      var $149=((($148)+(1))|0);
      var $150=$2;
      var $151=$6;
      var $152=((($151)+(1))|0);
      var $153=___gmpn_add($146, $147, $149, $150, $152);
      label = 21; break;
    case 21: 
      var $155=$1;
      var $156=$8;
      var $157=$5;
      var $158=((($157)+(1))|0);
      var $159=___gmpn_cmp($155, $156, $158);
      var $160=(($159)|0) < 0;
      var $161=$160 ? -1 : 0;
      $neg=$161;
      var $162=$neg;
      var $163=(($162)|0)!=0;
      if ($163) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $165=$2;
      var $166=$8;
      var $167=$1;
      var $168=$5;
      var $169=((($168)+(1))|0);
      var $170=___gmpn_sub_n($165, $166, $167, $169);
      label = 24; break;
    case 23: 
      var $172=$2;
      var $173=$1;
      var $174=$8;
      var $175=$5;
      var $176=((($175)+(1))|0);
      var $177=___gmpn_sub_n($172, $173, $174, $176);
      label = 24; break;
    case 24: 
      var $179=$1;
      var $180=$1;
      var $181=$8;
      var $182=$5;
      var $183=((($182)+(1))|0);
      var $184=___gmpn_add_n($179, $180, $181, $183);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $189=$neg;

      return $189;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_pm2exp["X"]=1;

function ___gmpn_toom_eval_pm2rexp($rp, $rm, $q, $ap, $n, $t, $s, $ws) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $neg;
      $1=$rp;
      $2=$rm;
      $3=$q;
      $4=$ap;
      $5=$n;
      $6=$t;
      $7=$s;
      $8=$ws;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $17=$1;
      var $18=$4;
      var $19=$5;
      var $20=$7;
      var $21=$3;
      var $22=Math.imul($20,$21);
      var $23=___gmpn_lshift($17, $18, $19, $22);
      var $24=$5;
      var $25=$1;
      var $26=(($25+($24<<2))|0);
      HEAP32[(($26)>>2)]=$23;
      var $27=$8;
      var $28=$4;
      var $29=$5;
      var $30=(($28+($29<<2))|0);
      var $31=$5;
      var $32=$7;
      var $33=$3;
      var $34=((($33)-(1))|0);
      var $35=Math.imul($32,$34);
      var $36=___gmpn_lshift($27, $30, $31, $35);
      var $37=$5;
      var $38=$8;
      var $39=(($38+($37<<2))|0);
      HEAP32[(($39)>>2)]=$36;
      var $40=$3;
      var $41=$40 & 1;
      var $42=(($41)|0)!=0;
      if ($42) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $44=$8;
      var $45=$8;
      var $46=$5;
      var $47=((($46)+(1))|0);
      var $48=$4;
      var $49=$5;
      var $50=$3;
      var $51=Math.imul($49,$50);
      var $52=(($48+($51<<2))|0);
      var $53=$6;
      var $54=___gmpn_add($44, $45, $47, $52, $53);
      var $55=$1;
      var $56=$4;
      var $57=$5;
      var $58=$3;
      var $59=((($58)-(1))|0);
      var $60=Math.imul($57,$59);
      var $61=(($56+($60<<2))|0);
      var $62=$5;
      var $63=$7;
      var $64=$2;
      var $65=_DO_mpn_addlsh_n($55, $61, $62, $63, $64);
      var $66=$5;
      var $67=$1;
      var $68=(($67+($66<<2))|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)+($65))|0);
      HEAP32[(($68)>>2)]=$70;
      label = 13; break;
    case 12: 
      var $72=$1;
      var $73=$1;
      var $74=$5;
      var $75=((($74)+(1))|0);
      var $76=$4;
      var $77=$5;
      var $78=$3;
      var $79=Math.imul($77,$78);
      var $80=(($76+($79<<2))|0);
      var $81=$6;
      var $82=___gmpn_add($72, $73, $75, $80, $81);
      label = 13; break;
    case 13: 
      $i=2;
      label = 14; break;
    case 14: 
      var $85=$i;
      var $86=$3;
      var $87=((($86)-(1))|0);
      var $88=(($85)>>>0) < (($87)>>>0);
      if ($88) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $90=$1;
      var $91=$4;
      var $92=$5;
      var $93=$i;
      var $94=Math.imul($92,$93);
      var $95=(($91+($94<<2))|0);
      var $96=$5;
      var $97=$7;
      var $98=$3;
      var $99=$i;
      var $100=((($98)-($99))|0);
      var $101=Math.imul($97,$100);
      var $102=$2;
      var $103=_DO_mpn_addlsh_n($90, $95, $96, $101, $102);
      var $104=$5;
      var $105=$1;
      var $106=(($105+($104<<2))|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=((($107)+($103))|0);
      HEAP32[(($106)>>2)]=$108;
      var $109=$i;
      var $110=((($109)+(1))|0);
      $i=$110;
      var $111=$8;
      var $112=$4;
      var $113=$5;
      var $114=$i;
      var $115=Math.imul($113,$114);
      var $116=(($112+($115<<2))|0);
      var $117=$5;
      var $118=$7;
      var $119=$3;
      var $120=$i;
      var $121=((($119)-($120))|0);
      var $122=Math.imul($118,$121);
      var $123=$2;
      var $124=_DO_mpn_addlsh_n($111, $116, $117, $122, $123);
      var $125=$5;
      var $126=$8;
      var $127=(($126+($125<<2))|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=((($128)+($124))|0);
      HEAP32[(($127)>>2)]=$129;
      label = 16; break;
    case 16: 
      var $131=$i;
      var $132=((($131)+(1))|0);
      $i=$132;
      label = 14; break;
    case 17: 
      var $134=$1;
      var $135=$8;
      var $136=$5;
      var $137=((($136)+(1))|0);
      var $138=___gmpn_cmp($134, $135, $137);
      var $139=(($138)|0) < 0;
      var $140=$139 ? -1 : 0;
      $neg=$140;
      var $141=$neg;
      var $142=(($141)|0)!=0;
      if ($142) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $144=$2;
      var $145=$8;
      var $146=$1;
      var $147=$5;
      var $148=((($147)+(1))|0);
      var $149=___gmpn_sub_n($144, $145, $146, $148);
      label = 20; break;
    case 19: 
      var $151=$2;
      var $152=$1;
      var $153=$8;
      var $154=$5;
      var $155=((($154)+(1))|0);
      var $156=___gmpn_sub_n($151, $152, $153, $155);
      label = 20; break;
    case 20: 
      var $158=$1;
      var $159=$1;
      var $160=$8;
      var $161=$5;
      var $162=((($161)+(1))|0);
      var $163=___gmpn_add_n($158, $159, $160, $162);
      var $164=$neg;

      return $164;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_pm2rexp["X"]=1;

function _DO_mpn_addlsh_n($dst, $src, $n, $s, $ws) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $__cy;
  $1=$dst;
  $2=$src;
  $3=$n;
  $4=$s;
  $5=$ws;
  var $6=$5;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_lshift($6, $7, $8, $9);
  $__cy=$10;
  var $11=$__cy;
  var $12=$1;
  var $13=$1;
  var $14=$5;
  var $15=$3;
  var $16=___gmpn_add_n($12, $13, $14, $15);
  var $17=((($11)+($16))|0);

  return $17;
}


function ___gmpn_toom_interpolate_12pts($pp, $r1, $r3, $r5, $n, $spt, $half, $wsi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $cy;
      var $n3;
      var $n3p1;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__cy;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__cy9;
      var $__x10;
      var $__p11;
      var $__x12;
      var $__p13;
      var $__cy14;
      var $__x15;
      var $__p16;
      var $__x17;
      var $__p18;
      var $__mp_ptr_swap__tmp;
      var $__cy19;
      var $__x20;
      var $__p21;
      var $__x22;
      var $__p23;
      var $__mp_ptr_swap__tmp24;
      var $__x25;
      var $__p26;
      var $__x27;
      var $__p28;
      var $__x29;
      var $__p30;
      var $__x31;
      var $__p32;
      var $__x33;
      var $__p34;
      var $__x35;
      var $__p36;
      $1=$pp;
      $2=$r1;
      $3=$r3;
      $4=$r5;
      $5=$n;
      $6=$spt;
      $7=$half;
      $8=$wsi;
      var $9=$5;
      var $10=((($9)*(3))&-1);
      $n3=$10;
      var $11=$n3;
      var $12=((($11)+(1))|0);
      $n3p1=$12;
      var $13=$7;
      var $14=(($13)|0)!=0;
      if ($14) { label = 3; break; } else { label = 57; break; }
    case 3: 
      var $16=$3;
      var $17=$3;
      var $18=$1;
      var $19=$5;
      var $20=((($19)*(11))&-1);
      var $21=(($18+($20<<2))|0);
      var $22=$6;
      var $23=___gmpn_sub_n($16, $17, $21, $22);
      $cy=$23;
      label = 4; break;
    case 4: 
      var $25=$3;
      var $26=$6;
      var $27=(($25+($26<<2))|0);
      $__p=$27;
      var $28=$__p;
      var $29=HEAP32[(($28)>>2)];
      $__x=$29;
      var $30=$__x;
      var $31=$cy;
      var $32=((($30)-($31))|0);
      var $33=$__p;
      HEAP32[(($33)>>2)]=$32;
      var $34=$__x;
      var $35=$cy;
      var $36=(($34)>>>0) < (($35)>>>0);
      if ($36) { label = 5; break; } else { label = 9; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $39=$__p;
      var $40=(($39+4)|0);
      $__p=$40;
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)-(1))|0);
      HEAP32[(($40)>>2)]=$42;
      var $43=(($41)|0)==0;
      if ($43) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $48=$1;
      var $49=$5;
      var $50=((($49)*(7))&-1);
      var $51=(($48+($50<<2))|0);
      var $52=$1;
      var $53=$5;
      var $54=((($53)*(11))&-1);
      var $55=(($52+($54<<2))|0);
      var $56=$6;
      var $57=$8;
      var $58=_DO_mpn_sublsh_n($51, $55, $56, 10, $57);
      $cy=$58;
      label = 11; break;
    case 11: 
      var $60=$1;
      var $61=$5;
      var $62=((($61)*(7))&-1);
      var $63=(($60+($62<<2))|0);
      var $64=$6;
      var $65=(($63+($64<<2))|0);
      $__p2=$65;
      var $66=$__p2;
      var $67=HEAP32[(($66)>>2)];
      $__x1=$67;
      var $68=$__x1;
      var $69=$cy;
      var $70=((($68)-($69))|0);
      var $71=$__p2;
      HEAP32[(($71)>>2)]=$70;
      var $72=$__x1;
      var $73=$cy;
      var $74=(($72)>>>0) < (($73)>>>0);
      if ($74) { label = 12; break; } else { label = 16; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $77=$__p2;
      var $78=(($77+4)|0);
      $__p2=$78;
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)-(1))|0);
      HEAP32[(($78)>>2)]=$80;
      var $81=(($79)|0)==0;
      if ($81) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $88=$4;
      $__p4=$88;
      var $89=$__p4;
      var $90=HEAP32[(($89)>>2)];
      $__x3=$90;
      var $91=$__x3;
      var $92=$1;
      var $93=$5;
      var $94=((($93)*(11))&-1);
      var $95=(($92+($94<<2))|0);
      var $96=(($95)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$97 >>> 2;
      var $99=((($91)-($98))|0);
      var $100=$__p4;
      HEAP32[(($100)>>2)]=$99;
      var $101=$__x3;
      var $102=$1;
      var $103=$5;
      var $104=((($103)*(11))&-1);
      var $105=(($102+($104<<2))|0);
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=$107 >>> 2;
      var $109=(($101)>>>0) < (($108)>>>0);
      if ($109) { label = 20; break; } else { label = 24; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $112=$__p4;
      var $113=(($112+4)|0);
      $__p4=$113;
      var $114=HEAP32[(($113)>>2)];
      var $115=((($114)-(1))|0);
      HEAP32[(($113)>>2)]=$115;
      var $116=(($114)|0)==0;
      if ($116) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 21; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $121=$4;
      var $122=$1;
      var $123=$5;
      var $124=((($123)*(11))&-1);
      var $125=(($122+($124<<2))|0);
      var $126=(($125+4)|0);
      var $127=$6;
      var $128=((($127)-(1))|0);
      var $129=$8;
      var $130=_DO_mpn_sublsh_n($121, $126, $128, 30, $129);
      $__cy=$130;
      label = 26; break;
    case 26: 
      var $132=$4;
      var $133=$6;
      var $134=(($132+($133<<2))|0);
      var $135=((($134)-(4))|0);
      $__p6=$135;
      var $136=$__p6;
      var $137=HEAP32[(($136)>>2)];
      $__x5=$137;
      var $138=$__x5;
      var $139=$__cy;
      var $140=((($138)-($139))|0);
      var $141=$__p6;
      HEAP32[(($141)>>2)]=$140;
      var $142=$__x5;
      var $143=$__cy;
      var $144=(($142)>>>0) < (($143)>>>0);
      if ($144) { label = 27; break; } else { label = 31; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $147=$__p6;
      var $148=(($147+4)|0);
      $__p6=$148;
      var $149=HEAP32[(($148)>>2)];
      var $150=((($149)-(1))|0);
      HEAP32[(($148)>>2)]=$150;
      var $151=(($149)|0)==0;
      if ($151) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 28; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $157=$2;
      var $158=$1;
      var $159=$5;
      var $160=((($159)*(11))&-1);
      var $161=(($158+($160<<2))|0);
      var $162=$6;
      var $163=$8;
      var $164=_DO_mpn_sublsh_n($157, $161, $162, 20, $163);
      $cy=$164;
      label = 34; break;
    case 34: 
      var $166=$2;
      var $167=$6;
      var $168=(($166+($167<<2))|0);
      $__p8=$168;
      var $169=$__p8;
      var $170=HEAP32[(($169)>>2)];
      $__x7=$170;
      var $171=$__x7;
      var $172=$cy;
      var $173=((($171)-($172))|0);
      var $174=$__p8;
      HEAP32[(($174)>>2)]=$173;
      var $175=$__x7;
      var $176=$cy;
      var $177=(($175)>>>0) < (($176)>>>0);
      if ($177) { label = 35; break; } else { label = 39; break; }
    case 35: 
      label = 36; break;
    case 36: 
      var $180=$__p8;
      var $181=(($180+4)|0);
      $__p8=$181;
      var $182=HEAP32[(($181)>>2)];
      var $183=((($182)-(1))|0);
      HEAP32[(($181)>>2)]=$183;
      var $184=(($182)|0)==0;
      if ($184) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 36; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $191=$1;
      var $192=$n3;
      var $193=(($191+($192<<2))|0);
      $__p11=$193;
      var $194=$__p11;
      var $195=HEAP32[(($194)>>2)];
      $__x10=$195;
      var $196=$__x10;
      var $197=$1;
      var $198=$5;
      var $199=((($198)*(11))&-1);
      var $200=(($197+($199<<2))|0);
      var $201=(($200)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=$202 >>> 4;
      var $204=((($196)-($203))|0);
      var $205=$__p11;
      HEAP32[(($205)>>2)]=$204;
      var $206=$__x10;
      var $207=$1;
      var $208=$5;
      var $209=((($208)*(11))&-1);
      var $210=(($207+($209<<2))|0);
      var $211=(($210)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$212 >>> 4;
      var $214=(($206)>>>0) < (($213)>>>0);
      if ($214) { label = 43; break; } else { label = 47; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $217=$__p11;
      var $218=(($217+4)|0);
      $__p11=$218;
      var $219=HEAP32[(($218)>>2)];
      var $220=((($219)-(1))|0);
      HEAP32[(($218)>>2)]=$220;
      var $221=(($219)|0)==0;
      if ($221) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 44; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $226=$1;
      var $227=$n3;
      var $228=(($226+($227<<2))|0);
      var $229=$1;
      var $230=$5;
      var $231=((($230)*(11))&-1);
      var $232=(($229+($231<<2))|0);
      var $233=(($232+4)|0);
      var $234=$6;
      var $235=((($234)-(1))|0);
      var $236=$8;
      var $237=_DO_mpn_sublsh_n($228, $233, $235, 28, $236);
      $__cy9=$237;
      label = 49; break;
    case 49: 
      var $239=$1;
      var $240=$n3;
      var $241=(($239+($240<<2))|0);
      var $242=$6;
      var $243=(($241+($242<<2))|0);
      var $244=((($243)-(4))|0);
      $__p13=$244;
      var $245=$__p13;
      var $246=HEAP32[(($245)>>2)];
      $__x12=$246;
      var $247=$__x12;
      var $248=$__cy9;
      var $249=((($247)-($248))|0);
      var $250=$__p13;
      HEAP32[(($250)>>2)]=$249;
      var $251=$__x12;
      var $252=$__cy9;
      var $253=(($251)>>>0) < (($252)>>>0);
      if ($253) { label = 50; break; } else { label = 54; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $256=$__p13;
      var $257=(($256+4)|0);
      $__p13=$257;
      var $258=HEAP32[(($257)>>2)];
      var $259=((($258)-(1))|0);
      HEAP32[(($257)>>2)]=$259;
      var $260=(($258)|0)==0;
      if ($260) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 51; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $267=$1;
      var $268=$n3;
      var $269=(($267+($268<<2))|0);
      var $270=$5;
      var $271=(($269+($270<<2))|0);
      var $272=$1;
      var $273=$5;
      var $274=($273<<1);
      var $275=$8;
      var $276=_DO_mpn_sublsh_n($271, $272, $274, 20, $275);
      var $277=$n3;
      var $278=$1;
      var $279=$n3;
      var $280=(($278+($279<<2))|0);
      var $281=(($280+($277<<2))|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=((($282)-($276))|0);
      HEAP32[(($281)>>2)]=$283;
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $286=$2;
      var $287=$5;
      var $288=(($286+($287<<2))|0);
      $__p16=$288;
      var $289=$__p16;
      var $290=HEAP32[(($289)>>2)];
      $__x15=$290;
      var $291=$__x15;
      var $292=$1;
      var $293=(($292)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=$294 >>> 4;
      var $296=((($291)-($295))|0);
      var $297=$__p16;
      HEAP32[(($297)>>2)]=$296;
      var $298=$__x15;
      var $299=$1;
      var $300=(($299)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=$301 >>> 4;
      var $303=(($298)>>>0) < (($302)>>>0);
      if ($303) { label = 60; break; } else { label = 64; break; }
    case 60: 
      label = 61; break;
    case 61: 
      var $306=$__p16;
      var $307=(($306+4)|0);
      $__p16=$307;
      var $308=HEAP32[(($307)>>2)];
      var $309=((($308)-(1))|0);
      HEAP32[(($307)>>2)]=$309;
      var $310=(($308)|0)==0;
      if ($310) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 61; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $315=$2;
      var $316=$5;
      var $317=(($315+($316<<2))|0);
      var $318=$1;
      var $319=(($318+4)|0);
      var $320=$5;
      var $321=($320<<1);
      var $322=((($321)-(1))|0);
      var $323=$8;
      var $324=_DO_mpn_sublsh_n($317, $319, $322, 28, $323);
      $__cy14=$324;
      label = 66; break;
    case 66: 
      var $326=$2;
      var $327=$5;
      var $328=(($326+($327<<2))|0);
      var $329=$5;
      var $330=($329<<1);
      var $331=(($328+($330<<2))|0);
      var $332=((($331)-(4))|0);
      $__p18=$332;
      var $333=$__p18;
      var $334=HEAP32[(($333)>>2)];
      $__x17=$334;
      var $335=$__x17;
      var $336=$__cy14;
      var $337=((($335)-($336))|0);
      var $338=$__p18;
      HEAP32[(($338)>>2)]=$337;
      var $339=$__x17;
      var $340=$__cy14;
      var $341=(($339)>>>0) < (($340)>>>0);
      if ($341) { label = 67; break; } else { label = 71; break; }
    case 67: 
      label = 68; break;
    case 68: 
      var $344=$__p18;
      var $345=(($344+4)|0);
      $__p18=$345;
      var $346=HEAP32[(($345)>>2)];
      var $347=((($346)-(1))|0);
      HEAP32[(($345)>>2)]=$347;
      var $348=(($346)|0)==0;
      if ($348) { label = 69; break; } else { label = 70; break; }
    case 69: 
      label = 68; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $354=$8;
      var $355=$2;
      var $356=$1;
      var $357=$n3;
      var $358=(($356+($357<<2))|0);
      var $359=$n3p1;
      var $360=___gmpn_add_n($354, $355, $358, $359);
      var $361=$1;
      var $362=$n3;
      var $363=(($361+($362<<2))|0);
      var $364=$1;
      var $365=$n3;
      var $366=(($364+($365<<2))|0);
      var $367=$2;
      var $368=$n3p1;
      var $369=___gmpn_sub_n($363, $366, $367, $368);
      label = 74; break;
    case 74: 
      var $371=$2;
      $__mp_ptr_swap__tmp=$371;
      var $372=$8;
      $2=$372;
      var $373=$__mp_ptr_swap__tmp;
      $8=$373;
      label = 75; break;
    case 75: 
      var $375=$4;
      var $376=$5;
      var $377=(($375+($376<<2))|0);
      var $378=$1;
      var $379=$5;
      var $380=($379<<1);
      var $381=$8;
      var $382=_DO_mpn_sublsh_n($377, $378, $380, 10, $381);
      var $383=$n3;
      var $384=$4;
      var $385=(($384+($383<<2))|0);
      var $386=HEAP32[(($385)>>2)];
      var $387=((($386)-($382))|0);
      HEAP32[(($385)>>2)]=$387;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $390=$1;
      var $391=$5;
      var $392=((($391)*(7))&-1);
      var $393=(($390+($392<<2))|0);
      var $394=$5;
      var $395=(($393+($394<<2))|0);
      $__p21=$395;
      var $396=$__p21;
      var $397=HEAP32[(($396)>>2)];
      $__x20=$397;
      var $398=$__x20;
      var $399=$1;
      var $400=(($399)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=$401 >>> 2;
      var $403=((($398)-($402))|0);
      var $404=$__p21;
      HEAP32[(($404)>>2)]=$403;
      var $405=$__x20;
      var $406=$1;
      var $407=(($406)|0);
      var $408=HEAP32[(($407)>>2)];
      var $409=$408 >>> 2;
      var $410=(($405)>>>0) < (($409)>>>0);
      if ($410) { label = 78; break; } else { label = 82; break; }
    case 78: 
      label = 79; break;
    case 79: 
      var $413=$__p21;
      var $414=(($413+4)|0);
      $__p21=$414;
      var $415=HEAP32[(($414)>>2)];
      var $416=((($415)-(1))|0);
      HEAP32[(($414)>>2)]=$416;
      var $417=(($415)|0)==0;
      if ($417) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 79; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $422=$1;
      var $423=$5;
      var $424=((($423)*(7))&-1);
      var $425=(($422+($424<<2))|0);
      var $426=$5;
      var $427=(($425+($426<<2))|0);
      var $428=$1;
      var $429=(($428+4)|0);
      var $430=$5;
      var $431=($430<<1);
      var $432=((($431)-(1))|0);
      var $433=$8;
      var $434=_DO_mpn_sublsh_n($427, $429, $432, 30, $433);
      $__cy19=$434;
      label = 84; break;
    case 84: 
      var $436=$1;
      var $437=$5;
      var $438=((($437)*(7))&-1);
      var $439=(($436+($438<<2))|0);
      var $440=$5;
      var $441=(($439+($440<<2))|0);
      var $442=$5;
      var $443=($442<<1);
      var $444=(($441+($443<<2))|0);
      var $445=((($444)-(4))|0);
      $__p23=$445;
      var $446=$__p23;
      var $447=HEAP32[(($446)>>2)];
      $__x22=$447;
      var $448=$__x22;
      var $449=$__cy19;
      var $450=((($448)-($449))|0);
      var $451=$__p23;
      HEAP32[(($451)>>2)]=$450;
      var $452=$__x22;
      var $453=$__cy19;
      var $454=(($452)>>>0) < (($453)>>>0);
      if ($454) { label = 85; break; } else { label = 89; break; }
    case 85: 
      label = 86; break;
    case 86: 
      var $457=$__p23;
      var $458=(($457+4)|0);
      $__p23=$458;
      var $459=HEAP32[(($458)>>2)];
      var $460=((($459)-(1))|0);
      HEAP32[(($458)>>2)]=$460;
      var $461=(($459)|0)==0;
      if ($461) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 86; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $467=$8;
      var $468=$4;
      var $469=$1;
      var $470=$5;
      var $471=((($470)*(7))&-1);
      var $472=(($469+($471<<2))|0);
      var $473=$n3p1;
      var $474=___gmpn_sub_n($467, $468, $472, $473);
      var $475=$1;
      var $476=$5;
      var $477=((($476)*(7))&-1);
      var $478=(($475+($477<<2))|0);
      var $479=$1;
      var $480=$5;
      var $481=((($480)*(7))&-1);
      var $482=(($479+($481<<2))|0);
      var $483=$4;
      var $484=$n3p1;
      var $485=___gmpn_add_n($478, $482, $483, $484);
      label = 92; break;
    case 92: 
      var $487=$4;
      $__mp_ptr_swap__tmp24=$487;
      var $488=$8;
      $4=$488;
      var $489=$__mp_ptr_swap__tmp24;
      $8=$489;
      label = 93; break;
    case 93: 
      var $491=$3;
      var $492=$5;
      var $493=(($491+($492<<2))|0);
      var $494=$3;
      var $495=$5;
      var $496=(($494+($495<<2))|0);
      var $497=$1;
      var $498=$5;
      var $499=($498<<1);
      var $500=___gmpn_sub_n($493, $496, $497, $499);
      var $501=$n3;
      var $502=$3;
      var $503=(($502+($501<<2))|0);
      var $504=HEAP32[(($503)>>2)];
      var $505=((($504)-($500))|0);
      HEAP32[(($503)>>2)]=$505;
      var $506=$1;
      var $507=$n3;
      var $508=(($506+($507<<2))|0);
      var $509=$4;
      var $510=$n3p1;
      var $511=___gmpn_submul_1($508, $509, $510, 257);
      var $512=$1;
      var $513=$n3;
      var $514=(($512+($513<<2))|0);
      var $515=$1;
      var $516=$n3;
      var $517=(($515+($516<<2))|0);
      var $518=$n3p1;
      ___gmpn_divexact_1($514, $517, $518, 11340);
      var $519=$n3;
      var $520=$1;
      var $521=$n3;
      var $522=(($520+($521<<2))|0);
      var $523=(($522+($519<<2))|0);
      var $524=HEAP32[(($523)>>2)];
      var $525=$524 & -536870912;
      var $526=(($525)|0)!=0;
      if ($526) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $528=$n3;
      var $529=$1;
      var $530=$n3;
      var $531=(($529+($530<<2))|0);
      var $532=(($531+($528<<2))|0);
      var $533=HEAP32[(($532)>>2)];
      var $534=$533 | -1073741824;
      HEAP32[(($532)>>2)]=$534;
      label = 95; break;
    case 95: 
      var $536=$4;
      var $537=$1;
      var $538=$n3;
      var $539=(($537+($538<<2))|0);
      var $540=$n3p1;
      var $541=___gmpn_addmul_1($536, $539, $540, 60);
      var $542=$4;
      var $543=$4;
      var $544=$n3p1;
      var $545=___gmpn_bdiv_dbm1c($542, $543, $544, 16843009, 0);
      var $546=$545;
      var $547=255 & $546;
      var $548=$1;
      var $549=$5;
      var $550=((($549)*(7))&-1);
      var $551=(($548+($550<<2))|0);
      var $552=$3;
      var $553=$n3p1;
      var $554=$8;
      var $555=_DO_mpn_sublsh_n($551, $552, $553, 5, $554);
      var $556=$2;
      var $557=$1;
      var $558=$5;
      var $559=((($558)*(7))&-1);
      var $560=(($557+($559<<2))|0);
      var $561=$n3p1;
      var $562=___gmpn_submul_1($556, $560, $561, 100);
      var $563=$2;
      var $564=$3;
      var $565=$n3p1;
      var $566=$8;
      var $567=_DO_mpn_sublsh_n($563, $564, $565, 9, $566);
      var $568=$2;
      var $569=$2;
      var $570=$n3p1;
      ___gmpn_divexact_1($568, $569, $570, 42525);
      var $571=$1;
      var $572=$5;
      var $573=((($572)*(7))&-1);
      var $574=(($571+($573<<2))|0);
      var $575=$2;
      var $576=$n3p1;
      var $577=___gmpn_submul_1($574, $575, $576, 225);
      var $578=$1;
      var $579=$5;
      var $580=((($579)*(7))&-1);
      var $581=(($578+($580<<2))|0);
      var $582=$1;
      var $583=$5;
      var $584=((($583)*(7))&-1);
      var $585=(($582+($584<<2))|0);
      var $586=$n3p1;
      ___gmpn_divexact_1($581, $585, $586, 36);
      var $587=$3;
      var $588=$3;
      var $589=$1;
      var $590=$5;
      var $591=((($590)*(7))&-1);
      var $592=(($589+($591<<2))|0);
      var $593=$n3p1;
      var $594=___gmpn_sub_n($587, $588, $592, $593);
      var $595=$1;
      var $596=$n3;
      var $597=(($595+($596<<2))|0);
      var $598=$1;
      var $599=$5;
      var $600=((($599)*(7))&-1);
      var $601=(($598+($600<<2))|0);
      var $602=$1;
      var $603=$n3;
      var $604=(($602+($603<<2))|0);
      var $605=$n3p1;
      var $606=___gmpn_sub_n($597, $601, $604, $605);
      var $607=$1;
      var $608=$n3;
      var $609=(($607+($608<<2))|0);
      var $610=$1;
      var $611=$n3;
      var $612=(($610+($611<<2))|0);
      var $613=$n3p1;
      var $614=___gmpn_rshift($609, $612, $613, 1);
      var $615=$1;
      var $616=$5;
      var $617=((($616)*(7))&-1);
      var $618=(($615+($617<<2))|0);
      var $619=$1;
      var $620=$5;
      var $621=((($620)*(7))&-1);
      var $622=(($619+($621<<2))|0);
      var $623=$1;
      var $624=$n3;
      var $625=(($623+($624<<2))|0);
      var $626=$n3p1;
      var $627=___gmpn_sub_n($618, $622, $625, $626);
      var $628=$4;
      var $629=$4;
      var $630=$2;
      var $631=$n3p1;
      var $632=___gmpn_add_n($628, $629, $630, $631);
      var $633=$4;
      var $634=$4;
      var $635=$n3p1;
      var $636=___gmpn_rshift($633, $634, $635, 1);
      var $637=$3;
      var $638=$3;
      var $639=$2;
      var $640=$n3p1;
      var $641=___gmpn_sub_n($637, $638, $639, $640);
      var $642=$2;
      var $643=$2;
      var $644=$4;
      var $645=$n3p1;
      var $646=___gmpn_sub_n($642, $643, $644, $645);
      var $647=$1;
      var $648=$5;
      var $649=(($647+($648<<2))|0);
      var $650=$1;
      var $651=$5;
      var $652=(($650+($651<<2))|0);
      var $653=$4;
      var $654=$5;
      var $655=___gmpn_add_n($649, $652, $653, $654);
      $cy=$655;
      var $656=$1;
      var $657=$5;
      var $658=($657<<1);
      var $659=(($656+($658<<2))|0);
      var $660=$4;
      var $661=$5;
      var $662=(($660+($661<<2))|0);
      var $663=$5;
      var $664=$cy;
      var $665=___gmpn_add_1($659, $662, $663, $664);
      $cy=$665;
      label = 96; break;
    case 96: 
      var $667=$4;
      var $668=$5;
      var $669=($668<<1);
      var $670=(($667+($669<<2))|0);
      $__p26=$670;
      var $671=$__p26;
      var $672=HEAP32[(($671)>>2)];
      var $673=$cy;
      var $674=((($672)+($673))|0);
      $__x25=$674;
      var $675=$__x25;
      var $676=$__p26;
      HEAP32[(($676)>>2)]=$675;
      var $677=$__x25;
      var $678=$cy;
      var $679=(($677)>>>0) < (($678)>>>0);
      if ($679) { label = 97; break; } else { label = 101; break; }
    case 97: 
      label = 98; break;
    case 98: 
      var $682=$__p26;
      var $683=(($682+4)|0);
      $__p26=$683;
      var $684=HEAP32[(($683)>>2)];
      var $685=((($684)+(1))|0);
      HEAP32[(($683)>>2)]=$685;
      var $686=(($685)|0)==0;
      if ($686) { label = 99; break; } else { label = 100; break; }
    case 99: 
      label = 98; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $691=$n3;
      var $692=$4;
      var $693=(($692+($691<<2))|0);
      var $694=HEAP32[(($693)>>2)];
      var $695=$1;
      var $696=$n3;
      var $697=(($695+($696<<2))|0);
      var $698=$1;
      var $699=$n3;
      var $700=(($698+($699<<2))|0);
      var $701=$4;
      var $702=$5;
      var $703=($702<<1);
      var $704=(($701+($703<<2))|0);
      var $705=$5;
      var $706=___gmpn_add_n($697, $700, $704, $705);
      var $707=((($694)+($706))|0);
      $cy=$707;
      label = 103; break;
    case 103: 
      var $709=$1;
      var $710=$n3;
      var $711=(($709+($710<<2))|0);
      var $712=$5;
      var $713=(($711+($712<<2))|0);
      $__p28=$713;
      var $714=$__p28;
      var $715=HEAP32[(($714)>>2)];
      var $716=$cy;
      var $717=((($715)+($716))|0);
      $__x27=$717;
      var $718=$__x27;
      var $719=$__p28;
      HEAP32[(($719)>>2)]=$718;
      var $720=$__x27;
      var $721=$cy;
      var $722=(($720)>>>0) < (($721)>>>0);
      if ($722) { label = 104; break; } else { label = 108; break; }
    case 104: 
      label = 105; break;
    case 105: 
      var $725=$__p28;
      var $726=(($725+4)|0);
      $__p28=$726;
      var $727=HEAP32[(($726)>>2)];
      var $728=((($727)+(1))|0);
      HEAP32[(($726)>>2)]=$728;
      var $729=(($728)|0)==0;
      if ($729) { label = 106; break; } else { label = 107; break; }
    case 106: 
      label = 105; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      var $734=$1;
      var $735=$5;
      var $736=((($735)*(5))&-1);
      var $737=(($734+($736<<2))|0);
      var $738=$1;
      var $739=$5;
      var $740=((($739)*(5))&-1);
      var $741=(($738+($740<<2))|0);
      var $742=$3;
      var $743=$5;
      var $744=___gmpn_add_n($737, $741, $742, $743);
      var $745=$n3;
      var $746=($745<<1);
      var $747=$1;
      var $748=(($747+($746<<2))|0);
      var $749=HEAP32[(($748)>>2)];
      var $750=((($749)+($744))|0);
      HEAP32[(($748)>>2)]=$750;
      var $751=$1;
      var $752=$n3;
      var $753=($752<<1);
      var $754=(($751+($753<<2))|0);
      var $755=$3;
      var $756=$5;
      var $757=(($755+($756<<2))|0);
      var $758=$5;
      var $759=$n3;
      var $760=($759<<1);
      var $761=$1;
      var $762=(($761+($760<<2))|0);
      var $763=HEAP32[(($762)>>2)];
      var $764=___gmpn_add_1($754, $757, $758, $763);
      $cy=$764;
      label = 110; break;
    case 110: 
      var $766=$3;
      var $767=$5;
      var $768=($767<<1);
      var $769=(($766+($768<<2))|0);
      $__p30=$769;
      var $770=$__p30;
      var $771=HEAP32[(($770)>>2)];
      var $772=$cy;
      var $773=((($771)+($772))|0);
      $__x29=$773;
      var $774=$__x29;
      var $775=$__p30;
      HEAP32[(($775)>>2)]=$774;
      var $776=$__x29;
      var $777=$cy;
      var $778=(($776)>>>0) < (($777)>>>0);
      if ($778) { label = 111; break; } else { label = 115; break; }
    case 111: 
      label = 112; break;
    case 112: 
      var $781=$__p30;
      var $782=(($781+4)|0);
      $__p30=$782;
      var $783=HEAP32[(($782)>>2)];
      var $784=((($783)+(1))|0);
      HEAP32[(($782)>>2)]=$784;
      var $785=(($784)|0)==0;
      if ($785) { label = 113; break; } else { label = 114; break; }
    case 113: 
      label = 112; break;
    case 114: 
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      var $790=$n3;
      var $791=$3;
      var $792=(($791+($790<<2))|0);
      var $793=HEAP32[(($792)>>2)];
      var $794=$1;
      var $795=$5;
      var $796=((($795)*(7))&-1);
      var $797=(($794+($796<<2))|0);
      var $798=$1;
      var $799=$5;
      var $800=((($799)*(7))&-1);
      var $801=(($798+($800<<2))|0);
      var $802=$3;
      var $803=$5;
      var $804=($803<<1);
      var $805=(($802+($804<<2))|0);
      var $806=$5;
      var $807=___gmpn_add_n($797, $801, $805, $806);
      var $808=((($793)+($807))|0);
      $cy=$808;
      label = 117; break;
    case 117: 
      var $810=$1;
      var $811=$5;
      var $812=($811<<3);
      var $813=(($810+($812<<2))|0);
      $__p32=$813;
      var $814=$__p32;
      var $815=HEAP32[(($814)>>2)];
      var $816=$cy;
      var $817=((($815)+($816))|0);
      $__x31=$817;
      var $818=$__x31;
      var $819=$__p32;
      HEAP32[(($819)>>2)]=$818;
      var $820=$__x31;
      var $821=$cy;
      var $822=(($820)>>>0) < (($821)>>>0);
      if ($822) { label = 118; break; } else { label = 122; break; }
    case 118: 
      label = 119; break;
    case 119: 
      var $825=$__p32;
      var $826=(($825+4)|0);
      $__p32=$826;
      var $827=HEAP32[(($826)>>2)];
      var $828=((($827)+(1))|0);
      HEAP32[(($826)>>2)]=$828;
      var $829=(($828)|0)==0;
      if ($829) { label = 120; break; } else { label = 121; break; }
    case 120: 
      label = 119; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $834=$1;
      var $835=$5;
      var $836=((($835)*(9))&-1);
      var $837=(($834+($836<<2))|0);
      var $838=$1;
      var $839=$5;
      var $840=((($839)*(9))&-1);
      var $841=(($838+($840<<2))|0);
      var $842=$2;
      var $843=$5;
      var $844=___gmpn_add_n($837, $841, $842, $843);
      var $845=$5;
      var $846=((($845)*(10))&-1);
      var $847=$1;
      var $848=(($847+($846<<2))|0);
      var $849=HEAP32[(($848)>>2)];
      var $850=((($849)+($844))|0);
      HEAP32[(($848)>>2)]=$850;
      var $851=$7;
      var $852=(($851)|0)!=0;
      if ($852) { label = 124; break; } else { label = 142; break; }
    case 124: 
      var $854=$1;
      var $855=$5;
      var $856=((($855)*(10))&-1);
      var $857=(($854+($856<<2))|0);
      var $858=$2;
      var $859=$5;
      var $860=(($858+($859<<2))|0);
      var $861=$5;
      var $862=$5;
      var $863=((($862)*(10))&-1);
      var $864=$1;
      var $865=(($864+($863<<2))|0);
      var $866=HEAP32[(($865)>>2)];
      var $867=___gmpn_add_1($857, $860, $861, $866);
      $cy=$867;
      label = 125; break;
    case 125: 
      var $869=$2;
      var $870=$5;
      var $871=($870<<1);
      var $872=(($869+($871<<2))|0);
      $__p34=$872;
      var $873=$__p34;
      var $874=HEAP32[(($873)>>2)];
      var $875=$cy;
      var $876=((($874)+($875))|0);
      $__x33=$876;
      var $877=$__x33;
      var $878=$__p34;
      HEAP32[(($878)>>2)]=$877;
      var $879=$__x33;
      var $880=$cy;
      var $881=(($879)>>>0) < (($880)>>>0);
      if ($881) { label = 126; break; } else { label = 130; break; }
    case 126: 
      label = 127; break;
    case 127: 
      var $884=$__p34;
      var $885=(($884+4)|0);
      $__p34=$885;
      var $886=HEAP32[(($885)>>2)];
      var $887=((($886)+(1))|0);
      HEAP32[(($885)>>2)]=$887;
      var $888=(($887)|0)==0;
      if ($888) { label = 128; break; } else { label = 129; break; }
    case 128: 
      label = 127; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      var $893=$6;
      var $894=$5;
      var $895=(($893)|0) > (($894)|0);
      if ($895) { label = 132; break; } else { label = 140; break; }
    case 132: 
      var $897=$n3;
      var $898=$2;
      var $899=(($898+($897<<2))|0);
      var $900=HEAP32[(($899)>>2)];
      var $901=$1;
      var $902=$5;
      var $903=((($902)*(11))&-1);
      var $904=(($901+($903<<2))|0);
      var $905=$1;
      var $906=$5;
      var $907=((($906)*(11))&-1);
      var $908=(($905+($907<<2))|0);
      var $909=$2;
      var $910=$5;
      var $911=($910<<1);
      var $912=(($909+($911<<2))|0);
      var $913=$5;
      var $914=___gmpn_add_n($904, $908, $912, $913);
      var $915=((($900)+($914))|0);
      $cy=$915;
      label = 133; break;
    case 133: 
      var $917=$1;
      var $918=$n3;
      var $919=($918<<2);
      var $920=(($917+($919<<2))|0);
      $__p36=$920;
      var $921=$__p36;
      var $922=HEAP32[(($921)>>2)];
      var $923=$cy;
      var $924=((($922)+($923))|0);
      $__x35=$924;
      var $925=$__x35;
      var $926=$__p36;
      HEAP32[(($926)>>2)]=$925;
      var $927=$__x35;
      var $928=$cy;
      var $929=(($927)>>>0) < (($928)>>>0);
      if ($929) { label = 134; break; } else { label = 138; break; }
    case 134: 
      label = 135; break;
    case 135: 
      var $932=$__p36;
      var $933=(($932+4)|0);
      $__p36=$933;
      var $934=HEAP32[(($933)>>2)];
      var $935=((($934)+(1))|0);
      HEAP32[(($933)>>2)]=$935;
      var $936=(($935)|0)==0;
      if ($936) { label = 136; break; } else { label = 137; break; }
    case 136: 
      label = 135; break;
    case 137: 
      label = 138; break;
    case 138: 
      label = 139; break;
    case 139: 
      label = 141; break;
    case 140: 
      var $942=$1;
      var $943=$5;
      var $944=((($943)*(11))&-1);
      var $945=(($942+($944<<2))|0);
      var $946=$1;
      var $947=$5;
      var $948=((($947)*(11))&-1);
      var $949=(($946+($948<<2))|0);
      var $950=$2;
      var $951=$5;
      var $952=($951<<1);
      var $953=(($950+($952<<2))|0);
      var $954=$6;
      var $955=___gmpn_add_n($945, $949, $953, $954);
      label = 141; break;
    case 141: 
      label = 143; break;
    case 142: 
      var $958=$1;
      var $959=$5;
      var $960=((($959)*(10))&-1);
      var $961=(($958+($960<<2))|0);
      var $962=$2;
      var $963=$5;
      var $964=(($962+($963<<2))|0);
      var $965=$6;
      var $966=$5;
      var $967=((($966)*(10))&-1);
      var $968=$1;
      var $969=(($968+($967<<2))|0);
      var $970=HEAP32[(($969)>>2)];
      var $971=___gmpn_add_1($961, $964, $965, $970);
      label = 143; break;
    case 143: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_12pts["X"]=1;

function _DO_mpn_sublsh_n($dst, $src, $n, $s, $ws) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $__cy;
  $1=$dst;
  $2=$src;
  $3=$n;
  $4=$s;
  $5=$ws;
  var $6=$5;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_lshift($6, $7, $8, $9);
  $__cy=$10;
  var $11=$__cy;
  var $12=$1;
  var $13=$1;
  var $14=$5;
  var $15=$3;
  var $16=___gmpn_sub_n($12, $13, $14, $15);
  var $17=((($11)+($16))|0);

  return $17;
}


function ___gmpn_toom_interpolate_16pts($pp, $r1, $r3, $r5, $r7, $n, $spt, $half, $wsi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $cy;
      var $n3;
      var $n3p1;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__cy;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__cy9;
      var $__x10;
      var $__p11;
      var $__x12;
      var $__p13;
      var $__x14;
      var $__p15;
      var $__cy16;
      var $__x17;
      var $__p18;
      var $__x19;
      var $__p20;
      var $__cy21;
      var $__x22;
      var $__p23;
      var $__x24;
      var $__p25;
      var $__mp_ptr_swap__tmp;
      var $__cy26;
      var $__x27;
      var $__p28;
      var $__x29;
      var $__p30;
      var $__mp_ptr_swap__tmp31;
      var $__x32;
      var $__p33;
      var $__mp_ptr_swap__tmp34;
      var $__x35;
      var $__p36;
      var $__x37;
      var $__p38;
      var $__x39;
      var $__p40;
      var $__x41;
      var $__p42;
      var $__x43;
      var $__p44;
      var $__x45;
      var $__p46;
      var $__x47;
      var $__p48;
      var $__x49;
      var $__p50;
      $1=$pp;
      $2=$r1;
      $3=$r3;
      $4=$r5;
      $5=$r7;
      $6=$n;
      $7=$spt;
      $8=$half;
      $9=$wsi;
      var $10=$6;
      var $11=((($10)*(3))&-1);
      $n3=$11;
      var $12=$n3;
      var $13=((($12)+(1))|0);
      $n3p1=$13;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $16=$8;
      var $17=(($16)|0)!=0;
      if ($17) { label = 5; break; } else { label = 84; break; }
    case 5: 
      var $19=$1;
      var $20=$6;
      var $21=((($20)*(7))&-1);
      var $22=(($19+($21<<2))|0);
      var $23=$1;
      var $24=$6;
      var $25=((($24)*(7))&-1);
      var $26=(($23+($25<<2))|0);
      var $27=$1;
      var $28=$6;
      var $29=((($28)*(15))&-1);
      var $30=(($27+($29<<2))|0);
      var $31=$7;
      var $32=___gmpn_sub_n($22, $26, $30, $31);
      $cy=$32;
      label = 6; break;
    case 6: 
      var $34=$1;
      var $35=$6;
      var $36=((($35)*(7))&-1);
      var $37=(($34+($36<<2))|0);
      var $38=$7;
      var $39=(($37+($38<<2))|0);
      $__p=$39;
      var $40=$__p;
      var $41=HEAP32[(($40)>>2)];
      $__x=$41;
      var $42=$__x;
      var $43=$cy;
      var $44=((($42)-($43))|0);
      var $45=$__p;
      HEAP32[(($45)>>2)]=$44;
      var $46=$__x;
      var $47=$cy;
      var $48=(($46)>>>0) < (($47)>>>0);
      if ($48) { label = 7; break; } else { label = 11; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $51=$__p;
      var $52=(($51+4)|0);
      $__p=$52;
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=(($53)|0)==0;
      if ($55) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $60=$3;
      var $61=$1;
      var $62=$6;
      var $63=((($62)*(15))&-1);
      var $64=(($61+($63<<2))|0);
      var $65=$7;
      var $66=$9;
      var $67=_DO_mpn_sublsh_n200($60, $64, $65, 14, $66);
      $cy=$67;
      label = 13; break;
    case 13: 
      var $69=$3;
      var $70=$7;
      var $71=(($69+($70<<2))|0);
      $__p2=$71;
      var $72=$__p2;
      var $73=HEAP32[(($72)>>2)];
      $__x1=$73;
      var $74=$__x1;
      var $75=$cy;
      var $76=((($74)-($75))|0);
      var $77=$__p2;
      HEAP32[(($77)>>2)]=$76;
      var $78=$__x1;
      var $79=$cy;
      var $80=(($78)>>>0) < (($79)>>>0);
      if ($80) { label = 14; break; } else { label = 18; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $83=$__p2;
      var $84=(($83+4)|0);
      $__p2=$84;
      var $85=HEAP32[(($84)>>2)];
      var $86=((($85)-(1))|0);
      HEAP32[(($84)>>2)]=$86;
      var $87=(($85)|0)==0;
      if ($87) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 15; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $94=$1;
      var $95=$n3;
      var $96=(($94+($95<<2))|0);
      $__p4=$96;
      var $97=$__p4;
      var $98=HEAP32[(($97)>>2)];
      $__x3=$98;
      var $99=$__x3;
      var $100=$1;
      var $101=$6;
      var $102=((($101)*(15))&-1);
      var $103=(($100+($102<<2))|0);
      var $104=(($103)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$105 >>> 2;
      var $107=((($99)-($106))|0);
      var $108=$__p4;
      HEAP32[(($108)>>2)]=$107;
      var $109=$__x3;
      var $110=$1;
      var $111=$6;
      var $112=((($111)*(15))&-1);
      var $113=(($110+($112<<2))|0);
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$115 >>> 2;
      var $117=(($109)>>>0) < (($116)>>>0);
      if ($117) { label = 22; break; } else { label = 26; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $120=$__p4;
      var $121=(($120+4)|0);
      $__p4=$121;
      var $122=HEAP32[(($121)>>2)];
      var $123=((($122)-(1))|0);
      HEAP32[(($121)>>2)]=$123;
      var $124=(($122)|0)==0;
      if ($124) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 23; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $129=$1;
      var $130=$n3;
      var $131=(($129+($130<<2))|0);
      var $132=$1;
      var $133=$6;
      var $134=((($133)*(15))&-1);
      var $135=(($132+($134<<2))|0);
      var $136=(($135+4)|0);
      var $137=$7;
      var $138=((($137)-(1))|0);
      var $139=$9;
      var $140=_DO_mpn_sublsh_n200($131, $136, $138, 30, $139);
      $__cy=$140;
      label = 28; break;
    case 28: 
      var $142=$1;
      var $143=$n3;
      var $144=(($142+($143<<2))|0);
      var $145=$7;
      var $146=(($144+($145<<2))|0);
      var $147=((($146)-(4))|0);
      $__p6=$147;
      var $148=$__p6;
      var $149=HEAP32[(($148)>>2)];
      $__x5=$149;
      var $150=$__x5;
      var $151=$__cy;
      var $152=((($150)-($151))|0);
      var $153=$__p6;
      HEAP32[(($153)>>2)]=$152;
      var $154=$__x5;
      var $155=$__cy;
      var $156=(($154)>>>0) < (($155)>>>0);
      if ($156) { label = 29; break; } else { label = 33; break; }
    case 29: 
      label = 30; break;
    case 30: 
      var $159=$__p6;
      var $160=(($159+4)|0);
      $__p6=$160;
      var $161=HEAP32[(($160)>>2)];
      var $162=((($161)-(1))|0);
      HEAP32[(($160)>>2)]=$162;
      var $163=(($161)|0)==0;
      if ($163) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 30; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $169=$1;
      var $170=$6;
      var $171=((($170)*(11))&-1);
      var $172=(($169+($171<<2))|0);
      var $173=$1;
      var $174=$6;
      var $175=((($174)*(15))&-1);
      var $176=(($173+($175<<2))|0);
      var $177=$7;
      var $178=$9;
      var $179=_DO_mpn_sublsh_n200($172, $176, $177, 28, $178);
      $cy=$179;
      label = 36; break;
    case 36: 
      var $181=$1;
      var $182=$6;
      var $183=((($182)*(11))&-1);
      var $184=(($181+($183<<2))|0);
      var $185=$7;
      var $186=(($184+($185<<2))|0);
      $__p8=$186;
      var $187=$__p8;
      var $188=HEAP32[(($187)>>2)];
      $__x7=$188;
      var $189=$__x7;
      var $190=$cy;
      var $191=((($189)-($190))|0);
      var $192=$__p8;
      HEAP32[(($192)>>2)]=$191;
      var $193=$__x7;
      var $194=$cy;
      var $195=(($193)>>>0) < (($194)>>>0);
      if ($195) { label = 37; break; } else { label = 41; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $198=$__p8;
      var $199=(($198+4)|0);
      $__p8=$199;
      var $200=HEAP32[(($199)>>2)];
      var $201=((($200)-(1))|0);
      HEAP32[(($199)>>2)]=$201;
      var $202=(($200)|0)==0;
      if ($202) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 38; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $209=$4;
      $__p11=$209;
      var $210=$__p11;
      var $211=HEAP32[(($210)>>2)];
      $__x10=$211;
      var $212=$__x10;
      var $213=$1;
      var $214=$6;
      var $215=((($214)*(15))&-1);
      var $216=(($213+($215<<2))|0);
      var $217=(($216)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=$218 >>> 4;
      var $220=((($212)-($219))|0);
      var $221=$__p11;
      HEAP32[(($221)>>2)]=$220;
      var $222=$__x10;
      var $223=$1;
      var $224=$6;
      var $225=((($224)*(15))&-1);
      var $226=(($223+($225<<2))|0);
      var $227=(($226)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=$228 >>> 4;
      var $230=(($222)>>>0) < (($229)>>>0);
      if ($230) { label = 45; break; } else { label = 49; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $233=$__p11;
      var $234=(($233+4)|0);
      $__p11=$234;
      var $235=HEAP32[(($234)>>2)];
      var $236=((($235)-(1))|0);
      HEAP32[(($234)>>2)]=$236;
      var $237=(($235)|0)==0;
      if ($237) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 46; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $242=$4;
      var $243=$1;
      var $244=$6;
      var $245=((($244)*(15))&-1);
      var $246=(($243+($245<<2))|0);
      var $247=(($246+4)|0);
      var $248=$7;
      var $249=((($248)-(1))|0);
      var $250=$9;
      var $251=_DO_mpn_sublsh_n200($242, $247, $249, 28, $250);
      $__cy9=$251;
      label = 51; break;
    case 51: 
      var $253=$4;
      var $254=$7;
      var $255=(($253+($254<<2))|0);
      var $256=((($255)-(4))|0);
      $__p13=$256;
      var $257=$__p13;
      var $258=HEAP32[(($257)>>2)];
      $__x12=$258;
      var $259=$__x12;
      var $260=$__cy9;
      var $261=((($259)-($260))|0);
      var $262=$__p13;
      HEAP32[(($262)>>2)]=$261;
      var $263=$__x12;
      var $264=$__cy9;
      var $265=(($263)>>>0) < (($264)>>>0);
      if ($265) { label = 52; break; } else { label = 56; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $268=$__p13;
      var $269=(($268+4)|0);
      $__p13=$269;
      var $270=HEAP32[(($269)>>2)];
      var $271=((($270)-(1))|0);
      HEAP32[(($269)>>2)]=$271;
      var $272=(($270)|0)==0;
      if ($272) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 53; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $278=$2;
      var $279=(($278+4)|0);
      var $280=$1;
      var $281=$6;
      var $282=((($281)*(15))&-1);
      var $283=(($280+($282<<2))|0);
      var $284=$7;
      var $285=$9;
      var $286=_DO_mpn_sublsh_n200($279, $283, $284, 10, $285);
      $cy=$286;
      label = 59; break;
    case 59: 
      var $288=$2;
      var $289=$7;
      var $290=(($288+($289<<2))|0);
      var $291=(($290+4)|0);
      $__p15=$291;
      var $292=$__p15;
      var $293=HEAP32[(($292)>>2)];
      $__x14=$293;
      var $294=$__x14;
      var $295=$cy;
      var $296=((($294)-($295))|0);
      var $297=$__p15;
      HEAP32[(($297)>>2)]=$296;
      var $298=$__x14;
      var $299=$cy;
      var $300=(($298)>>>0) < (($299)>>>0);
      if ($300) { label = 60; break; } else { label = 64; break; }
    case 60: 
      label = 61; break;
    case 61: 
      var $303=$__p15;
      var $304=(($303+4)|0);
      $__p15=$304;
      var $305=HEAP32[(($304)>>2)];
      var $306=((($305)-(1))|0);
      HEAP32[(($304)>>2)]=$306;
      var $307=(($305)|0)==0;
      if ($307) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 61; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $312=$n3p1;
      var $313=$5;
      var $314=(($313+($312<<2))|0);
      var $315=HEAP32[(($314)>>2)];
      $cy=$315;
      var $316=$n3p1;
      var $317=$5;
      var $318=(($317+($316<<2))|0);
      HEAP32[(($318)>>2)]=128;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $321=$5;
      $__p18=$321;
      var $322=$__p18;
      var $323=HEAP32[(($322)>>2)];
      $__x17=$323;
      var $324=$__x17;
      var $325=$1;
      var $326=$6;
      var $327=((($326)*(15))&-1);
      var $328=(($325+($327<<2))|0);
      var $329=(($328)|0);
      var $330=HEAP32[(($329)>>2)];
      var $331=$330 >>> 6;
      var $332=((($324)-($331))|0);
      var $333=$__p18;
      HEAP32[(($333)>>2)]=$332;
      var $334=$__x17;
      var $335=$1;
      var $336=$6;
      var $337=((($336)*(15))&-1);
      var $338=(($335+($337<<2))|0);
      var $339=(($338)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=$340 >>> 6;
      var $342=(($334)>>>0) < (($341)>>>0);
      if ($342) { label = 68; break; } else { label = 72; break; }
    case 68: 
      label = 69; break;
    case 69: 
      var $345=$__p18;
      var $346=(($345+4)|0);
      $__p18=$346;
      var $347=HEAP32[(($346)>>2)];
      var $348=((($347)-(1))|0);
      HEAP32[(($346)>>2)]=$348;
      var $349=(($347)|0)==0;
      if ($349) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 69; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $354=$5;
      var $355=$1;
      var $356=$6;
      var $357=((($356)*(15))&-1);
      var $358=(($355+($357<<2))|0);
      var $359=(($358+4)|0);
      var $360=$7;
      var $361=((($360)-(1))|0);
      var $362=$9;
      var $363=_DO_mpn_sublsh_n200($354, $359, $361, 26, $362);
      $__cy16=$363;
      label = 74; break;
    case 74: 
      var $365=$5;
      var $366=$7;
      var $367=(($365+($366<<2))|0);
      var $368=((($367)-(4))|0);
      $__p20=$368;
      var $369=$__p20;
      var $370=HEAP32[(($369)>>2)];
      $__x19=$370;
      var $371=$__x19;
      var $372=$__cy16;
      var $373=((($371)-($372))|0);
      var $374=$__p20;
      HEAP32[(($374)>>2)]=$373;
      var $375=$__x19;
      var $376=$__cy16;
      var $377=(($375)>>>0) < (($376)>>>0);
      if ($377) { label = 75; break; } else { label = 79; break; }
    case 75: 
      label = 76; break;
    case 76: 
      var $380=$__p20;
      var $381=(($380+4)|0);
      $__p20=$381;
      var $382=HEAP32[(($381)>>2)];
      var $383=((($382)-(1))|0);
      HEAP32[(($381)>>2)]=$383;
      var $384=(($382)|0)==0;
      if ($384) { label = 77; break; } else { label = 78; break; }
    case 77: 
      label = 76; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $392=$cy;
      var $393=$n3p1;
      var $394=$5;
      var $395=(($394+($393<<2))|0);
      HEAP32[(($395)>>2)]=$392;
      label = 84; break;
    case 84: 
      var $397=$4;
      var $398=$6;
      var $399=(($397+($398<<2))|0);
      var $400=$1;
      var $401=$6;
      var $402=($401<<1);
      var $403=$9;
      var $404=_DO_mpn_sublsh_n200($399, $400, $402, 28, $403);
      var $405=$n3;
      var $406=$4;
      var $407=(($406+($405<<2))|0);
      var $408=HEAP32[(($407)>>2)];
      var $409=((($408)-($404))|0);
      HEAP32[(($407)>>2)]=$409;
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $412=$1;
      var $413=$6;
      var $414=((($413)*(11))&-1);
      var $415=(($412+($414<<2))|0);
      var $416=$6;
      var $417=(($415+($416<<2))|0);
      $__p23=$417;
      var $418=$__p23;
      var $419=HEAP32[(($418)>>2)];
      $__x22=$419;
      var $420=$__x22;
      var $421=$1;
      var $422=(($421)|0);
      var $423=HEAP32[(($422)>>2)];
      var $424=$423 >>> 4;
      var $425=((($420)-($424))|0);
      var $426=$__p23;
      HEAP32[(($426)>>2)]=$425;
      var $427=$__x22;
      var $428=$1;
      var $429=(($428)|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=$430 >>> 4;
      var $432=(($427)>>>0) < (($431)>>>0);
      if ($432) { label = 87; break; } else { label = 91; break; }
    case 87: 
      label = 88; break;
    case 88: 
      var $435=$__p23;
      var $436=(($435+4)|0);
      $__p23=$436;
      var $437=HEAP32[(($436)>>2)];
      var $438=((($437)-(1))|0);
      HEAP32[(($436)>>2)]=$438;
      var $439=(($437)|0)==0;
      if ($439) { label = 89; break; } else { label = 90; break; }
    case 89: 
      label = 88; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $444=$1;
      var $445=$6;
      var $446=((($445)*(11))&-1);
      var $447=(($444+($446<<2))|0);
      var $448=$6;
      var $449=(($447+($448<<2))|0);
      var $450=$1;
      var $451=(($450+4)|0);
      var $452=$6;
      var $453=($452<<1);
      var $454=((($453)-(1))|0);
      var $455=$9;
      var $456=_DO_mpn_sublsh_n200($449, $451, $454, 28, $455);
      $__cy21=$456;
      label = 93; break;
    case 93: 
      var $458=$1;
      var $459=$6;
      var $460=((($459)*(11))&-1);
      var $461=(($458+($460<<2))|0);
      var $462=$6;
      var $463=(($461+($462<<2))|0);
      var $464=$6;
      var $465=($464<<1);
      var $466=(($463+($465<<2))|0);
      var $467=((($466)-(4))|0);
      $__p25=$467;
      var $468=$__p25;
      var $469=HEAP32[(($468)>>2)];
      $__x24=$469;
      var $470=$__x24;
      var $471=$__cy21;
      var $472=((($470)-($471))|0);
      var $473=$__p25;
      HEAP32[(($473)>>2)]=$472;
      var $474=$__x24;
      var $475=$__cy21;
      var $476=(($474)>>>0) < (($475)>>>0);
      if ($476) { label = 94; break; } else { label = 98; break; }
    case 94: 
      label = 95; break;
    case 95: 
      var $479=$__p25;
      var $480=(($479+4)|0);
      $__p25=$480;
      var $481=HEAP32[(($480)>>2)];
      var $482=((($481)-(1))|0);
      HEAP32[(($480)>>2)]=$482;
      var $483=(($481)|0)==0;
      if ($483) { label = 96; break; } else { label = 97; break; }
    case 96: 
      label = 95; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      var $489=$9;
      var $490=$4;
      var $491=$1;
      var $492=$6;
      var $493=((($492)*(11))&-1);
      var $494=(($491+($493<<2))|0);
      var $495=$n3p1;
      var $496=___gmpn_sub_n($489, $490, $494, $495);
      var $497=$1;
      var $498=$6;
      var $499=((($498)*(11))&-1);
      var $500=(($497+($499<<2))|0);
      var $501=$1;
      var $502=$6;
      var $503=((($502)*(11))&-1);
      var $504=(($501+($503<<2))|0);
      var $505=$4;
      var $506=$n3p1;
      var $507=___gmpn_add_n($500, $504, $505, $506);
      label = 101; break;
    case 101: 
      var $509=$4;
      $__mp_ptr_swap__tmp=$509;
      var $510=$9;
      $4=$510;
      var $511=$__mp_ptr_swap__tmp;
      $9=$511;
      label = 102; break;
    case 102: 
      var $513=$1;
      var $514=$n3;
      var $515=(($513+($514<<2))|0);
      var $516=$6;
      var $517=(($515+($516<<2))|0);
      var $518=$1;
      var $519=$6;
      var $520=($519<<1);
      var $521=$9;
      var $522=_DO_mpn_sublsh_n200($517, $518, $520, 14, $521);
      var $523=$n3;
      var $524=$1;
      var $525=$n3;
      var $526=(($524+($525<<2))|0);
      var $527=(($526+($523<<2))|0);
      var $528=HEAP32[(($527)>>2)];
      var $529=((($528)-($522))|0);
      HEAP32[(($527)>>2)]=$529;
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $532=$3;
      var $533=$6;
      var $534=(($532+($533<<2))|0);
      $__p28=$534;
      var $535=$__p28;
      var $536=HEAP32[(($535)>>2)];
      $__x27=$536;
      var $537=$__x27;
      var $538=$1;
      var $539=(($538)|0);
      var $540=HEAP32[(($539)>>2)];
      var $541=$540 >>> 2;
      var $542=((($537)-($541))|0);
      var $543=$__p28;
      HEAP32[(($543)>>2)]=$542;
      var $544=$__x27;
      var $545=$1;
      var $546=(($545)|0);
      var $547=HEAP32[(($546)>>2)];
      var $548=$547 >>> 2;
      var $549=(($544)>>>0) < (($548)>>>0);
      if ($549) { label = 105; break; } else { label = 109; break; }
    case 105: 
      label = 106; break;
    case 106: 
      var $552=$__p28;
      var $553=(($552+4)|0);
      $__p28=$553;
      var $554=HEAP32[(($553)>>2)];
      var $555=((($554)-(1))|0);
      HEAP32[(($553)>>2)]=$555;
      var $556=(($554)|0)==0;
      if ($556) { label = 107; break; } else { label = 108; break; }
    case 107: 
      label = 106; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $561=$3;
      var $562=$6;
      var $563=(($561+($562<<2))|0);
      var $564=$1;
      var $565=(($564+4)|0);
      var $566=$6;
      var $567=($566<<1);
      var $568=((($567)-(1))|0);
      var $569=$9;
      var $570=_DO_mpn_sublsh_n200($563, $565, $568, 30, $569);
      $__cy26=$570;
      label = 111; break;
    case 111: 
      var $572=$3;
      var $573=$6;
      var $574=(($572+($573<<2))|0);
      var $575=$6;
      var $576=($575<<1);
      var $577=(($574+($576<<2))|0);
      var $578=((($577)-(4))|0);
      $__p30=$578;
      var $579=$__p30;
      var $580=HEAP32[(($579)>>2)];
      $__x29=$580;
      var $581=$__x29;
      var $582=$__cy26;
      var $583=((($581)-($582))|0);
      var $584=$__p30;
      HEAP32[(($584)>>2)]=$583;
      var $585=$__x29;
      var $586=$__cy26;
      var $587=(($585)>>>0) < (($586)>>>0);
      if ($587) { label = 112; break; } else { label = 116; break; }
    case 112: 
      label = 113; break;
    case 113: 
      var $590=$__p30;
      var $591=(($590+4)|0);
      $__p30=$591;
      var $592=HEAP32[(($591)>>2)];
      var $593=((($592)-(1))|0);
      HEAP32[(($591)>>2)]=$593;
      var $594=(($592)|0)==0;
      if ($594) { label = 114; break; } else { label = 115; break; }
    case 114: 
      label = 113; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      var $600=$9;
      var $601=$3;
      var $602=$1;
      var $603=$n3;
      var $604=(($602+($603<<2))|0);
      var $605=$n3p1;
      var $606=___gmpn_add_n($600, $601, $604, $605);
      var $607=$1;
      var $608=$n3;
      var $609=(($607+($608<<2))|0);
      var $610=$1;
      var $611=$n3;
      var $612=(($610+($611<<2))|0);
      var $613=$3;
      var $614=$n3p1;
      var $615=___gmpn_sub_n($609, $612, $613, $614);
      label = 119; break;
    case 119: 
      var $617=$3;
      $__mp_ptr_swap__tmp31=$617;
      var $618=$9;
      $3=$618;
      var $619=$__mp_ptr_swap__tmp31;
      $9=$619;
      label = 120; break;
    case 120: 
      var $621=$5;
      var $622=$6;
      var $623=(($621+($622<<2))|0);
      var $624=(($623+4)|0);
      var $625=$1;
      var $626=$6;
      var $627=($626<<1);
      var $628=$9;
      var $629=_DO_mpn_sublsh_n200($624, $625, $627, 10, $628);
      $cy=$629;
      label = 121; break;
    case 121: 
      var $631=$2;
      var $632=$6;
      var $633=(($631+($632<<2))|0);
      $__p33=$633;
      var $634=$__p33;
      var $635=HEAP32[(($634)>>2)];
      $__x32=$635;
      var $636=$__x32;
      var $637=$1;
      var $638=(($637)|0);
      var $639=HEAP32[(($638)>>2)];
      var $640=$639 >>> 6;
      var $641=((($636)-($640))|0);
      var $642=$__p33;
      HEAP32[(($642)>>2)]=$641;
      var $643=$__x32;
      var $644=$1;
      var $645=(($644)|0);
      var $646=HEAP32[(($645)>>2)];
      var $647=$646 >>> 6;
      var $648=(($643)>>>0) < (($647)>>>0);
      if ($648) { label = 122; break; } else { label = 126; break; }
    case 122: 
      label = 123; break;
    case 123: 
      var $651=$__p33;
      var $652=(($651+4)|0);
      $__p33=$652;
      var $653=HEAP32[(($652)>>2)];
      var $654=((($653)-(1))|0);
      HEAP32[(($652)>>2)]=$654;
      var $655=(($653)|0)==0;
      if ($655) { label = 124; break; } else { label = 125; break; }
    case 124: 
      label = 123; break;
    case 125: 
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      var $660=$2;
      var $661=$6;
      var $662=(($660+($661<<2))|0);
      var $663=$1;
      var $664=(($663+4)|0);
      var $665=$6;
      var $666=($665<<1);
      var $667=((($666)-(1))|0);
      var $668=$9;
      var $669=_DO_mpn_sublsh_n200($662, $664, $667, 26, $668);
      $cy=$669;
      var $670=$2;
      var $671=$6;
      var $672=((($671)*(3))&-1);
      var $673=(($670+($672<<2))|0);
      var $674=((($673)-(4))|0);
      var $675=$2;
      var $676=$6;
      var $677=((($676)*(3))&-1);
      var $678=(($675+($677<<2))|0);
      var $679=((($678)-(4))|0);
      var $680=$cy;
      var $681=___gmpn_sub_1($674, $679, 2, $680);
      $cy=$681;
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $684=$9;
      var $685=$5;
      var $686=$2;
      var $687=$n3p1;
      var $688=___gmpn_sub_n($684, $685, $686, $687);
      var $689=$2;
      var $690=$2;
      var $691=$5;
      var $692=$n3p1;
      var $693=___gmpn_add_n($689, $690, $691, $692);
      label = 130; break;
    case 130: 
      var $695=$5;
      $__mp_ptr_swap__tmp34=$695;
      var $696=$9;
      $5=$696;
      var $697=$__mp_ptr_swap__tmp34;
      $9=$697;
      label = 131; break;
    case 131: 
      var $699=$1;
      var $700=$6;
      var $701=((($700)*(7))&-1);
      var $702=(($699+($701<<2))|0);
      var $703=$6;
      var $704=(($702+($703<<2))|0);
      var $705=$1;
      var $706=$6;
      var $707=((($706)*(7))&-1);
      var $708=(($705+($707<<2))|0);
      var $709=$6;
      var $710=(($708+($709<<2))|0);
      var $711=$1;
      var $712=$6;
      var $713=($712<<1);
      var $714=___gmpn_sub_n($704, $710, $711, $713);
      var $715=$n3;
      var $716=$1;
      var $717=$6;
      var $718=((($717)*(7))&-1);
      var $719=(($716+($718<<2))|0);
      var $720=(($719+($715<<2))|0);
      var $721=HEAP32[(($720)>>2)];
      var $722=((($721)-($714))|0);
      HEAP32[(($720)>>2)]=$722;
      var $723=$4;
      var $724=$1;
      var $725=$n3;
      var $726=(($724+($725<<2))|0);
      var $727=$n3p1;
      var $728=___gmpn_submul_1($723, $726, $727, 1028);
      var $729=$5;
      var $730=$4;
      var $731=$n3p1;
      var $732=___gmpn_submul_1($729, $730, $731, 1300);
      var $733=$5;
      var $734=$1;
      var $735=$n3;
      var $736=(($734+($735<<2))|0);
      var $737=$n3p1;
      var $738=___gmpn_submul_1($733, $736, $737, 1052688);
      label = 132; break;
    case 132: 
      var $740=$5;
      var $741=$5;
      var $742=$n3p1;
      ___gmpn_divexact_1($740, $741, $742, 188513325);
      var $743=$5;
      var $744=$5;
      var $745=$n3p1;
      var $746=___gmpn_bdiv_dbm1c($743, $744, $745, 16843009, 0);
      var $747=$746;
      var $748=255 & $747;
      label = 133; break;
    case 133: 
      var $750=$4;
      var $751=$5;
      var $752=$n3p1;
      var $753=___gmpn_submul_1($750, $751, $752, 12567555);
      var $754=$4;
      var $755=$4;
      var $756=$n3p1;
      ___gmpn_divexact_1($754, $755, $756, 181440);
      var $757=$n3;
      var $758=$4;
      var $759=(($758+($757<<2))|0);
      var $760=HEAP32[(($759)>>2)];
      var $761=$760 & -33554432;
      var $762=(($761)|0)!=0;
      if ($762) { label = 134; break; } else { label = 135; break; }
    case 134: 
      var $764=$n3;
      var $765=$4;
      var $766=(($765+($764<<2))|0);
      var $767=HEAP32[(($766)>>2)];
      var $768=$767 | -67108864;
      HEAP32[(($766)>>2)]=$768;
      label = 135; break;
    case 135: 
      var $770=$1;
      var $771=$n3;
      var $772=(($770+($771<<2))|0);
      var $773=$5;
      var $774=$n3p1;
      var $775=___gmpn_submul_1($772, $773, $774, 4095);
      var $776=$1;
      var $777=$n3;
      var $778=(($776+($777<<2))|0);
      var $779=$4;
      var $780=$n3p1;
      var $781=___gmpn_addmul_1($778, $779, $780, 240);
      var $782=$1;
      var $783=$n3;
      var $784=(($782+($783<<2))|0);
      var $785=$1;
      var $786=$n3;
      var $787=(($785+($786<<2))|0);
      var $788=$n3p1;
      ___gmpn_divexact_1($784, $787, $788, 1020);
      var $789=$n3;
      var $790=$1;
      var $791=$n3;
      var $792=(($790+($791<<2))|0);
      var $793=(($792+($789<<2))|0);
      var $794=HEAP32[(($793)>>2)];
      var $795=$794 & -536870912;
      var $796=(($795)|0)!=0;
      if ($796) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $798=$n3;
      var $799=$1;
      var $800=$n3;
      var $801=(($799+($800<<2))|0);
      var $802=(($801+($798<<2))|0);
      var $803=HEAP32[(($802)>>2)];
      var $804=$803 | -1073741824;
      HEAP32[(($802)>>2)]=$804;
      label = 137; break;
    case 137: 
      var $806=$3;
      var $807=$1;
      var $808=$6;
      var $809=((($808)*(7))&-1);
      var $810=(($807+($809<<2))|0);
      var $811=$n3p1;
      var $812=$9;
      var $813=_DO_mpn_sublsh_n200($806, $810, $811, 7, $812);
      var $814=$1;
      var $815=$6;
      var $816=((($815)*(11))&-1);
      var $817=(($814+($816<<2))|0);
      var $818=$1;
      var $819=$6;
      var $820=((($819)*(7))&-1);
      var $821=(($818+($820<<2))|0);
      var $822=$n3p1;
      var $823=$9;
      var $824=_DO_mpn_sublsh_n200($817, $821, $822, 13, $823);
      var $825=$1;
      var $826=$6;
      var $827=((($826)*(11))&-1);
      var $828=(($825+($827<<2))|0);
      var $829=$3;
      var $830=$n3p1;
      var $831=___gmpn_submul_1($828, $829, $830, 400);
      var $832=$2;
      var $833=$1;
      var $834=$6;
      var $835=((($834)*(7))&-1);
      var $836=(($833+($835<<2))|0);
      var $837=$n3p1;
      var $838=$9;
      var $839=_DO_mpn_sublsh_n200($832, $836, $837, 19, $838);
      var $840=$2;
      var $841=$1;
      var $842=$6;
      var $843=((($842)*(11))&-1);
      var $844=(($841+($843<<2))|0);
      var $845=$n3p1;
      var $846=___gmpn_submul_1($840, $844, $845, 1428);
      var $847=$2;
      var $848=$3;
      var $849=$n3p1;
      var $850=___gmpn_submul_1($847, $848, $849, 112896);
      label = 138; break;
    case 138: 
      var $852=$2;
      var $853=$2;
      var $854=$n3p1;
      ___gmpn_divexact_1($852, $853, $854, 182712915);
      var $855=$2;
      var $856=$2;
      var $857=$n3p1;
      var $858=___gmpn_bdiv_dbm1c($855, $856, $857, 16843009, 0);
      var $859=$858;
      var $860=255 & $859;
      label = 139; break;
    case 139: 
      var $862=$1;
      var $863=$6;
      var $864=((($863)*(11))&-1);
      var $865=(($862+($864<<2))|0);
      var $866=$2;
      var $867=$n3p1;
      var $868=___gmpn_submul_1($865, $866, $867, 15181425);
      var $869=$1;
      var $870=$6;
      var $871=((($870)*(11))&-1);
      var $872=(($869+($871<<2))|0);
      var $873=$1;
      var $874=$6;
      var $875=((($874)*(11))&-1);
      var $876=(($873+($875<<2))|0);
      var $877=$n3p1;
      ___gmpn_divexact_1($872, $876, $877, 680400);
      var $878=$3;
      var $879=$2;
      var $880=$n3p1;
      var $881=___gmpn_submul_1($878, $879, $880, 3969);
      var $882=$3;
      var $883=$1;
      var $884=$6;
      var $885=((($884)*(11))&-1);
      var $886=(($883+($885<<2))|0);
      var $887=$n3p1;
      var $888=___gmpn_submul_1($882, $886, $887, 900);
      var $889=$3;
      var $890=$3;
      var $891=$n3p1;
      ___gmpn_divexact_1($889, $890, $891, 144);
      var $892=$1;
      var $893=$6;
      var $894=((($893)*(7))&-1);
      var $895=(($892+($894<<2))|0);
      var $896=$1;
      var $897=$6;
      var $898=((($897)*(7))&-1);
      var $899=(($896+($898<<2))|0);
      var $900=$2;
      var $901=$n3p1;
      var $902=___gmpn_sub_n($895, $899, $900, $901);
      var $903=$1;
      var $904=$6;
      var $905=((($904)*(7))&-1);
      var $906=(($903+($905<<2))|0);
      var $907=$1;
      var $908=$6;
      var $909=((($908)*(7))&-1);
      var $910=(($907+($909<<2))|0);
      var $911=$3;
      var $912=$n3p1;
      var $913=___gmpn_sub_n($906, $910, $911, $912);
      var $914=$1;
      var $915=$6;
      var $916=((($915)*(7))&-1);
      var $917=(($914+($916<<2))|0);
      var $918=$1;
      var $919=$6;
      var $920=((($919)*(7))&-1);
      var $921=(($918+($920<<2))|0);
      var $922=$1;
      var $923=$6;
      var $924=((($923)*(11))&-1);
      var $925=(($922+($924<<2))|0);
      var $926=$n3p1;
      var $927=___gmpn_sub_n($917, $921, $925, $926);
      var $928=$1;
      var $929=$n3;
      var $930=(($928+($929<<2))|0);
      var $931=$1;
      var $932=$6;
      var $933=((($932)*(11))&-1);
      var $934=(($931+($933<<2))|0);
      var $935=$1;
      var $936=$n3;
      var $937=(($935+($936<<2))|0);
      var $938=$n3p1;
      var $939=___gmpn_add_n($930, $934, $937, $938);
      var $940=$1;
      var $941=$n3;
      var $942=(($940+($941<<2))|0);
      var $943=$1;
      var $944=$n3;
      var $945=(($943+($944<<2))|0);
      var $946=$n3p1;
      var $947=___gmpn_rshift($942, $945, $946, 1);
      var $948=$1;
      var $949=$6;
      var $950=((($949)*(11))&-1);
      var $951=(($948+($950<<2))|0);
      var $952=$1;
      var $953=$6;
      var $954=((($953)*(11))&-1);
      var $955=(($952+($954<<2))|0);
      var $956=$1;
      var $957=$n3;
      var $958=(($956+($957<<2))|0);
      var $959=$n3p1;
      var $960=___gmpn_sub_n($951, $955, $958, $959);
      var $961=$4;
      var $962=$3;
      var $963=$4;
      var $964=$n3p1;
      var $965=___gmpn_sub_n($961, $962, $963, $964);
      var $966=$4;
      var $967=$4;
      var $968=$n3p1;
      var $969=___gmpn_rshift($966, $967, $968, 1);
      var $970=$3;
      var $971=$3;
      var $972=$4;
      var $973=$n3p1;
      var $974=___gmpn_sub_n($970, $971, $972, $973);
      var $975=$5;
      var $976=$2;
      var $977=$5;
      var $978=$n3p1;
      var $979=___gmpn_add_n($975, $976, $977, $978);
      var $980=$5;
      var $981=$5;
      var $982=$n3p1;
      var $983=___gmpn_rshift($980, $981, $982, 1);
      var $984=$2;
      var $985=$2;
      var $986=$5;
      var $987=$n3p1;
      var $988=___gmpn_sub_n($984, $985, $986, $987);
      var $989=$1;
      var $990=$6;
      var $991=(($989+($990<<2))|0);
      var $992=$1;
      var $993=$6;
      var $994=(($992+($993<<2))|0);
      var $995=$5;
      var $996=$6;
      var $997=___gmpn_add_n($991, $994, $995, $996);
      $cy=$997;
      var $998=$1;
      var $999=$6;
      var $1000=($999<<1);
      var $1001=(($998+($1000<<2))|0);
      var $1002=$5;
      var $1003=$6;
      var $1004=(($1002+($1003<<2))|0);
      var $1005=$6;
      var $1006=$cy;
      var $1007=___gmpn_add_1($1001, $1004, $1005, $1006);
      $cy=$1007;
      label = 140; break;
    case 140: 
      var $1009=$5;
      var $1010=$6;
      var $1011=($1010<<1);
      var $1012=(($1009+($1011<<2))|0);
      $__p36=$1012;
      var $1013=$__p36;
      var $1014=HEAP32[(($1013)>>2)];
      var $1015=$cy;
      var $1016=((($1014)+($1015))|0);
      $__x35=$1016;
      var $1017=$__x35;
      var $1018=$__p36;
      HEAP32[(($1018)>>2)]=$1017;
      var $1019=$__x35;
      var $1020=$cy;
      var $1021=(($1019)>>>0) < (($1020)>>>0);
      if ($1021) { label = 141; break; } else { label = 145; break; }
    case 141: 
      label = 142; break;
    case 142: 
      var $1024=$__p36;
      var $1025=(($1024+4)|0);
      $__p36=$1025;
      var $1026=HEAP32[(($1025)>>2)];
      var $1027=((($1026)+(1))|0);
      HEAP32[(($1025)>>2)]=$1027;
      var $1028=(($1027)|0)==0;
      if ($1028) { label = 143; break; } else { label = 144; break; }
    case 143: 
      label = 142; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      var $1033=$n3;
      var $1034=$5;
      var $1035=(($1034+($1033<<2))|0);
      var $1036=HEAP32[(($1035)>>2)];
      var $1037=$1;
      var $1038=$n3;
      var $1039=(($1037+($1038<<2))|0);
      var $1040=$1;
      var $1041=$n3;
      var $1042=(($1040+($1041<<2))|0);
      var $1043=$5;
      var $1044=$6;
      var $1045=($1044<<1);
      var $1046=(($1043+($1045<<2))|0);
      var $1047=$6;
      var $1048=___gmpn_add_n($1039, $1042, $1046, $1047);
      var $1049=((($1036)+($1048))|0);
      $cy=$1049;
      label = 147; break;
    case 147: 
      var $1051=$1;
      var $1052=$6;
      var $1053=($1052<<2);
      var $1054=(($1051+($1053<<2))|0);
      $__p38=$1054;
      var $1055=$__p38;
      var $1056=HEAP32[(($1055)>>2)];
      var $1057=$cy;
      var $1058=((($1056)+($1057))|0);
      $__x37=$1058;
      var $1059=$__x37;
      var $1060=$__p38;
      HEAP32[(($1060)>>2)]=$1059;
      var $1061=$__x37;
      var $1062=$cy;
      var $1063=(($1061)>>>0) < (($1062)>>>0);
      if ($1063) { label = 148; break; } else { label = 152; break; }
    case 148: 
      label = 149; break;
    case 149: 
      var $1066=$__p38;
      var $1067=(($1066+4)|0);
      $__p38=$1067;
      var $1068=HEAP32[(($1067)>>2)];
      var $1069=((($1068)+(1))|0);
      HEAP32[(($1067)>>2)]=$1069;
      var $1070=(($1069)|0)==0;
      if ($1070) { label = 150; break; } else { label = 151; break; }
    case 150: 
      label = 149; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      var $1075=$1;
      var $1076=$6;
      var $1077=((($1076)*(5))&-1);
      var $1078=(($1075+($1077<<2))|0);
      var $1079=$1;
      var $1080=$6;
      var $1081=((($1080)*(5))&-1);
      var $1082=(($1079+($1081<<2))|0);
      var $1083=$4;
      var $1084=$6;
      var $1085=___gmpn_add_n($1078, $1082, $1083, $1084);
      var $1086=$n3;
      var $1087=($1086<<1);
      var $1088=$1;
      var $1089=(($1088+($1087<<2))|0);
      var $1090=HEAP32[(($1089)>>2)];
      var $1091=((($1090)+($1085))|0);
      HEAP32[(($1089)>>2)]=$1091;
      var $1092=$1;
      var $1093=$n3;
      var $1094=($1093<<1);
      var $1095=(($1092+($1094<<2))|0);
      var $1096=$4;
      var $1097=$6;
      var $1098=(($1096+($1097<<2))|0);
      var $1099=$6;
      var $1100=$n3;
      var $1101=($1100<<1);
      var $1102=$1;
      var $1103=(($1102+($1101<<2))|0);
      var $1104=HEAP32[(($1103)>>2)];
      var $1105=___gmpn_add_1($1095, $1098, $1099, $1104);
      $cy=$1105;
      label = 154; break;
    case 154: 
      var $1107=$4;
      var $1108=$6;
      var $1109=($1108<<1);
      var $1110=(($1107+($1109<<2))|0);
      $__p40=$1110;
      var $1111=$__p40;
      var $1112=HEAP32[(($1111)>>2)];
      var $1113=$cy;
      var $1114=((($1112)+($1113))|0);
      $__x39=$1114;
      var $1115=$__x39;
      var $1116=$__p40;
      HEAP32[(($1116)>>2)]=$1115;
      var $1117=$__x39;
      var $1118=$cy;
      var $1119=(($1117)>>>0) < (($1118)>>>0);
      if ($1119) { label = 155; break; } else { label = 159; break; }
    case 155: 
      label = 156; break;
    case 156: 
      var $1122=$__p40;
      var $1123=(($1122+4)|0);
      $__p40=$1123;
      var $1124=HEAP32[(($1123)>>2)];
      var $1125=((($1124)+(1))|0);
      HEAP32[(($1123)>>2)]=$1125;
      var $1126=(($1125)|0)==0;
      if ($1126) { label = 157; break; } else { label = 158; break; }
    case 157: 
      label = 156; break;
    case 158: 
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      var $1131=$n3;
      var $1132=$4;
      var $1133=(($1132+($1131<<2))|0);
      var $1134=HEAP32[(($1133)>>2)];
      var $1135=$1;
      var $1136=$6;
      var $1137=((($1136)*(7))&-1);
      var $1138=(($1135+($1137<<2))|0);
      var $1139=$1;
      var $1140=$6;
      var $1141=((($1140)*(7))&-1);
      var $1142=(($1139+($1141<<2))|0);
      var $1143=$4;
      var $1144=$6;
      var $1145=($1144<<1);
      var $1146=(($1143+($1145<<2))|0);
      var $1147=$6;
      var $1148=___gmpn_add_n($1138, $1142, $1146, $1147);
      var $1149=((($1134)+($1148))|0);
      $cy=$1149;
      label = 161; break;
    case 161: 
      var $1151=$1;
      var $1152=$6;
      var $1153=($1152<<3);
      var $1154=(($1151+($1153<<2))|0);
      $__p42=$1154;
      var $1155=$__p42;
      var $1156=HEAP32[(($1155)>>2)];
      var $1157=$cy;
      var $1158=((($1156)+($1157))|0);
      $__x41=$1158;
      var $1159=$__x41;
      var $1160=$__p42;
      HEAP32[(($1160)>>2)]=$1159;
      var $1161=$__x41;
      var $1162=$cy;
      var $1163=(($1161)>>>0) < (($1162)>>>0);
      if ($1163) { label = 162; break; } else { label = 166; break; }
    case 162: 
      label = 163; break;
    case 163: 
      var $1166=$__p42;
      var $1167=(($1166+4)|0);
      $__p42=$1167;
      var $1168=HEAP32[(($1167)>>2)];
      var $1169=((($1168)+(1))|0);
      HEAP32[(($1167)>>2)]=$1169;
      var $1170=(($1169)|0)==0;
      if ($1170) { label = 164; break; } else { label = 165; break; }
    case 164: 
      label = 163; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      var $1175=$1;
      var $1176=$6;
      var $1177=((($1176)*(9))&-1);
      var $1178=(($1175+($1177<<2))|0);
      var $1179=$1;
      var $1180=$6;
      var $1181=((($1180)*(9))&-1);
      var $1182=(($1179+($1181<<2))|0);
      var $1183=$3;
      var $1184=$6;
      var $1185=___gmpn_add_n($1178, $1182, $1183, $1184);
      var $1186=$6;
      var $1187=((($1186)*(10))&-1);
      var $1188=$1;
      var $1189=(($1188+($1187<<2))|0);
      var $1190=HEAP32[(($1189)>>2)];
      var $1191=((($1190)+($1185))|0);
      HEAP32[(($1189)>>2)]=$1191;
      var $1192=$1;
      var $1193=$6;
      var $1194=((($1193)*(10))&-1);
      var $1195=(($1192+($1194<<2))|0);
      var $1196=$3;
      var $1197=$6;
      var $1198=(($1196+($1197<<2))|0);
      var $1199=$6;
      var $1200=$6;
      var $1201=((($1200)*(10))&-1);
      var $1202=$1;
      var $1203=(($1202+($1201<<2))|0);
      var $1204=HEAP32[(($1203)>>2)];
      var $1205=___gmpn_add_1($1195, $1198, $1199, $1204);
      $cy=$1205;
      label = 168; break;
    case 168: 
      var $1207=$3;
      var $1208=$6;
      var $1209=($1208<<1);
      var $1210=(($1207+($1209<<2))|0);
      $__p44=$1210;
      var $1211=$__p44;
      var $1212=HEAP32[(($1211)>>2)];
      var $1213=$cy;
      var $1214=((($1212)+($1213))|0);
      $__x43=$1214;
      var $1215=$__x43;
      var $1216=$__p44;
      HEAP32[(($1216)>>2)]=$1215;
      var $1217=$__x43;
      var $1218=$cy;
      var $1219=(($1217)>>>0) < (($1218)>>>0);
      if ($1219) { label = 169; break; } else { label = 173; break; }
    case 169: 
      label = 170; break;
    case 170: 
      var $1222=$__p44;
      var $1223=(($1222+4)|0);
      $__p44=$1223;
      var $1224=HEAP32[(($1223)>>2)];
      var $1225=((($1224)+(1))|0);
      HEAP32[(($1223)>>2)]=$1225;
      var $1226=(($1225)|0)==0;
      if ($1226) { label = 171; break; } else { label = 172; break; }
    case 171: 
      label = 170; break;
    case 172: 
      label = 173; break;
    case 173: 
      label = 174; break;
    case 174: 
      var $1231=$n3;
      var $1232=$3;
      var $1233=(($1232+($1231<<2))|0);
      var $1234=HEAP32[(($1233)>>2)];
      var $1235=$1;
      var $1236=$6;
      var $1237=((($1236)*(11))&-1);
      var $1238=(($1235+($1237<<2))|0);
      var $1239=$1;
      var $1240=$6;
      var $1241=((($1240)*(11))&-1);
      var $1242=(($1239+($1241<<2))|0);
      var $1243=$3;
      var $1244=$6;
      var $1245=($1244<<1);
      var $1246=(($1243+($1245<<2))|0);
      var $1247=$6;
      var $1248=___gmpn_add_n($1238, $1242, $1246, $1247);
      var $1249=((($1234)+($1248))|0);
      $cy=$1249;
      label = 175; break;
    case 175: 
      var $1251=$1;
      var $1252=$6;
      var $1253=((($1252)*(12))&-1);
      var $1254=(($1251+($1253<<2))|0);
      $__p46=$1254;
      var $1255=$__p46;
      var $1256=HEAP32[(($1255)>>2)];
      var $1257=$cy;
      var $1258=((($1256)+($1257))|0);
      $__x45=$1258;
      var $1259=$__x45;
      var $1260=$__p46;
      HEAP32[(($1260)>>2)]=$1259;
      var $1261=$__x45;
      var $1262=$cy;
      var $1263=(($1261)>>>0) < (($1262)>>>0);
      if ($1263) { label = 176; break; } else { label = 180; break; }
    case 176: 
      label = 177; break;
    case 177: 
      var $1266=$__p46;
      var $1267=(($1266+4)|0);
      $__p46=$1267;
      var $1268=HEAP32[(($1267)>>2)];
      var $1269=((($1268)+(1))|0);
      HEAP32[(($1267)>>2)]=$1269;
      var $1270=(($1269)|0)==0;
      if ($1270) { label = 178; break; } else { label = 179; break; }
    case 178: 
      label = 177; break;
    case 179: 
      label = 180; break;
    case 180: 
      label = 181; break;
    case 181: 
      var $1275=$1;
      var $1276=$6;
      var $1277=((($1276)*(13))&-1);
      var $1278=(($1275+($1277<<2))|0);
      var $1279=$1;
      var $1280=$6;
      var $1281=((($1280)*(13))&-1);
      var $1282=(($1279+($1281<<2))|0);
      var $1283=$2;
      var $1284=$6;
      var $1285=___gmpn_add_n($1278, $1282, $1283, $1284);
      var $1286=$6;
      var $1287=((($1286)*(14))&-1);
      var $1288=$1;
      var $1289=(($1288+($1287<<2))|0);
      var $1290=HEAP32[(($1289)>>2)];
      var $1291=((($1290)+($1285))|0);
      HEAP32[(($1289)>>2)]=$1291;
      var $1292=$8;
      var $1293=(($1292)|0)!=0;
      if ($1293) { label = 182; break; } else { label = 200; break; }
    case 182: 
      var $1295=$1;
      var $1296=$6;
      var $1297=((($1296)*(14))&-1);
      var $1298=(($1295+($1297<<2))|0);
      var $1299=$2;
      var $1300=$6;
      var $1301=(($1299+($1300<<2))|0);
      var $1302=$6;
      var $1303=$6;
      var $1304=((($1303)*(14))&-1);
      var $1305=$1;
      var $1306=(($1305+($1304<<2))|0);
      var $1307=HEAP32[(($1306)>>2)];
      var $1308=___gmpn_add_1($1298, $1301, $1302, $1307);
      $cy=$1308;
      label = 183; break;
    case 183: 
      var $1310=$2;
      var $1311=$6;
      var $1312=($1311<<1);
      var $1313=(($1310+($1312<<2))|0);
      $__p48=$1313;
      var $1314=$__p48;
      var $1315=HEAP32[(($1314)>>2)];
      var $1316=$cy;
      var $1317=((($1315)+($1316))|0);
      $__x47=$1317;
      var $1318=$__x47;
      var $1319=$__p48;
      HEAP32[(($1319)>>2)]=$1318;
      var $1320=$__x47;
      var $1321=$cy;
      var $1322=(($1320)>>>0) < (($1321)>>>0);
      if ($1322) { label = 184; break; } else { label = 188; break; }
    case 184: 
      label = 185; break;
    case 185: 
      var $1325=$__p48;
      var $1326=(($1325+4)|0);
      $__p48=$1326;
      var $1327=HEAP32[(($1326)>>2)];
      var $1328=((($1327)+(1))|0);
      HEAP32[(($1326)>>2)]=$1328;
      var $1329=(($1328)|0)==0;
      if ($1329) { label = 186; break; } else { label = 187; break; }
    case 186: 
      label = 185; break;
    case 187: 
      label = 188; break;
    case 188: 
      label = 189; break;
    case 189: 
      var $1334=$7;
      var $1335=$6;
      var $1336=(($1334)|0) > (($1335)|0);
      if ($1336) { label = 190; break; } else { label = 198; break; }
    case 190: 
      var $1338=$n3;
      var $1339=$2;
      var $1340=(($1339+($1338<<2))|0);
      var $1341=HEAP32[(($1340)>>2)];
      var $1342=$1;
      var $1343=$6;
      var $1344=((($1343)*(15))&-1);
      var $1345=(($1342+($1344<<2))|0);
      var $1346=$1;
      var $1347=$6;
      var $1348=((($1347)*(15))&-1);
      var $1349=(($1346+($1348<<2))|0);
      var $1350=$2;
      var $1351=$6;
      var $1352=($1351<<1);
      var $1353=(($1350+($1352<<2))|0);
      var $1354=$6;
      var $1355=___gmpn_add_n($1345, $1349, $1353, $1354);
      var $1356=((($1341)+($1355))|0);
      $cy=$1356;
      label = 191; break;
    case 191: 
      var $1358=$1;
      var $1359=$6;
      var $1360=($1359<<4);
      var $1361=(($1358+($1360<<2))|0);
      $__p50=$1361;
      var $1362=$__p50;
      var $1363=HEAP32[(($1362)>>2)];
      var $1364=$cy;
      var $1365=((($1363)+($1364))|0);
      $__x49=$1365;
      var $1366=$__x49;
      var $1367=$__p50;
      HEAP32[(($1367)>>2)]=$1366;
      var $1368=$__x49;
      var $1369=$cy;
      var $1370=(($1368)>>>0) < (($1369)>>>0);
      if ($1370) { label = 192; break; } else { label = 196; break; }
    case 192: 
      label = 193; break;
    case 193: 
      var $1373=$__p50;
      var $1374=(($1373+4)|0);
      $__p50=$1374;
      var $1375=HEAP32[(($1374)>>2)];
      var $1376=((($1375)+(1))|0);
      HEAP32[(($1374)>>2)]=$1376;
      var $1377=(($1376)|0)==0;
      if ($1377) { label = 194; break; } else { label = 195; break; }
    case 194: 
      label = 193; break;
    case 195: 
      label = 196; break;
    case 196: 
      label = 197; break;
    case 197: 
      label = 199; break;
    case 198: 
      var $1383=$1;
      var $1384=$6;
      var $1385=((($1384)*(15))&-1);
      var $1386=(($1383+($1385<<2))|0);
      var $1387=$1;
      var $1388=$6;
      var $1389=((($1388)*(15))&-1);
      var $1390=(($1387+($1389<<2))|0);
      var $1391=$2;
      var $1392=$6;
      var $1393=($1392<<1);
      var $1394=(($1391+($1393<<2))|0);
      var $1395=$7;
      var $1396=___gmpn_add_n($1386, $1390, $1394, $1395);
      label = 199; break;
    case 199: 
      label = 201; break;
    case 200: 
      var $1399=$1;
      var $1400=$6;
      var $1401=((($1400)*(14))&-1);
      var $1402=(($1399+($1401<<2))|0);
      var $1403=$2;
      var $1404=$6;
      var $1405=(($1403+($1404<<2))|0);
      var $1406=$7;
      var $1407=$6;
      var $1408=((($1407)*(14))&-1);
      var $1409=$1;
      var $1410=(($1409+($1408<<2))|0);
      var $1411=HEAP32[(($1410)>>2)];
      var $1412=___gmpn_add_1($1402, $1405, $1406, $1411);
      label = 201; break;
    case 201: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_16pts["X"]=1;

function _DO_mpn_sublsh_n200($dst, $src, $n, $s, $ws) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $__cy;
  $1=$dst;
  $2=$src;
  $3=$n;
  $4=$s;
  $5=$ws;
  var $6=$5;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_lshift($6, $7, $8, $9);
  $__cy=$10;
  var $11=$__cy;
  var $12=$1;
  var $13=$1;
  var $14=$5;
  var $15=$3;
  var $16=___gmpn_sub_n($12, $13, $14, $15);
  var $17=((($11)+($16))|0);

  return $17;
}


function ___gmpn_toom_interpolate_5pts($c, $v2, $vm1, $k, $twor, $sa, $vinf0) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $cy;
      var $saved;
      var $twok;
      var $kk1;
      var $c1;
      var $v1;
      var $c3;
      var $vinf;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__x9;
      var $__p10;
      $1=$c;
      $2=$v2;
      $3=$vm1;
      $4=$k;
      $5=$twor;
      $6=$sa;
      $7=$vinf0;
      var $8=$4;
      var $9=$4;
      var $10=((($8)+($9))|0);
      $twok=$10;
      var $11=$twok;
      var $12=((($11)+(1))|0);
      $kk1=$12;
      var $13=$1;
      var $14=$4;
      var $15=(($13+($14<<2))|0);
      $c1=$15;
      var $16=$c1;
      var $17=$4;
      var $18=(($16+($17<<2))|0);
      $v1=$18;
      var $19=$v1;
      var $20=$4;
      var $21=(($19+($20<<2))|0);
      $c3=$21;
      var $22=$c3;
      var $23=$4;
      var $24=(($22+($23<<2))|0);
      $vinf=$24;
      var $25=$6;
      var $26=(($25)|0)!=0;
      if ($26) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $28=$2;
      var $29=$2;
      var $30=$3;
      var $31=$kk1;
      var $32=___gmpn_add_n($28, $29, $30, $31);
      label = 5; break;
    case 4: 
      var $34=$2;
      var $35=$2;
      var $36=$3;
      var $37=$kk1;
      var $38=___gmpn_sub_n($34, $35, $36, $37);
      label = 5; break;
    case 5: 
      var $40=$2;
      var $41=$2;
      var $42=$kk1;
      var $43=___gmpn_bdiv_dbm1c($40, $41, $42, 1431655765, 0);
      var $44=3 & $43;
      var $45=$6;
      var $46=(($45)|0)!=0;
      if ($46) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $48=$3;
      var $49=$v1;
      var $50=$3;
      var $51=$kk1;
      var $52=___gmpn_add_n($48, $49, $50, $51);
      var $53=$3;
      var $54=$3;
      var $55=$kk1;
      var $56=___gmpn_rshift($53, $54, $55, 1);
      label = 8; break;
    case 7: 
      var $58=$3;
      var $59=$v1;
      var $60=$3;
      var $61=$kk1;
      var $62=___gmpn_sub_n($58, $59, $60, $61);
      var $63=$3;
      var $64=$3;
      var $65=$kk1;
      var $66=___gmpn_rshift($63, $64, $65, 1);
      label = 8; break;
    case 8: 
      var $68=$v1;
      var $69=$v1;
      var $70=$1;
      var $71=$twok;
      var $72=___gmpn_sub_n($68, $69, $70, $71);
      var $73=$vinf;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($75)-($72))|0);
      HEAP32[(($74)>>2)]=$76;
      var $77=$2;
      var $78=$2;
      var $79=$v1;
      var $80=$kk1;
      var $81=___gmpn_sub_n($77, $78, $79, $80);
      var $82=$2;
      var $83=$2;
      var $84=$kk1;
      var $85=___gmpn_rshift($82, $83, $84, 1);
      var $86=$v1;
      var $87=$v1;
      var $88=$3;
      var $89=$kk1;
      var $90=___gmpn_sub_n($86, $87, $88, $89);
      var $91=$c1;
      var $92=$c1;
      var $93=$3;
      var $94=$kk1;
      var $95=___gmpn_add_n($91, $92, $93, $94);
      $cy=$95;
      label = 9; break;
    case 9: 
      var $97=$c3;
      var $98=(($97+4)|0);
      $__p=$98;
      var $99=$__p;
      var $100=HEAP32[(($99)>>2)];
      var $101=$cy;
      var $102=((($100)+($101))|0);
      $__x=$102;
      var $103=$__x;
      var $104=$__p;
      HEAP32[(($104)>>2)]=$103;
      var $105=$__x;
      var $106=$cy;
      var $107=(($105)>>>0) < (($106)>>>0);
      if ($107) { label = 10; break; } else { label = 14; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $110=$__p;
      var $111=(($110+4)|0);
      $__p=$111;
      var $112=HEAP32[(($111)>>2)];
      var $113=((($112)+(1))|0);
      HEAP32[(($111)>>2)]=$113;
      var $114=(($113)|0)==0;
      if ($114) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $119=$vinf;
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      $saved=$121;
      var $122=$7;
      var $123=$vinf;
      var $124=(($123)|0);
      HEAP32[(($124)>>2)]=$122;
      var $125=$3;
      var $126=$vinf;
      var $127=$5;
      var $128=___gmpn_lshift($125, $126, $127, 1);
      $cy=$128;
      var $129=$2;
      var $130=$2;
      var $131=$3;
      var $132=$5;
      var $133=___gmpn_sub_n($129, $130, $131, $132);
      var $134=$cy;
      var $135=((($134)+($133))|0);
      $cy=$135;
      label = 16; break;
    case 16: 
      var $137=$2;
      var $138=$5;
      var $139=(($137+($138<<2))|0);
      $__p2=$139;
      var $140=$__p2;
      var $141=HEAP32[(($140)>>2)];
      $__x1=$141;
      var $142=$__x1;
      var $143=$cy;
      var $144=((($142)-($143))|0);
      var $145=$__p2;
      HEAP32[(($145)>>2)]=$144;
      var $146=$__x1;
      var $147=$cy;
      var $148=(($146)>>>0) < (($147)>>>0);
      if ($148) { label = 17; break; } else { label = 21; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $151=$__p2;
      var $152=(($151+4)|0);
      $__p2=$152;
      var $153=HEAP32[(($152)>>2)];
      var $154=((($153)-(1))|0);
      HEAP32[(($152)>>2)]=$154;
      var $155=(($153)|0)==0;
      if ($155) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 18; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $160=$5;
      var $161=$4;
      var $162=((($161)+(1))|0);
      var $163=(($160)|0) > (($162)|0);
      if ($163) { label = 23; break; } else { label = 31; break; }
    case 23: 
      var $165=$vinf;
      var $166=$vinf;
      var $167=$2;
      var $168=$4;
      var $169=(($167+($168<<2))|0);
      var $170=$4;
      var $171=((($170)+(1))|0);
      var $172=___gmpn_add_n($165, $166, $169, $171);
      $cy=$172;
      label = 24; break;
    case 24: 
      var $174=$c3;
      var $175=$kk1;
      var $176=(($174+($175<<2))|0);
      $__p4=$176;
      var $177=$__p4;
      var $178=HEAP32[(($177)>>2)];
      var $179=$cy;
      var $180=((($178)+($179))|0);
      $__x3=$180;
      var $181=$__x3;
      var $182=$__p4;
      HEAP32[(($182)>>2)]=$181;
      var $183=$__x3;
      var $184=$cy;
      var $185=(($183)>>>0) < (($184)>>>0);
      if ($185) { label = 25; break; } else { label = 29; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $188=$__p4;
      var $189=(($188+4)|0);
      $__p4=$189;
      var $190=HEAP32[(($189)>>2)];
      var $191=((($190)+(1))|0);
      HEAP32[(($189)>>2)]=$191;
      var $192=(($191)|0)==0;
      if ($192) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 26; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 32; break;
    case 31: 
      var $198=$vinf;
      var $199=$vinf;
      var $200=$2;
      var $201=$4;
      var $202=(($200+($201<<2))|0);
      var $203=$5;
      var $204=___gmpn_add_n($198, $199, $202, $203);
      label = 32; break;
    case 32: 
      var $206=$v1;
      var $207=$v1;
      var $208=$vinf;
      var $209=$5;
      var $210=___gmpn_sub_n($206, $207, $208, $209);
      $cy=$210;
      var $211=$vinf;
      var $212=(($211)|0);
      var $213=HEAP32[(($212)>>2)];
      $7=$213;
      var $214=$saved;
      var $215=$vinf;
      var $216=(($215)|0);
      HEAP32[(($216)>>2)]=$214;
      label = 33; break;
    case 33: 
      var $218=$v1;
      var $219=$5;
      var $220=(($218+($219<<2))|0);
      $__p6=$220;
      var $221=$__p6;
      var $222=HEAP32[(($221)>>2)];
      $__x5=$222;
      var $223=$__x5;
      var $224=$cy;
      var $225=((($223)-($224))|0);
      var $226=$__p6;
      HEAP32[(($226)>>2)]=$225;
      var $227=$__x5;
      var $228=$cy;
      var $229=(($227)>>>0) < (($228)>>>0);
      if ($229) { label = 34; break; } else { label = 38; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $232=$__p6;
      var $233=(($232+4)|0);
      $__p6=$233;
      var $234=HEAP32[(($233)>>2)];
      var $235=((($234)-(1))|0);
      HEAP32[(($233)>>2)]=$235;
      var $236=(($234)|0)==0;
      if ($236) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 35; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $241=$c1;
      var $242=$c1;
      var $243=$2;
      var $244=$4;
      var $245=___gmpn_sub_n($241, $242, $243, $244);
      $cy=$245;
      label = 40; break;
    case 40: 
      var $247=$v1;
      $__p8=$247;
      var $248=$__p8;
      var $249=HEAP32[(($248)>>2)];
      $__x7=$249;
      var $250=$__x7;
      var $251=$cy;
      var $252=((($250)-($251))|0);
      var $253=$__p8;
      HEAP32[(($253)>>2)]=$252;
      var $254=$__x7;
      var $255=$cy;
      var $256=(($254)>>>0) < (($255)>>>0);
      if ($256) { label = 41; break; } else { label = 45; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $259=$__p8;
      var $260=(($259+4)|0);
      $__p8=$260;
      var $261=HEAP32[(($260)>>2)];
      var $262=((($261)-(1))|0);
      HEAP32[(($260)>>2)]=$262;
      var $263=(($261)|0)==0;
      if ($263) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 42; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $268=$c3;
      var $269=$c3;
      var $270=$2;
      var $271=$4;
      var $272=___gmpn_add_n($268, $269, $270, $271);
      $cy=$272;
      var $273=$cy;
      var $274=$vinf;
      var $275=(($274)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=((($276)+($273))|0);
      HEAP32[(($275)>>2)]=$277;
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $281=$vinf;
      $__p10=$281;
      var $282=$__p10;
      var $283=HEAP32[(($282)>>2)];
      var $284=$7;
      var $285=((($283)+($284))|0);
      $__x9=$285;
      var $286=$__x9;
      var $287=$__p10;
      HEAP32[(($287)>>2)]=$286;
      var $288=$__x9;
      var $289=$7;
      var $290=(($288)>>>0) < (($289)>>>0);
      if ($290) { label = 50; break; } else { label = 54; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $293=$__p10;
      var $294=(($293+4)|0);
      $__p10=$294;
      var $295=HEAP32[(($294)>>2)];
      var $296=((($295)+(1))|0);
      HEAP32[(($294)>>2)]=$296;
      var $297=(($296)|0)==0;
      if ($297) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 51; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_5pts["X"]=1;

function ___gmpn_toom_interpolate_6pts($pp, $n, $flags, $w4, $w2, $w1, $w0n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $cy;
      var $cy4;
      var $cy6;
      var $embankment;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__x9;
      var $__p10;
      var $__x11;
      var $__p12;
      var $__x13;
      var $__p14;
      var $__x15;
      var $__p16;
      var $__x17;
      var $__p18;
      $1=$pp;
      $2=$n;
      $3=$flags;
      $4=$w4;
      $5=$w2;
      $6=$w1;
      $7=$w0n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $12=$3;
      var $13=$12 & 2;
      var $14=(($13)|0)!=0;
      if ($14) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=$5;
      var $17=$6;
      var $18=$5;
      var $19=$2;
      var $20=($19<<1);
      var $21=((($20)+(1))|0);
      var $22=___gmpn_add_n($16, $17, $18, $21);
      label = 9; break;
    case 8: 
      var $24=$5;
      var $25=$6;
      var $26=$5;
      var $27=$2;
      var $28=($27<<1);
      var $29=((($28)+(1))|0);
      var $30=___gmpn_sub_n($24, $25, $26, $29);
      label = 9; break;
    case 9: 
      var $32=$5;
      var $33=$5;
      var $34=$2;
      var $35=($34<<1);
      var $36=((($35)+(1))|0);
      var $37=___gmpn_rshift($32, $33, $36, 2);
      var $38=$6;
      var $39=$6;
      var $40=$1;
      var $41=$2;
      var $42=($41<<1);
      var $43=___gmpn_sub_n($38, $39, $40, $42);
      var $44=$2;
      var $45=($44<<1);
      var $46=$6;
      var $47=(($46+($45<<2))|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-($43))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=$6;
      var $51=$6;
      var $52=$2;
      var $53=($52<<1);
      var $54=((($53)+(1))|0);
      var $55=___gmpn_rshift($50, $51, $54, 1);
      var $56=$6;
      var $57=$6;
      var $58=$5;
      var $59=$2;
      var $60=($59<<1);
      var $61=((($60)+(1))|0);
      var $62=___gmpn_sub_n($56, $57, $58, $61);
      var $63=$6;
      var $64=$6;
      var $65=$2;
      var $66=($65<<1);
      var $67=((($66)+(1))|0);
      var $68=___gmpn_rshift($63, $64, $67, 1);
      var $69=$3;
      var $70=$69 & 1;
      var $71=(($70)|0)!=0;
      if ($71) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $73=$4;
      var $74=$1;
      var $75=$2;
      var $76=($75<<1);
      var $77=(($74+($76<<2))|0);
      var $78=$4;
      var $79=$2;
      var $80=($79<<1);
      var $81=((($80)+(1))|0);
      var $82=___gmpn_add_n($73, $77, $78, $81);
      var $83=$4;
      var $84=$4;
      var $85=$2;
      var $86=($85<<1);
      var $87=((($86)+(1))|0);
      var $88=___gmpn_rshift($83, $84, $87, 1);
      label = 12; break;
    case 11: 
      var $90=$4;
      var $91=$1;
      var $92=$2;
      var $93=($92<<1);
      var $94=(($91+($93<<2))|0);
      var $95=$4;
      var $96=$2;
      var $97=($96<<1);
      var $98=((($97)+(1))|0);
      var $99=___gmpn_sub_n($90, $94, $95, $98);
      var $100=$4;
      var $101=$4;
      var $102=$2;
      var $103=($102<<1);
      var $104=((($103)+(1))|0);
      var $105=___gmpn_rshift($100, $101, $104, 1);
      label = 12; break;
    case 12: 
      var $107=$5;
      var $108=$5;
      var $109=$4;
      var $110=$2;
      var $111=($110<<1);
      var $112=((($111)+(1))|0);
      var $113=___gmpn_sub_n($107, $108, $109, $112);
      var $114=$5;
      var $115=$5;
      var $116=$2;
      var $117=($116<<1);
      var $118=((($117)+(1))|0);
      var $119=___gmpn_bdiv_dbm1c($114, $115, $118, 1431655765, 0);
      var $120=3 & $119;
      var $121=$1;
      var $122=$2;
      var $123=($122<<1);
      var $124=(($121+($123<<2))|0);
      var $125=$1;
      var $126=$2;
      var $127=($126<<1);
      var $128=(($125+($127<<2))|0);
      var $129=$4;
      var $130=$2;
      var $131=($130<<1);
      var $132=((($131)+(1))|0);
      var $133=___gmpn_sub_n($124, $128, $129, $132);
      var $134=$1;
      var $135=$2;
      var $136=($135<<1);
      var $137=(($134+($136<<2))|0);
      var $138=$1;
      var $139=$2;
      var $140=($139<<1);
      var $141=(($138+($140<<2))|0);
      var $142=$1;
      var $143=$2;
      var $144=($143<<1);
      var $145=___gmpn_sub_n($137, $141, $142, $144);
      var $146=$2;
      var $147=($146<<1);
      var $148=$1;
      var $149=$2;
      var $150=($149<<1);
      var $151=(($148+($150<<2))|0);
      var $152=(($151+($147<<2))|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=((($153)-($145))|0);
      HEAP32[(($152)>>2)]=$154;
      var $155=$6;
      var $156=$6;
      var $157=$1;
      var $158=$2;
      var $159=($158<<1);
      var $160=(($157+($159<<2))|0);
      var $161=$2;
      var $162=($161<<1);
      var $163=((($162)+(1))|0);
      var $164=___gmpn_sub_n($155, $156, $160, $163);
      var $165=$6;
      var $166=$6;
      var $167=$2;
      var $168=($167<<1);
      var $169=((($168)+(1))|0);
      var $170=___gmpn_bdiv_dbm1c($165, $166, $169, 1431655765, 0);
      var $171=3 & $170;
      var $172=$1;
      var $173=$2;
      var $174=(($172+($173<<2))|0);
      var $175=$1;
      var $176=$2;
      var $177=(($175+($176<<2))|0);
      var $178=$4;
      var $179=$2;
      var $180=($179<<1);
      var $181=((($180)+(1))|0);
      var $182=___gmpn_add_n($174, $177, $178, $181);
      $cy=$182;
      label = 13; break;
    case 13: 
      var $184=$1;
      var $185=$2;
      var $186=((($185)*(3))&-1);
      var $187=(($184+($186<<2))|0);
      var $188=(($187+4)|0);
      $__p=$188;
      var $189=$__p;
      var $190=HEAP32[(($189)>>2)];
      var $191=$cy;
      var $192=((($190)+($191))|0);
      $__x=$192;
      var $193=$__x;
      var $194=$__p;
      HEAP32[(($194)>>2)]=$193;
      var $195=$__x;
      var $196=$cy;
      var $197=(($195)>>>0) < (($196)>>>0);
      if ($197) { label = 14; break; } else { label = 18; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $200=$__p;
      var $201=(($200+4)|0);
      $__p=$201;
      var $202=HEAP32[(($201)>>2)];
      var $203=((($202)+(1))|0);
      HEAP32[(($201)>>2)]=$203;
      var $204=(($203)|0)==0;
      if ($204) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 15; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $209=$4;
      var $210=$1;
      var $211=$2;
      var $212=((($211)*(5))&-1);
      var $213=(($210+($212<<2))|0);
      var $214=$7;
      var $215=___gmpn_lshift($209, $213, $214, 2);
      $cy=$215;
      var $216=$5;
      var $217=$5;
      var $218=$4;
      var $219=$7;
      var $220=___gmpn_sub_n($216, $217, $218, $219);
      var $221=$cy;
      var $222=((($221)+($220))|0);
      $cy=$222;
      label = 20; break;
    case 20: 
      var $224=$5;
      var $225=$7;
      var $226=(($224+($225<<2))|0);
      $__p2=$226;
      var $227=$__p2;
      var $228=HEAP32[(($227)>>2)];
      $__x1=$228;
      var $229=$__x1;
      var $230=$cy;
      var $231=((($229)-($230))|0);
      var $232=$__p2;
      HEAP32[(($232)>>2)]=$231;
      var $233=$__x1;
      var $234=$cy;
      var $235=(($233)>>>0) < (($234)>>>0);
      if ($235) { label = 21; break; } else { label = 25; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $238=$__p2;
      var $239=(($238+4)|0);
      $__p2=$239;
      var $240=HEAP32[(($239)>>2)];
      var $241=((($240)-(1))|0);
      HEAP32[(($239)>>2)]=$241;
      var $242=(($240)|0)==0;
      if ($242) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 22; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $247=$1;
      var $248=$2;
      var $249=(($247+($248<<2))|0);
      var $250=$1;
      var $251=$2;
      var $252=(($250+($251<<2))|0);
      var $253=$5;
      var $254=$2;
      var $255=___gmpn_sub_n($249, $252, $253, $254);
      $cy=$255;
      label = 27; break;
    case 27: 
      var $257=$1;
      var $258=$2;
      var $259=($258<<1);
      var $260=(($257+($259<<2))|0);
      $__p4=$260;
      var $261=$__p4;
      var $262=HEAP32[(($261)>>2)];
      $__x3=$262;
      var $263=$__x3;
      var $264=$cy;
      var $265=((($263)-($264))|0);
      var $266=$__p4;
      HEAP32[(($266)>>2)]=$265;
      var $267=$__x3;
      var $268=$cy;
      var $269=(($267)>>>0) < (($268)>>>0);
      if ($269) { label = 28; break; } else { label = 32; break; }
    case 28: 
      label = 29; break;
    case 29: 
      var $272=$__p4;
      var $273=(($272+4)|0);
      $__p4=$273;
      var $274=HEAP32[(($273)>>2)];
      var $275=((($274)-(1))|0);
      HEAP32[(($273)>>2)]=$275;
      var $276=(($274)|0)==0;
      if ($276) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 29; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $281=$2;
      var $282=($281<<1);
      var $283=$1;
      var $284=$2;
      var $285=($284<<1);
      var $286=(($283+($285<<2))|0);
      var $287=(($286+($282<<2))|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$1;
      var $290=$2;
      var $291=((($290)*(3))&-1);
      var $292=(($289+($291<<2))|0);
      var $293=$1;
      var $294=$2;
      var $295=((($294)*(3))&-1);
      var $296=(($293+($295<<2))|0);
      var $297=$5;
      var $298=$2;
      var $299=___gmpn_add_n($292, $296, $297, $298);
      var $300=((($288)+($299))|0);
      $cy4=$300;
      var $301=$2;
      var $302=($301<<1);
      var $303=$5;
      var $304=(($303+($302<<2))|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=$1;
      var $307=$2;
      var $308=($307<<2);
      var $309=(($306+($308<<2))|0);
      var $310=$6;
      var $311=$5;
      var $312=$2;
      var $313=(($311+($312<<2))|0);
      var $314=$2;
      var $315=___gmpn_add_n($309, $310, $313, $314);
      var $316=((($305)+($315))|0);
      $cy=$316;
      label = 34; break;
    case 34: 
      var $318=$6;
      var $319=$2;
      var $320=(($318+($319<<2))|0);
      $__p6=$320;
      var $321=$__p6;
      var $322=HEAP32[(($321)>>2)];
      var $323=$cy;
      var $324=((($322)+($323))|0);
      $__x5=$324;
      var $325=$__x5;
      var $326=$__p6;
      HEAP32[(($326)>>2)]=$325;
      var $327=$__x5;
      var $328=$cy;
      var $329=(($327)>>>0) < (($328)>>>0);
      if ($329) { label = 35; break; } else { label = 39; break; }
    case 35: 
      label = 36; break;
    case 36: 
      var $332=$__p6;
      var $333=(($332+4)|0);
      $__p6=$333;
      var $334=HEAP32[(($333)>>2)];
      var $335=((($334)+(1))|0);
      HEAP32[(($333)>>2)]=$335;
      var $336=(($335)|0)==0;
      if ($336) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 36; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $341=$7;
      var $342=$2;
      var $343=(($341)|0) > (($342)|0);
      if ($343) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $345=$2;
      var $346=($345<<1);
      var $347=$6;
      var $348=(($347+($346<<2))|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=$1;
      var $351=$2;
      var $352=((($351)*(5))&-1);
      var $353=(($350+($352<<2))|0);
      var $354=$1;
      var $355=$2;
      var $356=((($355)*(5))&-1);
      var $357=(($354+($356<<2))|0);
      var $358=$6;
      var $359=$2;
      var $360=(($358+($359<<2))|0);
      var $361=$2;
      var $362=___gmpn_add_n($353, $357, $360, $361);
      var $363=((($349)+($362))|0);
      $cy6=$363;
      label = 43; break;
    case 42: 
      var $365=$1;
      var $366=$2;
      var $367=((($366)*(5))&-1);
      var $368=(($365+($367<<2))|0);
      var $369=$1;
      var $370=$2;
      var $371=((($370)*(5))&-1);
      var $372=(($369+($371<<2))|0);
      var $373=$6;
      var $374=$2;
      var $375=(($373+($374<<2))|0);
      var $376=$7;
      var $377=___gmpn_add_n($368, $372, $375, $376);
      $cy6=$377;
      label = 43; break;
    case 43: 
      var $379=$1;
      var $380=$2;
      var $381=($380<<1);
      var $382=(($379+($381<<2))|0);
      var $383=$1;
      var $384=$2;
      var $385=($384<<1);
      var $386=(($383+($385<<2))|0);
      var $387=$1;
      var $388=$2;
      var $389=($388<<2);
      var $390=(($387+($389<<2))|0);
      var $391=$2;
      var $392=$7;
      var $393=((($391)+($392))|0);
      var $394=___gmpn_sub_n($382, $386, $390, $393);
      $cy=$394;
      var $395=$7;
      var $396=((($395)-(1))|0);
      var $397=$1;
      var $398=$2;
      var $399=((($398)*(5))&-1);
      var $400=(($397+($399<<2))|0);
      var $401=(($400+($396<<2))|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=((($402)-(1))|0);
      $embankment=$403;
      var $404=$7;
      var $405=((($404)-(1))|0);
      var $406=$1;
      var $407=$2;
      var $408=((($407)*(5))&-1);
      var $409=(($406+($408<<2))|0);
      var $410=(($409+($405<<2))|0);
      HEAP32[(($410)>>2)]=1;
      var $411=$7;
      var $412=$2;
      var $413=(($411)|0) > (($412)|0);
      if ($413) { label = 44; break; } else { label = 76; break; }
    case 44: 
      var $415=$cy4;
      var $416=$cy6;
      var $417=(($415)>>>0) > (($416)>>>0);
      if ($417) { label = 45; break; } else { label = 53; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $420=$1;
      var $421=$2;
      var $422=($421<<2);
      var $423=(($420+($422<<2))|0);
      $__p8=$423;
      var $424=$__p8;
      var $425=HEAP32[(($424)>>2)];
      var $426=$cy4;
      var $427=$cy6;
      var $428=((($426)-($427))|0);
      var $429=((($425)+($428))|0);
      $__x7=$429;
      var $430=$__x7;
      var $431=$__p8;
      HEAP32[(($431)>>2)]=$430;
      var $432=$__x7;
      var $433=$cy4;
      var $434=$cy6;
      var $435=((($433)-($434))|0);
      var $436=(($432)>>>0) < (($435)>>>0);
      if ($436) { label = 47; break; } else { label = 51; break; }
    case 47: 
      label = 48; break;
    case 48: 
      var $439=$__p8;
      var $440=(($439+4)|0);
      $__p8=$440;
      var $441=HEAP32[(($440)>>2)];
      var $442=((($441)+(1))|0);
      HEAP32[(($440)>>2)]=$442;
      var $443=(($442)|0)==0;
      if ($443) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 48; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 61; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $450=$1;
      var $451=$2;
      var $452=($451<<2);
      var $453=(($450+($452<<2))|0);
      $__p10=$453;
      var $454=$__p10;
      var $455=HEAP32[(($454)>>2)];
      $__x9=$455;
      var $456=$__x9;
      var $457=$cy6;
      var $458=$cy4;
      var $459=((($457)-($458))|0);
      var $460=((($456)-($459))|0);
      var $461=$__p10;
      HEAP32[(($461)>>2)]=$460;
      var $462=$__x9;
      var $463=$cy6;
      var $464=$cy4;
      var $465=((($463)-($464))|0);
      var $466=(($462)>>>0) < (($465)>>>0);
      if ($466) { label = 55; break; } else { label = 59; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $469=$__p10;
      var $470=(($469+4)|0);
      $__p10=$470;
      var $471=HEAP32[(($470)>>2)];
      var $472=((($471)-(1))|0);
      HEAP32[(($470)>>2)]=$472;
      var $473=(($471)|0)==0;
      if ($473) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 56; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $480=$1;
      var $481=$2;
      var $482=((($481)*(3))&-1);
      var $483=(($480+($482<<2))|0);
      var $484=$7;
      var $485=(($483+($484<<2))|0);
      $__p12=$485;
      var $486=$__p12;
      var $487=HEAP32[(($486)>>2)];
      $__x11=$487;
      var $488=$__x11;
      var $489=$cy;
      var $490=((($488)-($489))|0);
      var $491=$__p12;
      HEAP32[(($491)>>2)]=$490;
      var $492=$__x11;
      var $493=$cy;
      var $494=(($492)>>>0) < (($493)>>>0);
      if ($494) { label = 63; break; } else { label = 67; break; }
    case 63: 
      label = 64; break;
    case 64: 
      var $497=$__p12;
      var $498=(($497+4)|0);
      $__p12=$498;
      var $499=HEAP32[(($498)>>2)];
      var $500=((($499)-(1))|0);
      HEAP32[(($498)>>2)]=$500;
      var $501=(($499)|0)==0;
      if ($501) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 64; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $507=$1;
      var $508=$2;
      var $509=((($508)*(5))&-1);
      var $510=(($507+($509<<2))|0);
      var $511=$2;
      var $512=(($510+($511<<2))|0);
      $__p14=$512;
      var $513=$__p14;
      var $514=HEAP32[(($513)>>2)];
      var $515=$cy6;
      var $516=((($514)+($515))|0);
      $__x13=$516;
      var $517=$__x13;
      var $518=$__p14;
      HEAP32[(($518)>>2)]=$517;
      var $519=$__x13;
      var $520=$cy6;
      var $521=(($519)>>>0) < (($520)>>>0);
      if ($521) { label = 70; break; } else { label = 74; break; }
    case 70: 
      label = 71; break;
    case 71: 
      var $524=$__p14;
      var $525=(($524+4)|0);
      $__p14=$525;
      var $526=HEAP32[(($525)>>2)];
      var $527=((($526)+(1))|0);
      HEAP32[(($525)>>2)]=$527;
      var $528=(($527)|0)==0;
      if ($528) { label = 72; break; } else { label = 73; break; }
    case 72: 
      label = 71; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 91; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $535=$1;
      var $536=$2;
      var $537=($536<<2);
      var $538=(($535+($537<<2))|0);
      $__p16=$538;
      var $539=$__p16;
      var $540=HEAP32[(($539)>>2)];
      var $541=$cy4;
      var $542=((($540)+($541))|0);
      $__x15=$542;
      var $543=$__x15;
      var $544=$__p16;
      HEAP32[(($544)>>2)]=$543;
      var $545=$__x15;
      var $546=$cy4;
      var $547=(($545)>>>0) < (($546)>>>0);
      if ($547) { label = 78; break; } else { label = 82; break; }
    case 78: 
      label = 79; break;
    case 79: 
      var $550=$__p16;
      var $551=(($550+4)|0);
      $__p16=$551;
      var $552=HEAP32[(($551)>>2)];
      var $553=((($552)+(1))|0);
      HEAP32[(($551)>>2)]=$553;
      var $554=(($553)|0)==0;
      if ($554) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 79; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $560=$1;
      var $561=$2;
      var $562=((($561)*(3))&-1);
      var $563=(($560+($562<<2))|0);
      var $564=$7;
      var $565=(($563+($564<<2))|0);
      $__p18=$565;
      var $566=$__p18;
      var $567=HEAP32[(($566)>>2)];
      $__x17=$567;
      var $568=$__x17;
      var $569=$cy;
      var $570=$cy6;
      var $571=((($569)+($570))|0);
      var $572=((($568)-($571))|0);
      var $573=$__p18;
      HEAP32[(($573)>>2)]=$572;
      var $574=$__x17;
      var $575=$cy;
      var $576=$cy6;
      var $577=((($575)+($576))|0);
      var $578=(($574)>>>0) < (($577)>>>0);
      if ($578) { label = 85; break; } else { label = 89; break; }
    case 85: 
      label = 86; break;
    case 86: 
      var $581=$__p18;
      var $582=(($581+4)|0);
      $__p18=$582;
      var $583=HEAP32[(($582)>>2)];
      var $584=((($583)-(1))|0);
      HEAP32[(($582)>>2)]=$584;
      var $585=(($583)|0)==0;
      if ($585) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 86; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $591=$embankment;
      var $592=$7;
      var $593=((($592)-(1))|0);
      var $594=$1;
      var $595=$2;
      var $596=((($595)*(5))&-1);
      var $597=(($594+($596<<2))|0);
      var $598=(($597+($593<<2))|0);
      var $599=HEAP32[(($598)>>2)];
      var $600=((($599)+($591))|0);
      HEAP32[(($598)>>2)]=$600;

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_6pts["X"]=1;

function ___gmpn_toom_interpolate_7pts($rp, $n, $flags, $w1, $w3, $w4, $w5, $w6n, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $m;
      var $cy;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      $1=$rp;
      $2=$n;
      $3=$flags;
      $4=$w1;
      $5=$w3;
      $6=$w4;
      $7=$w5;
      $8=$w6n;
      $9=$tp;
      var $10=$2;
      var $11=($10<<1);
      var $12=((($11)+(1))|0);
      $m=$12;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $17=$7;
      var $18=$7;
      var $19=$6;
      var $20=$m;
      var $21=___gmpn_add_n($17, $18, $19, $20);
      var $22=$3;
      var $23=$22 & 1;
      var $24=(($23)|0)!=0;
      if ($24) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $26=$4;
      var $27=$4;
      var $28=$6;
      var $29=$m;
      var $30=___gmpn_add_n($26, $27, $28, $29);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $33=$4;
      var $34=$4;
      var $35=$m;
      var $36=___gmpn_rshift($33, $34, $35, 1);
      label = 13; break;
    case 10: 
      var $38=$4;
      var $39=$6;
      var $40=$4;
      var $41=$m;
      var $42=___gmpn_sub_n($38, $39, $40, $41);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $45=$4;
      var $46=$4;
      var $47=$m;
      var $48=___gmpn_rshift($45, $46, $47, 1);
      label = 13; break;
    case 13: 
      var $50=$6;
      var $51=$6;
      var $52=$m;
      var $53=$1;
      var $54=$2;
      var $55=($54<<1);
      var $56=___gmpn_sub($50, $51, $52, $53, $55);
      var $57=$6;
      var $58=$6;
      var $59=$4;
      var $60=$m;
      var $61=___gmpn_sub_n($57, $58, $59, $60);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $64=$6;
      var $65=$6;
      var $66=$m;
      var $67=___gmpn_rshift($64, $65, $66, 2);
      var $68=$9;
      var $69=$1;
      var $70=$2;
      var $71=((($70)*(6))&-1);
      var $72=(($69+($71<<2))|0);
      var $73=$8;
      var $74=___gmpn_lshift($68, $72, $73, 4);
      var $75=$8;
      var $76=$9;
      var $77=(($76+($75<<2))|0);
      HEAP32[(($77)>>2)]=$74;
      var $78=$6;
      var $79=$6;
      var $80=$m;
      var $81=$9;
      var $82=$8;
      var $83=((($82)+(1))|0);
      var $84=___gmpn_sub($78, $79, $80, $81, $83);
      var $85=$3;
      var $86=$85 & 2;
      var $87=(($86)|0)!=0;
      if ($87) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $89=$5;
      var $90=$5;
      var $91=$1;
      var $92=$2;
      var $93=($92<<1);
      var $94=(($91+($93<<2))|0);
      var $95=$m;
      var $96=___gmpn_add_n($89, $90, $94, $95);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $99=$5;
      var $100=$5;
      var $101=$m;
      var $102=___gmpn_rshift($99, $100, $101, 1);
      label = 22; break;
    case 19: 
      var $104=$5;
      var $105=$1;
      var $106=$2;
      var $107=($106<<1);
      var $108=(($105+($107<<2))|0);
      var $109=$5;
      var $110=$m;
      var $111=___gmpn_sub_n($104, $108, $109, $110);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $114=$5;
      var $115=$5;
      var $116=$m;
      var $117=___gmpn_rshift($114, $115, $116, 1);
      label = 22; break;
    case 22: 
      var $119=$1;
      var $120=$2;
      var $121=($120<<1);
      var $122=(($119+($121<<2))|0);
      var $123=$1;
      var $124=$2;
      var $125=($124<<1);
      var $126=(($123+($125<<2))|0);
      var $127=$5;
      var $128=$m;
      var $129=___gmpn_sub_n($122, $126, $127, $128);
      var $130=$7;
      var $131=$1;
      var $132=$2;
      var $133=($132<<1);
      var $134=(($131+($133<<2))|0);
      var $135=$m;
      var $136=___gmpn_submul_1($130, $134, $135, 65);
      var $137=$1;
      var $138=$2;
      var $139=($138<<1);
      var $140=(($137+($139<<2))|0);
      var $141=$1;
      var $142=$2;
      var $143=($142<<1);
      var $144=(($141+($143<<2))|0);
      var $145=$m;
      var $146=$1;
      var $147=$2;
      var $148=((($147)*(6))&-1);
      var $149=(($146+($148<<2))|0);
      var $150=$8;
      var $151=___gmpn_sub($140, $144, $145, $149, $150);
      var $152=$1;
      var $153=$2;
      var $154=($153<<1);
      var $155=(($152+($154<<2))|0);
      var $156=$1;
      var $157=$2;
      var $158=($157<<1);
      var $159=(($156+($158<<2))|0);
      var $160=$m;
      var $161=$1;
      var $162=$2;
      var $163=($162<<1);
      var $164=___gmpn_sub($155, $159, $160, $161, $163);
      var $165=$7;
      var $166=$1;
      var $167=$2;
      var $168=($167<<1);
      var $169=(($166+($168<<2))|0);
      var $170=$m;
      var $171=___gmpn_addmul_1($165, $169, $170, 45);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $174=$7;
      var $175=$7;
      var $176=$m;
      var $177=___gmpn_rshift($174, $175, $176, 1);
      var $178=$6;
      var $179=$6;
      var $180=$1;
      var $181=$2;
      var $182=($181<<1);
      var $183=(($180+($182<<2))|0);
      var $184=$m;
      var $185=___gmpn_sub_n($178, $179, $183, $184);
      var $186=$6;
      var $187=$6;
      var $188=$m;
      var $189=___gmpn_bdiv_dbm1c($186, $187, $188, 1431655765, 0);
      var $190=3 & $189;
      var $191=$1;
      var $192=$2;
      var $193=($192<<1);
      var $194=(($191+($193<<2))|0);
      var $195=$1;
      var $196=$2;
      var $197=($196<<1);
      var $198=(($195+($197<<2))|0);
      var $199=$6;
      var $200=$m;
      var $201=___gmpn_sub_n($194, $198, $199, $200);
      var $202=$4;
      var $203=$7;
      var $204=$4;
      var $205=$m;
      var $206=___gmpn_sub_n($202, $203, $204, $205);
      var $207=$9;
      var $208=$5;
      var $209=$m;
      var $210=___gmpn_lshift($207, $208, $209, 3);
      var $211=$7;
      var $212=$7;
      var $213=$9;
      var $214=$m;
      var $215=___gmpn_sub_n($211, $212, $213, $214);
      var $216=$7;
      var $217=$7;
      var $218=$m;
      ___gmpn_divexact_1($216, $217, $218, 9);
      var $219=$5;
      var $220=$5;
      var $221=$7;
      var $222=$m;
      var $223=___gmpn_sub_n($219, $220, $221, $222);
      var $224=$4;
      var $225=$4;
      var $226=$m;
      var $227=___gmpn_bdiv_dbm1c($224, $225, $226, 286331153, 0);
      var $228=$227;
      var $229=15 & $228;
      var $230=$4;
      var $231=$4;
      var $232=$7;
      var $233=$m;
      var $234=___gmpn_add_n($230, $231, $232, $233);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $237=$4;
      var $238=$4;
      var $239=$m;
      var $240=___gmpn_rshift($237, $238, $239, 1);
      var $241=$7;
      var $242=$7;
      var $243=$4;
      var $244=$m;
      var $245=___gmpn_sub_n($241, $242, $243, $244);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $256=$1;
      var $257=$2;
      var $258=(($256+($257<<2))|0);
      var $259=$1;
      var $260=$2;
      var $261=(($259+($260<<2))|0);
      var $262=$4;
      var $263=$m;
      var $264=___gmpn_add_n($258, $261, $262, $263);
      $cy=$264;
      label = 37; break;
    case 37: 
      var $266=$1;
      var $267=$2;
      var $268=($267<<1);
      var $269=(($266+($268<<2))|0);
      var $270=$2;
      var $271=(($269+($270<<2))|0);
      var $272=(($271+4)|0);
      $__p=$272;
      var $273=$__p;
      var $274=HEAP32[(($273)>>2)];
      var $275=$cy;
      var $276=((($274)+($275))|0);
      $__x=$276;
      var $277=$__x;
      var $278=$__p;
      HEAP32[(($278)>>2)]=$277;
      var $279=$__x;
      var $280=$cy;
      var $281=(($279)>>>0) < (($280)>>>0);
      if ($281) { label = 38; break; } else { label = 42; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $284=$__p;
      var $285=(($284+4)|0);
      $__p=$285;
      var $286=HEAP32[(($285)>>2)];
      var $287=((($286)+(1))|0);
      HEAP32[(($285)>>2)]=$287;
      var $288=(($287)|0)==0;
      if ($288) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 39; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $293=$1;
      var $294=$2;
      var $295=((($294)*(3))&-1);
      var $296=(($293+($295<<2))|0);
      var $297=$1;
      var $298=$2;
      var $299=((($298)*(3))&-1);
      var $300=(($297+($299<<2))|0);
      var $301=$5;
      var $302=$2;
      var $303=___gmpn_add_n($296, $300, $301, $302);
      $cy=$303;
      label = 44; break;
    case 44: 
      var $305=$5;
      var $306=$2;
      var $307=(($305+($306<<2))|0);
      $__p2=$307;
      var $308=$__p2;
      var $309=HEAP32[(($308)>>2)];
      var $310=$2;
      var $311=($310<<1);
      var $312=$1;
      var $313=$2;
      var $314=($313<<1);
      var $315=(($312+($314<<2))|0);
      var $316=(($315+($311<<2))|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=$cy;
      var $319=((($317)+($318))|0);
      var $320=((($309)+($319))|0);
      $__x1=$320;
      var $321=$__x1;
      var $322=$__p2;
      HEAP32[(($322)>>2)]=$321;
      var $323=$__x1;
      var $324=$2;
      var $325=($324<<1);
      var $326=$1;
      var $327=$2;
      var $328=($327<<1);
      var $329=(($326+($328<<2))|0);
      var $330=(($329+($325<<2))|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=$cy;
      var $333=((($331)+($332))|0);
      var $334=(($323)>>>0) < (($333)>>>0);
      if ($334) { label = 45; break; } else { label = 49; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $337=$__p2;
      var $338=(($337+4)|0);
      $__p2=$338;
      var $339=HEAP32[(($338)>>2)];
      var $340=((($339)+(1))|0);
      HEAP32[(($338)>>2)]=$340;
      var $341=(($340)|0)==0;
      if ($341) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 46; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $346=$1;
      var $347=$2;
      var $348=($347<<2);
      var $349=(($346+($348<<2))|0);
      var $350=$5;
      var $351=$2;
      var $352=(($350+($351<<2))|0);
      var $353=$6;
      var $354=$2;
      var $355=___gmpn_add_n($349, $352, $353, $354);
      $cy=$355;
      label = 51; break;
    case 51: 
      var $357=$6;
      var $358=$2;
      var $359=(($357+($358<<2))|0);
      $__p4=$359;
      var $360=$__p4;
      var $361=HEAP32[(($360)>>2)];
      var $362=$2;
      var $363=($362<<1);
      var $364=$5;
      var $365=(($364+($363<<2))|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=$cy;
      var $368=((($366)+($367))|0);
      var $369=((($361)+($368))|0);
      $__x3=$369;
      var $370=$__x3;
      var $371=$__p4;
      HEAP32[(($371)>>2)]=$370;
      var $372=$__x3;
      var $373=$2;
      var $374=($373<<1);
      var $375=$5;
      var $376=(($375+($374<<2))|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=$cy;
      var $379=((($377)+($378))|0);
      var $380=(($372)>>>0) < (($379)>>>0);
      if ($380) { label = 52; break; } else { label = 56; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $383=$__p4;
      var $384=(($383+4)|0);
      $__p4=$384;
      var $385=HEAP32[(($384)>>2)];
      var $386=((($385)+(1))|0);
      HEAP32[(($384)>>2)]=$386;
      var $387=(($386)|0)==0;
      if ($387) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 53; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $392=$1;
      var $393=$2;
      var $394=((($393)*(5))&-1);
      var $395=(($392+($394<<2))|0);
      var $396=$6;
      var $397=$2;
      var $398=(($396+($397<<2))|0);
      var $399=$7;
      var $400=$2;
      var $401=___gmpn_add_n($395, $398, $399, $400);
      $cy=$401;
      label = 58; break;
    case 58: 
      var $403=$7;
      var $404=$2;
      var $405=(($403+($404<<2))|0);
      $__p6=$405;
      var $406=$__p6;
      var $407=HEAP32[(($406)>>2)];
      var $408=$2;
      var $409=($408<<1);
      var $410=$6;
      var $411=(($410+($409<<2))|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$cy;
      var $414=((($412)+($413))|0);
      var $415=((($407)+($414))|0);
      $__x5=$415;
      var $416=$__x5;
      var $417=$__p6;
      HEAP32[(($417)>>2)]=$416;
      var $418=$__x5;
      var $419=$2;
      var $420=($419<<1);
      var $421=$6;
      var $422=(($421+($420<<2))|0);
      var $423=HEAP32[(($422)>>2)];
      var $424=$cy;
      var $425=((($423)+($424))|0);
      var $426=(($418)>>>0) < (($425)>>>0);
      if ($426) { label = 59; break; } else { label = 63; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $429=$__p6;
      var $430=(($429+4)|0);
      $__p6=$430;
      var $431=HEAP32[(($430)>>2)];
      var $432=((($431)+(1))|0);
      HEAP32[(($430)>>2)]=$432;
      var $433=(($432)|0)==0;
      if ($433) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 60; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $438=$8;
      var $439=$2;
      var $440=((($439)+(1))|0);
      var $441=(($438)|0) > (($440)|0);
      if ($441) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $443=$1;
      var $444=$2;
      var $445=((($444)*(6))&-1);
      var $446=(($443+($445<<2))|0);
      var $447=$1;
      var $448=$2;
      var $449=((($448)*(6))&-1);
      var $450=(($447+($449<<2))|0);
      var $451=$8;
      var $452=$7;
      var $453=$2;
      var $454=(($452+($453<<2))|0);
      var $455=$2;
      var $456=((($455)+(1))|0);
      var $457=___gmpn_add($446, $450, $451, $454, $456);
      label = 67; break;
    case 66: 
      var $459=$1;
      var $460=$2;
      var $461=((($460)*(6))&-1);
      var $462=(($459+($461<<2))|0);
      var $463=$1;
      var $464=$2;
      var $465=((($464)*(6))&-1);
      var $466=(($463+($465<<2))|0);
      var $467=$7;
      var $468=$2;
      var $469=(($467+($468<<2))|0);
      var $470=$8;
      var $471=___gmpn_add_n($462, $466, $469, $470);
      label = 67; break;
    case 67: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_7pts["X"]=1;

function ___gmpn_toom_interpolate_8pts($pp, $n, $r3, $r7, $spt, $ws) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $cy;
      var $r5;
      var $r1;
      var $__cy;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__cy5;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      var $__x10;
      var $__p11;
      var $__x12;
      var $__p13;
      var $__x14;
      var $__p15;
      var $__x16;
      var $__p17;
      var $__x18;
      var $__p19;
      var $__x20;
      var $__p21;
      var $__x22;
      var $__p23;
      var $__x24;
      var $__p25;
      var $__x26;
      var $__p27;
      $1=$pp;
      $2=$n;
      $3=$r3;
      $4=$r7;
      $5=$spt;
      $6=$ws;
      var $7=$1;
      var $8=$2;
      var $9=((($8)*(3))&-1);
      var $10=(($7+($9<<2))|0);
      $r5=$10;
      var $11=$1;
      var $12=$2;
      var $13=((($12)*(7))&-1);
      var $14=(($11+($13<<2))|0);
      $r1=$14;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $17=$3;
      var $18=$2;
      var $19=(($17+($18<<2))|0);
      $__p=$19;
      var $20=$__p;
      var $21=HEAP32[(($20)>>2)];
      $__x=$21;
      var $22=$__x;
      var $23=$1;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 >>> 4;
      var $27=((($22)-($26))|0);
      var $28=$__p;
      HEAP32[(($28)>>2)]=$27;
      var $29=$__x;
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 >>> 4;
      var $34=(($29)>>>0) < (($33)>>>0);
      if ($34) { label = 5; break; } else { label = 9; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $37=$__p;
      var $38=(($37+4)|0);
      $__p=$38;
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(1))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=(($39)|0)==0;
      if ($41) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $46=$3;
      var $47=$2;
      var $48=(($46+($47<<2))|0);
      var $49=$1;
      var $50=(($49+4)|0);
      var $51=$2;
      var $52=($51<<1);
      var $53=((($52)-(1))|0);
      var $54=$6;
      var $55=_DO_mpn_sublsh_n209($48, $50, $53, 28, $54);
      $__cy=$55;
      label = 11; break;
    case 11: 
      var $57=$3;
      var $58=$2;
      var $59=(($57+($58<<2))|0);
      var $60=$2;
      var $61=($60<<1);
      var $62=(($59+($61<<2))|0);
      var $63=((($62)-(4))|0);
      $__p2=$63;
      var $64=$__p2;
      var $65=HEAP32[(($64)>>2)];
      $__x1=$65;
      var $66=$__x1;
      var $67=$__cy;
      var $68=((($66)-($67))|0);
      var $69=$__p2;
      HEAP32[(($69)>>2)]=$68;
      var $70=$__x1;
      var $71=$__cy;
      var $72=(($70)>>>0) < (($71)>>>0);
      if ($72) { label = 12; break; } else { label = 16; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $75=$__p2;
      var $76=(($75+4)|0);
      $__p2=$76;
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)-(1))|0);
      HEAP32[(($76)>>2)]=$78;
      var $79=(($77)|0)==0;
      if ($79) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $85=$3;
      var $86=$r1;
      var $87=$5;
      var $88=$6;
      var $89=_DO_mpn_sublsh_n209($85, $86, $87, 12, $88);
      $cy=$89;
      label = 19; break;
    case 19: 
      var $91=$3;
      var $92=$5;
      var $93=(($91+($92<<2))|0);
      $__p4=$93;
      var $94=$__p4;
      var $95=HEAP32[(($94)>>2)];
      $__x3=$95;
      var $96=$__x3;
      var $97=$cy;
      var $98=((($96)-($97))|0);
      var $99=$__p4;
      HEAP32[(($99)>>2)]=$98;
      var $100=$__x3;
      var $101=$cy;
      var $102=(($100)>>>0) < (($101)>>>0);
      if ($102) { label = 20; break; } else { label = 24; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $105=$__p4;
      var $106=(($105+4)|0);
      $__p4=$106;
      var $107=HEAP32[(($106)>>2)];
      var $108=((($107)-(1))|0);
      HEAP32[(($106)>>2)]=$108;
      var $109=(($107)|0)==0;
      if ($109) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 21; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $116=$r5;
      var $117=$2;
      var $118=(($116+($117<<2))|0);
      $__p7=$118;
      var $119=$__p7;
      var $120=HEAP32[(($119)>>2)];
      $__x6=$120;
      var $121=$__x6;
      var $122=$1;
      var $123=(($122)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$124 >>> 2;
      var $126=((($121)-($125))|0);
      var $127=$__p7;
      HEAP32[(($127)>>2)]=$126;
      var $128=$__x6;
      var $129=$1;
      var $130=(($129)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=$131 >>> 2;
      var $133=(($128)>>>0) < (($132)>>>0);
      if ($133) { label = 28; break; } else { label = 32; break; }
    case 28: 
      label = 29; break;
    case 29: 
      var $136=$__p7;
      var $137=(($136+4)|0);
      $__p7=$137;
      var $138=HEAP32[(($137)>>2)];
      var $139=((($138)-(1))|0);
      HEAP32[(($137)>>2)]=$139;
      var $140=(($138)|0)==0;
      if ($140) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 29; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $145=$r5;
      var $146=$2;
      var $147=(($145+($146<<2))|0);
      var $148=$1;
      var $149=(($148+4)|0);
      var $150=$2;
      var $151=($150<<1);
      var $152=((($151)-(1))|0);
      var $153=$6;
      var $154=_DO_mpn_sublsh_n209($147, $149, $152, 30, $153);
      $__cy5=$154;
      label = 34; break;
    case 34: 
      var $156=$r5;
      var $157=$2;
      var $158=(($156+($157<<2))|0);
      var $159=$2;
      var $160=($159<<1);
      var $161=(($158+($160<<2))|0);
      var $162=((($161)-(4))|0);
      $__p9=$162;
      var $163=$__p9;
      var $164=HEAP32[(($163)>>2)];
      $__x8=$164;
      var $165=$__x8;
      var $166=$__cy5;
      var $167=((($165)-($166))|0);
      var $168=$__p9;
      HEAP32[(($168)>>2)]=$167;
      var $169=$__x8;
      var $170=$__cy5;
      var $171=(($169)>>>0) < (($170)>>>0);
      if ($171) { label = 35; break; } else { label = 39; break; }
    case 35: 
      label = 36; break;
    case 36: 
      var $174=$__p9;
      var $175=(($174+4)|0);
      $__p9=$175;
      var $176=HEAP32[(($175)>>2)];
      var $177=((($176)-(1))|0);
      HEAP32[(($175)>>2)]=$177;
      var $178=(($176)|0)==0;
      if ($178) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 36; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $184=$r5;
      var $185=$r1;
      var $186=$5;
      var $187=$6;
      var $188=_DO_mpn_sublsh_n209($184, $185, $186, 6, $187);
      $cy=$188;
      label = 42; break;
    case 42: 
      var $190=$r5;
      var $191=$5;
      var $192=(($190+($191<<2))|0);
      $__p11=$192;
      var $193=$__p11;
      var $194=HEAP32[(($193)>>2)];
      $__x10=$194;
      var $195=$__x10;
      var $196=$cy;
      var $197=((($195)-($196))|0);
      var $198=$__p11;
      HEAP32[(($198)>>2)]=$197;
      var $199=$__x10;
      var $200=$cy;
      var $201=(($199)>>>0) < (($200)>>>0);
      if ($201) { label = 43; break; } else { label = 47; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $204=$__p11;
      var $205=(($204+4)|0);
      $__p11=$205;
      var $206=HEAP32[(($205)>>2)];
      var $207=((($206)-(1))|0);
      HEAP32[(($205)>>2)]=$207;
      var $208=(($206)|0)==0;
      if ($208) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 44; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $213=$4;
      var $214=$2;
      var $215=(($213+($214<<2))|0);
      var $216=$4;
      var $217=$2;
      var $218=(($216+($217<<2))|0);
      var $219=$1;
      var $220=$2;
      var $221=($220<<1);
      var $222=___gmpn_sub_n($215, $218, $219, $221);
      var $223=$2;
      var $224=((($223)*(3))&-1);
      var $225=$4;
      var $226=(($225+($224<<2))|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=((($227)-($222))|0);
      HEAP32[(($226)>>2)]=$228;
      var $229=$4;
      var $230=$4;
      var $231=$r1;
      var $232=$5;
      var $233=___gmpn_sub_n($229, $230, $231, $232);
      $cy=$233;
      label = 49; break;
    case 49: 
      var $235=$4;
      var $236=$5;
      var $237=(($235+($236<<2))|0);
      $__p13=$237;
      var $238=$__p13;
      var $239=HEAP32[(($238)>>2)];
      $__x12=$239;
      var $240=$__x12;
      var $241=$cy;
      var $242=((($240)-($241))|0);
      var $243=$__p13;
      HEAP32[(($243)>>2)]=$242;
      var $244=$__x12;
      var $245=$cy;
      var $246=(($244)>>>0) < (($245)>>>0);
      if ($246) { label = 50; break; } else { label = 54; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $249=$__p13;
      var $250=(($249+4)|0);
      $__p13=$250;
      var $251=HEAP32[(($250)>>2)];
      var $252=((($251)-(1))|0);
      HEAP32[(($250)>>2)]=$252;
      var $253=(($251)|0)==0;
      if ($253) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 51; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $258=$3;
      var $259=$3;
      var $260=$r5;
      var $261=$2;
      var $262=((($261)*(3))&-1);
      var $263=((($262)+(1))|0);
      var $264=___gmpn_sub_n($258, $259, $260, $263);
      var $265=$3;
      var $266=$3;
      var $267=$2;
      var $268=((($267)*(3))&-1);
      var $269=((($268)+(1))|0);
      var $270=___gmpn_rshift($265, $266, $269, 2);
      var $271=$r5;
      var $272=$r5;
      var $273=$4;
      var $274=$2;
      var $275=((($274)*(3))&-1);
      var $276=((($275)+(1))|0);
      var $277=___gmpn_sub_n($271, $272, $273, $276);
      var $278=$3;
      var $279=$3;
      var $280=$r5;
      var $281=$2;
      var $282=((($281)*(3))&-1);
      var $283=((($282)+(1))|0);
      var $284=___gmpn_sub_n($278, $279, $280, $283);
      var $285=$3;
      var $286=$3;
      var $287=$2;
      var $288=((($287)*(3))&-1);
      var $289=((($288)+(1))|0);
      ___gmpn_divexact_1($285, $286, $289, 45);
      var $290=$r5;
      var $291=$r5;
      var $292=$2;
      var $293=((($292)*(3))&-1);
      var $294=((($293)+(1))|0);
      var $295=___gmpn_bdiv_dbm1c($290, $291, $294, 1431655765, 0);
      var $296=3 & $295;
      var $297=$r5;
      var $298=$3;
      var $299=$2;
      var $300=((($299)*(3))&-1);
      var $301=((($300)+(1))|0);
      var $302=$6;
      var $303=_DO_mpn_sublsh_n209($297, $298, $301, 2, $302);
      var $304=$1;
      var $305=$2;
      var $306=(($304+($305<<2))|0);
      var $307=$1;
      var $308=$2;
      var $309=(($307+($308<<2))|0);
      var $310=$4;
      var $311=$2;
      var $312=___gmpn_add_n($306, $309, $310, $311);
      $cy=$312;
      var $313=$1;
      var $314=$2;
      var $315=(($313+($314<<2))|0);
      var $316=$1;
      var $317=$2;
      var $318=(($316+($317<<2))|0);
      var $319=$r5;
      var $320=$2;
      var $321=___gmpn_sub_n($315, $318, $319, $320);
      var $322=$cy;
      var $323=((($322)-($321))|0);
      $cy=$323;
      var $324=$cy;
      var $325=0 > (($324)|0);
      if ($325) { label = 56; break; } else { label = 62; break; }
    case 56: 
      label = 57; break;
    case 57: 
      var $328=$4;
      var $329=$2;
      var $330=(($328+($329<<2))|0);
      $__p15=$330;
      label = 58; break;
    case 58: 
      var $332=$__p15;
      var $333=(($332+4)|0);
      $__p15=$333;
      var $334=HEAP32[(($332)>>2)];
      var $335=((($334)-(1))|0);
      HEAP32[(($332)>>2)]=$335;
      var $336=(($334)|0)==0;
      if ($336) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 58; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 70; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $342=$4;
      var $343=$2;
      var $344=(($342+($343<<2))|0);
      $__p17=$344;
      var $345=$__p17;
      var $346=HEAP32[(($345)>>2)];
      var $347=$cy;
      var $348=((($346)+($347))|0);
      $__x16=$348;
      var $349=$__x16;
      var $350=$__p17;
      HEAP32[(($350)>>2)]=$349;
      var $351=$__x16;
      var $352=$cy;
      var $353=(($351)>>>0) < (($352)>>>0);
      if ($353) { label = 64; break; } else { label = 68; break; }
    case 64: 
      label = 65; break;
    case 65: 
      var $356=$__p17;
      var $357=(($356+4)|0);
      $__p17=$357;
      var $358=HEAP32[(($357)>>2)];
      var $359=((($358)+(1))|0);
      HEAP32[(($357)>>2)]=$359;
      var $360=(($359)|0)==0;
      if ($360) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 65; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $366=$1;
      var $367=$2;
      var $368=($367<<1);
      var $369=(($366+($368<<2))|0);
      var $370=$4;
      var $371=$2;
      var $372=(($370+($371<<2))|0);
      var $373=$r5;
      var $374=$2;
      var $375=(($373+($374<<2))|0);
      var $376=$2;
      var $377=___gmpn_sub_n($369, $372, $375, $376);
      $cy=$377;
      label = 71; break;
    case 71: 
      var $379=$4;
      var $380=$2;
      var $381=($380<<1);
      var $382=(($379+($381<<2))|0);
      $__p19=$382;
      var $383=$__p19;
      var $384=HEAP32[(($383)>>2)];
      $__x18=$384;
      var $385=$__x18;
      var $386=$cy;
      var $387=((($385)-($386))|0);
      var $388=$__p19;
      HEAP32[(($388)>>2)]=$387;
      var $389=$__x18;
      var $390=$cy;
      var $391=(($389)>>>0) < (($390)>>>0);
      if ($391) { label = 72; break; } else { label = 76; break; }
    case 72: 
      label = 73; break;
    case 73: 
      var $394=$__p19;
      var $395=(($394+4)|0);
      $__p19=$395;
      var $396=HEAP32[(($395)>>2)];
      var $397=((($396)-(1))|0);
      HEAP32[(($395)>>2)]=$397;
      var $398=(($396)|0)==0;
      if ($398) { label = 74; break; } else { label = 75; break; }
    case 74: 
      label = 73; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $403=$1;
      var $404=$2;
      var $405=((($404)*(3))&-1);
      var $406=(($403+($405<<2))|0);
      var $407=$r5;
      var $408=$4;
      var $409=$2;
      var $410=($409<<1);
      var $411=(($408+($410<<2))|0);
      var $412=$2;
      var $413=((($412)+(1))|0);
      var $414=___gmpn_add_n($406, $407, $411, $413);
      $cy=$414;
      var $415=$r5;
      var $416=$2;
      var $417=($416<<1);
      var $418=(($415+($417<<2))|0);
      var $419=$r5;
      var $420=$2;
      var $421=($420<<1);
      var $422=(($419+($421<<2))|0);
      var $423=$3;
      var $424=$2;
      var $425=___gmpn_add_n($418, $422, $423, $424);
      var $426=$2;
      var $427=((($426)*(3))&-1);
      var $428=$r5;
      var $429=(($428+($427<<2))|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=((($430)+($425))|0);
      HEAP32[(($429)>>2)]=$431;
      var $432=$1;
      var $433=$2;
      var $434=((($433)*(3))&-1);
      var $435=(($432+($434<<2))|0);
      var $436=$1;
      var $437=$2;
      var $438=((($437)*(3))&-1);
      var $439=(($436+($438<<2))|0);
      var $440=$r5;
      var $441=$2;
      var $442=($441<<1);
      var $443=(($440+($442<<2))|0);
      var $444=$2;
      var $445=((($444)+(1))|0);
      var $446=___gmpn_sub_n($435, $439, $443, $445);
      var $447=$cy;
      var $448=((($447)-($446))|0);
      $cy=$448;
      var $449=$cy;
      var $450=0 > (($449)|0);
      if ($450) { label = 78; break; } else { label = 84; break; }
    case 78: 
      label = 79; break;
    case 79: 
      var $453=$r5;
      var $454=$2;
      var $455=(($453+($454<<2))|0);
      var $456=(($455+4)|0);
      $__p21=$456;
      label = 80; break;
    case 80: 
      var $458=$__p21;
      var $459=(($458+4)|0);
      $__p21=$459;
      var $460=HEAP32[(($458)>>2)];
      var $461=((($460)-(1))|0);
      HEAP32[(($458)>>2)]=$461;
      var $462=(($460)|0)==0;
      if ($462) { label = 81; break; } else { label = 82; break; }
    case 81: 
      label = 80; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 92; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $468=$r5;
      var $469=$2;
      var $470=(($468+($469<<2))|0);
      var $471=(($470+4)|0);
      $__p23=$471;
      var $472=$__p23;
      var $473=HEAP32[(($472)>>2)];
      var $474=$cy;
      var $475=((($473)+($474))|0);
      $__x22=$475;
      var $476=$__x22;
      var $477=$__p23;
      HEAP32[(($477)>>2)]=$476;
      var $478=$__x22;
      var $479=$cy;
      var $480=(($478)>>>0) < (($479)>>>0);
      if ($480) { label = 86; break; } else { label = 90; break; }
    case 86: 
      label = 87; break;
    case 87: 
      var $483=$__p23;
      var $484=(($483+4)|0);
      $__p23=$484;
      var $485=HEAP32[(($484)>>2)];
      var $486=((($485)+(1))|0);
      HEAP32[(($484)>>2)]=$486;
      var $487=(($486)|0)==0;
      if ($487) { label = 88; break; } else { label = 89; break; }
    case 88: 
      label = 87; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $493=$1;
      var $494=$2;
      var $495=($494<<2);
      var $496=(($493+($495<<2))|0);
      var $497=$r5;
      var $498=$2;
      var $499=(($497+($498<<2))|0);
      var $500=$3;
      var $501=$2;
      var $502=(($500+($501<<2))|0);
      var $503=$2;
      var $504=($503<<1);
      var $505=((($504)+(1))|0);
      var $506=___gmpn_sub_n($496, $499, $502, $505);
      var $507=$1;
      var $508=$2;
      var $509=((($508)*(6))&-1);
      var $510=(($507+($509<<2))|0);
      var $511=$3;
      var $512=$2;
      var $513=(($511+($512<<2))|0);
      var $514=$2;
      var $515=$2;
      var $516=((($515)*(6))&-1);
      var $517=$1;
      var $518=(($517+($516<<2))|0);
      var $519=HEAP32[(($518)>>2)];
      var $520=___gmpn_add_1($510, $513, $514, $519);
      $cy=$520;
      label = 93; break;
    case 93: 
      var $522=$3;
      var $523=$2;
      var $524=($523<<1);
      var $525=(($522+($524<<2))|0);
      $__p25=$525;
      var $526=$__p25;
      var $527=HEAP32[(($526)>>2)];
      var $528=$cy;
      var $529=((($527)+($528))|0);
      $__x24=$529;
      var $530=$__x24;
      var $531=$__p25;
      HEAP32[(($531)>>2)]=$530;
      var $532=$__x24;
      var $533=$cy;
      var $534=(($532)>>>0) < (($533)>>>0);
      if ($534) { label = 94; break; } else { label = 98; break; }
    case 94: 
      label = 95; break;
    case 95: 
      var $537=$__p25;
      var $538=(($537+4)|0);
      $__p25=$538;
      var $539=HEAP32[(($538)>>2)];
      var $540=((($539)+(1))|0);
      HEAP32[(($538)>>2)]=$540;
      var $541=(($540)|0)==0;
      if ($541) { label = 96; break; } else { label = 97; break; }
    case 96: 
      label = 95; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $546=$2;
      var $547=((($546)*(3))&-1);
      var $548=$3;
      var $549=(($548+($547<<2))|0);
      var $550=HEAP32[(($549)>>2)];
      var $551=$1;
      var $552=$2;
      var $553=((($552)*(7))&-1);
      var $554=(($551+($553<<2))|0);
      var $555=$1;
      var $556=$2;
      var $557=((($556)*(7))&-1);
      var $558=(($555+($557<<2))|0);
      var $559=$3;
      var $560=$2;
      var $561=($560<<1);
      var $562=(($559+($561<<2))|0);
      var $563=$2;
      var $564=___gmpn_add_n($554, $558, $562, $563);
      var $565=((($550)+($564))|0);
      $cy=$565;
      label = 100; break;
    case 100: 
      var $567=$1;
      var $568=$2;
      var $569=($568<<3);
      var $570=(($567+($569<<2))|0);
      $__p27=$570;
      var $571=$__p27;
      var $572=HEAP32[(($571)>>2)];
      var $573=$cy;
      var $574=((($572)+($573))|0);
      $__x26=$574;
      var $575=$__x26;
      var $576=$__p27;
      HEAP32[(($576)>>2)]=$575;
      var $577=$__x26;
      var $578=$cy;
      var $579=(($577)>>>0) < (($578)>>>0);
      if ($579) { label = 101; break; } else { label = 105; break; }
    case 101: 
      label = 102; break;
    case 102: 
      var $582=$__p27;
      var $583=(($582+4)|0);
      $__p27=$583;
      var $584=HEAP32[(($583)>>2)];
      var $585=((($584)+(1))|0);
      HEAP32[(($583)>>2)]=$585;
      var $586=(($585)|0)==0;
      if ($586) { label = 103; break; } else { label = 104; break; }
    case 103: 
      label = 102; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_8pts["X"]=1;

function _DO_mpn_sublsh_n209($dst, $src, $n, $s, $ws) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $__cy;
  $1=$dst;
  $2=$src;
  $3=$n;
  $4=$s;
  $5=$ws;
  var $6=$5;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_lshift($6, $7, $8, $9);
  $__cy=$10;
  var $11=$__cy;
  var $12=$1;
  var $13=$1;
  var $14=$5;
  var $15=$3;
  var $16=___gmpn_sub_n($12, $13, $14, $15);
  var $17=((($11)+($16))|0);

  return $17;
}


function ___gmpz_aorsmul_1($w, $x, $y, $sub) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $xsize;
      var $wsize;
      var $wsize_signed;
      var $new_wsize;
      var $min_size;
      var $dsize;
      var $xp;
      var $wp;
      var $cy;
      var $cy2;
      var $__d;
      var $__s;
      var $__n;
      var $__x;
      var $__p;
      var $cy21;
      var $__d2;
      var $__s3;
      var $__n4;
      var $__cy;
      var $__x5;
      var $__p6;
      $1=$w;
      $2=$x;
      $3=$y;
      $4=$sub;
      var $5=$2;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      $xsize=$7;
      var $8=$xsize;
      var $9=(($8)|0)==0;
      if ($9) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $11=$3;
      var $12=(($11)|0)==0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 87; break;
    case 5: 
      var $15=$xsize;
      var $16=$4;
      var $17=$16 ^ $15;
      $4=$17;
      var $18=$xsize;
      var $19=(($18)|0) >= 0;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $21=$xsize;
      var $26 = $21;label = 8; break;
    case 7: 
      var $23=$xsize;
      var $24=(((-$23))|0);
      var $26 = $24;label = 8; break;
    case 8: 
      var $26;
      $xsize=$26;
      var $27=$1;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      $wsize_signed=$29;
      var $30=$wsize_signed;
      var $31=(($30)|0)==0;
      if ($31) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $33=$xsize;
      var $34=((($33)+(1))|0);
      var $35=$1;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($34)|0) > (($37)|0);
      if ($38) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $40=$1;
      var $41=$xsize;
      var $42=((($41)+(1))|0);
      var $43=___gmpz_realloc($40, $42);
      var $44=$43;
      var $50 = $44;label = 12; break;
    case 11: 
      var $46=$1;
      var $47=(($46+8)|0);
      var $48=HEAP32[(($47)>>2)];
      var $50 = $48;label = 12; break;
    case 12: 
      var $50;
      var $51=$1;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      $wp=$53;
      var $54=$wp;
      var $55=$2;
      var $56=(($55+8)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$xsize;
      var $59=$3;
      var $60=___gmpn_mul_1($54, $57, $58, $59);
      $cy=$60;
      var $61=$cy;
      var $62=$xsize;
      var $63=$wp;
      var $64=(($63+($62<<2))|0);
      HEAP32[(($64)>>2)]=$61;
      var $65=$cy;
      var $66=(($65)|0)!=0;
      var $67=(($66)&1);
      var $68=$xsize;
      var $69=((($68)+($67))|0);
      $xsize=$69;
      var $70=$4;
      var $71=(($70)|0) >= 0;
      if ($71) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $73=$xsize;
      var $78 = $73;label = 15; break;
    case 14: 
      var $75=$xsize;
      var $76=(((-$75))|0);
      var $78 = $76;label = 15; break;
    case 15: 
      var $78;
      var $79=$1;
      var $80=(($79+4)|0);
      HEAP32[(($80)>>2)]=$78;
      label = 87; break;
    case 16: 
      var $82=$wsize_signed;
      var $83=$4;
      var $84=$83 ^ $82;
      $4=$84;
      var $85=$wsize_signed;
      var $86=(($85)|0) >= 0;
      if ($86) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $88=$wsize_signed;
      var $93 = $88;label = 19; break;
    case 18: 
      var $90=$wsize_signed;
      var $91=(((-$90))|0);
      var $93 = $91;label = 19; break;
    case 19: 
      var $93;
      $wsize=$93;
      var $94=$wsize;
      var $95=$xsize;
      var $96=(($94)|0) > (($95)|0);
      if ($96) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $98=$wsize;
      var $102 = $98;label = 22; break;
    case 21: 
      var $100=$xsize;
      var $102 = $100;label = 22; break;
    case 22: 
      var $102;
      $new_wsize=$102;
      var $103=$new_wsize;
      var $104=((($103)+(1))|0);
      var $105=$1;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($104)|0) > (($107)|0);
      if ($108) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $110=$1;
      var $111=$new_wsize;
      var $112=((($111)+(1))|0);
      var $113=___gmpz_realloc($110, $112);
      var $114=$113;
      var $120 = $114;label = 25; break;
    case 24: 
      var $116=$1;
      var $117=(($116+8)|0);
      var $118=HEAP32[(($117)>>2)];
      var $120 = $118;label = 25; break;
    case 25: 
      var $120;
      var $121=$1;
      var $122=(($121+8)|0);
      var $123=HEAP32[(($122)>>2)];
      $wp=$123;
      var $124=$2;
      var $125=(($124+8)|0);
      var $126=HEAP32[(($125)>>2)];
      $xp=$126;
      var $127=$wsize;
      var $128=$xsize;
      var $129=(($127)|0) < (($128)|0);
      if ($129) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $131=$wsize;
      var $135 = $131;label = 28; break;
    case 27: 
      var $133=$xsize;
      var $135 = $133;label = 28; break;
    case 28: 
      var $135;
      $min_size=$135;
      var $136=$4;
      var $137=(($136)|0) >= 0;
      if ($137) { label = 29; break; } else { label = 35; break; }
    case 29: 
      var $139=$wp;
      var $140=$xp;
      var $141=$min_size;
      var $142=$3;
      var $143=___gmpn_addmul_1($139, $140, $141, $142);
      $cy=$143;
      var $144=$min_size;
      var $145=$wp;
      var $146=(($145+($144<<2))|0);
      $wp=$146;
      var $147=$min_size;
      var $148=$xp;
      var $149=(($148+($147<<2))|0);
      $xp=$149;
      var $150=$xsize;
      var $151=$wsize;
      var $152=((($150)-($151))|0);
      $dsize=$152;
      var $153=$dsize;
      var $154=(($153)|0)!=0;
      if ($154) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $156=$dsize;
      var $157=(($156)|0) > 0;
      if ($157) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $159=$wp;
      var $160=$xp;
      var $161=$dsize;
      var $162=$3;
      var $163=___gmpn_mul_1($159, $160, $161, $162);
      $cy2=$163;
      label = 33; break;
    case 32: 
      var $165=$dsize;
      var $166=(((-$165))|0);
      $dsize=$166;
      $cy2=0;
      label = 33; break;
    case 33: 
      var $168=$cy2;
      var $169=$wp;
      var $170=$wp;
      var $171=$dsize;
      var $172=$cy;
      var $173=___gmpn_add_1($169, $170, $171, $172);
      var $174=((($168)+($173))|0);
      $cy=$174;
      label = 34; break;
    case 34: 
      var $176=$cy;
      var $177=$dsize;
      var $178=$wp;
      var $179=(($178+($177<<2))|0);
      HEAP32[(($179)>>2)]=$176;
      var $180=$cy;
      var $181=(($180)|0)!=0;
      var $182=(($181)&1);
      var $183=$new_wsize;
      var $184=((($183)+($182))|0);
      $new_wsize=$184;
      label = 82; break;
    case 35: 
      var $186=$wp;
      var $187=$xp;
      var $188=$min_size;
      var $189=$3;
      var $190=___gmpn_submul_1($186, $187, $188, $189);
      $cy=$190;
      var $191=$wsize;
      var $192=$xsize;
      var $193=(($191)|0) >= (($192)|0);
      if ($193) { label = 36; break; } else { label = 55; break; }
    case 36: 
      var $195=$wsize;
      var $196=$xsize;
      var $197=(($195)|0)!=(($196)|0);
      if ($197) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $199=$wp;
      var $200=$xsize;
      var $201=(($199+($200<<2))|0);
      var $202=$wp;
      var $203=$xsize;
      var $204=(($202+($203<<2))|0);
      var $205=$wsize;
      var $206=$xsize;
      var $207=((($205)-($206))|0);
      var $208=$cy;
      var $209=___gmpn_sub_1($201, $204, $207, $208);
      $cy=$209;
      label = 38; break;
    case 38: 
      var $211=$cy;
      var $212=(($211)|0)!=0;
      if ($212) { label = 39; break; } else { label = 54; break; }
    case 39: 
      var $214=$cy;
      var $215=(((-$214))|0);
      var $216=$215 ^ -1;
      var $217=$new_wsize;
      var $218=$wp;
      var $219=(($218+($217<<2))|0);
      HEAP32[(($219)>>2)]=$216;
      label = 40; break;
    case 40: 
      var $221=$wp;
      $__d=$221;
      var $222=$wp;
      $__s=$222;
      var $223=$new_wsize;
      $__n=$223;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $229=$__s;
      var $230=(($229+4)|0);
      $__s=$230;
      var $231=HEAP32[(($229)>>2)];
      var $232=$231 ^ -1;
      var $233=$__d;
      var $234=(($233+4)|0);
      $__d=$234;
      HEAP32[(($233)>>2)]=$232;
      label = 46; break;
    case 46: 
      var $236=$__n;
      var $237=((($236)-(1))|0);
      $__n=$237;
      var $238=(($237)|0)!=0;
      if ($238) { label = 45; break; } else { label = 47; break; }
    case 47: 
      label = 48; break;
    case 48: 
      var $241=$new_wsize;
      var $242=((($241)+(1))|0);
      $new_wsize=$242;
      label = 49; break;
    case 49: 
      var $244=$wp;
      $__p=$244;
      label = 50; break;
    case 50: 
      var $246=$__p;
      var $247=(($246+4)|0);
      $__p=$247;
      var $248=HEAP32[(($246)>>2)];
      var $249=((($248)+(1))|0);
      HEAP32[(($246)>>2)]=$249;
      var $250=(($249)|0)==0;
      if ($250) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 50; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $254=$wsize_signed;
      var $255=(((-$254))|0);
      $wsize_signed=$255;
      label = 54; break;
    case 54: 
      label = 74; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $259=$wp;
      $__d2=$259;
      var $260=$wp;
      $__s3=$260;
      var $261=$wsize;
      $__n4=$261;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $267=$__s3;
      var $268=(($267+4)|0);
      $__s3=$268;
      var $269=HEAP32[(($267)>>2)];
      var $270=$269 ^ -1;
      var $271=$__d2;
      var $272=(($271+4)|0);
      $__d2=$272;
      HEAP32[(($271)>>2)]=$270;
      label = 62; break;
    case 62: 
      var $274=$__n4;
      var $275=((($274)-(1))|0);
      $__n4=$275;
      var $276=(($275)|0)!=0;
      if ($276) { label = 61; break; } else { label = 63; break; }
    case 63: 
      label = 64; break;
    case 64: 
      var $279=$wp;
      var $280=$wp;
      var $281=$wsize;
      var $282=___gmpn_add_1($279, $280, $281, 1);
      var $283=$cy;
      var $284=((($283)+($282))|0);
      $cy=$284;
      var $285=$cy;
      var $286=((($285)-(1))|0);
      $cy=$286;
      var $287=$cy;
      var $288=(($287)|0)==-1;
      var $289=(($288)&1);
      $cy21=$289;
      var $290=$cy21;
      var $291=$cy;
      var $292=((($291)+($290))|0);
      $cy=$292;
      label = 65; break;
    case 65: 
      var $294=$wp;
      var $295=$wsize;
      var $296=(($294+($295<<2))|0);
      var $297=$xp;
      var $298=$wsize;
      var $299=(($297+($298<<2))|0);
      var $300=$xsize;
      var $301=$wsize;
      var $302=((($300)-($301))|0);
      var $303=$3;
      var $304=___gmpn_mul_1($296, $299, $302, $303);
      $__cy=$304;
      var $305=$__cy;
      var $306=$wp;
      var $307=$wsize;
      var $308=(($306+($307<<2))|0);
      var $309=$wp;
      var $310=$wsize;
      var $311=(($309+($310<<2))|0);
      var $312=$xsize;
      var $313=$wsize;
      var $314=((($312)-($313))|0);
      var $315=$cy;
      var $316=___gmpn_add_1($308, $311, $314, $315);
      var $317=((($305)+($316))|0);
      $cy=$317;
      label = 66; break;
    case 66: 
      var $319=$cy;
      var $320=$new_wsize;
      var $321=$wp;
      var $322=(($321+($320<<2))|0);
      HEAP32[(($322)>>2)]=$319;
      var $323=$cy;
      var $324=(($323)|0)!=0;
      var $325=(($324)&1);
      var $326=$new_wsize;
      var $327=((($326)+($325))|0);
      $new_wsize=$327;
      var $328=$cy21;
      var $329=(($328)|0)!=0;
      if ($329) { label = 67; break; } else { label = 73; break; }
    case 67: 
      label = 68; break;
    case 68: 
      var $332=$wp;
      var $333=$wsize;
      var $334=(($332+($333<<2))|0);
      $__p6=$334;
      label = 69; break;
    case 69: 
      var $336=$__p6;
      var $337=(($336+4)|0);
      $__p6=$337;
      var $338=HEAP32[(($336)>>2)];
      var $339=((($338)-(1))|0);
      HEAP32[(($336)>>2)]=$339;
      var $340=(($338)|0)==0;
      if ($340) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 69; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $345=$wsize_signed;
      var $346=(((-$345))|0);
      $wsize_signed=$346;
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $350=$new_wsize;
      var $351=(($350)|0) > 0;
      if ($351) { label = 77; break; } else { label = 80; break; }
    case 77: 
      var $353=$new_wsize;
      var $354=((($353)-(1))|0);
      var $355=$wp;
      var $356=(($355+($354<<2))|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=(($357)|0)!=0;
      if ($358) { label = 78; break; } else { label = 79; break; }
    case 78: 
      label = 80; break;
    case 79: 
      var $361=$new_wsize;
      var $362=((($361)-(1))|0);
      $new_wsize=$362;
      label = 76; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $366=$wsize_signed;
      var $367=(($366)|0) >= 0;
      if ($367) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $369=$new_wsize;
      var $374 = $369;label = 85; break;
    case 84: 
      var $371=$new_wsize;
      var $372=(((-$371))|0);
      var $374 = $372;label = 85; break;
    case 85: 
      var $374;
      var $375=$1;
      var $376=(($375+4)|0);
      HEAP32[(($376)>>2)]=$374;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpz_aorsmul_1["X"]=1;

function ___gmpz_addmul_ui($w, $x, $y) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  $1=$w;
  $2=$x;
  $3=$y;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  ___gmpz_aorsmul_1($4, $5, $6, 0);

  return;
}


function ___gmpz_divexact($quot, $num, $den) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $qp;
      var $qn;
      var $np;
      var $dp;
      var $nn;
      var $dn;
      var $__tmp_marker=__stackBase__;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$quot;
      $2=$num;
      $3=$den;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0) >= 0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $18 = $11;label = 5; break;
    case 4: 
      var $13=$2;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(((-$15))|0);
      var $18 = $16;label = 5; break;
    case 5: 
      var $18;
      $nn=$18;
      var $19=$3;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0) >= 0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=$3;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $33 = $26;label = 8; break;
    case 7: 
      var $28=$3;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(((-$30))|0);
      var $33 = $31;label = 8; break;
    case 8: 
      var $33;
      $dn=$33;
      var $34=$nn;
      var $35=$dn;
      var $36=((($34)-($35))|0);
      var $37=((($36)+(1))|0);
      $qn=$37;
      var $38=$qn;
      var $39=$1;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($38)|0) > (($41)|0);
      if ($42) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $44=$1;
      var $45=$qn;
      var $46=___gmpz_realloc($44, $45);
      var $47=$46;
      var $53 = $47;label = 11; break;
    case 10: 
      var $49=$1;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $53 = $51;label = 11; break;
    case 11: 
      var $53;
      var $54=$nn;
      var $55=$dn;
      var $56=(($54)|0) < (($55)|0);
      if ($56) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $58=$1;
      var $59=(($58+4)|0);
      HEAP32[(($59)>>2)]=0;
      label = 52; break;
    case 13: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $61=$1;
      var $62=(($61+8)|0);
      var $63=HEAP32[(($62)>>2)];
      $qp=$63;
      var $64=$1;
      var $65=$2;
      var $66=(($64)|0)==(($65)|0);
      if ($66) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $68=$1;
      var $69=$3;
      var $70=(($68)|0)==(($69)|0);
      if ($70) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $72=$qn;
      var $73=($72<<2);
      var $74=(($73)>>>0) < 65536;
      if ($74) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $76=$qn;
      var $77=($76<<2);
      var $78=STACKTOP;STACKTOP = (STACKTOP + $77)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $84 = $78;label = 18; break;
    case 17: 
      var $80=$qn;
      var $81=($80<<2);
      var $82=___gmp_tmp_reentrant_alloc($__tmp_marker, $81);
      var $84 = $82;label = 18; break;
    case 18: 
      var $84;
      var $85=$84;
      $qp=$85;
      label = 19; break;
    case 19: 
      var $87=$2;
      var $88=(($87+8)|0);
      var $89=HEAP32[(($88)>>2)];
      $np=$89;
      var $90=$3;
      var $91=(($90+8)|0);
      var $92=HEAP32[(($91)>>2)];
      $dp=$92;
      var $93=$qp;
      var $94=$np;
      var $95=$nn;
      var $96=$dp;
      var $97=$dn;
      ___gmpn_divexact($93, $94, $95, $96, $97);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $100=$qn;
      var $101=(($100)|0) > 0;
      if ($101) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $103=$qn;
      var $104=((($103)-(1))|0);
      var $105=$qp;
      var $106=(($105+($104<<2))|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107)|0)!=0;
      if ($108) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $111=$qn;
      var $112=((($111)-(1))|0);
      $qn=$112;
      label = 21; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $115=$2;
      var $116=(($115+4)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$3;
      var $119=(($118+4)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$117 ^ $120;
      var $122=(($121)|0) >= 0;
      if ($122) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $124=$qn;
      var $129 = $124;label = 29; break;
    case 28: 
      var $126=$qn;
      var $127=(((-$126))|0);
      var $129 = $127;label = 29; break;
    case 29: 
      var $129;
      var $130=$1;
      var $131=(($130+4)|0);
      HEAP32[(($131)>>2)]=$129;
      var $132=$qp;
      var $133=$1;
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($132)|0)!=(($135)|0);
      if ($136) { label = 30; break; } else { label = 48; break; }
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $146=$qn;
      var $147=(($146)|0)!=0;
      if ($147) { label = 39; break; } else { label = 45; break; }
    case 39: 
      var $149=$qn;
      var $150=((($149)-(1))|0);
      $__n=$150;
      var $151=$1;
      var $152=(($151+8)|0);
      var $153=HEAP32[(($152)>>2)];
      $__dst=$153;
      var $154=$qp;
      $__src=$154;
      var $155=$__src;
      var $156=(($155+4)|0);
      $__src=$156;
      var $157=HEAP32[(($155)>>2)];
      $__x=$157;
      var $158=$__n;
      var $159=(($158)|0)!=0;
      if ($159) { label = 40; break; } else { label = 44; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $162=$__x;
      var $163=$__dst;
      var $164=(($163+4)|0);
      $__dst=$164;
      HEAP32[(($163)>>2)]=$162;
      var $165=$__src;
      var $166=(($165+4)|0);
      $__src=$166;
      var $167=HEAP32[(($165)>>2)];
      $__x=$167;
      label = 42; break;
    case 42: 
      var $169=$__n;
      var $170=((($169)-(1))|0);
      $__n=$170;
      var $171=(($170)|0)!=0;
      if ($171) { label = 41; break; } else { label = 43; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $174=$__x;
      var $175=$__dst;
      var $176=(($175+4)|0);
      $__dst=$176;
      HEAP32[(($175)>>2)]=$174;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $182=HEAP32[(($__tmp_marker)>>2)];
      var $183=(($182)|0)!=0;
      if ($183) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $185=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($185);
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpz_divexact["X"]=1;

function ___gmpz_sizeinbase($x, $base) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $result;
      var $__lb_base;
      var $__cnt;
      var $__totbits;
      var $__xr;
      var $__a;
      $1=$x;
      $2=$base;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0) >= 0;
      if ($13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $15=$1;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $24 = $17;label = 12; break;
    case 11: 
      var $19=$1;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(((-$21))|0);
      var $24 = $22;label = 12; break;
    case 12: 
      var $24;
      var $25=(($24)|0)==0;
      if ($25) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $result=1;
      label = 29; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|0) >= 0;
      if ($32) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $34=$1;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $43 = $36;label = 18; break;
    case 17: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(((-$40))|0);
      var $43 = $41;label = 18; break;
    case 18: 
      var $43;
      var $44=((($43)-(1))|0);
      var $45=$1;
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+($44<<2))|0);
      var $49=HEAP32[(($48)>>2)];
      $__xr=$49;
      var $50=$__xr;
      var $51=(($50)>>>0) < 65536;
      if ($51) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $53=$__xr;
      var $54=(($53)>>>0) < 256;
      var $55=$54 ? 1 : 9;
      var $61 = $55;label = 21; break;
    case 20: 
      var $57=$__xr;
      var $58=(($57)>>>0) < 16777216;
      var $59=$58 ? 17 : 25;
      var $61 = $59;label = 21; break;
    case 21: 
      var $61;
      $__a=$61;
      var $62=$__a;
      var $63=(((33)-($62))|0);
      var $64=$__xr;
      var $65=$__a;
      var $66=$64 >>> (($65)>>>0);
      var $67=((5244408+$66)|0);
      var $68=HEAP8[($67)];
      var $69=(($68)&255);
      var $70=((($63)-($69))|0);
      $__cnt=$70;
      label = 22; break;
    case 22: 
      var $72=$1;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|0) >= 0;
      if ($75) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $77=$1;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $86 = $79;label = 25; break;
    case 24: 
      var $81=$1;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(((-$83))|0);
      var $86 = $84;label = 25; break;
    case 25: 
      var $86;
      var $87=($86<<5);
      var $88=$__cnt;
      var $89=(($88)|0);
      var $90=((($87)-($89))|0);
      $__totbits=$90;
      var $91=$2;
      var $92=$2;
      var $93=((($92)-(1))|0);
      var $94=$91 & $93;
      var $95=(($94)|0)==0;
      if ($95) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $97=$2;
      var $98=((5244536+((($97)*(20))&-1))|0);
      var $99=(($98+12)|0);
      var $100=HEAP32[(($99)>>2)];
      $__lb_base=$100;
      var $101=$__totbits;
      var $102=$__lb_base;
      var $103=((($101)+($102))|0);
      var $104=((($103)-(1))|0);
      var $105=$__lb_base;
      var $106=Math.floor(((($104)>>>0))/((($105)>>>0)));
      $result=$106;
      label = 28; break;
    case 27: 
      var $108=$__totbits;
      var $109=(($108)>>>0);
      var $110=$2;
      var $111=((5244536+((($110)*(20))&-1))|0);
      var $112=(($111+4)|0);
      var $113=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($112)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($112)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $114=($109)*($113);
      var $115=($114>=0 ? Math.floor($114) : Math.ceil($114));
      var $116=((($115)+(1))|0);
      $result=$116;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $120=$result;

      return $120;
    default: assert(0, "bad label: " + label);
  }

}
___gmpz_sizeinbase["X"]=1;

function ___gmp_tmp_reentrant_alloc($markp, $size) {
  var label = 0;


  var $1;
  var $2;
  var $p;
  var $total_size;
  $1=$markp;
  $2=$size;
  var $3=$2;
  var $4=((($3)+(8))|0);
  $total_size=$4;
  var $5=HEAP32[((5249824)>>2)];
  var $6=$total_size;
  var $7=FUNCTION_TABLE[$5]($6);
  $p=$7;
  var $8=$total_size;
  var $9=$p;
  var $10=$9;
  var $11=(($10+4)|0);
  HEAP32[(($11)>>2)]=$8;
  var $12=$1;
  var $13=HEAP32[(($12)>>2)];
  var $14=$p;
  var $15=$14;
  var $16=(($15)|0);
  HEAP32[(($16)>>2)]=$13;
  var $17=$p;
  var $18=$17;
  var $19=$1;
  HEAP32[(($19)>>2)]=$18;
  var $20=$p;
  var $21=(($20+8)|0);

  return $21;
}


function ___gmp_tmp_reentrant_free($mark) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $next;
      $1=$mark;
      label = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3)|0)!=0;
      if ($4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $next=$8;
      var $9=HEAP32[((5249684)>>2)];
      var $10=$1;
      var $11=$10;
      var $12=$1;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      FUNCTION_TABLE[$9]($11, $14);
      var $15=$next;
      $1=$15;
      label = 3; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_divexact($qp, $np, $nn, $dp, $dn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $shift;
      var $qn;
      var $tp;
      var $wp;
      var $__tmp_marker=__stackBase__;
      var $__ctz_x;
      var $__ctz_c;
      var $__xr;
      var $__a;
      var $ss;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $13=$4;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0)==0;
      if ($16) { label = 10; break; } else { label = 13; break; }
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $20=$4;
      var $21=(($20+4)|0);
      $4=$21;
      var $22=$2;
      var $23=(($22+4)|0);
      $2=$23;
      var $24=$5;
      var $25=((($24)-(1))|0);
      $5=$25;
      var $26=$3;
      var $27=((($26)-(1))|0);
      $3=$27;
      label = 9; break;
    case 13: 
      var $29=$5;
      var $30=(($29)|0)==1;
      if ($30) { label = 14; break; } else { label = 19; break; }
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $35=$1;
      var $36=$2;
      var $37=$3;
      var $38=$4;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      ___gmpn_divexact_1($35, $36, $37, $40);
      label = 18; break;
    case 18: 
      label = 69; break;
    case 19: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $43=$3;
      var $44=((($43)+(1))|0);
      var $45=$5;
      var $46=((($44)-($45))|0);
      $qn=$46;
      label = 20; break;
    case 20: 
      var $48=$4;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      $__ctz_x=$50;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $54=$__ctz_x;
      var $55=$__ctz_x;
      var $56=(((-$55))|0);
      var $57=$54 & $56;
      $__xr=$57;
      var $58=$__xr;
      var $59=(($58)>>>0) < 65536;
      if ($59) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $61=$__xr;
      var $62=(($61)>>>0) < 256;
      var $63=$62 ? 1 : 9;
      var $69 = $63;label = 26; break;
    case 25: 
      var $65=$__xr;
      var $66=(($65)>>>0) < 16777216;
      var $67=$66 ? 17 : 25;
      var $69 = $67;label = 26; break;
    case 26: 
      var $69;
      $__a=$69;
      var $70=$__a;
      var $71=(((33)-($70))|0);
      var $72=$__xr;
      var $73=$__a;
      var $74=$72 >>> (($73)>>>0);
      var $75=((5244408+$74)|0);
      var $76=HEAP8[($75)];
      var $77=(($76)&255);
      var $78=((($71)-($77))|0);
      $__ctz_c=$78;
      label = 27; break;
    case 27: 
      var $80=$__ctz_c;
      var $81=(((31)-($80))|0);
      $shift=$81;
      label = 28; break;
    case 28: 
      var $83=$shift;
      var $84=(($83)>>>0) > 0;
      if ($84) { label = 29; break; } else { label = 39; break; }
    case 29: 
      var $86=$5;
      var $87=$qn;
      var $88=(($86)|0) > (($87)|0);
      if ($88) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $90=$qn;
      var $91=((($90)+(1))|0);
      var $95 = $91;label = 32; break;
    case 31: 
      var $93=$5;
      var $95 = $93;label = 32; break;
    case 32: 
      var $95;
      $ss=$95;
      var $96=$ss;
      var $97=($96<<2);
      var $98=(($97)>>>0) < 65536;
      if ($98) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $100=$ss;
      var $101=($100<<2);
      var $102=STACKTOP;STACKTOP = (STACKTOP + $101)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $108 = $102;label = 35; break;
    case 34: 
      var $104=$ss;
      var $105=($104<<2);
      var $106=___gmp_tmp_reentrant_alloc($__tmp_marker, $105);
      var $108 = $106;label = 35; break;
    case 35: 
      var $108;
      var $109=$108;
      $tp=$109;
      var $110=$tp;
      var $111=$4;
      var $112=$ss;
      var $113=$shift;
      var $114=___gmpn_rshift($110, $111, $112, $113);
      var $115=$tp;
      $4=$115;
      var $116=$qn;
      var $117=((($116)+(1))|0);
      var $118=($117<<2);
      var $119=(($118)>>>0) < 65536;
      if ($119) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $121=$qn;
      var $122=((($121)+(1))|0);
      var $123=($122<<2);
      var $124=STACKTOP;STACKTOP = (STACKTOP + $123)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $131 = $124;label = 38; break;
    case 37: 
      var $126=$qn;
      var $127=((($126)+(1))|0);
      var $128=($127<<2);
      var $129=___gmp_tmp_reentrant_alloc($__tmp_marker, $128);
      var $131 = $129;label = 38; break;
    case 38: 
      var $131;
      var $132=$131;
      $wp=$132;
      var $133=$wp;
      var $134=$2;
      var $135=$qn;
      var $136=((($135)+(1))|0);
      var $137=$shift;
      var $138=___gmpn_rshift($133, $134, $136, $137);
      label = 60; break;
    case 39: 
      var $140=$qn;
      var $141=($140<<2);
      var $142=(($141)>>>0) < 65536;
      if ($142) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $144=$qn;
      var $145=($144<<2);
      var $146=STACKTOP;STACKTOP = (STACKTOP + $145)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $152 = $146;label = 42; break;
    case 41: 
      var $148=$qn;
      var $149=($148<<2);
      var $150=___gmp_tmp_reentrant_alloc($__tmp_marker, $149);
      var $152 = $150;label = 42; break;
    case 42: 
      var $152;
      var $153=$152;
      $wp=$153;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $162=$qn;
      var $163=(($162)|0)!=0;
      if ($163) { label = 51; break; } else { label = 57; break; }
    case 51: 
      var $165=$qn;
      var $166=((($165)-(1))|0);
      $__n=$166;
      var $167=$wp;
      $__dst=$167;
      var $168=$2;
      $__src=$168;
      var $169=$__src;
      var $170=(($169+4)|0);
      $__src=$170;
      var $171=HEAP32[(($169)>>2)];
      $__x=$171;
      var $172=$__n;
      var $173=(($172)|0)!=0;
      if ($173) { label = 52; break; } else { label = 56; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $176=$__x;
      var $177=$__dst;
      var $178=(($177+4)|0);
      $__dst=$178;
      HEAP32[(($177)>>2)]=$176;
      var $179=$__src;
      var $180=(($179+4)|0);
      $__src=$180;
      var $181=HEAP32[(($179)>>2)];
      $__x=$181;
      label = 54; break;
    case 54: 
      var $183=$__n;
      var $184=((($183)-(1))|0);
      $__n=$184;
      var $185=(($184)|0)!=0;
      if ($185) { label = 53; break; } else { label = 55; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $188=$__x;
      var $189=$__dst;
      var $190=(($189+4)|0);
      $__dst=$190;
      HEAP32[(($189)>>2)]=$188;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $195=$5;
      var $196=$qn;
      var $197=(($195)|0) > (($196)|0);
      if ($197) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $199=$qn;
      $5=$199;
      label = 62; break;
    case 62: 
      var $201=$qn;
      var $202=$5;
      var $203=___gmpn_bdiv_q_itch($201, $202);
      var $204=($203<<2);
      var $205=(($204)>>>0) < 65536;
      if ($205) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $207=$qn;
      var $208=$5;
      var $209=___gmpn_bdiv_q_itch($207, $208);
      var $210=($209<<2);
      var $211=STACKTOP;STACKTOP = (STACKTOP + $210)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $219 = $211;label = 65; break;
    case 64: 
      var $213=$qn;
      var $214=$5;
      var $215=___gmpn_bdiv_q_itch($213, $214);
      var $216=($215<<2);
      var $217=___gmp_tmp_reentrant_alloc($__tmp_marker, $216);
      var $219 = $217;label = 65; break;
    case 65: 
      var $219;
      var $220=$219;
      $tp=$220;
      var $221=$1;
      var $222=$wp;
      var $223=$qn;
      var $224=$4;
      var $225=$5;
      var $226=$tp;
      ___gmpn_bdiv_q($221, $222, $223, $224, $225, $226);
      label = 66; break;
    case 66: 
      var $228=HEAP32[(($__tmp_marker)>>2)];
      var $229=(($228)|0)!=0;
      if ($229) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $231=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($231);
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_divexact["X"]=1;

function ___gmpz_realloc($m, $new_alloc) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $mp;
      $1=$m;
      $2=$new_alloc;
      var $3=$2;
      var $4=(($3)|0) > 1;
      if ($4) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$2;
      var $9 = $6;label = 5; break;
    case 4: 
      var $9 = 1;label = 5; break;
    case 5: 
      var $9;
      $2=$9;
      var $10=$2;
      var $11=(($10)>>>0) > 134217727;
      if ($11) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $13=HEAP32[((_stderr)>>2)];
      var $14=_fprintf($13, ((5243552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 7: 
      var $16=HEAP32[((5249676)>>2)];
      var $17=$1;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=$1;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=($23<<2);
      var $25=$2;
      var $26=($25<<2);
      var $27=FUNCTION_TABLE[$16]($20, $24, $26);
      var $28=$27;
      $mp=$28;
      var $29=$mp;
      var $30=$1;
      var $31=(($30+8)|0);
      HEAP32[(($31)>>2)]=$29;
      var $32=$2;
      var $33=$1;
      var $34=(($33)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0) >= 0;
      if ($38) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $40=$1;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $49 = $42;label = 10; break;
    case 9: 
      var $44=$1;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(((-$46))|0);
      var $49 = $47;label = 10; break;
    case 10: 
      var $49;
      var $50=$2;
      var $51=(($49)|0) > (($50)|0);
      if ($51) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $53=$1;
      var $54=(($53+4)|0);
      HEAP32[(($54)>>2)]=0;
      label = 12; break;
    case 12: 
      var $56=$mp;
      var $57=$56;
      STACKTOP = __stackBase__;
      return $57;
    default: assert(0, "bad label: " + label);
  }

}
___gmpz_realloc["X"]=1;

function ___gmpn_get_str($str, $base, $up, $un) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 776)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $powtab_mem;
      var $powtab_mem_ptr;
      var $big_base=__stackBase__;
      var $digits_in_base;
      var $powtab=(__stackBase__)+(4);
      var $pi;
      var $n;
      var $p;
      var $t;
      var $out_len;
      var $tmp;
      var $__tmp_marker=(__stackBase__)+(644);
      var $n1;
      var $n0;
      var $bits_per_digit;
      var $cnt;
      var $bit_pos;
      var $i;
      var $s;
      var $bits;
      var $__xr;
      var $__a;
      var $n_pows;
      var $xn;
      var $pn;
      var $exptab=(__stackBase__)+(648);
      var $bexp;
      var $cy;
      var $shift;
      $2=$str;
      $3=$base;
      $4=$up;
      $5=$un;
      var $6=$5;
      var $7=(($6)|0)==0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$2;
      var $10=(($9)|0);
      HEAP8[($10)]=0;
      $1=1;
      label = 50; break;
    case 4: 
      var $12=$3;
      var $13=$3;
      var $14=((($13)-(1))|0);
      var $15=$12 & $14;
      var $16=(($15)|0)==0;
      if ($16) { label = 5; break; } else { label = 20; break; }
    case 5: 
      var $18=$3;
      var $19=((5244536+((($18)*(20))&-1))|0);
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      $bits_per_digit=$21;
      var $22=$2;
      $s=$22;
      var $23=$5;
      var $24=((($23)-(1))|0);
      var $25=$4;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $n1=$27;
      label = 6; break;
    case 6: 
      var $29=$n1;
      $__xr=$29;
      var $30=$__xr;
      var $31=(($30)>>>0) < 65536;
      if ($31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $33=$__xr;
      var $34=(($33)>>>0) < 256;
      var $35=$34 ? 1 : 9;
      var $41 = $35;label = 9; break;
    case 8: 
      var $37=$__xr;
      var $38=(($37)>>>0) < 16777216;
      var $39=$38 ? 17 : 25;
      var $41 = $39;label = 9; break;
    case 9: 
      var $41;
      $__a=$41;
      var $42=$__a;
      var $43=(((33)-($42))|0);
      var $44=$__xr;
      var $45=$__a;
      var $46=$44 >>> (($45)>>>0);
      var $47=((5244408+$46)|0);
      var $48=HEAP8[($47)];
      var $49=(($48)&255);
      var $50=((($43)-($49))|0);
      $cnt=$50;
      label = 10; break;
    case 10: 
      var $52=$5;
      var $53=($52<<5);
      var $54=$cnt;
      var $55=((($53)-($54))|0);
      var $56=(($55)|0);
      $bits=$56;
      var $57=$bits;
      var $58=$bits_per_digit;
      var $59=((($57)>>>0))%((($58)>>>0));
      $cnt=$59;
      var $60=$cnt;
      var $61=(($60)|0)!=0;
      if ($61) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $63=$bits_per_digit;
      var $64=$cnt;
      var $65=((($63)-($64))|0);
      var $66=$bits;
      var $67=((($66)+($65))|0);
      $bits=$67;
      label = 12; break;
    case 12: 
      var $69=$bits;
      var $70=$5;
      var $71=((($70)-(1))|0);
      var $72=($71<<5);
      var $73=((($69)-($72))|0);
      $bit_pos=$73;
      var $74=$5;
      var $75=((($74)-(1))|0);
      $i=$75;
      label = 13; break;
    case 13: 
      var $77=$bits_per_digit;
      var $78=$bit_pos;
      var $79=((($78)-($77))|0);
      $bit_pos=$79;
      label = 14; break;
    case 14: 
      var $81=$bit_pos;
      var $82=(($81)|0) >= 0;
      if ($82) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $84=$n1;
      var $85=$bit_pos;
      var $86=$84 >>> (($85)>>>0);
      var $87=$bits_per_digit;
      var $88=1 << $87;
      var $89=((($88)-(1))|0);
      var $90=$86 & $89;
      var $91=(($90) & 255);
      var $92=$s;
      var $93=(($92+1)|0);
      $s=$93;
      HEAP8[($92)]=$91;
      var $94=$bits_per_digit;
      var $95=$bit_pos;
      var $96=((($95)-($94))|0);
      $bit_pos=$96;
      label = 14; break;
    case 16: 
      var $98=$i;
      var $99=((($98)-(1))|0);
      $i=$99;
      var $100=$i;
      var $101=(($100)|0) < 0;
      if ($101) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $104=$n1;
      var $105=$bit_pos;
      var $106=(((-$105))|0);
      var $107=$104 << $106;
      var $108=$bits_per_digit;
      var $109=1 << $108;
      var $110=((($109)-(1))|0);
      var $111=$107 & $110;
      $n0=$111;
      var $112=$i;
      var $113=$4;
      var $114=(($113+($112<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      $n1=$115;
      var $116=$bit_pos;
      var $117=((($116)+(32))|0);
      $bit_pos=$117;
      var $118=$n0;
      var $119=$n1;
      var $120=$bit_pos;
      var $121=$119 >>> (($120)>>>0);
      var $122=$118 | $121;
      var $123=(($122) & 255);
      var $124=$s;
      var $125=(($124+1)|0);
      $s=$125;
      HEAP8[($124)]=$123;
      label = 13; break;
    case 19: 
      var $127=$s;
      var $128=$2;
      var $129=$127;
      var $130=$128;
      var $131=((($129)-($130))|0);
      $1=$131;
      label = 50; break;
    case 20: 
      var $133=$5;
      var $134=(($133)|0) >= 35;
      if ($134) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $136=$2;
      var $137=$4;
      var $138=$5;
      var $139=$3;
      var $140=_mpn_sb_get_str($136, 0, $137, $138, $139);
      var $141=$2;
      var $142=$140;
      var $143=$141;
      var $144=((($142)-($143))|0);
      $1=$144;
      label = 50; break;
    case 22: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $146=$5;
      var $147=((($146)+(64))|0);
      var $148=($147<<2);
      var $149=___gmp_tmp_reentrant_alloc($__tmp_marker, $148);
      var $150=$149;
      $powtab_mem=$150;
      var $151=$powtab_mem;
      $powtab_mem_ptr=$151;
      var $152=$3;
      var $153=((5244536+((($152)*(20))&-1))|0);
      var $154=(($153+12)|0);
      var $155=HEAP32[(($154)>>2)];
      HEAP32[(($big_base)>>2)]=$155;
      var $156=$3;
      var $157=((5244536+((($156)*(20))&-1))|0);
      var $158=(($157)|0);
      var $159=HEAP32[(($158)>>2)];
      $digits_in_base=$159;
      $n_pows=0;
      var $160=$5;
      var $161=(($160)|0);
      var $162=$3;
      var $163=((5244536+((($162)*(20))&-1))|0);
      var $164=(($163+4)|0);
      var $165=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($164)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($164)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $166=($165)*(32);
      var $167=($161)*($166);
      var $168=$3;
      var $169=((5244536+((($168)*(20))&-1))|0);
      var $170=(($169)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171)|0);
      var $173=($167)/($172);
      var $174=($173)+(1);
      var $175=(($174)&-1);
      $xn=$175;
      var $176=$xn;
      $pn=$176;
      label = 23; break;
    case 23: 
      var $178=$pn;
      var $179=(($178)|0)!=1;
      if ($179) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $181=$pn;
      var $182=$n_pows;
      var $183=(($exptab+($182<<2))|0);
      HEAP32[(($183)>>2)]=$181;
      var $184=$n_pows;
      var $185=((($184)+(1))|0);
      $n_pows=$185;
      label = 25; break;
    case 25: 
      var $187=$pn;
      var $188=((($187)+(1))|0);
      var $189=$188 >> 1;
      $pn=$189;
      label = 23; break;
    case 26: 
      var $191=$n_pows;
      var $192=(($exptab+($191<<2))|0);
      HEAP32[(($192)>>2)]=1;
      var $193=(($powtab)|0);
      var $194=(($193)|0);
      HEAP32[(($194)>>2)]=$big_base;
      var $195=(($powtab)|0);
      var $196=(($195+4)|0);
      HEAP32[(($196)>>2)]=1;
      var $197=$digits_in_base;
      var $198=(($powtab)|0);
      var $199=(($198+12)|0);
      HEAP32[(($199)>>2)]=$197;
      var $200=$3;
      var $201=(($powtab)|0);
      var $202=(($201+16)|0);
      HEAP32[(($202)>>2)]=$200;
      var $203=(($powtab)|0);
      var $204=(($203+8)|0);
      HEAP32[(($204)>>2)]=0;
      var $205=$powtab_mem_ptr;
      var $206=(($powtab+20)|0);
      var $207=(($206)|0);
      HEAP32[(($207)>>2)]=$205;
      var $208=$powtab_mem_ptr;
      var $209=(($208+8)|0);
      $powtab_mem_ptr=$209;
      var $210=HEAP32[(($big_base)>>2)];
      var $211=(($powtab+20)|0);
      var $212=(($211)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213)|0);
      HEAP32[(($214)>>2)]=$210;
      var $215=(($powtab+20)|0);
      var $216=(($215+4)|0);
      HEAP32[(($216)>>2)]=1;
      var $217=$digits_in_base;
      var $218=(($powtab+20)|0);
      var $219=(($218+12)|0);
      HEAP32[(($219)>>2)]=$217;
      var $220=$3;
      var $221=(($powtab+20)|0);
      var $222=(($221+16)|0);
      HEAP32[(($222)>>2)]=$220;
      var $223=(($powtab+20)|0);
      var $224=(($223+8)|0);
      HEAP32[(($224)>>2)]=0;
      $n=1;
      $p=$big_base;
      $bexp=1;
      $shift=0;
      $pi=2;
      label = 27; break;
    case 27: 
      var $226=$pi;
      var $227=$n_pows;
      var $228=(($226)|0) < (($227)|0);
      if ($228) { label = 28; break; } else { label = 39; break; }
    case 28: 
      var $230=$powtab_mem_ptr;
      $t=$230;
      var $231=$n;
      var $232=($231<<1);
      var $233=((($232)+(2))|0);
      var $234=$powtab_mem_ptr;
      var $235=(($234+($233<<2))|0);
      $powtab_mem_ptr=$235;
      label = 29; break;
    case 29: 
      var $237=$powtab_mem_ptr;
      var $238=$powtab_mem;
      var $239=$5;
      var $240=((($239)+(64))|0);
      var $241=(($238+($240<<2))|0);
      var $242=(($237)>>>0) < (($241)>>>0);
      if ($242) { label = 31; break; } else { label = 30; break; }
    case 30: 
      ___gmp_assert_fail(((5243492)|0), 474, ((5243844)|0));
      throw "Reached an unreachable!"
    case 31: 
      label = 32; break;
    case 32: 
      var $246=$t;
      var $247=$p;
      var $248=$n;
      ___gmpn_sqr($246, $247, $248);
      var $249=$digits_in_base;
      var $250=($249<<1);
      $digits_in_base=$250;
      var $251=$n;
      var $252=($251<<1);
      $n=$252;
      var $253=$n;
      var $254=((($253)-(1))|0);
      var $255=$t;
      var $256=(($255+($254<<2))|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=(($257)|0)==0;
      var $259=(($258)&1);
      var $260=$n;
      var $261=((($260)-($259))|0);
      $n=$261;
      var $262=$bexp;
      var $263=($262<<1);
      $bexp=$263;
      var $264=$bexp;
      var $265=((($264)+(1))|0);
      var $266=$n_pows;
      var $267=$pi;
      var $268=((($266)-($267))|0);
      var $269=(($exptab+($268<<2))|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($265)|0) < (($270)|0);
      if ($271) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $273=$3;
      var $274=((5244536+((($273)*(20))&-1))|0);
      var $275=(($274)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=$digits_in_base;
      var $278=((($277)+($276))|0);
      $digits_in_base=$278;
      var $279=$t;
      var $280=$t;
      var $281=$n;
      var $282=HEAP32[(($big_base)>>2)];
      var $283=___gmpn_mul_1($279, $280, $281, $282);
      $cy=$283;
      var $284=$cy;
      var $285=$n;
      var $286=$t;
      var $287=(($286+($285<<2))|0);
      HEAP32[(($287)>>2)]=$284;
      var $288=$cy;
      var $289=(($288)|0)!=0;
      var $290=(($289)&1);
      var $291=$n;
      var $292=((($291)+($290))|0);
      $n=$292;
      var $293=$bexp;
      var $294=((($293)+(1))|0);
      $bexp=$294;
      label = 34; break;
    case 34: 
      var $296=$shift;
      var $297=($296<<1);
      $shift=$297;
      label = 35; break;
    case 35: 
      var $299=$t;
      var $300=(($299)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=(($301)|0)==0;
      if ($302) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $304=$t;
      var $305=(($304+4)|0);
      $t=$305;
      var $306=$n;
      var $307=((($306)-(1))|0);
      $n=$307;
      var $308=$shift;
      var $309=((($308)+(1))|0);
      $shift=$309;
      label = 35; break;
    case 37: 
      var $311=$t;
      $p=$311;
      var $312=$p;
      var $313=$pi;
      var $314=(($powtab+((($313)*(20))&-1))|0);
      var $315=(($314)|0);
      HEAP32[(($315)>>2)]=$312;
      var $316=$n;
      var $317=$pi;
      var $318=(($powtab+((($317)*(20))&-1))|0);
      var $319=(($318+4)|0);
      HEAP32[(($319)>>2)]=$316;
      var $320=$digits_in_base;
      var $321=$pi;
      var $322=(($powtab+((($321)*(20))&-1))|0);
      var $323=(($322+12)|0);
      HEAP32[(($323)>>2)]=$320;
      var $324=$3;
      var $325=$pi;
      var $326=(($powtab+((($325)*(20))&-1))|0);
      var $327=(($326+16)|0);
      HEAP32[(($327)>>2)]=$324;
      var $328=$shift;
      var $329=$pi;
      var $330=(($powtab+((($329)*(20))&-1))|0);
      var $331=(($330+8)|0);
      HEAP32[(($331)>>2)]=$328;
      label = 38; break;
    case 38: 
      var $333=$pi;
      var $334=((($333)+(1))|0);
      $pi=$334;
      label = 27; break;
    case 39: 
      $pi=1;
      label = 40; break;
    case 40: 
      var $337=$pi;
      var $338=$n_pows;
      var $339=(($337)|0) < (($338)|0);
      if ($339) { label = 41; break; } else { label = 45; break; }
    case 41: 
      var $341=$pi;
      var $342=(($powtab+((($341)*(20))&-1))|0);
      var $343=(($342)|0);
      var $344=HEAP32[(($343)>>2)];
      $t=$344;
      var $345=$pi;
      var $346=(($powtab+((($345)*(20))&-1))|0);
      var $347=(($346+4)|0);
      var $348=HEAP32[(($347)>>2)];
      $n=$348;
      var $349=$t;
      var $350=$t;
      var $351=$n;
      var $352=HEAP32[(($big_base)>>2)];
      var $353=___gmpn_mul_1($349, $350, $351, $352);
      $cy=$353;
      var $354=$cy;
      var $355=$n;
      var $356=$t;
      var $357=(($356+($355<<2))|0);
      HEAP32[(($357)>>2)]=$354;
      var $358=$cy;
      var $359=(($358)|0)!=0;
      var $360=(($359)&1);
      var $361=$n;
      var $362=((($361)+($360))|0);
      $n=$362;
      var $363=$t;
      var $364=(($363)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=(($365)|0)==0;
      if ($366) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $368=$t;
      var $369=(($368+4)|0);
      var $370=$pi;
      var $371=(($powtab+((($370)*(20))&-1))|0);
      var $372=(($371)|0);
      HEAP32[(($372)>>2)]=$369;
      var $373=$n;
      var $374=((($373)-(1))|0);
      $n=$374;
      var $375=$pi;
      var $376=(($powtab+((($375)*(20))&-1))|0);
      var $377=(($376+8)|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=((($378)+(1))|0);
      HEAP32[(($377)>>2)]=$379;
      label = 43; break;
    case 43: 
      var $381=$n;
      var $382=$pi;
      var $383=(($powtab+((($382)*(20))&-1))|0);
      var $384=(($383+4)|0);
      HEAP32[(($384)>>2)]=$381;
      var $385=$3;
      var $386=((5244536+((($385)*(20))&-1))|0);
      var $387=(($386)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=$pi;
      var $390=(($powtab+((($389)*(20))&-1))|0);
      var $391=(($390+12)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=((($392)+($388))|0);
      HEAP32[(($391)>>2)]=$393;
      label = 44; break;
    case 44: 
      var $395=$pi;
      var $396=((($395)+(1))|0);
      $pi=$396;
      label = 40; break;
    case 45: 
      var $398=$5;
      var $399=((($398)+(32))|0);
      var $400=($399<<2);
      var $401=___gmp_tmp_reentrant_alloc($__tmp_marker, $400);
      var $402=$401;
      $tmp=$402;
      var $403=$2;
      var $404=$4;
      var $405=$5;
      var $406=(($powtab)|0);
      var $407=((($406)-(20))|0);
      var $408=$pi;
      var $409=(($407+((($408)*(20))&-1))|0);
      var $410=$tmp;
      var $411=_mpn_dc_get_str($403, 0, $404, $405, $409, $410);
      var $412=$2;
      var $413=$411;
      var $414=$412;
      var $415=((($413)-($414))|0);
      $out_len=$415;
      label = 46; break;
    case 46: 
      var $417=HEAP32[(($__tmp_marker)>>2)];
      var $418=(($417)|0)!=0;
      if ($418) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $420=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($420);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $423=$out_len;
      $1=$423;
      label = 50; break;
    case 50: 
      var $425=$1;
      STACKTOP = __stackBase__;
      return $425;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_get_str["X"]=1;

function _mpn_sb_get_str($str, $len, $up, $un, $base) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 852)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $rl;
      var $ul;
      var $s;
      var $l;
      var $buf=__stackBase__;
      var $rp=(__stackBase__)+(712);
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $i;
      var $frac;
      var $digit;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x01;
      var $__x12;
      var $__x23;
      var $__x34;
      var $__ul5;
      var $__vl6;
      var $__uh7;
      var $__vh8;
      var $__u9;
      var $__v10;
      var $__q;
      var $__r;
      var $chars_per_limb;
      var $big_base;
      var $big_base_inverted;
      var $normalization_steps;
      var $__xr;
      var $__a;
      var $__n11;
      var $__dst12;
      var $__src13;
      var $__x14;
      var $i15;
      var $frac16;
      var $digit17;
      var $__x018;
      var $__x119;
      var $__x220;
      var $__x321;
      var $__ul22;
      var $__vl23;
      var $__uh24;
      var $__vh25;
      var $__u26;
      var $__v27;
      var $__q28;
      var $__r29;
      $1=$str;
      $2=$len;
      $3=$up;
      $4=$un;
      $5=$base;
      var $6=$5;
      var $7=(($6)|0)==10;
      if ($7) { label = 3; break; } else { label = 40; break; }
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $17=$4;
      var $18=(($17)|0)!=0;
      if ($18) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $20=$4;
      var $21=((($20)-(1))|0);
      $__n=$21;
      var $22=(($rp)|0);
      var $23=(($22+4)|0);
      $__dst=$23;
      var $24=$3;
      $__src=$24;
      var $25=$__src;
      var $26=(($25+4)|0);
      $__src=$26;
      var $27=HEAP32[(($25)>>2)];
      $__x=$27;
      var $28=$__n;
      var $29=(($28)|0)!=0;
      if ($29) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $32=$__x;
      var $33=$__dst;
      var $34=(($33+4)|0);
      $__dst=$34;
      HEAP32[(($33)>>2)]=$32;
      var $35=$__src;
      var $36=(($35+4)|0);
      $__src=$36;
      var $37=HEAP32[(($35)>>2)];
      $__x=$37;
      label = 15; break;
    case 15: 
      var $39=$__n;
      var $40=((($39)-(1))|0);
      $__n=$40;
      var $41=(($40)|0)!=0;
      if ($41) { label = 14; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $44=$__x;
      var $45=$__dst;
      var $46=(($45+4)|0);
      $__dst=$46;
      HEAP32[(($45)>>2)]=$44;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $50=(($buf)|0);
      var $51=(($50+712)|0);
      $s=$51;
      label = 21; break;
    case 21: 
      var $53=$4;
      var $54=(($53)|0) > 1;
      if ($54) { label = 22; break; } else { label = 34; break; }
    case 22: 
      var $56=(($rp)|0);
      var $57=(($rp)|0);
      var $58=(($57+4)|0);
      var $59=$4;
      var $60=___gmpn_preinv_divrem_1($56, 1, $58, $59, 1000000000, 316718722, 2);
      var $61=$4;
      var $62=(($rp+($61<<2))|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|0)==0;
      var $65=(($64)&1);
      var $66=$4;
      var $67=((($66)-($65))|0);
      $4=$67;
      var $68=(($rp)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)+(1))|0);
      var $71=$70 << 0;
      $frac=$71;
      var $72=$s;
      var $73=((($72)-(9))|0);
      $s=$73;
      label = 23; break;
    case 23: 
      var $75=$frac;
      $__u=$75;
      $__v=10;
      var $76=$__u;
      var $77=$76 & 65535;
      $__ul=$77;
      var $78=$__u;
      var $79=$78 >>> 16;
      $__uh=$79;
      var $80=$__v;
      var $81=$80 & 65535;
      $__vl=$81;
      var $82=$__v;
      var $83=$82 >>> 16;
      $__vh=$83;
      var $84=$__ul;
      var $85=$__vl;
      var $86=Math.imul($84,$85);
      $__x0=$86;
      var $87=$__ul;
      var $88=$__vh;
      var $89=Math.imul($87,$88);
      $__x1=$89;
      var $90=$__uh;
      var $91=$__vl;
      var $92=Math.imul($90,$91);
      $__x2=$92;
      var $93=$__uh;
      var $94=$__vh;
      var $95=Math.imul($93,$94);
      $__x3=$95;
      var $96=$__x0;
      var $97=$96 >>> 16;
      var $98=$__x1;
      var $99=((($98)+($97))|0);
      $__x1=$99;
      var $100=$__x2;
      var $101=$__x1;
      var $102=((($101)+($100))|0);
      $__x1=$102;
      var $103=$__x1;
      var $104=$__x2;
      var $105=(($103)>>>0) < (($104)>>>0);
      if ($105) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $107=$__x3;
      var $108=((($107)+(65536))|0);
      $__x3=$108;
      label = 25; break;
    case 25: 
      var $110=$__x3;
      var $111=$__x1;
      var $112=$111 >>> 16;
      var $113=((($110)+($112))|0);
      $digit=$113;
      var $114=$__x1;
      var $115=$114 << 16;
      var $116=$__x0;
      var $117=$116 & 65535;
      var $118=((($115)+($117))|0);
      $frac=$118;
      label = 26; break;
    case 26: 
      var $120=$digit;
      var $121=(($120) & 255);
      var $122=$s;
      var $123=(($122+1)|0);
      $s=$123;
      HEAP8[($122)]=$121;
      label = 27; break;
    case 27: 
      var $125=$frac;
      $__u9=$125;
      $__v10=10;
      var $126=$__u9;
      var $127=$126 & 65535;
      $__ul5=$127;
      var $128=$__u9;
      var $129=$128 >>> 16;
      $__uh7=$129;
      var $130=$__v10;
      var $131=$130 & 65535;
      $__vl6=$131;
      var $132=$__v10;
      var $133=$132 >>> 16;
      $__vh8=$133;
      var $134=$__ul5;
      var $135=$__vl6;
      var $136=Math.imul($134,$135);
      $__x01=$136;
      var $137=$__ul5;
      var $138=$__vh8;
      var $139=Math.imul($137,$138);
      $__x12=$139;
      var $140=$__uh7;
      var $141=$__vl6;
      var $142=Math.imul($140,$141);
      $__x23=$142;
      var $143=$__uh7;
      var $144=$__vh8;
      var $145=Math.imul($143,$144);
      $__x34=$145;
      var $146=$__x01;
      var $147=$146 >>> 16;
      var $148=$__x12;
      var $149=((($148)+($147))|0);
      $__x12=$149;
      var $150=$__x23;
      var $151=$__x12;
      var $152=((($151)+($150))|0);
      $__x12=$152;
      var $153=$__x12;
      var $154=$__x23;
      var $155=(($153)>>>0) < (($154)>>>0);
      if ($155) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $157=$__x34;
      var $158=((($157)+(65536))|0);
      $__x34=$158;
      label = 29; break;
    case 29: 
      var $160=$__x34;
      var $161=$__x12;
      var $162=$161 >>> 16;
      var $163=((($160)+($162))|0);
      $digit=$163;
      var $164=$__x12;
      var $165=$164 << 16;
      var $166=$__x01;
      var $167=$166 & 65535;
      var $168=((($165)+($167))|0);
      $frac=$168;
      label = 30; break;
    case 30: 
      var $170=$digit;
      var $171=(($170) & 255);
      var $172=$s;
      var $173=(($172+1)|0);
      $s=$173;
      HEAP8[($172)]=$171;
      $i=7;
      var $174=$frac;
      var $175=((($174)+(15))|0);
      var $176=$175 >>> 4;
      $frac=$176;
      label = 31; break;
    case 31: 
      var $178=$frac;
      var $179=((($178)*(10))&-1);
      $frac=$179;
      var $180=$frac;
      var $181=$180 >>> 28;
      $digit=$181;
      var $182=$digit;
      var $183=(($182) & 255);
      var $184=$s;
      var $185=(($184+1)|0);
      $s=$185;
      HEAP8[($184)]=$183;
      var $186=$frac;
      var $187=$186 & 268435455;
      $frac=$187;
      label = 32; break;
    case 32: 
      var $189=$i;
      var $190=((($189)-(1))|0);
      $i=$190;
      var $191=(($190)|0)!=0;
      if ($191) { label = 31; break; } else { label = 33; break; }
    case 33: 
      var $193=$s;
      var $194=((($193)-(9))|0);
      $s=$194;
      label = 21; break;
    case 34: 
      var $196=(($rp+4)|0);
      var $197=HEAP32[(($196)>>2)];
      $ul=$197;
      label = 35; break;
    case 35: 
      var $199=$ul;
      var $200=(($199)|0)!=0;
      if ($200) { label = 36; break; } else { label = 39; break; }
    case 36: 
      label = 37; break;
    case 37: 
      var $203=$ul;
      var $204=Math.floor(((($203)>>>0))/(10));
      $__q=$204;
      var $205=$ul;
      var $206=$__q;
      var $207=((($206)*(10))&-1);
      var $208=((($205)-($207))|0);
      $__r=$208;
      var $209=$__q;
      $ul=$209;
      var $210=$__r;
      $rl=$210;
      label = 38; break;
    case 38: 
      var $212=$rl;
      var $213=(($212) & 255);
      var $214=$s;
      var $215=((($214)-(1))|0);
      $s=$215;
      HEAP8[($215)]=$213;
      label = 35; break;
    case 39: 
      label = 78; break;
    case 40: 
      var $218=$5;
      var $219=((5244536+((($218)*(20))&-1))|0);
      var $220=(($219)|0);
      var $221=HEAP32[(($220)>>2)];
      $chars_per_limb=$221;
      var $222=$5;
      var $223=((5244536+((($222)*(20))&-1))|0);
      var $224=(($223+12)|0);
      var $225=HEAP32[(($224)>>2)];
      $big_base=$225;
      var $226=$5;
      var $227=((5244536+((($226)*(20))&-1))|0);
      var $228=(($227+16)|0);
      var $229=HEAP32[(($228)>>2)];
      $big_base_inverted=$229;
      label = 41; break;
    case 41: 
      var $231=$big_base;
      $__xr=$231;
      var $232=$__xr;
      var $233=(($232)>>>0) < 65536;
      if ($233) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $235=$__xr;
      var $236=(($235)>>>0) < 256;
      var $237=$236 ? 1 : 9;
      var $243 = $237;label = 44; break;
    case 43: 
      var $239=$__xr;
      var $240=(($239)>>>0) < 16777216;
      var $241=$240 ? 17 : 25;
      var $243 = $241;label = 44; break;
    case 44: 
      var $243;
      $__a=$243;
      var $244=$__a;
      var $245=(((33)-($244))|0);
      var $246=$__xr;
      var $247=$__a;
      var $248=$246 >>> (($247)>>>0);
      var $249=((5244408+$248)|0);
      var $250=HEAP8[($249)];
      var $251=(($250)&255);
      var $252=((($245)-($251))|0);
      $normalization_steps=$252;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $262=$4;
      var $263=(($262)|0)!=0;
      if ($263) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $265=$4;
      var $266=((($265)-(1))|0);
      $__n11=$266;
      var $267=(($rp)|0);
      var $268=(($267+4)|0);
      $__dst12=$268;
      var $269=$3;
      $__src13=$269;
      var $270=$__src13;
      var $271=(($270+4)|0);
      $__src13=$271;
      var $272=HEAP32[(($270)>>2)];
      $__x14=$272;
      var $273=$__n11;
      var $274=(($273)|0)!=0;
      if ($274) { label = 55; break; } else { label = 59; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $277=$__x14;
      var $278=$__dst12;
      var $279=(($278+4)|0);
      $__dst12=$279;
      HEAP32[(($278)>>2)]=$277;
      var $280=$__src13;
      var $281=(($280+4)|0);
      $__src13=$281;
      var $282=HEAP32[(($280)>>2)];
      $__x14=$282;
      label = 57; break;
    case 57: 
      var $284=$__n11;
      var $285=((($284)-(1))|0);
      $__n11=$285;
      var $286=(($285)|0)!=0;
      if ($286) { label = 56; break; } else { label = 58; break; }
    case 58: 
      label = 59; break;
    case 59: 
      var $289=$__x14;
      var $290=$__dst12;
      var $291=(($290+4)|0);
      $__dst12=$291;
      HEAP32[(($290)>>2)]=$289;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $295=(($buf)|0);
      var $296=(($295+712)|0);
      $s=$296;
      label = 63; break;
    case 63: 
      var $298=$4;
      var $299=(($298)|0) > 1;
      if ($299) { label = 64; break; } else { label = 72; break; }
    case 64: 
      var $301=(($rp)|0);
      var $302=(($rp)|0);
      var $303=(($302+4)|0);
      var $304=$4;
      var $305=$big_base;
      var $306=$big_base_inverted;
      var $307=$normalization_steps;
      var $308=___gmpn_preinv_divrem_1($301, 1, $303, $304, $305, $306, $307);
      var $309=$4;
      var $310=(($rp+($309<<2))|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=(($311)|0)==0;
      var $313=(($312)&1);
      var $314=$4;
      var $315=((($314)-($313))|0);
      $4=$315;
      var $316=(($rp)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=((($317)+(1))|0);
      var $319=$318 << 0;
      $frac16=$319;
      var $320=$chars_per_limb;
      var $321=$s;
      var $322=(((-$320))|0);
      var $323=(($321+$322)|0);
      $s=$323;
      var $324=$chars_per_limb;
      $i15=$324;
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $327=$frac16;
      $__u26=$327;
      var $328=$5;
      $__v27=$328;
      var $329=$__u26;
      var $330=$329 & 65535;
      $__ul22=$330;
      var $331=$__u26;
      var $332=$331 >>> 16;
      $__uh24=$332;
      var $333=$__v27;
      var $334=$333 & 65535;
      $__vl23=$334;
      var $335=$__v27;
      var $336=$335 >>> 16;
      $__vh25=$336;
      var $337=$__ul22;
      var $338=$__vl23;
      var $339=Math.imul($337,$338);
      $__x018=$339;
      var $340=$__ul22;
      var $341=$__vh25;
      var $342=Math.imul($340,$341);
      $__x119=$342;
      var $343=$__uh24;
      var $344=$__vl23;
      var $345=Math.imul($343,$344);
      $__x220=$345;
      var $346=$__uh24;
      var $347=$__vh25;
      var $348=Math.imul($346,$347);
      $__x321=$348;
      var $349=$__x018;
      var $350=$349 >>> 16;
      var $351=$__x119;
      var $352=((($351)+($350))|0);
      $__x119=$352;
      var $353=$__x220;
      var $354=$__x119;
      var $355=((($354)+($353))|0);
      $__x119=$355;
      var $356=$__x119;
      var $357=$__x220;
      var $358=(($356)>>>0) < (($357)>>>0);
      if ($358) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $360=$__x321;
      var $361=((($360)+(65536))|0);
      $__x321=$361;
      label = 68; break;
    case 68: 
      var $363=$__x321;
      var $364=$__x119;
      var $365=$364 >>> 16;
      var $366=((($363)+($365))|0);
      $digit17=$366;
      var $367=$__x119;
      var $368=$367 << 16;
      var $369=$__x018;
      var $370=$369 & 65535;
      var $371=((($368)+($370))|0);
      $frac16=$371;
      label = 69; break;
    case 69: 
      var $373=$digit17;
      var $374=(($373) & 255);
      var $375=$s;
      var $376=(($375+1)|0);
      $s=$376;
      HEAP8[($375)]=$374;
      label = 70; break;
    case 70: 
      var $378=$i15;
      var $379=((($378)-(1))|0);
      $i15=$379;
      var $380=(($379)|0)!=0;
      if ($380) { label = 65; break; } else { label = 71; break; }
    case 71: 
      var $382=$chars_per_limb;
      var $383=$s;
      var $384=(((-$382))|0);
      var $385=(($383+$384)|0);
      $s=$385;
      label = 63; break;
    case 72: 
      var $387=(($rp+4)|0);
      var $388=HEAP32[(($387)>>2)];
      $ul=$388;
      label = 73; break;
    case 73: 
      var $390=$ul;
      var $391=(($390)|0)!=0;
      if ($391) { label = 74; break; } else { label = 77; break; }
    case 74: 
      label = 75; break;
    case 75: 
      var $394=$ul;
      var $395=$5;
      var $396=Math.floor(((($394)>>>0))/((($395)>>>0)));
      $__q28=$396;
      var $397=$ul;
      var $398=$__q28;
      var $399=$5;
      var $400=Math.imul($398,$399);
      var $401=((($397)-($400))|0);
      $__r29=$401;
      var $402=$__q28;
      $ul=$402;
      var $403=$__r29;
      $rl=$403;
      label = 76; break;
    case 76: 
      var $405=$rl;
      var $406=(($405) & 255);
      var $407=$s;
      var $408=((($407)-(1))|0);
      $s=$408;
      HEAP8[($408)]=$406;
      label = 73; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $411=(($buf)|0);
      var $412=(($411+712)|0);
      var $413=$s;
      var $414=$412;
      var $415=$413;
      var $416=((($414)-($415))|0);
      $l=$416;
      label = 79; break;
    case 79: 
      var $418=$l;
      var $419=$2;
      var $420=(($418)>>>0) < (($419)>>>0);
      if ($420) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $422=$1;
      var $423=(($422+1)|0);
      $1=$423;
      HEAP8[($422)]=0;
      var $424=$2;
      var $425=((($424)-(1))|0);
      $2=$425;
      label = 79; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $428=$l;
      var $429=(($428)|0)!=0;
      if ($429) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $431=$s;
      var $432=(($431+1)|0);
      $s=$432;
      var $433=HEAP8[($431)];
      var $434=$1;
      var $435=(($434+1)|0);
      $1=$435;
      HEAP8[($434)]=$433;
      var $436=$l;
      var $437=((($436)-(1))|0);
      $l=$437;
      label = 82; break;
    case 84: 
      var $439=$1;
      STACKTOP = __stackBase__;
      return $439;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_sb_get_str["X"]=1;

function _mpn_dc_get_str($str, $len, $up, $un, $powtab, $tmp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $pwp;
      var $qp;
      var $rp;
      var $pwn;
      var $qn;
      var $sn;
      $1=$str;
      $2=$len;
      $3=$up;
      $4=$un;
      $5=$powtab;
      $6=$tmp;
      var $7=$4;
      var $8=(($7)|0) >= 18;
      if ($8) { label = 10; break; } else { label = 3; break; }
    case 3: 
      var $10=$4;
      var $11=(($10)|0)!=0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=$1;
      var $14=$2;
      var $15=$3;
      var $16=$4;
      var $17=$5;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_mpn_sb_get_str($13, $14, $15, $16, $19);
      $1=$20;
      label = 9; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $23=$2;
      var $24=(($23)|0)!=0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$1;
      var $27=(($26+1)|0);
      $1=$27;
      HEAP8[($26)]=0;
      var $28=$2;
      var $29=((($28)-(1))|0);
      $2=$29;
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 20; break;
    case 10: 
      var $33=$5;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      $pwp=$35;
      var $36=$5;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      $pwn=$38;
      var $39=$5;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      $sn=$41;
      var $42=$4;
      var $43=$pwn;
      var $44=$sn;
      var $45=((($43)+($44))|0);
      var $46=(($42)|0) < (($45)|0);
      if ($46) { label = 13; break; } else { label = 11; break; }
    case 11: 
      var $48=$4;
      var $49=$pwn;
      var $50=$sn;
      var $51=((($49)+($50))|0);
      var $52=(($48)|0)==(($51)|0);
      if ($52) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $54=$3;
      var $55=$sn;
      var $56=(($54+($55<<2))|0);
      var $57=$pwp;
      var $58=$4;
      var $59=$sn;
      var $60=((($58)-($59))|0);
      var $61=___gmpn_cmp($56, $57, $60);
      var $62=(($61)|0) < 0;
      if ($62) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $64=$1;
      var $65=$2;
      var $66=$3;
      var $67=$4;
      var $68=$5;
      var $69=((($68)-(20))|0);
      var $70=$6;
      var $71=_mpn_dc_get_str($64, $65, $66, $67, $69, $70);
      $1=$71;
      label = 19; break;
    case 14: 
      var $73=$6;
      $qp=$73;
      var $74=$3;
      $rp=$74;
      var $75=$qp;
      var $76=$rp;
      var $77=$sn;
      var $78=(($76+($77<<2))|0);
      var $79=$3;
      var $80=$sn;
      var $81=(($79+($80<<2))|0);
      var $82=$4;
      var $83=$sn;
      var $84=((($82)-($83))|0);
      var $85=$pwp;
      var $86=$pwn;
      ___gmpn_tdiv_qr($75, $78, 0, $81, $84, $85, $86);
      var $87=$4;
      var $88=$sn;
      var $89=((($87)-($88))|0);
      var $90=$pwn;
      var $91=((($89)-($90))|0);
      $qn=$91;
      var $92=$qn;
      var $93=$qp;
      var $94=(($93+($92<<2))|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95)|0)!=0;
      var $97=(($96)&1);
      var $98=$qn;
      var $99=((($98)+($97))|0);
      $qn=$99;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $102=$2;
      var $103=(($102)|0)!=0;
      if ($103) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $105=$2;
      var $106=$5;
      var $107=(($106+12)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($105)-($108))|0);
      $2=$109;
      label = 18; break;
    case 18: 
      var $111=$1;
      var $112=$2;
      var $113=$qp;
      var $114=$qn;
      var $115=$5;
      var $116=((($115)-(20))|0);
      var $117=$6;
      var $118=$qn;
      var $119=(($117+($118<<2))|0);
      var $120=_mpn_dc_get_str($111, $112, $113, $114, $116, $119);
      $1=$120;
      var $121=$1;
      var $122=$5;
      var $123=(($122+12)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$rp;
      var $126=$pwn;
      var $127=$sn;
      var $128=((($126)+($127))|0);
      var $129=$5;
      var $130=((($129)-(20))|0);
      var $131=$6;
      var $132=_mpn_dc_get_str($121, $124, $125, $128, $130, $131);
      $1=$132;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $135=$1;

      return $135;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_dc_get_str["X"]=1;

function ___gmpn_tdiv_qr($qp, $rp, $qxn, $np, $nn, $dp, $dn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $n2p;
      var $d2p;
      var $qhl;
      var $cy;
      var $__tmp_marker=__stackBase__;
      var $cnt;
      var $dtmp=(__stackBase__)+(4);
      var $__xr;
      var $__a;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $adjust;
      var $dinv=(__stackBase__)+(12);
      var $__tmp_marker1=(__stackBase__)+(16);
      var $n2p2;
      var $d2p3;
      var $cy4;
      var $cnt5;
      var $__xr6;
      var $__a7;
      var $__n8;
      var $__dst9;
      var $__src10;
      var $__x11;
      var $v;
      var $p;
      var $t1;
      var $t0;
      var $mask;
      var $dummy;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $itch;
      var $scratch;
      var $__n12;
      var $__dst13;
      var $__src14;
      var $__x15;
      var $qn;
      var $n2p16;
      var $d2p17;
      var $tp;
      var $cy18;
      var $in;
      var $rn;
      var $quotient_too_large;
      var $cnt19;
      var $__n20;
      var $__dst21;
      var $__src22;
      var $__x23;
      var $__xr24;
      var $__a25;
      var $__n26;
      var $__dst27;
      var $__src28;
      var $__x29;
      var $q0;
      var $r0;
      var $__d130;
      var $__d031;
      var $__q132;
      var $__q033;
      var $__r134;
      var $__r035;
      var $__m36;
      var $v37;
      var $p38;
      var $t139;
      var $t040;
      var $mask41;
      var $dummy42;
      var $__d143;
      var $__d044;
      var $__q145;
      var $__q046;
      var $__r147;
      var $__r048;
      var $__m49;
      var $__x050;
      var $__x151;
      var $__x252;
      var $__x353;
      var $__ul54;
      var $__vl55;
      var $__uh56;
      var $__vh57;
      var $__u58;
      var $__v59;
      var $itch60;
      var $scratch61;
      var $r2p;
      var $__n62;
      var $__dst63;
      var $__src64;
      var $__x65;
      var $dl;
      var $x;
      var $h;
      var $dummy66;
      var $__x067;
      var $__x168;
      var $__x269;
      var $__x370;
      var $__ul71;
      var $__vl72;
      var $__uh73;
      var $__vh74;
      var $__u75;
      var $__v76;
      var $cy77;
      var $__x78;
      var $__p;
      var $cy1;
      var $cy2;
      var $__n79;
      var $__dst80;
      var $__src81;
      var $__x82;
      var $__n83;
      var $__dst84;
      var $__src85;
      var $__x86;
      var $__x87;
      var $__p88;
      $1=$qp;
      $2=$rp;
      $3=$qxn;
      $4=$np;
      $5=$nn;
      $6=$dp;
      $7=$dn;
      label = 3; break;
    case 3: 
      var $9=$3;
      var $10=(($9)|0)==0;
      if ($10) { label = 5; break; } else { label = 4; break; }
    case 4: 
      ___gmp_assert_fail(((5243480)|0), 40, ((5243832)|0));
      throw "Reached an unreachable!"
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $24=$7;
      if ((($24)|0)==0) {
        label = 17; break;
      }
      else if ((($24)|0)==1) {
        label = 18; break;
      }
      else if ((($24)|0)==2) {
        label = 19; break;
      }
      else {
      label = 57; break;
      }
      
    case 17: 
      ___gmp_divide_by_zero();
      throw "Reached an unreachable!"
    case 18: 
      var $27=$1;
      var $28=$4;
      var $29=$5;
      var $30=$6;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=___gmpn_divrem_1($27, 0, $28, $29, $32);
      var $34=$2;
      var $35=(($34)|0);
      HEAP32[(($35)>>2)]=$33;
      label = 400; break;
    case 19: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $37=$6;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 & -2147483648;
      var $41=(($40)|0)==0;
      if ($41) { label = 20; break; } else { label = 31; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $44=$6;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      $__xr=$46;
      var $47=$__xr;
      var $48=(($47)>>>0) < 65536;
      if ($48) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $50=$__xr;
      var $51=(($50)>>>0) < 256;
      var $52=$51 ? 1 : 9;
      var $58 = $52;label = 24; break;
    case 23: 
      var $54=$__xr;
      var $55=(($54)>>>0) < 16777216;
      var $56=$55 ? 17 : 25;
      var $58 = $56;label = 24; break;
    case 24: 
      var $58;
      $__a=$58;
      var $59=$__a;
      var $60=(((33)-($59))|0);
      var $61=$__xr;
      var $62=$__a;
      var $63=$61 >>> (($62)>>>0);
      var $64=((5244408+$63)|0);
      var $65=HEAP8[($64)];
      var $66=(($65)&255);
      var $67=((($60)-($66))|0);
      $cnt=$67;
      label = 25; break;
    case 25: 
      var $69=$cnt;
      var $70=(($69)|0);
      $cnt=$70;
      var $71=(($dtmp)|0);
      $d2p=$71;
      var $72=$6;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$cnt;
      var $76=$74 << $75;
      var $77=$6;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$cnt;
      var $81=(((32)-($80))|0);
      var $82=$79 >>> (($81)>>>0);
      var $83=$76 | $82;
      var $84=$d2p;
      var $85=(($84+4)|0);
      HEAP32[(($85)>>2)]=$83;
      var $86=$6;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$cnt;
      var $90=$88 << $89;
      var $91=$d2p;
      var $92=(($91)|0);
      HEAP32[(($92)>>2)]=$90;
      var $93=$5;
      var $94=((($93)+(1))|0);
      var $95=($94<<2);
      var $96=(($95)>>>0) < 65536;
      if ($96) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $98=$5;
      var $99=((($98)+(1))|0);
      var $100=($99<<2);
      var $101=STACKTOP;STACKTOP = (STACKTOP + $100)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $108 = $101;label = 28; break;
    case 27: 
      var $103=$5;
      var $104=((($103)+(1))|0);
      var $105=($104<<2);
      var $106=___gmp_tmp_reentrant_alloc($__tmp_marker, $105);
      var $108 = $106;label = 28; break;
    case 28: 
      var $108;
      var $109=$108;
      $n2p=$109;
      var $110=$n2p;
      var $111=$4;
      var $112=$5;
      var $113=$cnt;
      var $114=___gmpn_lshift($110, $111, $112, $113);
      $cy=$114;
      var $115=$cy;
      var $116=$5;
      var $117=$n2p;
      var $118=(($117+($116<<2))|0);
      HEAP32[(($118)>>2)]=$115;
      var $119=$1;
      var $120=$n2p;
      var $121=$5;
      var $122=$cy;
      var $123=(($122)|0)!=0;
      var $124=(($123)&1);
      var $125=((($121)+($124))|0);
      var $126=$d2p;
      var $127=___gmpn_divrem_2($119, 0, $120, $125, $126);
      $qhl=$127;
      var $128=$cy;
      var $129=(($128)|0)==0;
      if ($129) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $131=$qhl;
      var $132=$5;
      var $133=((($132)-(2))|0);
      var $134=$1;
      var $135=(($134+($133<<2))|0);
      HEAP32[(($135)>>2)]=$131;
      label = 30; break;
    case 30: 
      var $137=$n2p;
      var $138=(($137)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=$cnt;
      var $141=$139 >>> (($140)>>>0);
      var $142=$n2p;
      var $143=(($142+4)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$cnt;
      var $146=(((32)-($145))|0);
      var $147=$144 << $146;
      var $148=$141 | $147;
      var $149=$2;
      var $150=(($149)|0);
      HEAP32[(($150)>>2)]=$148;
      var $151=$n2p;
      var $152=(($151+4)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$cnt;
      var $155=$153 >>> (($154)>>>0);
      var $156=$2;
      var $157=(($156+4)|0);
      HEAP32[(($157)>>2)]=$155;
      label = 52; break;
    case 31: 
      var $159=$6;
      $d2p=$159;
      var $160=$5;
      var $161=($160<<2);
      var $162=(($161)>>>0) < 65536;
      if ($162) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $164=$5;
      var $165=($164<<2);
      var $166=STACKTOP;STACKTOP = (STACKTOP + $165)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $172 = $166;label = 34; break;
    case 33: 
      var $168=$5;
      var $169=($168<<2);
      var $170=___gmp_tmp_reentrant_alloc($__tmp_marker, $169);
      var $172 = $170;label = 34; break;
    case 34: 
      var $172;
      var $173=$172;
      $n2p=$173;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $182=$5;
      var $183=(($182)|0)!=0;
      if ($183) { label = 43; break; } else { label = 49; break; }
    case 43: 
      var $185=$5;
      var $186=((($185)-(1))|0);
      $__n=$186;
      var $187=$n2p;
      $__dst=$187;
      var $188=$4;
      $__src=$188;
      var $189=$__src;
      var $190=(($189+4)|0);
      $__src=$190;
      var $191=HEAP32[(($189)>>2)];
      $__x=$191;
      var $192=$__n;
      var $193=(($192)|0)!=0;
      if ($193) { label = 44; break; } else { label = 48; break; }
    case 44: 
      label = 45; break;
    case 45: 
      var $196=$__x;
      var $197=$__dst;
      var $198=(($197+4)|0);
      $__dst=$198;
      HEAP32[(($197)>>2)]=$196;
      var $199=$__src;
      var $200=(($199+4)|0);
      $__src=$200;
      var $201=HEAP32[(($199)>>2)];
      $__x=$201;
      label = 46; break;
    case 46: 
      var $203=$__n;
      var $204=((($203)-(1))|0);
      $__n=$204;
      var $205=(($204)|0)!=0;
      if ($205) { label = 45; break; } else { label = 47; break; }
    case 47: 
      label = 48; break;
    case 48: 
      var $208=$__x;
      var $209=$__dst;
      var $210=(($209+4)|0);
      $__dst=$210;
      HEAP32[(($209)>>2)]=$208;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $214=$1;
      var $215=$n2p;
      var $216=$5;
      var $217=$d2p;
      var $218=___gmpn_divrem_2($214, 0, $215, $216, $217);
      $qhl=$218;
      var $219=$qhl;
      var $220=$5;
      var $221=((($220)-(2))|0);
      var $222=$1;
      var $223=(($222+($221<<2))|0);
      HEAP32[(($223)>>2)]=$219;
      var $224=$n2p;
      var $225=(($224)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=$2;
      var $228=(($227)|0);
      HEAP32[(($228)>>2)]=$226;
      var $229=$n2p;
      var $230=(($229+4)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=$2;
      var $233=(($232+4)|0);
      HEAP32[(($233)>>2)]=$231;
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $236=HEAP32[(($__tmp_marker)>>2)];
      var $237=(($236)|0)!=0;
      if ($237) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $239=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($239);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 400; break;
    case 57: 
      HEAP32[(($__tmp_marker1)>>2)]=0;
      var $243=$5;
      var $244=((($243)-(1))|0);
      var $245=$4;
      var $246=(($245+($244<<2))|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=$7;
      var $249=((($248)-(1))|0);
      var $250=$6;
      var $251=(($250+($249<<2))|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=(($247)>>>0) >= (($252)>>>0);
      var $254=(($253)&1);
      $adjust=$254;
      var $255=$5;
      var $256=$adjust;
      var $257=((($255)+($256))|0);
      var $258=$7;
      var $259=($258<<1);
      var $260=(($257)|0) >= (($259)|0);
      if ($260) { label = 58; break; } else { label = 165; break; }
    case 58: 
      var $262=$5;
      var $263=$7;
      var $264=((($262)-($263))|0);
      var $265=$1;
      var $266=(($265+($264<<2))|0);
      HEAP32[(($266)>>2)]=0;
      var $267=$7;
      var $268=((($267)-(1))|0);
      var $269=$6;
      var $270=(($269+($268<<2))|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=$271 & -2147483648;
      var $273=(($272)|0)==0;
      if ($273) { label = 59; break; } else { label = 71; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $276=$7;
      var $277=((($276)-(1))|0);
      var $278=$6;
      var $279=(($278+($277<<2))|0);
      var $280=HEAP32[(($279)>>2)];
      $__xr6=$280;
      var $281=$__xr6;
      var $282=(($281)>>>0) < 65536;
      if ($282) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $284=$__xr6;
      var $285=(($284)>>>0) < 256;
      var $286=$285 ? 1 : 9;
      var $292 = $286;label = 63; break;
    case 62: 
      var $288=$__xr6;
      var $289=(($288)>>>0) < 16777216;
      var $290=$289 ? 17 : 25;
      var $292 = $290;label = 63; break;
    case 63: 
      var $292;
      $__a7=$292;
      var $293=$__a7;
      var $294=(((33)-($293))|0);
      var $295=$__xr6;
      var $296=$__a7;
      var $297=$295 >>> (($296)>>>0);
      var $298=((5244408+$297)|0);
      var $299=HEAP8[($298)];
      var $300=(($299)&255);
      var $301=((($294)-($300))|0);
      $cnt5=$301;
      label = 64; break;
    case 64: 
      var $303=$cnt5;
      var $304=(($303)|0);
      $cnt5=$304;
      var $305=$7;
      var $306=($305<<2);
      var $307=(($306)>>>0) < 65536;
      if ($307) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $309=$7;
      var $310=($309<<2);
      var $311=STACKTOP;STACKTOP = (STACKTOP + $310)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $317 = $311;label = 67; break;
    case 66: 
      var $313=$7;
      var $314=($313<<2);
      var $315=___gmp_tmp_reentrant_alloc($__tmp_marker1, $314);
      var $317 = $315;label = 67; break;
    case 67: 
      var $317;
      var $318=$317;
      $d2p3=$318;
      var $319=$d2p3;
      var $320=$6;
      var $321=$7;
      var $322=$cnt5;
      var $323=___gmpn_lshift($319, $320, $321, $322);
      var $324=$5;
      var $325=((($324)+(1))|0);
      var $326=($325<<2);
      var $327=(($326)>>>0) < 65536;
      if ($327) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $329=$5;
      var $330=((($329)+(1))|0);
      var $331=($330<<2);
      var $332=STACKTOP;STACKTOP = (STACKTOP + $331)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $339 = $332;label = 70; break;
    case 69: 
      var $334=$5;
      var $335=((($334)+(1))|0);
      var $336=($335<<2);
      var $337=___gmp_tmp_reentrant_alloc($__tmp_marker1, $336);
      var $339 = $337;label = 70; break;
    case 70: 
      var $339;
      var $340=$339;
      $n2p2=$340;
      var $341=$n2p2;
      var $342=$4;
      var $343=$5;
      var $344=$cnt5;
      var $345=___gmpn_lshift($341, $342, $343, $344);
      $cy4=$345;
      var $346=$cy4;
      var $347=$5;
      var $348=$n2p2;
      var $349=(($348+($347<<2))|0);
      HEAP32[(($349)>>2)]=$346;
      var $350=$adjust;
      var $351=$5;
      var $352=((($351)+($350))|0);
      $5=$352;
      label = 92; break;
    case 71: 
      $cnt5=0;
      var $354=$6;
      $d2p3=$354;
      var $355=$5;
      var $356=((($355)+(1))|0);
      var $357=($356<<2);
      var $358=(($357)>>>0) < 65536;
      if ($358) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $360=$5;
      var $361=((($360)+(1))|0);
      var $362=($361<<2);
      var $363=STACKTOP;STACKTOP = (STACKTOP + $362)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $370 = $363;label = 74; break;
    case 73: 
      var $365=$5;
      var $366=((($365)+(1))|0);
      var $367=($366<<2);
      var $368=___gmp_tmp_reentrant_alloc($__tmp_marker1, $367);
      var $370 = $368;label = 74; break;
    case 74: 
      var $370;
      var $371=$370;
      $n2p2=$371;
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $380=$5;
      var $381=(($380)|0)!=0;
      if ($381) { label = 83; break; } else { label = 89; break; }
    case 83: 
      var $383=$5;
      var $384=((($383)-(1))|0);
      $__n8=$384;
      var $385=$n2p2;
      $__dst9=$385;
      var $386=$4;
      $__src10=$386;
      var $387=$__src10;
      var $388=(($387+4)|0);
      $__src10=$388;
      var $389=HEAP32[(($387)>>2)];
      $__x11=$389;
      var $390=$__n8;
      var $391=(($390)|0)!=0;
      if ($391) { label = 84; break; } else { label = 88; break; }
    case 84: 
      label = 85; break;
    case 85: 
      var $394=$__x11;
      var $395=$__dst9;
      var $396=(($395+4)|0);
      $__dst9=$396;
      HEAP32[(($395)>>2)]=$394;
      var $397=$__src10;
      var $398=(($397+4)|0);
      $__src10=$398;
      var $399=HEAP32[(($397)>>2)];
      $__x11=$399;
      label = 86; break;
    case 86: 
      var $401=$__n8;
      var $402=((($401)-(1))|0);
      $__n8=$402;
      var $403=(($402)|0)!=0;
      if ($403) { label = 85; break; } else { label = 87; break; }
    case 87: 
      label = 88; break;
    case 88: 
      var $406=$__x11;
      var $407=$__dst9;
      var $408=(($407+4)|0);
      $__dst9=$408;
      HEAP32[(($407)>>2)]=$406;
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $412=$5;
      var $413=$n2p2;
      var $414=(($413+($412<<2))|0);
      HEAP32[(($414)>>2)]=0;
      var $415=$adjust;
      var $416=$5;
      var $417=((($416)+($415))|0);
      $5=$417;
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $428=$7;
      var $429=((($428)-(1))|0);
      var $430=$d2p3;
      var $431=(($430+($429<<2))|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=$432 >>> 16;
      $__d1=$433;
      var $434=$7;
      var $435=((($434)-(1))|0);
      var $436=$d2p3;
      var $437=(($436+($435<<2))|0);
      var $438=HEAP32[(($437)>>2)];
      var $439=$438 & 65535;
      $__d0=$439;
      var $440=$7;
      var $441=((($440)-(1))|0);
      var $442=$d2p3;
      var $443=(($442+($441<<2))|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=$444 ^ -1;
      var $446=$__d1;
      var $447=Math.floor(((($445)>>>0))/((($446)>>>0)));
      $__q1=$447;
      var $448=$7;
      var $449=((($448)-(1))|0);
      var $450=$d2p3;
      var $451=(($450+($449<<2))|0);
      var $452=HEAP32[(($451)>>2)];
      var $453=$452 ^ -1;
      var $454=$__q1;
      var $455=$__d1;
      var $456=Math.imul($454,$455);
      var $457=((($453)-($456))|0);
      $__r1=$457;
      var $458=$__q1;
      var $459=$__d0;
      var $460=Math.imul($458,$459);
      $__m=$460;
      var $461=$__r1;
      var $462=($461<<16);
      var $463=$462 | 65535;
      $__r1=$463;
      var $464=$__r1;
      var $465=$__m;
      var $466=(($464)>>>0) < (($465)>>>0);
      if ($466) { label = 102; break; } else { label = 107; break; }
    case 102: 
      var $468=$__q1;
      var $469=((($468)-(1))|0);
      $__q1=$469;
      var $470=$7;
      var $471=((($470)-(1))|0);
      var $472=$d2p3;
      var $473=(($472+($471<<2))|0);
      var $474=HEAP32[(($473)>>2)];
      var $475=$__r1;
      var $476=((($475)+($474))|0);
      $__r1=$476;
      var $477=$__r1;
      var $478=$7;
      var $479=((($478)-(1))|0);
      var $480=$d2p3;
      var $481=(($480+($479<<2))|0);
      var $482=HEAP32[(($481)>>2)];
      var $483=(($477)>>>0) >= (($482)>>>0);
      if ($483) { label = 103; break; } else { label = 106; break; }
    case 103: 
      var $485=$__r1;
      var $486=$__m;
      var $487=(($485)>>>0) < (($486)>>>0);
      if ($487) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $489=$__q1;
      var $490=((($489)-(1))|0);
      $__q1=$490;
      var $491=$7;
      var $492=((($491)-(1))|0);
      var $493=$d2p3;
      var $494=(($493+($492<<2))|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=$__r1;
      var $497=((($496)+($495))|0);
      $__r1=$497;
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $501=$__m;
      var $502=$__r1;
      var $503=((($502)-($501))|0);
      $__r1=$503;
      var $504=$__r1;
      var $505=$__d1;
      var $506=Math.floor(((($504)>>>0))/((($505)>>>0)));
      $__q0=$506;
      var $507=$__r1;
      var $508=$__q0;
      var $509=$__d1;
      var $510=Math.imul($508,$509);
      var $511=((($507)-($510))|0);
      $__r0=$511;
      var $512=$__q0;
      var $513=$__d0;
      var $514=Math.imul($512,$513);
      $__m=$514;
      var $515=$__r0;
      var $516=($515<<16);
      var $517=$516 | 65535;
      $__r0=$517;
      var $518=$__r0;
      var $519=$__m;
      var $520=(($518)>>>0) < (($519)>>>0);
      if ($520) { label = 108; break; } else { label = 113; break; }
    case 108: 
      var $522=$__q0;
      var $523=((($522)-(1))|0);
      $__q0=$523;
      var $524=$7;
      var $525=((($524)-(1))|0);
      var $526=$d2p3;
      var $527=(($526+($525<<2))|0);
      var $528=HEAP32[(($527)>>2)];
      var $529=$__r0;
      var $530=((($529)+($528))|0);
      $__r0=$530;
      var $531=$__r0;
      var $532=$7;
      var $533=((($532)-(1))|0);
      var $534=$d2p3;
      var $535=(($534+($533<<2))|0);
      var $536=HEAP32[(($535)>>2)];
      var $537=(($531)>>>0) >= (($536)>>>0);
      if ($537) { label = 109; break; } else { label = 112; break; }
    case 109: 
      var $539=$__r0;
      var $540=$__m;
      var $541=(($539)>>>0) < (($540)>>>0);
      if ($541) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $543=$__q0;
      var $544=((($543)-(1))|0);
      $__q0=$544;
      var $545=$7;
      var $546=((($545)-(1))|0);
      var $547=$d2p3;
      var $548=(($547+($546<<2))|0);
      var $549=HEAP32[(($548)>>2)];
      var $550=$__r0;
      var $551=((($550)+($549))|0);
      $__r0=$551;
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      var $555=$__m;
      var $556=$__r0;
      var $557=((($556)-($555))|0);
      $__r0=$557;
      var $558=$__q1;
      var $559=($558<<16);
      var $560=$__q0;
      var $561=$559 | $560;
      $v=$561;
      var $562=$__r0;
      $dummy=$562;
      label = 114; break;
    case 114: 
      label = 115; break;
    case 115: 
      var $565=$7;
      var $566=((($565)-(1))|0);
      var $567=$d2p3;
      var $568=(($567+($566<<2))|0);
      var $569=HEAP32[(($568)>>2)];
      var $570=$v;
      var $571=Math.imul($569,$570);
      $p=$571;
      var $572=$7;
      var $573=((($572)-(2))|0);
      var $574=$d2p3;
      var $575=(($574+($573<<2))|0);
      var $576=HEAP32[(($575)>>2)];
      var $577=$p;
      var $578=((($577)+($576))|0);
      $p=$578;
      var $579=$p;
      var $580=$7;
      var $581=((($580)-(2))|0);
      var $582=$d2p3;
      var $583=(($582+($581<<2))|0);
      var $584=HEAP32[(($583)>>2)];
      var $585=(($579)>>>0) < (($584)>>>0);
      if ($585) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $587=$v;
      var $588=((($587)-(1))|0);
      $v=$588;
      var $589=$p;
      var $590=$7;
      var $591=((($590)-(1))|0);
      var $592=$d2p3;
      var $593=(($592+($591<<2))|0);
      var $594=HEAP32[(($593)>>2)];
      var $595=(($589)>>>0) >= (($594)>>>0);
      var $596=(($595)&1);
      var $597=(((-$596))|0);
      $mask=$597;
      var $598=$7;
      var $599=((($598)-(1))|0);
      var $600=$d2p3;
      var $601=(($600+($599<<2))|0);
      var $602=HEAP32[(($601)>>2)];
      var $603=$p;
      var $604=((($603)-($602))|0);
      $p=$604;
      var $605=$mask;
      var $606=$v;
      var $607=((($606)+($605))|0);
      $v=$607;
      var $608=$mask;
      var $609=$7;
      var $610=((($609)-(1))|0);
      var $611=$d2p3;
      var $612=(($611+($610<<2))|0);
      var $613=HEAP32[(($612)>>2)];
      var $614=$608 & $613;
      var $615=$p;
      var $616=((($615)-($614))|0);
      $p=$616;
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      var $619=$7;
      var $620=((($619)-(2))|0);
      var $621=$d2p3;
      var $622=(($621+($620<<2))|0);
      var $623=HEAP32[(($622)>>2)];
      $__u=$623;
      var $624=$v;
      $__v=$624;
      var $625=$__u;
      var $626=$625 & 65535;
      $__ul=$626;
      var $627=$__u;
      var $628=$627 >>> 16;
      $__uh=$628;
      var $629=$__v;
      var $630=$629 & 65535;
      $__vl=$630;
      var $631=$__v;
      var $632=$631 >>> 16;
      $__vh=$632;
      var $633=$__ul;
      var $634=$__vl;
      var $635=Math.imul($633,$634);
      $__x0=$635;
      var $636=$__ul;
      var $637=$__vh;
      var $638=Math.imul($636,$637);
      $__x1=$638;
      var $639=$__uh;
      var $640=$__vl;
      var $641=Math.imul($639,$640);
      $__x2=$641;
      var $642=$__uh;
      var $643=$__vh;
      var $644=Math.imul($642,$643);
      $__x3=$644;
      var $645=$__x0;
      var $646=$645 >>> 16;
      var $647=$__x1;
      var $648=((($647)+($646))|0);
      $__x1=$648;
      var $649=$__x2;
      var $650=$__x1;
      var $651=((($650)+($649))|0);
      $__x1=$651;
      var $652=$__x1;
      var $653=$__x2;
      var $654=(($652)>>>0) < (($653)>>>0);
      if ($654) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $656=$__x3;
      var $657=((($656)+(65536))|0);
      $__x3=$657;
      label = 120; break;
    case 120: 
      var $659=$__x3;
      var $660=$__x1;
      var $661=$660 >>> 16;
      var $662=((($659)+($661))|0);
      $t1=$662;
      var $663=$__x1;
      var $664=$663 << 16;
      var $665=$__x0;
      var $666=$665 & 65535;
      var $667=((($664)+($666))|0);
      $t0=$667;
      label = 121; break;
    case 121: 
      var $669=$t1;
      var $670=$p;
      var $671=((($670)+($669))|0);
      $p=$671;
      var $672=$p;
      var $673=$t1;
      var $674=(($672)>>>0) < (($673)>>>0);
      if ($674) { label = 122; break; } else { label = 128; break; }
    case 122: 
      var $676=$v;
      var $677=((($676)-(1))|0);
      $v=$677;
      var $678=$p;
      var $679=$7;
      var $680=((($679)-(1))|0);
      var $681=$d2p3;
      var $682=(($681+($680<<2))|0);
      var $683=HEAP32[(($682)>>2)];
      var $684=(($678)>>>0) >= (($683)>>>0);
      if ($684) { label = 123; break; } else { label = 127; break; }
    case 123: 
      var $686=$p;
      var $687=$7;
      var $688=((($687)-(1))|0);
      var $689=$d2p3;
      var $690=(($689+($688<<2))|0);
      var $691=HEAP32[(($690)>>2)];
      var $692=(($686)>>>0) > (($691)>>>0);
      if ($692) { label = 125; break; } else { label = 124; break; }
    case 124: 
      var $694=$t0;
      var $695=$7;
      var $696=((($695)-(2))|0);
      var $697=$d2p3;
      var $698=(($697+($696<<2))|0);
      var $699=HEAP32[(($698)>>2)];
      var $700=(($694)>>>0) >= (($699)>>>0);
      if ($700) { label = 125; break; } else { label = 126; break; }
    case 125: 
      var $702=$v;
      var $703=((($702)-(1))|0);
      $v=$703;
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      var $707=$v;
      var $708=(($dinv)|0);
      HEAP32[(($708)>>2)]=$707;
      label = 129; break;
    case 129: 
      var $710=$7;
      var $711=(($710)|0) >= 50;
      if ($711) { label = 131; break; } else { label = 130; break; }
    case 130: 
      var $713=$1;
      var $714=$n2p2;
      var $715=$5;
      var $716=$d2p3;
      var $717=$7;
      var $718=(($dinv)|0);
      var $719=HEAP32[(($718)>>2)];
      var $720=___gmpn_sbpi1_div_qr($713, $714, $715, $716, $717, $719);
      label = 140; break;
    case 131: 
      var $722=$7;
      var $723=(($722)|0) >= 200;
      if ($723) { label = 132; break; } else { label = 134; break; }
    case 132: 
      var $725=$5;
      var $726=(($725)|0) >= 4000;
      if ($726) { label = 133; break; } else { label = 134; break; }
    case 133: 
      var $728=$7;
      var $729=(($728)|0);
      var $730=($729)*(3600);
      var $731=$5;
      var $732=(($731)|0);
      var $733=($732)*(200);
      var $734=($730)+($733);
      var $735=$7;
      var $736=(($735)|0);
      var $737=$5;
      var $738=(($737)|0);
      var $739=($736)*($738);
      var $740=$734 > $739;
      if ($740) { label = 134; break; } else { label = 135; break; }
    case 134: 
      var $742=$1;
      var $743=$n2p2;
      var $744=$5;
      var $745=$d2p3;
      var $746=$7;
      var $747=___gmpn_dcpi1_div_qr($742, $743, $744, $745, $746, $dinv);
      label = 139; break;
    case 135: 
      var $749=$5;
      var $750=$7;
      var $751=___gmpn_mu_div_qr_itch($749, $750, 0);
      $itch=$751;
      var $752=$itch;
      var $753=($752<<2);
      var $754=(($753)>>>0) < 65536;
      if ($754) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $756=$itch;
      var $757=($756<<2);
      var $758=STACKTOP;STACKTOP = (STACKTOP + $757)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $764 = $758;label = 138; break;
    case 137: 
      var $760=$itch;
      var $761=($760<<2);
      var $762=___gmp_tmp_reentrant_alloc($__tmp_marker1, $761);
      var $764 = $762;label = 138; break;
    case 138: 
      var $764;
      var $765=$764;
      $scratch=$765;
      var $766=$1;
      var $767=$2;
      var $768=$n2p2;
      var $769=$5;
      var $770=$d2p3;
      var $771=$7;
      var $772=$scratch;
      var $773=___gmpn_mu_div_qr($766, $767, $768, $769, $770, $771, $772);
      var $774=$2;
      $n2p2=$774;
      label = 139; break;
    case 139: 
      label = 140; break;
    case 140: 
      var $777=$cnt5;
      var $778=(($777)|0)!=0;
      if ($778) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $780=$2;
      var $781=$n2p2;
      var $782=$7;
      var $783=$cnt5;
      var $784=___gmpn_rshift($780, $781, $782, $783);
      label = 160; break;
    case 142: 
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      label = 150; break;
    case 150: 
      var $794=$7;
      var $795=(($794)|0)!=0;
      if ($795) { label = 151; break; } else { label = 157; break; }
    case 151: 
      var $797=$7;
      var $798=((($797)-(1))|0);
      $__n12=$798;
      var $799=$2;
      $__dst13=$799;
      var $800=$n2p2;
      $__src14=$800;
      var $801=$__src14;
      var $802=(($801+4)|0);
      $__src14=$802;
      var $803=HEAP32[(($801)>>2)];
      $__x15=$803;
      var $804=$__n12;
      var $805=(($804)|0)!=0;
      if ($805) { label = 152; break; } else { label = 156; break; }
    case 152: 
      label = 153; break;
    case 153: 
      var $808=$__x15;
      var $809=$__dst13;
      var $810=(($809+4)|0);
      $__dst13=$810;
      HEAP32[(($809)>>2)]=$808;
      var $811=$__src14;
      var $812=(($811+4)|0);
      $__src14=$812;
      var $813=HEAP32[(($811)>>2)];
      $__x15=$813;
      label = 154; break;
    case 154: 
      var $815=$__n12;
      var $816=((($815)-(1))|0);
      $__n12=$816;
      var $817=(($816)|0)!=0;
      if ($817) { label = 153; break; } else { label = 155; break; }
    case 155: 
      label = 156; break;
    case 156: 
      var $820=$__x15;
      var $821=$__dst13;
      var $822=(($821+4)|0);
      $__dst13=$822;
      HEAP32[(($821)>>2)]=$820;
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      label = 161; break;
    case 161: 
      var $828=HEAP32[(($__tmp_marker1)>>2)];
      var $829=(($828)|0)!=0;
      if ($829) { label = 162; break; } else { label = 163; break; }
    case 162: 
      var $831=HEAP32[(($__tmp_marker1)>>2)];
      ___gmp_tmp_reentrant_free($831);
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      label = 400; break;
    case 165: 
      var $835=$5;
      var $836=$7;
      var $837=((($835)-($836))|0);
      $qn=$837;
      var $838=$qn;
      var $839=$1;
      var $840=(($839+($838<<2))|0);
      HEAP32[(($840)>>2)]=0;
      var $841=$adjust;
      var $842=$qn;
      var $843=((($842)+($841))|0);
      $qn=$843;
      var $844=$qn;
      var $845=(($844)|0)==0;
      if ($845) { label = 166; break; } else { label = 188; break; }
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      label = 170; break;
    case 170: 
      label = 171; break;
    case 171: 
      label = 172; break;
    case 172: 
      label = 173; break;
    case 173: 
      label = 174; break;
    case 174: 
      var $855=$7;
      var $856=(($855)|0)!=0;
      if ($856) { label = 175; break; } else { label = 181; break; }
    case 175: 
      var $858=$7;
      var $859=((($858)-(1))|0);
      $__n20=$859;
      var $860=$2;
      $__dst21=$860;
      var $861=$4;
      $__src22=$861;
      var $862=$__src22;
      var $863=(($862+4)|0);
      $__src22=$863;
      var $864=HEAP32[(($862)>>2)];
      $__x23=$864;
      var $865=$__n20;
      var $866=(($865)|0)!=0;
      if ($866) { label = 176; break; } else { label = 180; break; }
    case 176: 
      label = 177; break;
    case 177: 
      var $869=$__x23;
      var $870=$__dst21;
      var $871=(($870+4)|0);
      $__dst21=$871;
      HEAP32[(($870)>>2)]=$869;
      var $872=$__src22;
      var $873=(($872+4)|0);
      $__src22=$873;
      var $874=HEAP32[(($872)>>2)];
      $__x23=$874;
      label = 178; break;
    case 178: 
      var $876=$__n20;
      var $877=((($876)-(1))|0);
      $__n20=$877;
      var $878=(($877)|0)!=0;
      if ($878) { label = 177; break; } else { label = 179; break; }
    case 179: 
      label = 180; break;
    case 180: 
      var $881=$__x23;
      var $882=$__dst21;
      var $883=(($882+4)|0);
      $__dst21=$883;
      HEAP32[(($882)>>2)]=$881;
      label = 181; break;
    case 181: 
      label = 182; break;
    case 182: 
      label = 183; break;
    case 183: 
      label = 184; break;
    case 184: 
      var $888=HEAP32[(($__tmp_marker1)>>2)];
      var $889=(($888)|0)!=0;
      if ($889) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $891=HEAP32[(($__tmp_marker1)>>2)];
      ___gmp_tmp_reentrant_free($891);
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      label = 400; break;
    case 188: 
      var $895=$7;
      var $896=$qn;
      var $897=((($895)-($896))|0);
      $in=$897;
      var $898=$7;
      var $899=((($898)-(1))|0);
      var $900=$6;
      var $901=(($900+($899<<2))|0);
      var $902=HEAP32[(($901)>>2)];
      var $903=$902 & -2147483648;
      var $904=(($903)|0)==0;
      if ($904) { label = 189; break; } else { label = 204; break; }
    case 189: 
      label = 190; break;
    case 190: 
      var $907=$7;
      var $908=((($907)-(1))|0);
      var $909=$6;
      var $910=(($909+($908<<2))|0);
      var $911=HEAP32[(($910)>>2)];
      $__xr24=$911;
      var $912=$__xr24;
      var $913=(($912)>>>0) < 65536;
      if ($913) { label = 191; break; } else { label = 192; break; }
    case 191: 
      var $915=$__xr24;
      var $916=(($915)>>>0) < 256;
      var $917=$916 ? 1 : 9;
      var $923 = $917;label = 193; break;
    case 192: 
      var $919=$__xr24;
      var $920=(($919)>>>0) < 16777216;
      var $921=$920 ? 17 : 25;
      var $923 = $921;label = 193; break;
    case 193: 
      var $923;
      $__a25=$923;
      var $924=$__a25;
      var $925=(((33)-($924))|0);
      var $926=$__xr24;
      var $927=$__a25;
      var $928=$926 >>> (($927)>>>0);
      var $929=((5244408+$928)|0);
      var $930=HEAP8[($929)];
      var $931=(($930)&255);
      var $932=((($925)-($931))|0);
      $cnt19=$932;
      label = 194; break;
    case 194: 
      var $934=$cnt19;
      var $935=(($934)|0);
      $cnt19=$935;
      var $936=$qn;
      var $937=($936<<2);
      var $938=(($937)>>>0) < 65536;
      if ($938) { label = 195; break; } else { label = 196; break; }
    case 195: 
      var $940=$qn;
      var $941=($940<<2);
      var $942=STACKTOP;STACKTOP = (STACKTOP + $941)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $948 = $942;label = 197; break;
    case 196: 
      var $944=$qn;
      var $945=($944<<2);
      var $946=___gmp_tmp_reentrant_alloc($__tmp_marker1, $945);
      var $948 = $946;label = 197; break;
    case 197: 
      var $948;
      var $949=$948;
      $d2p17=$949;
      var $950=$d2p17;
      var $951=$6;
      var $952=$in;
      var $953=(($951+($952<<2))|0);
      var $954=$qn;
      var $955=$cnt19;
      var $956=___gmpn_lshift($950, $953, $954, $955);
      var $957=$in;
      var $958=((($957)-(1))|0);
      var $959=$6;
      var $960=(($959+($958<<2))|0);
      var $961=HEAP32[(($960)>>2)];
      var $962=$cnt19;
      var $963=(((32)-($962))|0);
      var $964=$961 >>> (($963)>>>0);
      var $965=$d2p17;
      var $966=(($965)|0);
      var $967=HEAP32[(($966)>>2)];
      var $968=$967 | $964;
      HEAP32[(($966)>>2)]=$968;
      var $969=$qn;
      var $970=($969<<1);
      var $971=((($970)+(1))|0);
      var $972=($971<<2);
      var $973=(($972)>>>0) < 65536;
      if ($973) { label = 198; break; } else { label = 199; break; }
    case 198: 
      var $975=$qn;
      var $976=($975<<1);
      var $977=((($976)+(1))|0);
      var $978=($977<<2);
      var $979=STACKTOP;STACKTOP = (STACKTOP + $978)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $987 = $979;label = 200; break;
    case 199: 
      var $981=$qn;
      var $982=($981<<1);
      var $983=((($982)+(1))|0);
      var $984=($983<<2);
      var $985=___gmp_tmp_reentrant_alloc($__tmp_marker1, $984);
      var $987 = $985;label = 200; break;
    case 200: 
      var $987;
      var $988=$987;
      $n2p16=$988;
      var $989=$n2p16;
      var $990=$4;
      var $991=$5;
      var $992=(($990+($991<<2))|0);
      var $993=$qn;
      var $994=($993<<1);
      var $995=(((-$994))|0);
      var $996=(($992+($995<<2))|0);
      var $997=$qn;
      var $998=($997<<1);
      var $999=$cnt19;
      var $1000=___gmpn_lshift($989, $996, $998, $999);
      $cy18=$1000;
      var $1001=$adjust;
      var $1002=(($1001)|0)!=0;
      if ($1002) { label = 201; break; } else { label = 202; break; }
    case 201: 
      var $1004=$cy18;
      var $1005=$qn;
      var $1006=($1005<<1);
      var $1007=$n2p16;
      var $1008=(($1007+($1006<<2))|0);
      HEAP32[(($1008)>>2)]=$1004;
      var $1009=$n2p16;
      var $1010=(($1009+4)|0);
      $n2p16=$1010;
      label = 203; break;
    case 202: 
      var $1012=$5;
      var $1013=$qn;
      var $1014=($1013<<1);
      var $1015=((($1012)-($1014))|0);
      var $1016=((($1015)-(1))|0);
      var $1017=$4;
      var $1018=(($1017+($1016<<2))|0);
      var $1019=HEAP32[(($1018)>>2)];
      var $1020=$cnt19;
      var $1021=(((32)-($1020))|0);
      var $1022=$1019 >>> (($1021)>>>0);
      var $1023=$n2p16;
      var $1024=(($1023)|0);
      var $1025=HEAP32[(($1024)>>2)];
      var $1026=$1025 | $1022;
      HEAP32[(($1024)>>2)]=$1026;
      label = 203; break;
    case 203: 
      label = 227; break;
    case 204: 
      $cnt19=0;
      var $1029=$6;
      var $1030=$in;
      var $1031=(($1029+($1030<<2))|0);
      $d2p17=$1031;
      var $1032=$qn;
      var $1033=($1032<<1);
      var $1034=((($1033)+(1))|0);
      var $1035=($1034<<2);
      var $1036=(($1035)>>>0) < 65536;
      if ($1036) { label = 205; break; } else { label = 206; break; }
    case 205: 
      var $1038=$qn;
      var $1039=($1038<<1);
      var $1040=((($1039)+(1))|0);
      var $1041=($1040<<2);
      var $1042=STACKTOP;STACKTOP = (STACKTOP + $1041)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1050 = $1042;label = 207; break;
    case 206: 
      var $1044=$qn;
      var $1045=($1044<<1);
      var $1046=((($1045)+(1))|0);
      var $1047=($1046<<2);
      var $1048=___gmp_tmp_reentrant_alloc($__tmp_marker1, $1047);
      var $1050 = $1048;label = 207; break;
    case 207: 
      var $1050;
      var $1051=$1050;
      $n2p16=$1051;
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      label = 210; break;
    case 210: 
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      label = 214; break;
    case 214: 
      label = 215; break;
    case 215: 
      var $1060=$qn;
      var $1061=($1060<<1);
      var $1062=(($1061)|0)!=0;
      if ($1062) { label = 216; break; } else { label = 222; break; }
    case 216: 
      var $1064=$qn;
      var $1065=($1064<<1);
      var $1066=((($1065)-(1))|0);
      $__n26=$1066;
      var $1067=$n2p16;
      $__dst27=$1067;
      var $1068=$4;
      var $1069=$5;
      var $1070=(($1068+($1069<<2))|0);
      var $1071=$qn;
      var $1072=($1071<<1);
      var $1073=(((-$1072))|0);
      var $1074=(($1070+($1073<<2))|0);
      $__src28=$1074;
      var $1075=$__src28;
      var $1076=(($1075+4)|0);
      $__src28=$1076;
      var $1077=HEAP32[(($1075)>>2)];
      $__x29=$1077;
      var $1078=$__n26;
      var $1079=(($1078)|0)!=0;
      if ($1079) { label = 217; break; } else { label = 221; break; }
    case 217: 
      label = 218; break;
    case 218: 
      var $1082=$__x29;
      var $1083=$__dst27;
      var $1084=(($1083+4)|0);
      $__dst27=$1084;
      HEAP32[(($1083)>>2)]=$1082;
      var $1085=$__src28;
      var $1086=(($1085+4)|0);
      $__src28=$1086;
      var $1087=HEAP32[(($1085)>>2)];
      $__x29=$1087;
      label = 219; break;
    case 219: 
      var $1089=$__n26;
      var $1090=((($1089)-(1))|0);
      $__n26=$1090;
      var $1091=(($1090)|0)!=0;
      if ($1091) { label = 218; break; } else { label = 220; break; }
    case 220: 
      label = 221; break;
    case 221: 
      var $1094=$__x29;
      var $1095=$__dst27;
      var $1096=(($1095+4)|0);
      $__dst27=$1096;
      HEAP32[(($1095)>>2)]=$1094;
      label = 222; break;
    case 222: 
      label = 223; break;
    case 223: 
      label = 224; break;
    case 224: 
      var $1100=$adjust;
      var $1101=(($1100)|0)!=0;
      if ($1101) { label = 225; break; } else { label = 226; break; }
    case 225: 
      var $1103=$qn;
      var $1104=($1103<<1);
      var $1105=$n2p16;
      var $1106=(($1105+($1104<<2))|0);
      HEAP32[(($1106)>>2)]=0;
      var $1107=$n2p16;
      var $1108=(($1107+4)|0);
      $n2p16=$1108;
      label = 226; break;
    case 226: 
      label = 227; break;
    case 227: 
      var $1111=$qn;
      var $1112=(($1111)|0)==1;
      if ($1112) { label = 228; break; } else { label = 247; break; }
    case 228: 
      label = 229; break;
    case 229: 
      label = 230; break;
    case 230: 
      label = 231; break;
    case 231: 
      label = 232; break;
    case 232: 
      label = 233; break;
    case 233: 
      var $1119=$d2p17;
      var $1120=(($1119)|0);
      var $1121=HEAP32[(($1120)>>2)];
      var $1122=$1121 << 0;
      var $1123=$1122 >>> 16;
      $__d130=$1123;
      var $1124=$d2p17;
      var $1125=(($1124)|0);
      var $1126=HEAP32[(($1125)>>2)];
      var $1127=$1126 << 0;
      var $1128=$1127 & 65535;
      $__d031=$1128;
      var $1129=$n2p16;
      var $1130=(($1129+4)|0);
      var $1131=HEAP32[(($1130)>>2)];
      var $1132=$__d130;
      var $1133=Math.floor(((($1131)>>>0))/((($1132)>>>0)));
      $__q132=$1133;
      var $1134=$n2p16;
      var $1135=(($1134+4)|0);
      var $1136=HEAP32[(($1135)>>2)];
      var $1137=$__q132;
      var $1138=$__d130;
      var $1139=Math.imul($1137,$1138);
      var $1140=((($1136)-($1139))|0);
      $__r134=$1140;
      var $1141=$__q132;
      var $1142=$__d031;
      var $1143=Math.imul($1141,$1142);
      $__m36=$1143;
      var $1144=$__r134;
      var $1145=($1144<<16);
      var $1146=$n2p16;
      var $1147=(($1146)|0);
      var $1148=HEAP32[(($1147)>>2)];
      var $1149=$1148 << 0;
      var $1150=$1149 >>> 16;
      var $1151=$1145 | $1150;
      $__r134=$1151;
      var $1152=$__r134;
      var $1153=$__m36;
      var $1154=(($1152)>>>0) < (($1153)>>>0);
      if ($1154) { label = 234; break; } else { label = 239; break; }
    case 234: 
      var $1156=$__q132;
      var $1157=((($1156)-(1))|0);
      $__q132=$1157;
      var $1158=$d2p17;
      var $1159=(($1158)|0);
      var $1160=HEAP32[(($1159)>>2)];
      var $1161=$1160 << 0;
      var $1162=$__r134;
      var $1163=((($1162)+($1161))|0);
      $__r134=$1163;
      var $1164=$__r134;
      var $1165=$d2p17;
      var $1166=(($1165)|0);
      var $1167=HEAP32[(($1166)>>2)];
      var $1168=$1167 << 0;
      var $1169=(($1164)>>>0) >= (($1168)>>>0);
      if ($1169) { label = 235; break; } else { label = 238; break; }
    case 235: 
      var $1171=$__r134;
      var $1172=$__m36;
      var $1173=(($1171)>>>0) < (($1172)>>>0);
      if ($1173) { label = 236; break; } else { label = 237; break; }
    case 236: 
      var $1175=$__q132;
      var $1176=((($1175)-(1))|0);
      $__q132=$1176;
      var $1177=$d2p17;
      var $1178=(($1177)|0);
      var $1179=HEAP32[(($1178)>>2)];
      var $1180=$1179 << 0;
      var $1181=$__r134;
      var $1182=((($1181)+($1180))|0);
      $__r134=$1182;
      label = 237; break;
    case 237: 
      label = 238; break;
    case 238: 
      label = 239; break;
    case 239: 
      var $1186=$__m36;
      var $1187=$__r134;
      var $1188=((($1187)-($1186))|0);
      $__r134=$1188;
      var $1189=$__r134;
      var $1190=$__d130;
      var $1191=Math.floor(((($1189)>>>0))/((($1190)>>>0)));
      $__q033=$1191;
      var $1192=$__r134;
      var $1193=$__q033;
      var $1194=$__d130;
      var $1195=Math.imul($1193,$1194);
      var $1196=((($1192)-($1195))|0);
      $__r035=$1196;
      var $1197=$__q033;
      var $1198=$__d031;
      var $1199=Math.imul($1197,$1198);
      $__m36=$1199;
      var $1200=$__r035;
      var $1201=($1200<<16);
      var $1202=$n2p16;
      var $1203=(($1202)|0);
      var $1204=HEAP32[(($1203)>>2)];
      var $1205=$1204 << 0;
      var $1206=$1205 & 65535;
      var $1207=$1201 | $1206;
      $__r035=$1207;
      var $1208=$__r035;
      var $1209=$__m36;
      var $1210=(($1208)>>>0) < (($1209)>>>0);
      if ($1210) { label = 240; break; } else { label = 245; break; }
    case 240: 
      var $1212=$__q033;
      var $1213=((($1212)-(1))|0);
      $__q033=$1213;
      var $1214=$d2p17;
      var $1215=(($1214)|0);
      var $1216=HEAP32[(($1215)>>2)];
      var $1217=$1216 << 0;
      var $1218=$__r035;
      var $1219=((($1218)+($1217))|0);
      $__r035=$1219;
      var $1220=$__r035;
      var $1221=$d2p17;
      var $1222=(($1221)|0);
      var $1223=HEAP32[(($1222)>>2)];
      var $1224=$1223 << 0;
      var $1225=(($1220)>>>0) >= (($1224)>>>0);
      if ($1225) { label = 241; break; } else { label = 244; break; }
    case 241: 
      var $1227=$__r035;
      var $1228=$__m36;
      var $1229=(($1227)>>>0) < (($1228)>>>0);
      if ($1229) { label = 242; break; } else { label = 243; break; }
    case 242: 
      var $1231=$__q033;
      var $1232=((($1231)-(1))|0);
      $__q033=$1232;
      var $1233=$d2p17;
      var $1234=(($1233)|0);
      var $1235=HEAP32[(($1234)>>2)];
      var $1236=$1235 << 0;
      var $1237=$__r035;
      var $1238=((($1237)+($1236))|0);
      $__r035=$1238;
      label = 243; break;
    case 243: 
      label = 244; break;
    case 244: 
      label = 245; break;
    case 245: 
      var $1242=$__m36;
      var $1243=$__r035;
      var $1244=((($1243)-($1242))|0);
      $__r035=$1244;
      var $1245=$__q132;
      var $1246=($1245<<16);
      var $1247=$__q033;
      var $1248=$1246 | $1247;
      $q0=$1248;
      var $1249=$__r035;
      $r0=$1249;
      label = 246; break;
    case 246: 
      var $1251=$r0;
      var $1252=$1251 >>> 0;
      var $1253=$n2p16;
      var $1254=(($1253)|0);
      HEAP32[(($1254)>>2)]=$1252;
      var $1255=$q0;
      var $1256=$1;
      var $1257=(($1256)|0);
      HEAP32[(($1257)>>2)]=$1255;
      label = 316; break;
    case 247: 
      var $1259=$qn;
      var $1260=(($1259)|0)==2;
      if ($1260) { label = 248; break; } else { label = 249; break; }
    case 248: 
      var $1262=$1;
      var $1263=$n2p16;
      var $1264=$d2p17;
      var $1265=___gmpn_divrem_2($1262, 0, $1263, 4, $1264);
      label = 315; break;
    case 249: 
      label = 250; break;
    case 250: 
      label = 251; break;
    case 251: 
      label = 252; break;
    case 252: 
      label = 253; break;
    case 253: 
      label = 254; break;
    case 254: 
      label = 255; break;
    case 255: 
      label = 256; break;
    case 256: 
      label = 257; break;
    case 257: 
      label = 258; break;
    case 258: 
      var $1276=$qn;
      var $1277=((($1276)-(1))|0);
      var $1278=$d2p17;
      var $1279=(($1278+($1277<<2))|0);
      var $1280=HEAP32[(($1279)>>2)];
      var $1281=$1280 >>> 16;
      $__d143=$1281;
      var $1282=$qn;
      var $1283=((($1282)-(1))|0);
      var $1284=$d2p17;
      var $1285=(($1284+($1283<<2))|0);
      var $1286=HEAP32[(($1285)>>2)];
      var $1287=$1286 & 65535;
      $__d044=$1287;
      var $1288=$qn;
      var $1289=((($1288)-(1))|0);
      var $1290=$d2p17;
      var $1291=(($1290+($1289<<2))|0);
      var $1292=HEAP32[(($1291)>>2)];
      var $1293=$1292 ^ -1;
      var $1294=$__d143;
      var $1295=Math.floor(((($1293)>>>0))/((($1294)>>>0)));
      $__q145=$1295;
      var $1296=$qn;
      var $1297=((($1296)-(1))|0);
      var $1298=$d2p17;
      var $1299=(($1298+($1297<<2))|0);
      var $1300=HEAP32[(($1299)>>2)];
      var $1301=$1300 ^ -1;
      var $1302=$__q145;
      var $1303=$__d143;
      var $1304=Math.imul($1302,$1303);
      var $1305=((($1301)-($1304))|0);
      $__r147=$1305;
      var $1306=$__q145;
      var $1307=$__d044;
      var $1308=Math.imul($1306,$1307);
      $__m49=$1308;
      var $1309=$__r147;
      var $1310=($1309<<16);
      var $1311=$1310 | 65535;
      $__r147=$1311;
      var $1312=$__r147;
      var $1313=$__m49;
      var $1314=(($1312)>>>0) < (($1313)>>>0);
      if ($1314) { label = 259; break; } else { label = 264; break; }
    case 259: 
      var $1316=$__q145;
      var $1317=((($1316)-(1))|0);
      $__q145=$1317;
      var $1318=$qn;
      var $1319=((($1318)-(1))|0);
      var $1320=$d2p17;
      var $1321=(($1320+($1319<<2))|0);
      var $1322=HEAP32[(($1321)>>2)];
      var $1323=$__r147;
      var $1324=((($1323)+($1322))|0);
      $__r147=$1324;
      var $1325=$__r147;
      var $1326=$qn;
      var $1327=((($1326)-(1))|0);
      var $1328=$d2p17;
      var $1329=(($1328+($1327<<2))|0);
      var $1330=HEAP32[(($1329)>>2)];
      var $1331=(($1325)>>>0) >= (($1330)>>>0);
      if ($1331) { label = 260; break; } else { label = 263; break; }
    case 260: 
      var $1333=$__r147;
      var $1334=$__m49;
      var $1335=(($1333)>>>0) < (($1334)>>>0);
      if ($1335) { label = 261; break; } else { label = 262; break; }
    case 261: 
      var $1337=$__q145;
      var $1338=((($1337)-(1))|0);
      $__q145=$1338;
      var $1339=$qn;
      var $1340=((($1339)-(1))|0);
      var $1341=$d2p17;
      var $1342=(($1341+($1340<<2))|0);
      var $1343=HEAP32[(($1342)>>2)];
      var $1344=$__r147;
      var $1345=((($1344)+($1343))|0);
      $__r147=$1345;
      label = 262; break;
    case 262: 
      label = 263; break;
    case 263: 
      label = 264; break;
    case 264: 
      var $1349=$__m49;
      var $1350=$__r147;
      var $1351=((($1350)-($1349))|0);
      $__r147=$1351;
      var $1352=$__r147;
      var $1353=$__d143;
      var $1354=Math.floor(((($1352)>>>0))/((($1353)>>>0)));
      $__q046=$1354;
      var $1355=$__r147;
      var $1356=$__q046;
      var $1357=$__d143;
      var $1358=Math.imul($1356,$1357);
      var $1359=((($1355)-($1358))|0);
      $__r048=$1359;
      var $1360=$__q046;
      var $1361=$__d044;
      var $1362=Math.imul($1360,$1361);
      $__m49=$1362;
      var $1363=$__r048;
      var $1364=($1363<<16);
      var $1365=$1364 | 65535;
      $__r048=$1365;
      var $1366=$__r048;
      var $1367=$__m49;
      var $1368=(($1366)>>>0) < (($1367)>>>0);
      if ($1368) { label = 265; break; } else { label = 270; break; }
    case 265: 
      var $1370=$__q046;
      var $1371=((($1370)-(1))|0);
      $__q046=$1371;
      var $1372=$qn;
      var $1373=((($1372)-(1))|0);
      var $1374=$d2p17;
      var $1375=(($1374+($1373<<2))|0);
      var $1376=HEAP32[(($1375)>>2)];
      var $1377=$__r048;
      var $1378=((($1377)+($1376))|0);
      $__r048=$1378;
      var $1379=$__r048;
      var $1380=$qn;
      var $1381=((($1380)-(1))|0);
      var $1382=$d2p17;
      var $1383=(($1382+($1381<<2))|0);
      var $1384=HEAP32[(($1383)>>2)];
      var $1385=(($1379)>>>0) >= (($1384)>>>0);
      if ($1385) { label = 266; break; } else { label = 269; break; }
    case 266: 
      var $1387=$__r048;
      var $1388=$__m49;
      var $1389=(($1387)>>>0) < (($1388)>>>0);
      if ($1389) { label = 267; break; } else { label = 268; break; }
    case 267: 
      var $1391=$__q046;
      var $1392=((($1391)-(1))|0);
      $__q046=$1392;
      var $1393=$qn;
      var $1394=((($1393)-(1))|0);
      var $1395=$d2p17;
      var $1396=(($1395+($1394<<2))|0);
      var $1397=HEAP32[(($1396)>>2)];
      var $1398=$__r048;
      var $1399=((($1398)+($1397))|0);
      $__r048=$1399;
      label = 268; break;
    case 268: 
      label = 269; break;
    case 269: 
      label = 270; break;
    case 270: 
      var $1403=$__m49;
      var $1404=$__r048;
      var $1405=((($1404)-($1403))|0);
      $__r048=$1405;
      var $1406=$__q145;
      var $1407=($1406<<16);
      var $1408=$__q046;
      var $1409=$1407 | $1408;
      $v37=$1409;
      var $1410=$__r048;
      $dummy42=$1410;
      label = 271; break;
    case 271: 
      label = 272; break;
    case 272: 
      var $1413=$qn;
      var $1414=((($1413)-(1))|0);
      var $1415=$d2p17;
      var $1416=(($1415+($1414<<2))|0);
      var $1417=HEAP32[(($1416)>>2)];
      var $1418=$v37;
      var $1419=Math.imul($1417,$1418);
      $p38=$1419;
      var $1420=$qn;
      var $1421=((($1420)-(2))|0);
      var $1422=$d2p17;
      var $1423=(($1422+($1421<<2))|0);
      var $1424=HEAP32[(($1423)>>2)];
      var $1425=$p38;
      var $1426=((($1425)+($1424))|0);
      $p38=$1426;
      var $1427=$p38;
      var $1428=$qn;
      var $1429=((($1428)-(2))|0);
      var $1430=$d2p17;
      var $1431=(($1430+($1429<<2))|0);
      var $1432=HEAP32[(($1431)>>2)];
      var $1433=(($1427)>>>0) < (($1432)>>>0);
      if ($1433) { label = 273; break; } else { label = 274; break; }
    case 273: 
      var $1435=$v37;
      var $1436=((($1435)-(1))|0);
      $v37=$1436;
      var $1437=$p38;
      var $1438=$qn;
      var $1439=((($1438)-(1))|0);
      var $1440=$d2p17;
      var $1441=(($1440+($1439<<2))|0);
      var $1442=HEAP32[(($1441)>>2)];
      var $1443=(($1437)>>>0) >= (($1442)>>>0);
      var $1444=(($1443)&1);
      var $1445=(((-$1444))|0);
      $mask41=$1445;
      var $1446=$qn;
      var $1447=((($1446)-(1))|0);
      var $1448=$d2p17;
      var $1449=(($1448+($1447<<2))|0);
      var $1450=HEAP32[(($1449)>>2)];
      var $1451=$p38;
      var $1452=((($1451)-($1450))|0);
      $p38=$1452;
      var $1453=$mask41;
      var $1454=$v37;
      var $1455=((($1454)+($1453))|0);
      $v37=$1455;
      var $1456=$mask41;
      var $1457=$qn;
      var $1458=((($1457)-(1))|0);
      var $1459=$d2p17;
      var $1460=(($1459+($1458<<2))|0);
      var $1461=HEAP32[(($1460)>>2)];
      var $1462=$1456 & $1461;
      var $1463=$p38;
      var $1464=((($1463)-($1462))|0);
      $p38=$1464;
      label = 274; break;
    case 274: 
      label = 275; break;
    case 275: 
      var $1467=$qn;
      var $1468=((($1467)-(2))|0);
      var $1469=$d2p17;
      var $1470=(($1469+($1468<<2))|0);
      var $1471=HEAP32[(($1470)>>2)];
      $__u58=$1471;
      var $1472=$v37;
      $__v59=$1472;
      var $1473=$__u58;
      var $1474=$1473 & 65535;
      $__ul54=$1474;
      var $1475=$__u58;
      var $1476=$1475 >>> 16;
      $__uh56=$1476;
      var $1477=$__v59;
      var $1478=$1477 & 65535;
      $__vl55=$1478;
      var $1479=$__v59;
      var $1480=$1479 >>> 16;
      $__vh57=$1480;
      var $1481=$__ul54;
      var $1482=$__vl55;
      var $1483=Math.imul($1481,$1482);
      $__x050=$1483;
      var $1484=$__ul54;
      var $1485=$__vh57;
      var $1486=Math.imul($1484,$1485);
      $__x151=$1486;
      var $1487=$__uh56;
      var $1488=$__vl55;
      var $1489=Math.imul($1487,$1488);
      $__x252=$1489;
      var $1490=$__uh56;
      var $1491=$__vh57;
      var $1492=Math.imul($1490,$1491);
      $__x353=$1492;
      var $1493=$__x050;
      var $1494=$1493 >>> 16;
      var $1495=$__x151;
      var $1496=((($1495)+($1494))|0);
      $__x151=$1496;
      var $1497=$__x252;
      var $1498=$__x151;
      var $1499=((($1498)+($1497))|0);
      $__x151=$1499;
      var $1500=$__x151;
      var $1501=$__x252;
      var $1502=(($1500)>>>0) < (($1501)>>>0);
      if ($1502) { label = 276; break; } else { label = 277; break; }
    case 276: 
      var $1504=$__x353;
      var $1505=((($1504)+(65536))|0);
      $__x353=$1505;
      label = 277; break;
    case 277: 
      var $1507=$__x353;
      var $1508=$__x151;
      var $1509=$1508 >>> 16;
      var $1510=((($1507)+($1509))|0);
      $t139=$1510;
      var $1511=$__x151;
      var $1512=$1511 << 16;
      var $1513=$__x050;
      var $1514=$1513 & 65535;
      var $1515=((($1512)+($1514))|0);
      $t040=$1515;
      label = 278; break;
    case 278: 
      var $1517=$t139;
      var $1518=$p38;
      var $1519=((($1518)+($1517))|0);
      $p38=$1519;
      var $1520=$p38;
      var $1521=$t139;
      var $1522=(($1520)>>>0) < (($1521)>>>0);
      if ($1522) { label = 279; break; } else { label = 285; break; }
    case 279: 
      var $1524=$v37;
      var $1525=((($1524)-(1))|0);
      $v37=$1525;
      var $1526=$p38;
      var $1527=$qn;
      var $1528=((($1527)-(1))|0);
      var $1529=$d2p17;
      var $1530=(($1529+($1528<<2))|0);
      var $1531=HEAP32[(($1530)>>2)];
      var $1532=(($1526)>>>0) >= (($1531)>>>0);
      if ($1532) { label = 280; break; } else { label = 284; break; }
    case 280: 
      var $1534=$p38;
      var $1535=$qn;
      var $1536=((($1535)-(1))|0);
      var $1537=$d2p17;
      var $1538=(($1537+($1536<<2))|0);
      var $1539=HEAP32[(($1538)>>2)];
      var $1540=(($1534)>>>0) > (($1539)>>>0);
      if ($1540) { label = 282; break; } else { label = 281; break; }
    case 281: 
      var $1542=$t040;
      var $1543=$qn;
      var $1544=((($1543)-(2))|0);
      var $1545=$d2p17;
      var $1546=(($1545+($1544<<2))|0);
      var $1547=HEAP32[(($1546)>>2)];
      var $1548=(($1542)>>>0) >= (($1547)>>>0);
      if ($1548) { label = 282; break; } else { label = 283; break; }
    case 282: 
      var $1550=$v37;
      var $1551=((($1550)-(1))|0);
      $v37=$1551;
      label = 283; break;
    case 283: 
      label = 284; break;
    case 284: 
      label = 285; break;
    case 285: 
      var $1555=$v37;
      var $1556=(($dinv)|0);
      HEAP32[(($1556)>>2)]=$1555;
      label = 286; break;
    case 286: 
      var $1558=$qn;
      var $1559=(($1558)|0) >= 50;
      if ($1559) { label = 288; break; } else { label = 287; break; }
    case 287: 
      var $1561=$1;
      var $1562=$n2p16;
      var $1563=$qn;
      var $1564=($1563<<1);
      var $1565=$d2p17;
      var $1566=$qn;
      var $1567=(($dinv)|0);
      var $1568=HEAP32[(($1567)>>2)];
      var $1569=___gmpn_sbpi1_div_qr($1561, $1562, $1564, $1565, $1566, $1568);
      label = 314; break;
    case 288: 
      var $1571=$qn;
      var $1572=(($1571)|0) >= 2000;
      if ($1572) { label = 290; break; } else { label = 289; break; }
    case 289: 
      var $1574=$1;
      var $1575=$n2p16;
      var $1576=$qn;
      var $1577=($1576<<1);
      var $1578=$d2p17;
      var $1579=$qn;
      var $1580=___gmpn_dcpi1_div_qr($1574, $1575, $1577, $1578, $1579, $dinv);
      label = 313; break;
    case 290: 
      var $1582=$qn;
      var $1583=($1582<<1);
      var $1584=$qn;
      var $1585=___gmpn_mu_div_qr_itch($1583, $1584, 0);
      $itch60=$1585;
      var $1586=$itch60;
      var $1587=($1586<<2);
      var $1588=(($1587)>>>0) < 65536;
      if ($1588) { label = 291; break; } else { label = 292; break; }
    case 291: 
      var $1590=$itch60;
      var $1591=($1590<<2);
      var $1592=STACKTOP;STACKTOP = (STACKTOP + $1591)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1598 = $1592;label = 293; break;
    case 292: 
      var $1594=$itch60;
      var $1595=($1594<<2);
      var $1596=___gmp_tmp_reentrant_alloc($__tmp_marker1, $1595);
      var $1598 = $1596;label = 293; break;
    case 293: 
      var $1598;
      var $1599=$1598;
      $scratch61=$1599;
      var $1600=$2;
      $r2p=$1600;
      var $1601=$4;
      var $1602=$r2p;
      var $1603=(($1601)|0)==(($1602)|0);
      if ($1603) { label = 294; break; } else { label = 295; break; }
    case 294: 
      var $1605=$5;
      var $1606=$qn;
      var $1607=((($1605)-($1606))|0);
      var $1608=$r2p;
      var $1609=(($1608+($1607<<2))|0);
      $r2p=$1609;
      label = 295; break;
    case 295: 
      var $1611=$1;
      var $1612=$r2p;
      var $1613=$n2p16;
      var $1614=$qn;
      var $1615=($1614<<1);
      var $1616=$d2p17;
      var $1617=$qn;
      var $1618=$scratch61;
      var $1619=___gmpn_mu_div_qr($1611, $1612, $1613, $1615, $1616, $1617, $1618);
      label = 296; break;
    case 296: 
      label = 297; break;
    case 297: 
      label = 298; break;
    case 298: 
      label = 299; break;
    case 299: 
      label = 300; break;
    case 300: 
      label = 301; break;
    case 301: 
      label = 302; break;
    case 302: 
      label = 303; break;
    case 303: 
      var $1628=$qn;
      var $1629=(($1628)|0)!=0;
      if ($1629) { label = 304; break; } else { label = 310; break; }
    case 304: 
      var $1631=$qn;
      var $1632=((($1631)-(1))|0);
      $__n62=$1632;
      var $1633=$n2p16;
      $__dst63=$1633;
      var $1634=$r2p;
      $__src64=$1634;
      var $1635=$__src64;
      var $1636=(($1635+4)|0);
      $__src64=$1636;
      var $1637=HEAP32[(($1635)>>2)];
      $__x65=$1637;
      var $1638=$__n62;
      var $1639=(($1638)|0)!=0;
      if ($1639) { label = 305; break; } else { label = 309; break; }
    case 305: 
      label = 306; break;
    case 306: 
      var $1642=$__x65;
      var $1643=$__dst63;
      var $1644=(($1643+4)|0);
      $__dst63=$1644;
      HEAP32[(($1643)>>2)]=$1642;
      var $1645=$__src64;
      var $1646=(($1645+4)|0);
      $__src64=$1646;
      var $1647=HEAP32[(($1645)>>2)];
      $__x65=$1647;
      label = 307; break;
    case 307: 
      var $1649=$__n62;
      var $1650=((($1649)-(1))|0);
      $__n62=$1650;
      var $1651=(($1650)|0)!=0;
      if ($1651) { label = 306; break; } else { label = 308; break; }
    case 308: 
      label = 309; break;
    case 309: 
      var $1654=$__x65;
      var $1655=$__dst63;
      var $1656=(($1655+4)|0);
      $__dst63=$1656;
      HEAP32[(($1655)>>2)]=$1654;
      label = 310; break;
    case 310: 
      label = 311; break;
    case 311: 
      label = 312; break;
    case 312: 
      label = 313; break;
    case 313: 
      label = 314; break;
    case 314: 
      label = 315; break;
    case 315: 
      label = 316; break;
    case 316: 
      var $1664=$qn;
      $rn=$1664;
      var $1665=$in;
      var $1666=((($1665)-(2))|0);
      var $1667=(($1666)|0) < 0;
      if ($1667) { label = 317; break; } else { label = 318; break; }
    case 317: 
      $dl=0;
      label = 319; break;
    case 318: 
      var $1670=$in;
      var $1671=((($1670)-(2))|0);
      var $1672=$6;
      var $1673=(($1672+($1671<<2))|0);
      var $1674=HEAP32[(($1673)>>2)];
      $dl=$1674;
      label = 319; break;
    case 319: 
      var $1676=$in;
      var $1677=((($1676)-(1))|0);
      var $1678=$6;
      var $1679=(($1678+($1677<<2))|0);
      var $1680=HEAP32[(($1679)>>2)];
      var $1681=$cnt19;
      var $1682=$1680 << $1681;
      var $1683=$dl;
      var $1684=$1683 >>> 1;
      var $1685=$cnt19;
      var $1686=$1685 ^ -1;
      var $1687=((($1686)>>>0))%(32);
      var $1688=$1684 >>> (($1687)>>>0);
      var $1689=$1682 | $1688;
      $x=$1689;
      label = 320; break;
    case 320: 
      var $1691=$x;
      $__u75=$1691;
      var $1692=$qn;
      var $1693=((($1692)-(1))|0);
      var $1694=$1;
      var $1695=(($1694+($1693<<2))|0);
      var $1696=HEAP32[(($1695)>>2)];
      var $1697=$1696 << 0;
      $__v76=$1697;
      var $1698=$__u75;
      var $1699=$1698 & 65535;
      $__ul71=$1699;
      var $1700=$__u75;
      var $1701=$1700 >>> 16;
      $__uh73=$1701;
      var $1702=$__v76;
      var $1703=$1702 & 65535;
      $__vl72=$1703;
      var $1704=$__v76;
      var $1705=$1704 >>> 16;
      $__vh74=$1705;
      var $1706=$__ul71;
      var $1707=$__vl72;
      var $1708=Math.imul($1706,$1707);
      $__x067=$1708;
      var $1709=$__ul71;
      var $1710=$__vh74;
      var $1711=Math.imul($1709,$1710);
      $__x168=$1711;
      var $1712=$__uh73;
      var $1713=$__vl72;
      var $1714=Math.imul($1712,$1713);
      $__x269=$1714;
      var $1715=$__uh73;
      var $1716=$__vh74;
      var $1717=Math.imul($1715,$1716);
      $__x370=$1717;
      var $1718=$__x067;
      var $1719=$1718 >>> 16;
      var $1720=$__x168;
      var $1721=((($1720)+($1719))|0);
      $__x168=$1721;
      var $1722=$__x269;
      var $1723=$__x168;
      var $1724=((($1723)+($1722))|0);
      $__x168=$1724;
      var $1725=$__x168;
      var $1726=$__x269;
      var $1727=(($1725)>>>0) < (($1726)>>>0);
      if ($1727) { label = 321; break; } else { label = 322; break; }
    case 321: 
      var $1729=$__x370;
      var $1730=((($1729)+(65536))|0);
      $__x370=$1730;
      label = 322; break;
    case 322: 
      var $1732=$__x370;
      var $1733=$__x168;
      var $1734=$1733 >>> 16;
      var $1735=((($1732)+($1734))|0);
      $h=$1735;
      var $1736=$__x168;
      var $1737=$1736 << 16;
      var $1738=$__x067;
      var $1739=$1738 & 65535;
      var $1740=((($1737)+($1739))|0);
      $dummy66=$1740;
      label = 323; break;
    case 323: 
      var $1742=$qn;
      var $1743=((($1742)-(1))|0);
      var $1744=$n2p16;
      var $1745=(($1744+($1743<<2))|0);
      var $1746=HEAP32[(($1745)>>2)];
      var $1747=$h;
      var $1748=(($1746)>>>0) < (($1747)>>>0);
      if ($1748) { label = 324; break; } else { label = 332; break; }
    case 324: 
      label = 325; break;
    case 325: 
      var $1751=$1;
      $__p=$1751;
      label = 326; break;
    case 326: 
      var $1753=$__p;
      var $1754=(($1753+4)|0);
      $__p=$1754;
      var $1755=HEAP32[(($1753)>>2)];
      var $1756=((($1755)-(1))|0);
      HEAP32[(($1753)>>2)]=$1756;
      var $1757=(($1755)|0)==0;
      if ($1757) { label = 327; break; } else { label = 328; break; }
    case 327: 
      label = 326; break;
    case 328: 
      label = 329; break;
    case 329: 
      var $1761=$n2p16;
      var $1762=$n2p16;
      var $1763=$d2p17;
      var $1764=$qn;
      var $1765=___gmpn_add_n($1761, $1762, $1763, $1764);
      $cy77=$1765;
      var $1766=$cy77;
      var $1767=(($1766)|0)!=0;
      if ($1767) { label = 330; break; } else { label = 331; break; }
    case 330: 
      var $1769=$cy77;
      var $1770=$qn;
      var $1771=$n2p16;
      var $1772=(($1771+($1770<<2))|0);
      HEAP32[(($1772)>>2)]=$1769;
      var $1773=$rn;
      var $1774=((($1773)+(1))|0);
      $rn=$1774;
      label = 331; break;
    case 331: 
      label = 332; break;
    case 332: 
      $quotient_too_large=0;
      var $1777=$cnt19;
      var $1778=(($1777)|0)!=0;
      if ($1778) { label = 333; break; } else { label = 341; break; }
    case 333: 
      var $1780=$n2p16;
      var $1781=$n2p16;
      var $1782=$rn;
      var $1783=$cnt19;
      var $1784=(((32)-($1783))|0);
      var $1785=___gmpn_lshift($1780, $1781, $1782, $1784);
      $cy1=$1785;
      var $1786=$in;
      var $1787=((($1786)-(1))|0);
      var $1788=$4;
      var $1789=(($1788+($1787<<2))|0);
      var $1790=HEAP32[(($1789)>>2)];
      var $1791=$cnt19;
      var $1792=-1 >>> (($1791)>>>0);
      var $1793=$1790 & $1792;
      var $1794=$n2p16;
      var $1795=(($1794)|0);
      var $1796=HEAP32[(($1795)>>2)];
      var $1797=$1796 | $1793;
      HEAP32[(($1795)>>2)]=$1797;
      var $1798=$n2p16;
      var $1799=$1;
      var $1800=$qn;
      var $1801=$in;
      var $1802=((($1801)-(1))|0);
      var $1803=$6;
      var $1804=(($1803+($1802<<2))|0);
      var $1805=HEAP32[(($1804)>>2)];
      var $1806=$cnt19;
      var $1807=-1 >>> (($1806)>>>0);
      var $1808=$1805 & $1807;
      var $1809=___gmpn_submul_1($1798, $1799, $1800, $1808);
      $cy2=$1809;
      var $1810=$qn;
      var $1811=$rn;
      var $1812=(($1810)|0)!=(($1811)|0);
      if ($1812) { label = 334; break; } else { label = 339; break; }
    case 334: 
      label = 335; break;
    case 335: 
      var $1815=$qn;
      var $1816=$n2p16;
      var $1817=(($1816+($1815<<2))|0);
      var $1818=HEAP32[(($1817)>>2)];
      var $1819=$cy2;
      var $1820=(($1818)>>>0) >= (($1819)>>>0);
      if ($1820) { label = 337; break; } else { label = 336; break; }
    case 336: 
      ___gmp_assert_fail(((5243480)|0), 332, ((5243536)|0));
      throw "Reached an unreachable!"
    case 337: 
      label = 338; break;
    case 338: 
      var $1824=$cy2;
      var $1825=$qn;
      var $1826=$n2p16;
      var $1827=(($1826+($1825<<2))|0);
      var $1828=HEAP32[(($1827)>>2)];
      var $1829=((($1828)-($1824))|0);
      HEAP32[(($1827)>>2)]=$1829;
      label = 340; break;
    case 339: 
      var $1831=$cy1;
      var $1832=$cy2;
      var $1833=((($1831)-($1832))|0);
      var $1834=$qn;
      var $1835=$n2p16;
      var $1836=(($1835+($1834<<2))|0);
      HEAP32[(($1836)>>2)]=$1833;
      var $1837=$cy1;
      var $1838=$cy2;
      var $1839=(($1837)>>>0) < (($1838)>>>0);
      var $1840=(($1839)&1);
      $quotient_too_large=$1840;
      var $1841=$rn;
      var $1842=((($1841)+(1))|0);
      $rn=$1842;
      label = 340; break;
    case 340: 
      var $1844=$in;
      var $1845=((($1844)-(1))|0);
      $in=$1845;
      label = 341; break;
    case 341: 
      var $1847=$7;
      var $1848=($1847<<2);
      var $1849=(($1848)>>>0) < 65536;
      if ($1849) { label = 342; break; } else { label = 343; break; }
    case 342: 
      var $1851=$7;
      var $1852=($1851<<2);
      var $1853=STACKTOP;STACKTOP = (STACKTOP + $1852)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1859 = $1853;label = 344; break;
    case 343: 
      var $1855=$7;
      var $1856=($1855<<2);
      var $1857=___gmp_tmp_reentrant_alloc($__tmp_marker1, $1856);
      var $1859 = $1857;label = 344; break;
    case 344: 
      var $1859;
      var $1860=$1859;
      $tp=$1860;
      var $1861=$in;
      var $1862=$qn;
      var $1863=(($1861)|0) < (($1862)|0);
      if ($1863) { label = 345; break; } else { label = 369; break; }
    case 345: 
      var $1865=$in;
      var $1866=(($1865)|0)==0;
      if ($1866) { label = 346; break; } else { label = 368; break; }
    case 346: 
      label = 347; break;
    case 347: 
      label = 348; break;
    case 348: 
      label = 349; break;
    case 349: 
      label = 350; break;
    case 350: 
      label = 351; break;
    case 351: 
      label = 352; break;
    case 352: 
      label = 353; break;
    case 353: 
      label = 354; break;
    case 354: 
      var $1876=$rn;
      var $1877=(($1876)|0)!=0;
      if ($1877) { label = 355; break; } else { label = 361; break; }
    case 355: 
      var $1879=$rn;
      var $1880=((($1879)-(1))|0);
      $__n79=$1880;
      var $1881=$2;
      $__dst80=$1881;
      var $1882=$n2p16;
      $__src81=$1882;
      var $1883=$__src81;
      var $1884=(($1883+4)|0);
      $__src81=$1884;
      var $1885=HEAP32[(($1883)>>2)];
      $__x82=$1885;
      var $1886=$__n79;
      var $1887=(($1886)|0)!=0;
      if ($1887) { label = 356; break; } else { label = 360; break; }
    case 356: 
      label = 357; break;
    case 357: 
      var $1890=$__x82;
      var $1891=$__dst80;
      var $1892=(($1891+4)|0);
      $__dst80=$1892;
      HEAP32[(($1891)>>2)]=$1890;
      var $1893=$__src81;
      var $1894=(($1893+4)|0);
      $__src81=$1894;
      var $1895=HEAP32[(($1893)>>2)];
      $__x82=$1895;
      label = 358; break;
    case 358: 
      var $1897=$__n79;
      var $1898=((($1897)-(1))|0);
      $__n79=$1898;
      var $1899=(($1898)|0)!=0;
      if ($1899) { label = 357; break; } else { label = 359; break; }
    case 359: 
      label = 360; break;
    case 360: 
      var $1902=$__x82;
      var $1903=$__dst80;
      var $1904=(($1903+4)|0);
      $__dst80=$1904;
      HEAP32[(($1903)>>2)]=$1902;
      label = 361; break;
    case 361: 
      label = 362; break;
    case 362: 
      label = 363; break;
    case 363: 
      label = 364; break;
    case 364: 
      var $1909=$rn;
      var $1910=$7;
      var $1911=(($1909)|0)==(($1910)|0);
      if ($1911) { label = 366; break; } else { label = 365; break; }
    case 365: 
      ___gmp_assert_fail(((5243480)|0), 353, ((5243312)|0));
      throw "Reached an unreachable!"
    case 366: 
      label = 367; break;
    case 367: 
      label = 388; break;
    case 368: 
      var $1916=$tp;
      var $1917=$1;
      var $1918=$qn;
      var $1919=$6;
      var $1920=$in;
      var $1921=___gmpn_mul($1916, $1917, $1918, $1919, $1920);
      label = 370; break;
    case 369: 
      var $1923=$tp;
      var $1924=$6;
      var $1925=$in;
      var $1926=$1;
      var $1927=$qn;
      var $1928=___gmpn_mul($1923, $1924, $1925, $1926, $1927);
      label = 370; break;
    case 370: 
      var $1930=$n2p16;
      var $1931=$n2p16;
      var $1932=$rn;
      var $1933=$tp;
      var $1934=$in;
      var $1935=(($1933+($1934<<2))|0);
      var $1936=$qn;
      var $1937=___gmpn_sub($1930, $1931, $1932, $1935, $1936);
      $cy18=$1937;
      label = 371; break;
    case 371: 
      label = 372; break;
    case 372: 
      label = 373; break;
    case 373: 
      label = 374; break;
    case 374: 
      label = 375; break;
    case 375: 
      label = 376; break;
    case 376: 
      label = 377; break;
    case 377: 
      label = 378; break;
    case 378: 
      var $1946=$7;
      var $1947=$in;
      var $1948=((($1946)-($1947))|0);
      var $1949=(($1948)|0)!=0;
      if ($1949) { label = 379; break; } else { label = 385; break; }
    case 379: 
      var $1951=$7;
      var $1952=$in;
      var $1953=((($1951)-($1952))|0);
      var $1954=((($1953)-(1))|0);
      $__n83=$1954;
      var $1955=$2;
      var $1956=$in;
      var $1957=(($1955+($1956<<2))|0);
      $__dst84=$1957;
      var $1958=$n2p16;
      $__src85=$1958;
      var $1959=$__src85;
      var $1960=(($1959+4)|0);
      $__src85=$1960;
      var $1961=HEAP32[(($1959)>>2)];
      $__x86=$1961;
      var $1962=$__n83;
      var $1963=(($1962)|0)!=0;
      if ($1963) { label = 380; break; } else { label = 384; break; }
    case 380: 
      label = 381; break;
    case 381: 
      var $1966=$__x86;
      var $1967=$__dst84;
      var $1968=(($1967+4)|0);
      $__dst84=$1968;
      HEAP32[(($1967)>>2)]=$1966;
      var $1969=$__src85;
      var $1970=(($1969+4)|0);
      $__src85=$1970;
      var $1971=HEAP32[(($1969)>>2)];
      $__x86=$1971;
      label = 382; break;
    case 382: 
      var $1973=$__n83;
      var $1974=((($1973)-(1))|0);
      $__n83=$1974;
      var $1975=(($1974)|0)!=0;
      if ($1975) { label = 381; break; } else { label = 383; break; }
    case 383: 
      label = 384; break;
    case 384: 
      var $1978=$__x86;
      var $1979=$__dst84;
      var $1980=(($1979+4)|0);
      $__dst84=$1980;
      HEAP32[(($1979)>>2)]=$1978;
      label = 385; break;
    case 385: 
      label = 386; break;
    case 386: 
      label = 387; break;
    case 387: 
      var $1984=$cy18;
      var $1985=$quotient_too_large;
      var $1986=$1985 | $1984;
      $quotient_too_large=$1986;
      var $1987=$2;
      var $1988=$4;
      var $1989=$tp;
      var $1990=$in;
      var $1991=___gmpn_sub_n($1987, $1988, $1989, $1990);
      $cy18=$1991;
      var $1992=$2;
      var $1993=$in;
      var $1994=(($1992+($1993<<2))|0);
      var $1995=$2;
      var $1996=$in;
      var $1997=(($1995+($1996<<2))|0);
      var $1998=$rn;
      var $1999=$cy18;
      var $2000=___gmpn_sub_1($1994, $1997, $1998, $1999);
      $cy18=$2000;
      var $2001=$cy18;
      var $2002=$quotient_too_large;
      var $2003=$2002 | $2001;
      $quotient_too_large=$2003;
      label = 388; break;
    case 388: 
      var $2005=$quotient_too_large;
      var $2006=(($2005)|0)!=0;
      if ($2006) { label = 389; break; } else { label = 395; break; }
    case 389: 
      label = 390; break;
    case 390: 
      var $2009=$1;
      $__p88=$2009;
      label = 391; break;
    case 391: 
      var $2011=$__p88;
      var $2012=(($2011+4)|0);
      $__p88=$2012;
      var $2013=HEAP32[(($2011)>>2)];
      var $2014=((($2013)-(1))|0);
      HEAP32[(($2011)>>2)]=$2014;
      var $2015=(($2013)|0)==0;
      if ($2015) { label = 392; break; } else { label = 393; break; }
    case 392: 
      label = 391; break;
    case 393: 
      label = 394; break;
    case 394: 
      var $2019=$2;
      var $2020=$2;
      var $2021=$6;
      var $2022=$7;
      var $2023=___gmpn_add_n($2019, $2020, $2021, $2022);
      label = 395; break;
    case 395: 
      label = 396; break;
    case 396: 
      var $2026=HEAP32[(($__tmp_marker1)>>2)];
      var $2027=(($2026)|0)!=0;
      if ($2027) { label = 397; break; } else { label = 398; break; }
    case 397: 
      var $2029=HEAP32[(($__tmp_marker1)>>2)];
      ___gmp_tmp_reentrant_free($2029);
      label = 398; break;
    case 398: 
      label = 399; break;
    case 399: 
      label = 400; break;
    case 400: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_tdiv_qr["X"]=1;

function ___gmp_extract_double($rp, $d) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $exp;
      var $sc;
      var $manh;
      var $manl;
      var $__dst;
      var $__n;
      var $x=__stackBase__;
      $2=$rp;
      $3=$d;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $6=$3;
      var $7=$6 == 0;
      if ($7) { label = 5; break; } else { label = 13; break; }
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $12=$2;
      $__dst=$12;
      $__n=3;
      label = 9; break;
    case 9: 
      var $14=$__dst;
      var $15=(($14+4)|0);
      $__dst=$15;
      HEAP32[(($14)>>2)]=0;
      label = 10; break;
    case 10: 
      var $17=$__n;
      var $18=((($17)-(1))|0);
      $__n=$18;
      var $19=(($18)|0)!=0;
      if ($19) { label = 9; break; } else { label = 11; break; }
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 22; break;
    case 13: 
      var $23=$3;
      var $24=$x;
      (HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[(($24)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($24)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $25=$x;
      var $26=$25;
      var $27=(($26+4)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 >>> 20;
      var $31=$30 & 2047;
      $exp=$31;
      var $32=$x;
      var $33=$32;
      var $34=(($33+4)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 & 1048575;
      var $38=$37 << 11;
      var $39=-2147483648 | $38;
      var $40=$x;
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 >>> 21;
      var $44=$39 | $43;
      $manh=$44;
      var $45=$x;
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 << 11;
      $manl=$48;
      var $49=$exp;
      var $50=(($49)|0)==0;
      if ($50) { label = 14; break; } else { label = 18; break; }
    case 14: 
      $exp=1;
      label = 15; break;
    case 15: 
      var $53=$manh;
      var $54=$53 << 1;
      var $55=$manl;
      var $56=$55 >>> 31;
      var $57=$54 | $56;
      $manh=$57;
      var $58=$manl;
      var $59=$58 << 1;
      $manl=$59;
      var $60=$exp;
      var $61=((($60)-(1))|0);
      $exp=$61;
      label = 16; break;
    case 16: 
      var $63=$manh;
      var $64=$63 & -2147483648;
      var $65=(($64)|0)==0;
      if ($65) { label = 15; break; } else { label = 17; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $68=$exp;
      var $69=((($68)-(1022))|0);
      $exp=$69;
      var $70=$exp;
      var $71=((($70)+(2048))|0);
      var $72=((($71)>>>0))%(32);
      $sc=$72;
      var $73=$exp;
      var $74=((($73)+(2048))|0);
      var $75=((((($74)|0))/(32))&-1);
      var $76=((($75)-(64))|0);
      var $77=((($76)+(1))|0);
      $exp=$77;
      var $78=$sc;
      var $79=(($78)|0)!=0;
      if ($79) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $81=$manh;
      var $82=$sc;
      var $83=(((32)-($82))|0);
      var $84=$81 >>> (($83)>>>0);
      var $85=$2;
      var $86=(($85+8)|0);
      HEAP32[(($86)>>2)]=$84;
      var $87=$manh;
      var $88=$sc;
      var $89=$87 << $88;
      var $90=$manl;
      var $91=$sc;
      var $92=(((32)-($91))|0);
      var $93=$90 >>> (($92)>>>0);
      var $94=$89 | $93;
      var $95=$2;
      var $96=(($95+4)|0);
      HEAP32[(($96)>>2)]=$94;
      var $97=$manl;
      var $98=$sc;
      var $99=$97 << $98;
      var $100=$2;
      var $101=(($100)|0);
      HEAP32[(($101)>>2)]=$99;
      label = 21; break;
    case 20: 
      var $103=$manh;
      var $104=$2;
      var $105=(($104+8)|0);
      HEAP32[(($105)>>2)]=$103;
      var $106=$manl;
      var $107=$2;
      var $108=(($107+4)|0);
      HEAP32[(($108)>>2)]=$106;
      var $109=$2;
      var $110=(($109)|0);
      HEAP32[(($110)>>2)]=0;
      var $111=$exp;
      var $112=((($111)-(1))|0);
      $exp=$112;
      label = 21; break;
    case 21: 
      var $114=$exp;
      $1=$114;
      label = 22; break;
    case 22: 
      var $116=$1;
      STACKTOP = __stackBase__;
      return $116;
    default: assert(0, "bad label: " + label);
  }

}
___gmp_extract_double["X"]=1;

function ___gmp_assert_header($filename, $linenum) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$filename;
      $2=$linenum;
      var $3=$1;
      var $4=(($3)|0)!=0;
      if ($4) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP8[($7)];
      var $9=(($8 << 24) >> 24);
      var $10=(($9)|0)!=0;
      if ($10) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $12=HEAP32[((_stderr)>>2)];
      var $13=$1;
      var $14=_fprintf($12, ((5243464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
      var $15=$2;
      var $16=(($15)|0)!=-1;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=HEAP32[((_stderr)>>2)];
      var $19=$2;
      var $20=_fprintf($18, ((5243824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$19,tempInt));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmp_assert_fail($filename, $linenum, $expr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $3;
  $1=$filename;
  $2=$linenum;
  $3=$expr;
  var $4=$1;
  var $5=$2;
  ___gmp_assert_header($4, $5);
  var $6=HEAP32[((_stderr)>>2)];
  var $7=$3;
  var $8=_fprintf($6, ((5243504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
  _abort();
  throw "Reached an unreachable!"
  STACKTOP = __stackBase__;
  return;
}


function ___gmp_exception($error_bit) {
  var label = 0;


  var $1;
  $1=$error_bit;
  var $2=$1;
  var $3=HEAP32[((5249688)>>2)];
  var $4=$3 | $2;
  HEAP32[((5249688)>>2)]=$4;
  var $5=HEAP32[((5249828)>>2)];
  var $6=(((10)/((($5)|0)))&-1);
  HEAP32[((5249680)>>2)]=$6;
  _abort();
  throw "Reached an unreachable!"

  return;
}


function ___gmp_divide_by_zero() {
  var label = 0;


  ___gmp_exception(2);
  throw "Reached an unreachable!"

  return;
}


function ___gmp_invalid_operation() {
  var label = 0;


  var $1=_raise(8);
  _abort();
  throw "Reached an unreachable!"

  return;
}


function ___gmpf_neg($r, $u) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $size;
      var $prec;
      var $asize;
      var $rp;
      var $up;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$r;
      $2=$u;
      var $3=$2;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(((-$5))|0);
      $size=$6;
      var $7=$1;
      var $8=$2;
      var $9=(($7)|0)!=(($8)|0);
      if ($9) { label = 3; break; } else { label = 29; break; }
    case 3: 
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)+(1))|0);
      $prec=$14;
      var $15=$size;
      var $16=(($15)|0) >= 0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$size;
      var $23 = $18;label = 6; break;
    case 5: 
      var $20=$size;
      var $21=(((-$20))|0);
      var $23 = $21;label = 6; break;
    case 6: 
      var $23;
      $asize=$23;
      var $24=$1;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      $rp=$26;
      var $27=$2;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      $up=$29;
      var $30=$asize;
      var $31=$prec;
      var $32=(($30)|0) > (($31)|0);
      if ($32) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $34=$asize;
      var $35=$prec;
      var $36=((($34)-($35))|0);
      var $37=$up;
      var $38=(($37+($36<<2))|0);
      $up=$38;
      var $39=$prec;
      $asize=$39;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $49=$asize;
      var $50=(($49)|0)!=0;
      if ($50) { label = 17; break; } else { label = 23; break; }
    case 17: 
      var $52=$asize;
      var $53=((($52)-(1))|0);
      $__n=$53;
      var $54=$rp;
      $__dst=$54;
      var $55=$up;
      $__src=$55;
      var $56=$__src;
      var $57=(($56+4)|0);
      $__src=$57;
      var $58=HEAP32[(($56)>>2)];
      $__x=$58;
      var $59=$__n;
      var $60=(($59)|0)!=0;
      if ($60) { label = 18; break; } else { label = 22; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $63=$__x;
      var $64=$__dst;
      var $65=(($64+4)|0);
      $__dst=$65;
      HEAP32[(($64)>>2)]=$63;
      var $66=$__src;
      var $67=(($66+4)|0);
      $__src=$67;
      var $68=HEAP32[(($66)>>2)];
      $__x=$68;
      label = 20; break;
    case 20: 
      var $70=$__n;
      var $71=((($70)-(1))|0);
      $__n=$71;
      var $72=(($71)|0)!=0;
      if ($72) { label = 19; break; } else { label = 21; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $75=$__x;
      var $76=$__dst;
      var $77=(($76+4)|0);
      $__dst=$77;
      HEAP32[(($76)>>2)]=$75;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $81=$2;
      var $82=(($81+8)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$1;
      var $85=(($84+8)|0);
      HEAP32[(($85)>>2)]=$83;
      var $86=$size;
      var $87=(($86)|0) >= 0;
      if ($87) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $89=$asize;
      var $94 = $89;label = 28; break;
    case 27: 
      var $91=$asize;
      var $92=(((-$91))|0);
      var $94 = $92;label = 28; break;
    case 28: 
      var $94;
      $size=$94;
      label = 29; break;
    case 29: 
      var $96=$size;
      var $97=$1;
      var $98=(($97+4)|0);
      HEAP32[(($98)>>2)]=$96;

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_neg["X"]=1;

function ___gmpf_set_ui($f, $val) {
  var label = 0;


  var $1;
  var $2;
  var $size;
  $1=$f;
  $2=$val;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=$3;
  var $8=$2;
  var $9=(($8)|0)!=0;
  var $10=(($9)&1);
  $size=$10;
  var $11=$size;
  var $12=$1;
  var $13=(($12+4)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=$1;
  var $15=(($14+8)|0);
  HEAP32[(($15)>>2)]=$11;

  return;
}


function ___gmpf_add_ui($sum, $u, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $up;
      var $sump;
      var $usize;
      var $sumsize;
      var $prec;
      var $uexp;
      var $u_negated=__stackBase__;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__n1;
      var $__dst2;
      var $__src3;
      var $__x4;
      var $__dst5;
      var $__n6;
      var $cy_limb;
      var $__n7;
      var $__dst8;
      var $__src9;
      var $__x10;
      var $__n11;
      var $__dst12;
      var $__src13;
      var $__x14;
      var $__dst15;
      var $__n16;
      $1=$sum;
      $2=$u;
      $3=$v;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      $up=$6;
      var $7=$1;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      $sump=$9;
      var $10=$1;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      $prec=$12;
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      $uexp=$15;
      var $16=$2;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      $usize=$18;
      var $19=$usize;
      var $20=(($19)|0) <= 0;
      if ($20) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $22=$usize;
      var $23=(($22)|0)==0;
      if ($23) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=$1;
      var $26=$3;
      ___gmpf_set_ui($25, $26);
      label = 108; break;
    case 5: 
      var $28=$usize;
      var $29=(((-$28))|0);
      var $30=(($u_negated+4)|0);
      HEAP32[(($30)>>2)]=$29;
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($u_negated+8)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=$2;
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($u_negated+12)|0);
      HEAP32[(($38)>>2)]=$37;
      var $39=$1;
      var $40=$3;
      ___gmpf_sub_ui($39, $u_negated, $40);
      var $41=$1;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(((-$43))|0);
      var $45=$1;
      var $46=(($45+4)|0);
      HEAP32[(($46)>>2)]=$44;
      label = 108; break;
    case 6: 
      var $48=$3;
      var $49=(($48)|0)==0;
      if ($49) { label = 7; break; } else { label = 31; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $52=$2;
      var $53=$1;
      var $54=(($52)|0)!=(($53)|0);
      if ($54) { label = 9; break; } else { label = 30; break; }
    case 9: 
      var $56=$usize;
      var $57=$prec;
      var $58=((($57)+(1))|0);
      var $59=(($56)|0) < (($58)|0);
      if ($59) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $61=$usize;
      var $66 = $61;label = 12; break;
    case 11: 
      var $63=$prec;
      var $64=((($63)+(1))|0);
      var $66 = $64;label = 12; break;
    case 12: 
      var $66;
      $sumsize=$66;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $75=$sumsize;
      var $76=(($75)|0)!=0;
      if ($76) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $78=$sumsize;
      var $79=((($78)-(1))|0);
      $__n=$79;
      var $80=$1;
      var $81=(($80+12)|0);
      var $82=HEAP32[(($81)>>2)];
      $__dst=$82;
      var $83=$up;
      var $84=$usize;
      var $85=(($83+($84<<2))|0);
      var $86=$sumsize;
      var $87=(((-$86))|0);
      var $88=(($85+($87<<2))|0);
      $__src=$88;
      var $89=$__src;
      var $90=(($89+4)|0);
      $__src=$90;
      var $91=HEAP32[(($89)>>2)];
      $__x=$91;
      var $92=$__n;
      var $93=(($92)|0)!=0;
      if ($93) { label = 22; break; } else { label = 26; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $96=$__x;
      var $97=$__dst;
      var $98=(($97+4)|0);
      $__dst=$98;
      HEAP32[(($97)>>2)]=$96;
      var $99=$__src;
      var $100=(($99+4)|0);
      $__src=$100;
      var $101=HEAP32[(($99)>>2)];
      $__x=$101;
      label = 24; break;
    case 24: 
      var $103=$__n;
      var $104=((($103)-(1))|0);
      $__n=$104;
      var $105=(($104)|0)!=0;
      if ($105) { label = 23; break; } else { label = 25; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $108=$__x;
      var $109=$__dst;
      var $110=(($109+4)|0);
      $__dst=$110;
      HEAP32[(($109)>>2)]=$108;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $114=$sumsize;
      var $115=$1;
      var $116=(($115+4)|0);
      HEAP32[(($116)>>2)]=$114;
      var $117=$2;
      var $118=(($117+8)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$1;
      var $121=(($120+8)|0);
      HEAP32[(($121)>>2)]=$119;
      label = 30; break;
    case 30: 
      label = 108; break;
    case 31: 
      var $124=$uexp;
      var $125=(($124)|0) > 0;
      if ($125) { label = 32; break; } else { label = 78; break; }
    case 32: 
      var $127=$uexp;
      var $128=$prec;
      var $129=(($127)|0) > (($128)|0);
      if ($129) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 8; break;
    case 34: 
      var $132=$uexp;
      var $133=$usize;
      var $134=(($132)|0) > (($133)|0);
      if ($134) { label = 35; break; } else { label = 58; break; }
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $141=$usize;
      var $142=(($141)|0)!=0;
      if ($142) { label = 41; break; } else { label = 47; break; }
    case 41: 
      var $144=$usize;
      var $145=((($144)-(1))|0);
      $__n1=$145;
      var $146=$sump;
      var $147=$uexp;
      var $148=(($146+($147<<2))|0);
      var $149=$usize;
      var $150=(((-$149))|0);
      var $151=(($148+($150<<2))|0);
      var $152=$__n1;
      var $153=(($151+($152<<2))|0);
      $__dst2=$153;
      var $154=$up;
      var $155=$__n1;
      var $156=(($154+($155<<2))|0);
      $__src3=$156;
      var $157=$__src3;
      var $158=((($157)-(4))|0);
      $__src3=$158;
      var $159=HEAP32[(($157)>>2)];
      $__x4=$159;
      var $160=$__n1;
      var $161=(($160)|0)!=0;
      if ($161) { label = 42; break; } else { label = 46; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $164=$__x4;
      var $165=$__dst2;
      var $166=((($165)-(4))|0);
      $__dst2=$166;
      HEAP32[(($165)>>2)]=$164;
      var $167=$__src3;
      var $168=((($167)-(4))|0);
      $__src3=$168;
      var $169=HEAP32[(($167)>>2)];
      $__x4=$169;
      label = 44; break;
    case 44: 
      var $171=$__n1;
      var $172=((($171)-(1))|0);
      $__n1=$172;
      var $173=(($172)|0)!=0;
      if ($173) { label = 43; break; } else { label = 45; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $176=$__x4;
      var $177=$__dst2;
      var $178=((($177)-(4))|0);
      $__dst2=$178;
      HEAP32[(($177)>>2)]=$176;
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $181=$3;
      var $182=$sump;
      var $183=(($182)|0);
      HEAP32[(($183)>>2)]=$181;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $187=$uexp;
      var $188=$usize;
      var $189=((($187)-($188))|0);
      var $190=((($189)-(1))|0);
      var $191=(($190)|0)!=0;
      if ($191) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $193=$sump;
      var $194=(($193+4)|0);
      $__dst5=$194;
      var $195=$uexp;
      var $196=$usize;
      var $197=((($195)-($196))|0);
      var $198=((($197)-(1))|0);
      $__n6=$198;
      label = 53; break;
    case 53: 
      var $200=$__dst5;
      var $201=(($200+4)|0);
      $__dst5=$201;
      HEAP32[(($200)>>2)]=0;
      label = 54; break;
    case 54: 
      var $203=$__n6;
      var $204=((($203)-(1))|0);
      $__n6=$204;
      var $205=(($204)|0)!=0;
      if ($205) { label = 53; break; } else { label = 55; break; }
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $209=$uexp;
      var $210=$1;
      var $211=(($210+4)|0);
      HEAP32[(($211)>>2)]=$209;
      var $212=$uexp;
      var $213=$1;
      var $214=(($213+8)|0);
      HEAP32[(($214)>>2)]=$212;
      label = 76; break;
    case 58: 
      var $216=$usize;
      var $217=$prec;
      var $218=(($216)|0) > (($217)|0);
      if ($218) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $220=$usize;
      var $221=$prec;
      var $222=((($220)-($221))|0);
      var $223=$up;
      var $224=(($223+($222<<2))|0);
      $up=$224;
      var $225=$usize;
      var $226=$prec;
      var $227=((($225)-($226))|0);
      var $228=$usize;
      var $229=((($228)-($227))|0);
      $usize=$229;
      label = 60; break;
    case 60: 
      var $231=$sump;
      var $232=$up;
      var $233=(($231)|0)!=(($232)|0);
      if ($233) { label = 61; break; } else { label = 75; break; }
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $240=$usize;
      var $241=$uexp;
      var $242=((($240)-($241))|0);
      var $243=(($242)|0)!=0;
      if ($243) { label = 67; break; } else { label = 73; break; }
    case 67: 
      var $245=$usize;
      var $246=$uexp;
      var $247=((($245)-($246))|0);
      var $248=((($247)-(1))|0);
      $__n7=$248;
      var $249=$sump;
      $__dst8=$249;
      var $250=$up;
      $__src9=$250;
      var $251=$__src9;
      var $252=(($251+4)|0);
      $__src9=$252;
      var $253=HEAP32[(($251)>>2)];
      $__x10=$253;
      var $254=$__n7;
      var $255=(($254)|0)!=0;
      if ($255) { label = 68; break; } else { label = 72; break; }
    case 68: 
      label = 69; break;
    case 69: 
      var $258=$__x10;
      var $259=$__dst8;
      var $260=(($259+4)|0);
      $__dst8=$260;
      HEAP32[(($259)>>2)]=$258;
      var $261=$__src9;
      var $262=(($261+4)|0);
      $__src9=$262;
      var $263=HEAP32[(($261)>>2)];
      $__x10=$263;
      label = 70; break;
    case 70: 
      var $265=$__n7;
      var $266=((($265)-(1))|0);
      $__n7=$266;
      var $267=(($266)|0)!=0;
      if ($267) { label = 69; break; } else { label = 71; break; }
    case 71: 
      label = 72; break;
    case 72: 
      var $270=$__x10;
      var $271=$__dst8;
      var $272=(($271+4)|0);
      $__dst8=$272;
      HEAP32[(($271)>>2)]=$270;
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $276=$sump;
      var $277=$usize;
      var $278=(($276+($277<<2))|0);
      var $279=$uexp;
      var $280=(((-$279))|0);
      var $281=(($278+($280<<2))|0);
      var $282=$up;
      var $283=$usize;
      var $284=(($282+($283<<2))|0);
      var $285=$uexp;
      var $286=(((-$285))|0);
      var $287=(($284+($286<<2))|0);
      var $288=$uexp;
      var $289=$3;
      var $290=___gmpn_add_1($281, $287, $288, $289);
      $cy_limb=$290;
      var $291=$cy_limb;
      var $292=$usize;
      var $293=$sump;
      var $294=(($293+($292<<2))|0);
      HEAP32[(($294)>>2)]=$291;
      var $295=$usize;
      var $296=$cy_limb;
      var $297=((($295)+($296))|0);
      var $298=$1;
      var $299=(($298+4)|0);
      HEAP32[(($299)>>2)]=$297;
      var $300=$uexp;
      var $301=$cy_limb;
      var $302=((($300)+($301))|0);
      var $303=$1;
      var $304=(($303+8)|0);
      HEAP32[(($304)>>2)]=$302;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 108; break;
    case 78: 
      var $308=$uexp;
      var $309=(((-$308))|0);
      var $310=$prec;
      var $311=(($309)|0) >= (($310)|0);
      if ($311) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $313=$3;
      var $314=$sump;
      var $315=(($314)|0);
      HEAP32[(($315)>>2)]=$313;
      var $316=$1;
      var $317=(($316+4)|0);
      HEAP32[(($317)>>2)]=1;
      var $318=$1;
      var $319=(($318+8)|0);
      HEAP32[(($319)>>2)]=1;
      label = 107; break;
    case 80: 
      var $321=$usize;
      var $322=$uexp;
      var $323=(((-$322))|0);
      var $324=((($321)+($323))|0);
      var $325=((($324)+(1))|0);
      var $326=$prec;
      var $327=(($325)|0) > (($326)|0);
      if ($327) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $329=$usize;
      var $330=$uexp;
      var $331=(((-$330))|0);
      var $332=((($329)+($331))|0);
      var $333=((($332)+(1))|0);
      var $334=$prec;
      var $335=((($333)-($334))|0);
      var $336=$up;
      var $337=(($336+($335<<2))|0);
      $up=$337;
      var $338=$usize;
      var $339=$uexp;
      var $340=(((-$339))|0);
      var $341=((($338)+($340))|0);
      var $342=((($341)+(1))|0);
      var $343=$prec;
      var $344=((($342)-($343))|0);
      var $345=$usize;
      var $346=((($345)-($344))|0);
      $usize=$346;
      label = 82; break;
    case 82: 
      var $348=$sump;
      var $349=$up;
      var $350=(($348)|0)!=(($349)|0);
      if ($350) { label = 83; break; } else { label = 97; break; }
    case 83: 
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $357=$usize;
      var $358=(($357)|0)!=0;
      if ($358) { label = 89; break; } else { label = 95; break; }
    case 89: 
      var $360=$usize;
      var $361=((($360)-(1))|0);
      $__n11=$361;
      var $362=$sump;
      $__dst12=$362;
      var $363=$up;
      $__src13=$363;
      var $364=$__src13;
      var $365=(($364+4)|0);
      $__src13=$365;
      var $366=HEAP32[(($364)>>2)];
      $__x14=$366;
      var $367=$__n11;
      var $368=(($367)|0)!=0;
      if ($368) { label = 90; break; } else { label = 94; break; }
    case 90: 
      label = 91; break;
    case 91: 
      var $371=$__x14;
      var $372=$__dst12;
      var $373=(($372+4)|0);
      $__dst12=$373;
      HEAP32[(($372)>>2)]=$371;
      var $374=$__src13;
      var $375=(($374+4)|0);
      $__src13=$375;
      var $376=HEAP32[(($374)>>2)];
      $__x14=$376;
      label = 92; break;
    case 92: 
      var $378=$__n11;
      var $379=((($378)-(1))|0);
      $__n11=$379;
      var $380=(($379)|0)!=0;
      if ($380) { label = 91; break; } else { label = 93; break; }
    case 93: 
      label = 94; break;
    case 94: 
      var $383=$__x14;
      var $384=$__dst12;
      var $385=(($384+4)|0);
      $__dst12=$385;
      HEAP32[(($384)>>2)]=$383;
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      var $392=$uexp;
      var $393=(((-$392))|0);
      var $394=(($393)|0)!=0;
      if ($394) { label = 101; break; } else { label = 105; break; }
    case 101: 
      var $396=$sump;
      var $397=$usize;
      var $398=(($396+($397<<2))|0);
      $__dst15=$398;
      var $399=$uexp;
      var $400=(((-$399))|0);
      $__n16=$400;
      label = 102; break;
    case 102: 
      var $402=$__dst15;
      var $403=(($402+4)|0);
      $__dst15=$403;
      HEAP32[(($402)>>2)]=0;
      label = 103; break;
    case 103: 
      var $405=$__n16;
      var $406=((($405)-(1))|0);
      $__n16=$406;
      var $407=(($406)|0)!=0;
      if ($407) { label = 102; break; } else { label = 104; break; }
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $411=$3;
      var $412=$usize;
      var $413=$uexp;
      var $414=(((-$413))|0);
      var $415=((($412)+($414))|0);
      var $416=$sump;
      var $417=(($416+($415<<2))|0);
      HEAP32[(($417)>>2)]=$411;
      var $418=$usize;
      var $419=$uexp;
      var $420=(((-$419))|0);
      var $421=((($418)+($420))|0);
      var $422=((($421)+(1))|0);
      var $423=$1;
      var $424=(($423+4)|0);
      HEAP32[(($424)>>2)]=$422;
      var $425=$1;
      var $426=(($425+8)|0);
      HEAP32[(($426)>>2)]=1;
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpf_add_ui["X"]=1;

function ___gmpn_addmul_1($rp, $up, $n, $vl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $cl;
      var $hpl;
      var $lpl;
      var $rl;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$vl;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      $cl=0;
      label = 7; break;
    case 7: 
      var $10=$2;
      var $11=(($10+4)|0);
      $2=$11;
      var $12=HEAP32[(($10)>>2)];
      $ul=$12;
      label = 8; break;
    case 8: 
      var $14=$ul;
      $__u=$14;
      var $15=$4;
      $__v=$15;
      var $16=$__u;
      var $17=$16 & 65535;
      $__ul=$17;
      var $18=$__u;
      var $19=$18 >>> 16;
      $__uh=$19;
      var $20=$__v;
      var $21=$20 & 65535;
      $__vl=$21;
      var $22=$__v;
      var $23=$22 >>> 16;
      $__vh=$23;
      var $24=$__ul;
      var $25=$__vl;
      var $26=Math.imul($24,$25);
      $__x0=$26;
      var $27=$__ul;
      var $28=$__vh;
      var $29=Math.imul($27,$28);
      $__x1=$29;
      var $30=$__uh;
      var $31=$__vl;
      var $32=Math.imul($30,$31);
      $__x2=$32;
      var $33=$__uh;
      var $34=$__vh;
      var $35=Math.imul($33,$34);
      $__x3=$35;
      var $36=$__x0;
      var $37=$36 >>> 16;
      var $38=$__x1;
      var $39=((($38)+($37))|0);
      $__x1=$39;
      var $40=$__x2;
      var $41=$__x1;
      var $42=((($41)+($40))|0);
      $__x1=$42;
      var $43=$__x1;
      var $44=$__x2;
      var $45=(($43)>>>0) < (($44)>>>0);
      if ($45) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $47=$__x3;
      var $48=((($47)+(65536))|0);
      $__x3=$48;
      label = 10; break;
    case 10: 
      var $50=$__x3;
      var $51=$__x1;
      var $52=$51 >>> 16;
      var $53=((($50)+($52))|0);
      $hpl=$53;
      var $54=$__x1;
      var $55=$54 << 16;
      var $56=$__x0;
      var $57=$56 & 65535;
      var $58=((($55)+($57))|0);
      $lpl=$58;
      label = 11; break;
    case 11: 
      var $60=$cl;
      var $61=$lpl;
      var $62=((($61)+($60))|0);
      $lpl=$62;
      var $63=$lpl;
      var $64=$cl;
      var $65=(($63)>>>0) < (($64)>>>0);
      var $66=(($65)&1);
      var $67=$hpl;
      var $68=((($66)+($67))|0);
      $cl=$68;
      var $69=$1;
      var $70=HEAP32[(($69)>>2)];
      $rl=$70;
      var $71=$rl;
      var $72=$lpl;
      var $73=((($71)+($72))|0);
      $lpl=$73;
      var $74=$lpl;
      var $75=$rl;
      var $76=(($74)>>>0) < (($75)>>>0);
      var $77=(($76)&1);
      var $78=$cl;
      var $79=((($78)+($77))|0);
      $cl=$79;
      var $80=$lpl;
      var $81=$1;
      var $82=(($81+4)|0);
      $1=$82;
      HEAP32[(($81)>>2)]=$80;
      label = 12; break;
    case 12: 
      var $84=$3;
      var $85=((($84)-(1))|0);
      $3=$85;
      var $86=(($85)|0)!=0;
      if ($86) { label = 7; break; } else { label = 13; break; }
    case 13: 
      var $88=$cl;

      return $88;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_addmul_1["X"]=1;

function ___gmpn_bdiv_dbm1c($qp, $ap, $n, $bd, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $a;
      var $p0;
      var $p1;
      var $cy;
      var $i;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $1=$qp;
      $2=$ap;
      $3=$n;
      $4=$bd;
      $5=$h;
      $i=0;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=$3;
      var $9=(($7)|0) < (($8)|0);
      if ($9) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $11=$i;
      var $12=$2;
      var $13=(($12+($11<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      $a=$14;
      label = 5; break;
    case 5: 
      var $16=$a;
      $__u=$16;
      var $17=$4;
      var $18=$17 << 0;
      $__v=$18;
      var $19=$__u;
      var $20=$19 & 65535;
      $__ul=$20;
      var $21=$__u;
      var $22=$21 >>> 16;
      $__uh=$22;
      var $23=$__v;
      var $24=$23 & 65535;
      $__vl=$24;
      var $25=$__v;
      var $26=$25 >>> 16;
      $__vh=$26;
      var $27=$__ul;
      var $28=$__vl;
      var $29=Math.imul($27,$28);
      $__x0=$29;
      var $30=$__ul;
      var $31=$__vh;
      var $32=Math.imul($30,$31);
      $__x1=$32;
      var $33=$__uh;
      var $34=$__vl;
      var $35=Math.imul($33,$34);
      $__x2=$35;
      var $36=$__uh;
      var $37=$__vh;
      var $38=Math.imul($36,$37);
      $__x3=$38;
      var $39=$__x0;
      var $40=$39 >>> 16;
      var $41=$__x1;
      var $42=((($41)+($40))|0);
      $__x1=$42;
      var $43=$__x2;
      var $44=$__x1;
      var $45=((($44)+($43))|0);
      $__x1=$45;
      var $46=$__x1;
      var $47=$__x2;
      var $48=(($46)>>>0) < (($47)>>>0);
      if ($48) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $50=$__x3;
      var $51=((($50)+(65536))|0);
      $__x3=$51;
      label = 7; break;
    case 7: 
      var $53=$__x3;
      var $54=$__x1;
      var $55=$54 >>> 16;
      var $56=((($53)+($55))|0);
      $p1=$56;
      var $57=$__x1;
      var $58=$57 << 16;
      var $59=$__x0;
      var $60=$59 & 65535;
      var $61=((($58)+($60))|0);
      $p0=$61;
      label = 8; break;
    case 8: 
      var $63=$p0;
      var $64=$63 >>> 0;
      $p0=$64;
      var $65=$5;
      var $66=$p0;
      var $67=(($65)>>>0) < (($66)>>>0);
      var $68=(($67)&1);
      $cy=$68;
      var $69=$5;
      var $70=$p0;
      var $71=((($69)-($70))|0);
      $5=$71;
      var $72=$5;
      var $73=$i;
      var $74=$1;
      var $75=(($74+($73<<2))|0);
      HEAP32[(($75)>>2)]=$72;
      var $76=$5;
      var $77=$p1;
      var $78=((($76)-($77))|0);
      var $79=$cy;
      var $80=((($78)-($79))|0);
      $5=$80;
      label = 9; break;
    case 9: 
      var $82=$i;
      var $83=((($82)+(1))|0);
      $i=$83;
      label = 3; break;
    case 10: 
      var $85=$5;

      return $85;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_bdiv_dbm1c["X"]=1;

function ___gmpf_sub_ui($sum, $u, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $vv=__stackBase__;
      var $vl=(__stackBase__)+(16);
      $1=$sum;
      $2=$u;
      $3=$v;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$1;
      var $8=$2;
      ___gmpf_set($7, $8);
      label = 5; break;
    case 4: 
      var $10=$3;
      HEAP32[(($vl)>>2)]=$10;
      var $11=(($vv+4)|0);
      HEAP32[(($11)>>2)]=1;
      var $12=(($vv+12)|0);
      HEAP32[(($12)>>2)]=$vl;
      var $13=(($vv+8)|0);
      HEAP32[(($13)>>2)]=1;
      var $14=$1;
      var $15=$2;
      ___gmpf_sub($14, $15, $vv);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_bdiv_q($qp, $np, $nn, $dp, $dn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $di;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__n1;
      var $__inv;
      var $__n2;
      var $__dst3;
      var $__src4;
      var $__x5;
      var $__n6;
      var $__inv7;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$tp;
      var $7=$5;
      var $8=(($7)|0) >= 180;
      if ($8) { label = 27; break; } else { label = 3; break; }
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $18=$3;
      var $19=(($18)|0)!=0;
      if ($19) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $21=$3;
      var $22=((($21)-(1))|0);
      $__n=$22;
      var $23=$6;
      $__dst=$23;
      var $24=$2;
      $__src=$24;
      var $25=$__src;
      var $26=(($25+4)|0);
      $__src=$26;
      var $27=HEAP32[(($25)>>2)];
      $__x=$27;
      var $28=$__n;
      var $29=(($28)|0)!=0;
      if ($29) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $32=$__x;
      var $33=$__dst;
      var $34=(($33+4)|0);
      $__dst=$34;
      HEAP32[(($33)>>2)]=$32;
      var $35=$__src;
      var $36=(($35+4)|0);
      $__src=$36;
      var $37=HEAP32[(($35)>>2)];
      $__x=$37;
      label = 15; break;
    case 15: 
      var $39=$__n;
      var $40=((($39)-(1))|0);
      $__n=$40;
      var $41=(($40)|0)!=0;
      if ($41) { label = 14; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $44=$__x;
      var $45=$__dst;
      var $46=(($45+4)|0);
      $__dst=$46;
      HEAP32[(($45)>>2)]=$44;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $51=$4;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      $__n1=$53;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $56=$__n1;
      var $57=Math.floor(((($56)>>>0))/(2));
      var $58=$57 & 127;
      var $59=((5249696+$58)|0);
      var $60=HEAP8[($59)];
      var $61=(($60)&255);
      $__inv=$61;
      var $62=$__inv;
      var $63=($62<<1);
      var $64=$__inv;
      var $65=$__inv;
      var $66=Math.imul($64,$65);
      var $67=$__n1;
      var $68=Math.imul($66,$67);
      var $69=((($63)-($68))|0);
      $__inv=$69;
      var $70=$__inv;
      var $71=($70<<1);
      var $72=$__inv;
      var $73=$__inv;
      var $74=Math.imul($72,$73);
      var $75=$__n1;
      var $76=Math.imul($74,$75);
      var $77=((($71)-($76))|0);
      $__inv=$77;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $80=$__inv;
      $di=$80;
      label = 26; break;
    case 26: 
      var $82=$di;
      var $83=(((-$82))|0);
      $di=$83;
      var $84=$1;
      var $85=$6;
      var $86=$3;
      var $87=$4;
      var $88=$5;
      var $89=$di;
      ___gmpn_sbpi1_bdiv_q($84, $85, $86, $87, $88, $89);
      label = 54; break;
    case 27: 
      var $91=$5;
      var $92=(($91)|0) >= 2000;
      if ($92) { label = 52; break; } else { label = 28; break; }
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $102=$3;
      var $103=(($102)|0)!=0;
      if ($103) { label = 37; break; } else { label = 43; break; }
    case 37: 
      var $105=$3;
      var $106=((($105)-(1))|0);
      $__n2=$106;
      var $107=$6;
      $__dst3=$107;
      var $108=$2;
      $__src4=$108;
      var $109=$__src4;
      var $110=(($109+4)|0);
      $__src4=$110;
      var $111=HEAP32[(($109)>>2)];
      $__x5=$111;
      var $112=$__n2;
      var $113=(($112)|0)!=0;
      if ($113) { label = 38; break; } else { label = 42; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $116=$__x5;
      var $117=$__dst3;
      var $118=(($117+4)|0);
      $__dst3=$118;
      HEAP32[(($117)>>2)]=$116;
      var $119=$__src4;
      var $120=(($119+4)|0);
      $__src4=$120;
      var $121=HEAP32[(($119)>>2)];
      $__x5=$121;
      label = 40; break;
    case 40: 
      var $123=$__n2;
      var $124=((($123)-(1))|0);
      $__n2=$124;
      var $125=(($124)|0)!=0;
      if ($125) { label = 39; break; } else { label = 41; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $128=$__x5;
      var $129=$__dst3;
      var $130=(($129+4)|0);
      $__dst3=$130;
      HEAP32[(($129)>>2)]=$128;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $135=$4;
      var $136=(($135)|0);
      var $137=HEAP32[(($136)>>2)];
      $__n6=$137;
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $140=$__n6;
      var $141=Math.floor(((($140)>>>0))/(2));
      var $142=$141 & 127;
      var $143=((5249696+$142)|0);
      var $144=HEAP8[($143)];
      var $145=(($144)&255);
      $__inv7=$145;
      var $146=$__inv7;
      var $147=($146<<1);
      var $148=$__inv7;
      var $149=$__inv7;
      var $150=Math.imul($148,$149);
      var $151=$__n6;
      var $152=Math.imul($150,$151);
      var $153=((($147)-($152))|0);
      $__inv7=$153;
      var $154=$__inv7;
      var $155=($154<<1);
      var $156=$__inv7;
      var $157=$__inv7;
      var $158=Math.imul($156,$157);
      var $159=$__n6;
      var $160=Math.imul($158,$159);
      var $161=((($155)-($160))|0);
      $__inv7=$161;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $164=$__inv7;
      $di=$164;
      label = 51; break;
    case 51: 
      var $166=$di;
      var $167=(((-$166))|0);
      $di=$167;
      var $168=$1;
      var $169=$6;
      var $170=$3;
      var $171=$4;
      var $172=$5;
      var $173=$di;
      ___gmpn_dcpi1_bdiv_q($168, $169, $170, $171, $172, $173);
      label = 53; break;
    case 52: 
      var $175=$1;
      var $176=$2;
      var $177=$3;
      var $178=$4;
      var $179=$5;
      var $180=$6;
      ___gmpn_mu_bdiv_q($175, $176, $177, $178, $179, $180);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_bdiv_q["X"]=1;

function ___gmpn_bdiv_q_itch($nn, $dn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$nn;
      $3=$dn;
      var $4=$3;
      var $5=(($4)|0) >= 2000;
      if ($5) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=$2;
      $1=$7;
      label = 5; break;
    case 4: 
      var $9=$2;
      var $10=$3;
      var $11=___gmpn_mu_bdiv_q_itch($9, $10);
      $1=$11;
      label = 5; break;
    case 5: 
      var $13=$1;

      return $13;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_dcpi1_bdiv_q_n($qp, $np, $dp, $n, $dinv, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $lo;
      var $hi;
      var $cy;
      $1=$qp;
      $2=$np;
      $3=$dp;
      $4=$n;
      $5=$dinv;
      $6=$tp;
      label = 3; break;
    case 3: 
      var $8=$4;
      var $9=(($8)|0) >= 180;
      if ($9) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $11=$4;
      var $12=$11 >> 1;
      $lo=$12;
      var $13=$4;
      var $14=$lo;
      var $15=((($13)-($14))|0);
      $hi=$15;
      var $16=$1;
      var $17=$2;
      var $18=$3;
      var $19=$lo;
      var $20=$5;
      var $21=$6;
      var $22=___gmpn_dcpi1_bdiv_qr_n($16, $17, $18, $19, $20, $21);
      $cy=$22;
      var $23=$6;
      var $24=$1;
      var $25=$3;
      var $26=$hi;
      var $27=(($25+($26<<2))|0);
      var $28=$lo;
      ___gmpn_mullo_n($23, $24, $27, $28);
      var $29=$2;
      var $30=$hi;
      var $31=(($29+($30<<2))|0);
      var $32=$2;
      var $33=$hi;
      var $34=(($32+($33<<2))|0);
      var $35=$6;
      var $36=$lo;
      var $37=___gmpn_sub_n($31, $34, $35, $36);
      var $38=$lo;
      var $39=$hi;
      var $40=(($38)|0) < (($39)|0);
      if ($40) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $42=$2;
      var $43=$lo;
      var $44=(($42+($43<<2))|0);
      var $45=$1;
      var $46=$lo;
      var $47=$lo;
      var $48=$3;
      var $49=(($48+($47<<2))|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=___gmpn_submul_1($44, $45, $46, $50);
      var $52=$cy;
      var $53=((($52)+($51))|0);
      $cy=$53;
      var $54=$cy;
      var $55=$4;
      var $56=((($55)-(1))|0);
      var $57=$2;
      var $58=(($57+($56<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-($54))|0);
      HEAP32[(($58)>>2)]=$60;
      label = 6; break;
    case 6: 
      var $62=$lo;
      var $63=$1;
      var $64=(($63+($62<<2))|0);
      $1=$64;
      var $65=$lo;
      var $66=$2;
      var $67=(($66+($65<<2))|0);
      $2=$67;
      var $68=$lo;
      var $69=$4;
      var $70=((($69)-($68))|0);
      $4=$70;
      label = 3; break;
    case 7: 
      var $72=$1;
      var $73=$2;
      var $74=$4;
      var $75=$3;
      var $76=$4;
      var $77=$5;
      ___gmpn_sbpi1_bdiv_q($72, $73, $74, $75, $76, $77);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_bdiv_q_n["X"]=1;

function ___gmpn_dcpi1_bdiv_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qn;
      var $cy;
      var $tp;
      var $__tmp_marker;
      var $__x;
      var $__p;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      $__tmp_marker=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$5;
      var $14=($13<<2);
      var $15=STACKTOP;STACKTOP = (STACKTOP + $14)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $16=$15;
      $tp=$16;
      var $17=$3;
      $qn=$17;
      var $18=$qn;
      var $19=$5;
      var $20=(($18)|0) > (($19)|0);
      if ($20) { label = 9; break; } else { label = 31; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $23=$5;
      var $24=$qn;
      var $25=((($24)-($23))|0);
      $qn=$25;
      label = 11; break;
    case 11: 
      var $27=$qn;
      var $28=$5;
      var $29=(($27)|0) > (($28)|0);
      if ($29) { label = 10; break; } else { label = 12; break; }
    case 12: 
      var $31=$qn;
      var $32=(($31)|0) >= 50;
      if ($32) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $34=$1;
      var $35=$2;
      var $36=$qn;
      var $37=($36<<1);
      var $38=$4;
      var $39=$qn;
      var $40=$6;
      var $41=___gmpn_sbpi1_bdiv_qr($34, $35, $37, $38, $39, $40);
      $cy=$41;
      label = 15; break;
    case 14: 
      var $43=$1;
      var $44=$2;
      var $45=$4;
      var $46=$qn;
      var $47=$6;
      var $48=$tp;
      var $49=___gmpn_dcpi1_bdiv_qr_n($43, $44, $45, $46, $47, $48);
      $cy=$49;
      label = 15; break;
    case 15: 
      var $51=$qn;
      var $52=$5;
      var $53=(($51)|0)!=(($52)|0);
      if ($53) { label = 16; break; } else { label = 27; break; }
    case 16: 
      var $55=$qn;
      var $56=$5;
      var $57=$qn;
      var $58=((($56)-($57))|0);
      var $59=(($55)|0) > (($58)|0);
      if ($59) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $61=$tp;
      var $62=$1;
      var $63=$qn;
      var $64=$4;
      var $65=$qn;
      var $66=(($64+($65<<2))|0);
      var $67=$5;
      var $68=$qn;
      var $69=((($67)-($68))|0);
      var $70=___gmpn_mul($61, $62, $63, $66, $69);
      label = 19; break;
    case 18: 
      var $72=$tp;
      var $73=$4;
      var $74=$qn;
      var $75=(($73+($74<<2))|0);
      var $76=$5;
      var $77=$qn;
      var $78=((($76)-($77))|0);
      var $79=$1;
      var $80=$qn;
      var $81=___gmpn_mul($72, $75, $78, $79, $80);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $84=$tp;
      var $85=$qn;
      var $86=(($84+($85<<2))|0);
      $__p=$86;
      var $87=$__p;
      var $88=HEAP32[(($87)>>2)];
      var $89=$cy;
      var $90=((($88)+($89))|0);
      $__x=$90;
      var $91=$__x;
      var $92=$__p;
      HEAP32[(($92)>>2)]=$91;
      var $93=$__x;
      var $94=$cy;
      var $95=(($93)>>>0) < (($94)>>>0);
      if ($95) { label = 21; break; } else { label = 25; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $98=$__p;
      var $99=(($98+4)|0);
      $__p=$99;
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)+(1))|0);
      HEAP32[(($99)>>2)]=$101;
      var $102=(($101)|0)==0;
      if ($102) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 22; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $107=$2;
      var $108=$qn;
      var $109=(($107+($108<<2))|0);
      var $110=$2;
      var $111=$qn;
      var $112=(($110+($111<<2))|0);
      var $113=$3;
      var $114=$qn;
      var $115=((($113)-($114))|0);
      var $116=$tp;
      var $117=$5;
      var $118=___gmpn_sub($109, $112, $115, $116, $117);
      $cy=0;
      label = 27; break;
    case 27: 
      var $120=$qn;
      var $121=$2;
      var $122=(($121+($120<<2))|0);
      $2=$122;
      var $123=$qn;
      var $124=$1;
      var $125=(($124+($123<<2))|0);
      $1=$125;
      var $126=$3;
      var $127=$qn;
      var $128=((($126)-($127))|0);
      $qn=$128;
      label = 28; break;
    case 28: 
      var $130=$qn;
      var $131=$5;
      var $132=(($130)|0) > (($131)|0);
      if ($132) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $134=$2;
      var $135=$5;
      var $136=(($134+($135<<2))|0);
      var $137=$2;
      var $138=$5;
      var $139=(($137+($138<<2))|0);
      var $140=$qn;
      var $141=$cy;
      var $142=___gmpn_sub_1($136, $139, $140, $141);
      var $143=$1;
      var $144=$2;
      var $145=$4;
      var $146=$5;
      var $147=$6;
      var $148=$tp;
      var $149=___gmpn_dcpi1_bdiv_qr_n($143, $144, $145, $146, $147, $148);
      $cy=$149;
      var $150=$5;
      var $151=$1;
      var $152=(($151+($150<<2))|0);
      $1=$152;
      var $153=$5;
      var $154=$2;
      var $155=(($154+($153<<2))|0);
      $2=$155;
      var $156=$5;
      var $157=$qn;
      var $158=((($157)-($156))|0);
      $qn=$158;
      label = 28; break;
    case 30: 
      var $160=$1;
      var $161=$2;
      var $162=$4;
      var $163=$5;
      var $164=$6;
      var $165=$tp;
      ___gmpn_dcpi1_bdiv_q_n($160, $161, $162, $163, $164, $165);
      label = 35; break;
    case 31: 
      var $167=$qn;
      var $168=(($167)|0) >= 180;
      if ($168) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $170=$1;
      var $171=$2;
      var $172=$qn;
      var $173=$4;
      var $174=$qn;
      var $175=$6;
      ___gmpn_sbpi1_bdiv_q($170, $171, $172, $173, $174, $175);
      label = 34; break;
    case 33: 
      var $177=$1;
      var $178=$2;
      var $179=$4;
      var $180=$qn;
      var $181=$6;
      var $182=$tp;
      ___gmpn_dcpi1_bdiv_q_n($177, $178, $179, $180, $181, $182);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $186=$__tmp_marker;
      var $187=(($186)|0)!=0;
      if ($187) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $189=$__tmp_marker;
      ___gmp_tmp_reentrant_free($189);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_bdiv_q["X"]=1;

function ___gmpn_dcpi1_bdiv_qr_n($qp, $np, $dp, $n, $dinv, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $lo;
      var $hi;
      var $cy;
      var $rh;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      $1=$qp;
      $2=$np;
      $3=$dp;
      $4=$n;
      $5=$dinv;
      $6=$tp;
      var $7=$4;
      var $8=$7 >> 1;
      $lo=$8;
      var $9=$4;
      var $10=$lo;
      var $11=((($9)-($10))|0);
      $hi=$11;
      var $12=$lo;
      var $13=(($12)|0) >= 50;
      if ($13) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $15=$1;
      var $16=$2;
      var $17=$lo;
      var $18=($17<<1);
      var $19=$3;
      var $20=$lo;
      var $21=$5;
      var $22=___gmpn_sbpi1_bdiv_qr($15, $16, $18, $19, $20, $21);
      $cy=$22;
      label = 5; break;
    case 4: 
      var $24=$1;
      var $25=$2;
      var $26=$3;
      var $27=$lo;
      var $28=$5;
      var $29=$6;
      var $30=___gmpn_dcpi1_bdiv_qr_n($24, $25, $26, $27, $28, $29);
      $cy=$30;
      label = 5; break;
    case 5: 
      var $32=$6;
      var $33=$3;
      var $34=$lo;
      var $35=(($33+($34<<2))|0);
      var $36=$hi;
      var $37=$1;
      var $38=$lo;
      var $39=___gmpn_mul($32, $35, $36, $37, $38);
      label = 6; break;
    case 6: 
      var $41=$6;
      var $42=$lo;
      var $43=(($41+($42<<2))|0);
      $__p=$43;
      var $44=$__p;
      var $45=HEAP32[(($44)>>2)];
      var $46=$cy;
      var $47=((($45)+($46))|0);
      $__x=$47;
      var $48=$__x;
      var $49=$__p;
      HEAP32[(($49)>>2)]=$48;
      var $50=$__x;
      var $51=$cy;
      var $52=(($50)>>>0) < (($51)>>>0);
      if ($52) { label = 7; break; } else { label = 11; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $55=$__p;
      var $56=(($55+4)|0);
      $__p=$56;
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)+(1))|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=(($58)|0)==0;
      if ($59) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $64=$2;
      var $65=$lo;
      var $66=(($64+($65<<2))|0);
      var $67=$2;
      var $68=$lo;
      var $69=(($67+($68<<2))|0);
      var $70=$4;
      var $71=$hi;
      var $72=((($70)+($71))|0);
      var $73=$6;
      var $74=$4;
      var $75=___gmpn_sub($66, $69, $72, $73, $74);
      $rh=$75;
      var $76=$hi;
      var $77=(($76)|0) >= 50;
      if ($77) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $79=$1;
      var $80=$lo;
      var $81=(($79+($80<<2))|0);
      var $82=$2;
      var $83=$lo;
      var $84=(($82+($83<<2))|0);
      var $85=$hi;
      var $86=($85<<1);
      var $87=$3;
      var $88=$hi;
      var $89=$5;
      var $90=___gmpn_sbpi1_bdiv_qr($81, $84, $86, $87, $88, $89);
      $cy=$90;
      label = 15; break;
    case 14: 
      var $92=$1;
      var $93=$lo;
      var $94=(($92+($93<<2))|0);
      var $95=$2;
      var $96=$lo;
      var $97=(($95+($96<<2))|0);
      var $98=$3;
      var $99=$hi;
      var $100=$5;
      var $101=$6;
      var $102=___gmpn_dcpi1_bdiv_qr_n($94, $97, $98, $99, $100, $101);
      $cy=$102;
      label = 15; break;
    case 15: 
      var $104=$6;
      var $105=$1;
      var $106=$lo;
      var $107=(($105+($106<<2))|0);
      var $108=$hi;
      var $109=$3;
      var $110=$hi;
      var $111=(($109+($110<<2))|0);
      var $112=$lo;
      var $113=___gmpn_mul($104, $107, $108, $111, $112);
      label = 16; break;
    case 16: 
      var $115=$6;
      var $116=$hi;
      var $117=(($115+($116<<2))|0);
      $__p2=$117;
      var $118=$__p2;
      var $119=HEAP32[(($118)>>2)];
      var $120=$cy;
      var $121=((($119)+($120))|0);
      $__x1=$121;
      var $122=$__x1;
      var $123=$__p2;
      HEAP32[(($123)>>2)]=$122;
      var $124=$__x1;
      var $125=$cy;
      var $126=(($124)>>>0) < (($125)>>>0);
      if ($126) { label = 17; break; } else { label = 21; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $129=$__p2;
      var $130=(($129+4)|0);
      $__p2=$130;
      var $131=HEAP32[(($130)>>2)];
      var $132=((($131)+(1))|0);
      HEAP32[(($130)>>2)]=$132;
      var $133=(($132)|0)==0;
      if ($133) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 18; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $138=$2;
      var $139=$4;
      var $140=(($138+($139<<2))|0);
      var $141=$2;
      var $142=$4;
      var $143=(($141+($142<<2))|0);
      var $144=$6;
      var $145=$4;
      var $146=___gmpn_sub_n($140, $143, $144, $145);
      var $147=$rh;
      var $148=((($147)+($146))|0);
      $rh=$148;
      var $149=$rh;

      return $149;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_bdiv_qr_n["X"]=1;

function ___gmpn_dcpi1_div_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $tp;
      var $wp;
      var $qh;
      var $qn;
      var $__tmp_marker;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $cy;
      var $__n1;
      var $__dst2;
      var $__src3;
      var $__x4;
      var $__n5;
      var $__dst6;
      var $__src7;
      var $__x8;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      $__tmp_marker=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$3;
      var $14=((($13)+(1))|0);
      var $15=($14<<2);
      var $16=STACKTOP;STACKTOP = (STACKTOP + $15)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $17=$16;
      $tp=$17;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $26=$3;
      var $27=(($26)|0)!=0;
      if ($27) { label = 17; break; } else { label = 23; break; }
    case 17: 
      var $29=$3;
      var $30=((($29)-(1))|0);
      $__n=$30;
      var $31=$tp;
      var $32=(($31+4)|0);
      $__dst=$32;
      var $33=$2;
      $__src=$33;
      var $34=$__src;
      var $35=(($34+4)|0);
      $__src=$35;
      var $36=HEAP32[(($34)>>2)];
      $__x=$36;
      var $37=$__n;
      var $38=(($37)|0)!=0;
      if ($38) { label = 18; break; } else { label = 22; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $41=$__x;
      var $42=$__dst;
      var $43=(($42+4)|0);
      $__dst=$43;
      HEAP32[(($42)>>2)]=$41;
      var $44=$__src;
      var $45=(($44+4)|0);
      $__src=$45;
      var $46=HEAP32[(($44)>>2)];
      $__x=$46;
      label = 20; break;
    case 20: 
      var $48=$__n;
      var $49=((($48)-(1))|0);
      $__n=$49;
      var $50=(($49)|0)!=0;
      if ($50) { label = 19; break; } else { label = 21; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $53=$__x;
      var $54=$__dst;
      var $55=(($54+4)|0);
      $__dst=$55;
      HEAP32[(($54)>>2)]=$53;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $59=$tp;
      var $60=(($59)|0);
      HEAP32[(($60)>>2)]=0;
      var $61=$3;
      var $62=$5;
      var $63=((($61)-($62))|0);
      $qn=$63;
      var $64=$qn;
      var $65=((($64)+(1))|0);
      var $66=($65<<2);
      var $67=STACKTOP;STACKTOP = (STACKTOP + $66)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $68=$67;
      $wp=$68;
      var $69=$wp;
      var $70=$tp;
      var $71=$3;
      var $72=((($71)+(1))|0);
      var $73=$4;
      var $74=$5;
      var $75=$6;
      var $76=___gmpn_dcpi1_divappr_q($69, $70, $72, $73, $74, $75);
      $qh=$76;
      var $77=$wp;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|0)==0;
      if ($80) { label = 26; break; } else { label = 54; break; }
    case 26: 
      var $82=$qn;
      var $83=$5;
      var $84=(($82)|0) > (($83)|0);
      if ($84) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $86=$tp;
      var $87=$wp;
      var $88=(($87+4)|0);
      var $89=$qn;
      var $90=$4;
      var $91=$5;
      var $92=___gmpn_mul($86, $88, $89, $90, $91);
      label = 29; break;
    case 28: 
      var $94=$tp;
      var $95=$4;
      var $96=$5;
      var $97=$wp;
      var $98=(($97+4)|0);
      var $99=$qn;
      var $100=___gmpn_mul($94, $95, $96, $98, $99);
      label = 29; break;
    case 29: 
      var $102=$qh;
      var $103=(($102)|0)!=0;
      if ($103) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $105=$tp;
      var $106=$qn;
      var $107=(($105+($106<<2))|0);
      var $108=$tp;
      var $109=$qn;
      var $110=(($108+($109<<2))|0);
      var $111=$4;
      var $112=$5;
      var $113=___gmpn_add_n($107, $110, $111, $112);
      var $116 = $113;label = 32; break;
    case 31: 
      var $116 = 0;label = 32; break;
    case 32: 
      var $116;
      $cy=$116;
      var $117=$cy;
      var $118=(($117)|0)!=0;
      if ($118) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $120=$tp;
      var $121=$2;
      var $122=$3;
      var $123=___gmpn_cmp($120, $121, $122);
      var $124=(($123)|0) > 0;
      if ($124) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $126=$1;
      var $127=$wp;
      var $128=(($127+4)|0);
      var $129=$qn;
      var $130=___gmpn_sub_1($126, $128, $129, 1);
      var $131=$qh;
      var $132=((($131)-($130))|0);
      $qh=$132;
      label = 53; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $142=$qn;
      var $143=(($142)|0)!=0;
      if ($143) { label = 44; break; } else { label = 50; break; }
    case 44: 
      var $145=$qn;
      var $146=((($145)-(1))|0);
      $__n1=$146;
      var $147=$1;
      $__dst2=$147;
      var $148=$wp;
      var $149=(($148+4)|0);
      $__src3=$149;
      var $150=$__src3;
      var $151=(($150+4)|0);
      $__src3=$151;
      var $152=HEAP32[(($150)>>2)];
      $__x4=$152;
      var $153=$__n1;
      var $154=(($153)|0)!=0;
      if ($154) { label = 45; break; } else { label = 49; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $157=$__x4;
      var $158=$__dst2;
      var $159=(($158+4)|0);
      $__dst2=$159;
      HEAP32[(($158)>>2)]=$157;
      var $160=$__src3;
      var $161=(($160+4)|0);
      $__src3=$161;
      var $162=HEAP32[(($160)>>2)];
      $__x4=$162;
      label = 47; break;
    case 47: 
      var $164=$__n1;
      var $165=((($164)-(1))|0);
      $__n1=$165;
      var $166=(($165)|0)!=0;
      if ($166) { label = 46; break; } else { label = 48; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $169=$__x4;
      var $170=$__dst2;
      var $171=(($170+4)|0);
      $__dst2=$171;
      HEAP32[(($170)>>2)]=$169;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 72; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $185=$qn;
      var $186=(($185)|0)!=0;
      if ($186) { label = 63; break; } else { label = 69; break; }
    case 63: 
      var $188=$qn;
      var $189=((($188)-(1))|0);
      $__n5=$189;
      var $190=$1;
      $__dst6=$190;
      var $191=$wp;
      var $192=(($191+4)|0);
      $__src7=$192;
      var $193=$__src7;
      var $194=(($193+4)|0);
      $__src7=$194;
      var $195=HEAP32[(($193)>>2)];
      $__x8=$195;
      var $196=$__n5;
      var $197=(($196)|0)!=0;
      if ($197) { label = 64; break; } else { label = 68; break; }
    case 64: 
      label = 65; break;
    case 65: 
      var $200=$__x8;
      var $201=$__dst6;
      var $202=(($201+4)|0);
      $__dst6=$202;
      HEAP32[(($201)>>2)]=$200;
      var $203=$__src7;
      var $204=(($203+4)|0);
      $__src7=$204;
      var $205=HEAP32[(($203)>>2)];
      $__x8=$205;
      label = 66; break;
    case 66: 
      var $207=$__n5;
      var $208=((($207)-(1))|0);
      $__n5=$208;
      var $209=(($208)|0)!=0;
      if ($209) { label = 65; break; } else { label = 67; break; }
    case 67: 
      label = 68; break;
    case 68: 
      var $212=$__x8;
      var $213=$__dst6;
      var $214=(($213+4)|0);
      $__dst6=$214;
      HEAP32[(($213)>>2)]=$212;
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $220=$__tmp_marker;
      var $221=(($220)|0)!=0;
      if ($221) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $223=$__tmp_marker;
      ___gmp_tmp_reentrant_free($223);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $226=$qh;
      STACKTOP = __stackBase__;
      return $226;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_div_q["X"]=1;

function ___gmpn_dcpi1_div_qr_n($qp, $np, $dp, $n, $dinv, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $lo;
      var $hi;
      var $cy;
      var $qh;
      var $ql;
      $1=$qp;
      $2=$np;
      $3=$dp;
      $4=$n;
      $5=$dinv;
      $6=$tp;
      var $7=$4;
      var $8=$7 >> 1;
      $lo=$8;
      var $9=$4;
      var $10=$lo;
      var $11=((($9)-($10))|0);
      $hi=$11;
      var $12=$hi;
      var $13=(($12)|0) >= 50;
      if ($13) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $15=$1;
      var $16=$lo;
      var $17=(($15+($16<<2))|0);
      var $18=$2;
      var $19=$lo;
      var $20=($19<<1);
      var $21=(($18+($20<<2))|0);
      var $22=$hi;
      var $23=($22<<1);
      var $24=$3;
      var $25=$lo;
      var $26=(($24+($25<<2))|0);
      var $27=$hi;
      var $28=$5;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=___gmpn_sbpi1_div_qr($17, $21, $23, $26, $27, $30);
      $qh=$31;
      label = 5; break;
    case 4: 
      var $33=$1;
      var $34=$lo;
      var $35=(($33+($34<<2))|0);
      var $36=$2;
      var $37=$lo;
      var $38=($37<<1);
      var $39=(($36+($38<<2))|0);
      var $40=$3;
      var $41=$lo;
      var $42=(($40+($41<<2))|0);
      var $43=$hi;
      var $44=$5;
      var $45=$6;
      var $46=___gmpn_dcpi1_div_qr_n($35, $39, $42, $43, $44, $45);
      $qh=$46;
      label = 5; break;
    case 5: 
      var $48=$6;
      var $49=$1;
      var $50=$lo;
      var $51=(($49+($50<<2))|0);
      var $52=$hi;
      var $53=$3;
      var $54=$lo;
      var $55=___gmpn_mul($48, $51, $52, $53, $54);
      var $56=$2;
      var $57=$lo;
      var $58=(($56+($57<<2))|0);
      var $59=$2;
      var $60=$lo;
      var $61=(($59+($60<<2))|0);
      var $62=$6;
      var $63=$4;
      var $64=___gmpn_sub_n($58, $61, $62, $63);
      $cy=$64;
      var $65=$qh;
      var $66=(($65)|0)!=0;
      if ($66) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $68=$2;
      var $69=$4;
      var $70=(($68+($69<<2))|0);
      var $71=$2;
      var $72=$4;
      var $73=(($71+($72<<2))|0);
      var $74=$3;
      var $75=$lo;
      var $76=___gmpn_sub_n($70, $73, $74, $75);
      var $77=$cy;
      var $78=((($77)+($76))|0);
      $cy=$78;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $81=$cy;
      var $82=(($81)|0)!=0;
      if ($82) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $84=$1;
      var $85=$lo;
      var $86=(($84+($85<<2))|0);
      var $87=$1;
      var $88=$lo;
      var $89=(($87+($88<<2))|0);
      var $90=$hi;
      var $91=___gmpn_sub_1($86, $89, $90, 1);
      var $92=$qh;
      var $93=((($92)-($91))|0);
      $qh=$93;
      var $94=$2;
      var $95=$lo;
      var $96=(($94+($95<<2))|0);
      var $97=$2;
      var $98=$lo;
      var $99=(($97+($98<<2))|0);
      var $100=$3;
      var $101=$4;
      var $102=___gmpn_add_n($96, $99, $100, $101);
      var $103=$cy;
      var $104=((($103)-($102))|0);
      $cy=$104;
      label = 8; break;
    case 10: 
      var $106=$lo;
      var $107=(($106)|0) >= 50;
      if ($107) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $109=$1;
      var $110=$2;
      var $111=$hi;
      var $112=(($110+($111<<2))|0);
      var $113=$lo;
      var $114=($113<<1);
      var $115=$3;
      var $116=$hi;
      var $117=(($115+($116<<2))|0);
      var $118=$lo;
      var $119=$5;
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=___gmpn_sbpi1_div_qr($109, $112, $114, $117, $118, $121);
      $ql=$122;
      label = 13; break;
    case 12: 
      var $124=$1;
      var $125=$2;
      var $126=$hi;
      var $127=(($125+($126<<2))|0);
      var $128=$3;
      var $129=$hi;
      var $130=(($128+($129<<2))|0);
      var $131=$lo;
      var $132=$5;
      var $133=$6;
      var $134=___gmpn_dcpi1_div_qr_n($124, $127, $130, $131, $132, $133);
      $ql=$134;
      label = 13; break;
    case 13: 
      var $136=$6;
      var $137=$3;
      var $138=$hi;
      var $139=$1;
      var $140=$lo;
      var $141=___gmpn_mul($136, $137, $138, $139, $140);
      var $142=$2;
      var $143=$2;
      var $144=$6;
      var $145=$4;
      var $146=___gmpn_sub_n($142, $143, $144, $145);
      $cy=$146;
      var $147=$ql;
      var $148=(($147)|0)!=0;
      if ($148) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $150=$2;
      var $151=$lo;
      var $152=(($150+($151<<2))|0);
      var $153=$2;
      var $154=$lo;
      var $155=(($153+($154<<2))|0);
      var $156=$3;
      var $157=$hi;
      var $158=___gmpn_sub_n($152, $155, $156, $157);
      var $159=$cy;
      var $160=((($159)+($158))|0);
      $cy=$160;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $163=$cy;
      var $164=(($163)|0)!=0;
      if ($164) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $166=$1;
      var $167=$1;
      var $168=$lo;
      var $169=___gmpn_sub_1($166, $167, $168, 1);
      var $170=$2;
      var $171=$2;
      var $172=$3;
      var $173=$4;
      var $174=___gmpn_add_n($170, $171, $172, $173);
      var $175=$cy;
      var $176=((($175)-($174))|0);
      $cy=$176;
      label = 16; break;
    case 18: 
      var $178=$qh;

      return $178;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_div_qr_n["X"]=1;

function ___gmpn_dcpi1_div_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qn;
      var $qh;
      var $cy;
      var $tp;
      var $__tmp_marker;
      var $q;
      var $n2;
      var $n1;
      var $n0;
      var $d1;
      var $d0;
      var $_q0;
      var $_t1;
      var $_t0;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__x4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      var $__x15;
      var $__x17;
      var $__x18;
      var $cy19;
      var $cy1;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      $__tmp_marker=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$5;
      var $14=($13<<2);
      var $15=STACKTOP;STACKTOP = (STACKTOP + $14)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $16=$15;
      $tp=$16;
      var $17=$3;
      var $18=$5;
      var $19=((($17)-($18))|0);
      $qn=$19;
      var $20=$qn;
      var $21=$1;
      var $22=(($21+($20<<2))|0);
      $1=$22;
      var $23=$3;
      var $24=$2;
      var $25=(($24+($23<<2))|0);
      $2=$25;
      var $26=$5;
      var $27=$4;
      var $28=(($27+($26<<2))|0);
      $4=$28;
      var $29=$qn;
      var $30=$5;
      var $31=(($29)|0) > (($30)|0);
      if ($31) { label = 9; break; } else { label = 75; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $34=$5;
      var $35=$qn;
      var $36=((($35)-($34))|0);
      $qn=$36;
      label = 11; break;
    case 11: 
      var $38=$qn;
      var $39=$5;
      var $40=(($38)|0) > (($39)|0);
      if ($40) { label = 10; break; } else { label = 12; break; }
    case 12: 
      var $42=$qn;
      var $43=$1;
      var $44=(((-$42))|0);
      var $45=(($43+($44<<2))|0);
      $1=$45;
      var $46=$qn;
      var $47=$2;
      var $48=(((-$46))|0);
      var $49=(($47+($48<<2))|0);
      $2=$49;
      var $50=$qn;
      var $51=(($50)|0)==1;
      if ($51) { label = 13; break; } else { label = 54; break; }
    case 13: 
      var $53=$2;
      var $54=$5;
      var $55=(((-$54))|0);
      var $56=(($53+($55<<2))|0);
      var $57=(($56+4)|0);
      var $58=$4;
      var $59=$5;
      var $60=(((-$59))|0);
      var $61=(($58+($60<<2))|0);
      var $62=$5;
      var $63=___gmpn_cmp($57, $61, $62);
      var $64=(($63)|0) >= 0;
      var $65=(($64)&1);
      $qh=$65;
      var $66=$qh;
      var $67=(($66)|0)!=0;
      if ($67) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $69=$2;
      var $70=$5;
      var $71=(((-$70))|0);
      var $72=(($69+($71<<2))|0);
      var $73=(($72+4)|0);
      var $74=$2;
      var $75=$5;
      var $76=(((-$75))|0);
      var $77=(($74+($76<<2))|0);
      var $78=(($77+4)|0);
      var $79=$4;
      var $80=$5;
      var $81=(((-$80))|0);
      var $82=(($79+($81<<2))|0);
      var $83=$5;
      var $84=___gmpn_sub_n($73, $78, $82, $83);
      label = 15; break;
    case 15: 
      var $86=$2;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      $n2=$88;
      var $89=$2;
      var $90=((($89)-(4))|0);
      var $91=HEAP32[(($90)>>2)];
      $n1=$91;
      var $92=$2;
      var $93=((($92)-(8))|0);
      var $94=HEAP32[(($93)>>2)];
      $n0=$94;
      var $95=$4;
      var $96=((($95)-(4))|0);
      var $97=HEAP32[(($96)>>2)];
      $d1=$97;
      var $98=$4;
      var $99=((($98)-(8))|0);
      var $100=HEAP32[(($99)>>2)];
      $d0=$100;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $103=$n2;
      var $104=$d1;
      var $105=(($103)|0)==(($104)|0);
      if ($105) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $107=$n1;
      var $108=$d0;
      var $109=(($107)|0)==(($108)|0);
      if ($109) { label = 19; break; } else { label = 22; break; }
    case 19: 
      $q=-1;
      var $111=$2;
      var $112=$5;
      var $113=(((-$112))|0);
      var $114=(($111+($113<<2))|0);
      var $115=$4;
      var $116=$5;
      var $117=(((-$116))|0);
      var $118=(($115+($117<<2))|0);
      var $119=$5;
      var $120=$q;
      var $121=___gmpn_submul_1($114, $118, $119, $120);
      $cy=$121;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 53; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $127=$n2;
      $__u=$127;
      var $128=$6;
      var $129=(($128)|0);
      var $130=HEAP32[(($129)>>2)];
      $__v=$130;
      var $131=$__u;
      var $132=$131 & 65535;
      $__ul=$132;
      var $133=$__u;
      var $134=$133 >>> 16;
      $__uh=$134;
      var $135=$__v;
      var $136=$135 & 65535;
      $__vl=$136;
      var $137=$__v;
      var $138=$137 >>> 16;
      $__vh=$138;
      var $139=$__ul;
      var $140=$__vl;
      var $141=Math.imul($139,$140);
      $__x0=$141;
      var $142=$__ul;
      var $143=$__vh;
      var $144=Math.imul($142,$143);
      $__x1=$144;
      var $145=$__uh;
      var $146=$__vl;
      var $147=Math.imul($145,$146);
      $__x2=$147;
      var $148=$__uh;
      var $149=$__vh;
      var $150=Math.imul($148,$149);
      $__x3=$150;
      var $151=$__x0;
      var $152=$151 >>> 16;
      var $153=$__x1;
      var $154=((($153)+($152))|0);
      $__x1=$154;
      var $155=$__x2;
      var $156=$__x1;
      var $157=((($156)+($155))|0);
      $__x1=$157;
      var $158=$__x1;
      var $159=$__x2;
      var $160=(($158)>>>0) < (($159)>>>0);
      if ($160) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $162=$__x3;
      var $163=((($162)+(65536))|0);
      $__x3=$163;
      label = 26; break;
    case 26: 
      var $165=$__x3;
      var $166=$__x1;
      var $167=$166 >>> 16;
      var $168=((($165)+($167))|0);
      $q=$168;
      var $169=$__x1;
      var $170=$169 << 16;
      var $171=$__x0;
      var $172=$171 & 65535;
      var $173=((($170)+($172))|0);
      $_q0=$173;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $176=$_q0;
      var $177=$n1;
      var $178=((($176)+($177))|0);
      $__x=$178;
      var $179=$q;
      var $180=$n2;
      var $181=((($179)+($180))|0);
      var $182=$__x;
      var $183=$_q0;
      var $184=(($182)>>>0) < (($183)>>>0);
      var $185=(($184)&1);
      var $186=((($181)+($185))|0);
      $q=$186;
      var $187=$__x;
      $_q0=$187;
      label = 29; break;
    case 29: 
      var $189=$n1;
      var $190=$d1;
      var $191=$q;
      var $192=Math.imul($190,$191);
      var $193=((($189)-($192))|0);
      $n1=$193;
      var $194=$n0;
      $n0=$194;
      label = 30; break;
    case 30: 
      var $196=$n0;
      var $197=$d0;
      var $198=((($196)-($197))|0);
      $__x4=$198;
      var $199=$n1;
      var $200=$d1;
      var $201=((($199)-($200))|0);
      var $202=$n0;
      var $203=$d0;
      var $204=(($202)>>>0) < (($203)>>>0);
      var $205=(($204)&1);
      var $206=((($201)-($205))|0);
      $n1=$206;
      var $207=$__x4;
      $n0=$207;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $210=$d0;
      $__u13=$210;
      var $211=$q;
      $__v14=$211;
      var $212=$__u13;
      var $213=$212 & 65535;
      $__ul9=$213;
      var $214=$__u13;
      var $215=$214 >>> 16;
      $__uh11=$215;
      var $216=$__v14;
      var $217=$216 & 65535;
      $__vl10=$217;
      var $218=$__v14;
      var $219=$218 >>> 16;
      $__vh12=$219;
      var $220=$__ul9;
      var $221=$__vl10;
      var $222=Math.imul($220,$221);
      $__x05=$222;
      var $223=$__ul9;
      var $224=$__vh12;
      var $225=Math.imul($223,$224);
      $__x16=$225;
      var $226=$__uh11;
      var $227=$__vl10;
      var $228=Math.imul($226,$227);
      $__x27=$228;
      var $229=$__uh11;
      var $230=$__vh12;
      var $231=Math.imul($229,$230);
      $__x38=$231;
      var $232=$__x05;
      var $233=$232 >>> 16;
      var $234=$__x16;
      var $235=((($234)+($233))|0);
      $__x16=$235;
      var $236=$__x27;
      var $237=$__x16;
      var $238=((($237)+($236))|0);
      $__x16=$238;
      var $239=$__x16;
      var $240=$__x27;
      var $241=(($239)>>>0) < (($240)>>>0);
      if ($241) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $243=$__x38;
      var $244=((($243)+(65536))|0);
      $__x38=$244;
      label = 34; break;
    case 34: 
      var $246=$__x38;
      var $247=$__x16;
      var $248=$247 >>> 16;
      var $249=((($246)+($248))|0);
      $_t1=$249;
      var $250=$__x16;
      var $251=$250 << 16;
      var $252=$__x05;
      var $253=$252 & 65535;
      var $254=((($251)+($253))|0);
      $_t0=$254;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $257=$n0;
      var $258=$_t0;
      var $259=((($257)-($258))|0);
      $__x15=$259;
      var $260=$n1;
      var $261=$_t1;
      var $262=((($260)-($261))|0);
      var $263=$n0;
      var $264=$_t0;
      var $265=(($263)>>>0) < (($264)>>>0);
      var $266=(($265)&1);
      var $267=((($262)-($266))|0);
      $n1=$267;
      var $268=$__x15;
      $n0=$268;
      label = 37; break;
    case 37: 
      var $270=$q;
      var $271=((($270)+(1))|0);
      $q=$271;
      var $272=$n1;
      var $273=$_q0;
      var $274=(($272)>>>0) >= (($273)>>>0);
      var $275=(($274)&1);
      var $276=(((-$275))|0);
      $_mask=$276;
      var $277=$_mask;
      var $278=$q;
      var $279=((($278)+($277))|0);
      $q=$279;
      label = 38; break;
    case 38: 
      var $281=$n0;
      var $282=$_mask;
      var $283=$d0;
      var $284=$282 & $283;
      var $285=((($281)+($284))|0);
      $__x17=$285;
      var $286=$n1;
      var $287=$_mask;
      var $288=$d1;
      var $289=$287 & $288;
      var $290=((($286)+($289))|0);
      var $291=$__x17;
      var $292=$n0;
      var $293=(($291)>>>0) < (($292)>>>0);
      var $294=(($293)&1);
      var $295=((($290)+($294))|0);
      $n1=$295;
      var $296=$__x17;
      $n0=$296;
      label = 39; break;
    case 39: 
      var $298=$n1;
      var $299=$d1;
      var $300=(($298)>>>0) >= (($299)>>>0);
      if ($300) { label = 40; break; } else { label = 46; break; }
    case 40: 
      var $302=$n1;
      var $303=$d1;
      var $304=(($302)>>>0) > (($303)>>>0);
      if ($304) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $306=$n0;
      var $307=$d0;
      var $308=(($306)>>>0) >= (($307)>>>0);
      if ($308) { label = 42; break; } else { label = 45; break; }
    case 42: 
      var $310=$q;
      var $311=((($310)+(1))|0);
      $q=$311;
      label = 43; break;
    case 43: 
      var $313=$n0;
      var $314=$d0;
      var $315=((($313)-($314))|0);
      $__x18=$315;
      var $316=$n1;
      var $317=$d1;
      var $318=((($316)-($317))|0);
      var $319=$n0;
      var $320=$d0;
      var $321=(($319)>>>0) < (($320)>>>0);
      var $322=(($321)&1);
      var $323=((($318)-($322))|0);
      $n1=$323;
      var $324=$__x18;
      $n0=$324;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $329=$5;
      var $330=(($329)|0) > 2;
      if ($330) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $332=$2;
      var $333=$5;
      var $334=(((-$333))|0);
      var $335=(($332+($334<<2))|0);
      var $336=$4;
      var $337=$5;
      var $338=(((-$337))|0);
      var $339=(($336+($338<<2))|0);
      var $340=$5;
      var $341=((($340)-(2))|0);
      var $342=$q;
      var $343=___gmpn_submul_1($335, $339, $341, $342);
      $cy19=$343;
      var $344=$n0;
      var $345=$cy19;
      var $346=(($344)>>>0) < (($345)>>>0);
      var $347=(($346)&1);
      $cy1=$347;
      var $348=$n0;
      var $349=$cy19;
      var $350=((($348)-($349))|0);
      $n0=$350;
      var $351=$n1;
      var $352=$cy1;
      var $353=(($351)>>>0) < (($352)>>>0);
      var $354=(($353)&1);
      $cy19=$354;
      var $355=$n1;
      var $356=$cy1;
      var $357=((($355)-($356))|0);
      $n1=$357;
      var $358=$n0;
      var $359=$2;
      var $360=((($359)-(8))|0);
      HEAP32[(($360)>>2)]=$358;
      var $361=$cy19;
      var $362=(($361)|0)!=0;
      if ($362) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $364=$d1;
      var $365=$2;
      var $366=$5;
      var $367=(((-$366))|0);
      var $368=(($365+($367<<2))|0);
      var $369=$2;
      var $370=$5;
      var $371=(((-$370))|0);
      var $372=(($369+($371<<2))|0);
      var $373=$4;
      var $374=$5;
      var $375=(((-$374))|0);
      var $376=(($373+($375<<2))|0);
      var $377=$5;
      var $378=((($377)-(1))|0);
      var $379=___gmpn_add_n($368, $372, $376, $378);
      var $380=((($364)+($379))|0);
      var $381=$n1;
      var $382=((($381)+($380))|0);
      $n1=$382;
      var $383=$q;
      var $384=(($383)|0)==0;
      var $385=(($384)&1);
      var $386=$qh;
      var $387=((($386)-($385))|0);
      $qh=$387;
      var $388=$q;
      var $389=((($388)-(1))|0);
      $q=$389;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      var $392=$n0;
      var $393=$2;
      var $394=((($393)-(8))|0);
      HEAP32[(($394)>>2)]=$392;
      label = 52; break;
    case 52: 
      var $396=$n1;
      var $397=$2;
      var $398=((($397)-(4))|0);
      HEAP32[(($398)>>2)]=$396;
      label = 53; break;
    case 53: 
      var $400=$q;
      var $401=$1;
      var $402=(($401)|0);
      HEAP32[(($402)>>2)]=$400;
      label = 71; break;
    case 54: 
      var $404=$qn;
      var $405=(($404)|0)==2;
      if ($405) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $407=$1;
      var $408=$2;
      var $409=((($408)-(8))|0);
      var $410=$4;
      var $411=((($410)-(8))|0);
      var $412=___gmpn_divrem_2($407, 0, $409, 4, $411);
      $qh=$412;
      label = 60; break;
    case 56: 
      var $414=$qn;
      var $415=(($414)|0) >= 50;
      if ($415) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $417=$1;
      var $418=$2;
      var $419=$qn;
      var $420=(((-$419))|0);
      var $421=(($418+($420<<2))|0);
      var $422=$qn;
      var $423=($422<<1);
      var $424=$4;
      var $425=$qn;
      var $426=(((-$425))|0);
      var $427=(($424+($426<<2))|0);
      var $428=$qn;
      var $429=$6;
      var $430=(($429)|0);
      var $431=HEAP32[(($430)>>2)];
      var $432=___gmpn_sbpi1_div_qr($417, $421, $423, $427, $428, $431);
      $qh=$432;
      label = 59; break;
    case 58: 
      var $434=$1;
      var $435=$2;
      var $436=$qn;
      var $437=(((-$436))|0);
      var $438=(($435+($437<<2))|0);
      var $439=$4;
      var $440=$qn;
      var $441=(((-$440))|0);
      var $442=(($439+($441<<2))|0);
      var $443=$qn;
      var $444=$6;
      var $445=$tp;
      var $446=___gmpn_dcpi1_div_qr_n($434, $438, $442, $443, $444, $445);
      $qh=$446;
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $449=$qn;
      var $450=$5;
      var $451=(($449)|0)!=(($450)|0);
      if ($451) { label = 61; break; } else { label = 70; break; }
    case 61: 
      var $453=$qn;
      var $454=$5;
      var $455=$qn;
      var $456=((($454)-($455))|0);
      var $457=(($453)|0) > (($456)|0);
      if ($457) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $459=$tp;
      var $460=$1;
      var $461=$qn;
      var $462=$4;
      var $463=$5;
      var $464=(((-$463))|0);
      var $465=(($462+($464<<2))|0);
      var $466=$5;
      var $467=$qn;
      var $468=((($466)-($467))|0);
      var $469=___gmpn_mul($459, $460, $461, $465, $468);
      label = 64; break;
    case 63: 
      var $471=$tp;
      var $472=$4;
      var $473=$5;
      var $474=(((-$473))|0);
      var $475=(($472+($474<<2))|0);
      var $476=$5;
      var $477=$qn;
      var $478=((($476)-($477))|0);
      var $479=$1;
      var $480=$qn;
      var $481=___gmpn_mul($471, $475, $478, $479, $480);
      label = 64; break;
    case 64: 
      var $483=$2;
      var $484=$5;
      var $485=(((-$484))|0);
      var $486=(($483+($485<<2))|0);
      var $487=$2;
      var $488=$5;
      var $489=(((-$488))|0);
      var $490=(($487+($489<<2))|0);
      var $491=$tp;
      var $492=$5;
      var $493=___gmpn_sub_n($486, $490, $491, $492);
      $cy=$493;
      var $494=$qh;
      var $495=(($494)|0)!=0;
      if ($495) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $497=$2;
      var $498=$5;
      var $499=(((-$498))|0);
      var $500=(($497+($499<<2))|0);
      var $501=$qn;
      var $502=(($500+($501<<2))|0);
      var $503=$2;
      var $504=$5;
      var $505=(((-$504))|0);
      var $506=(($503+($505<<2))|0);
      var $507=$qn;
      var $508=(($506+($507<<2))|0);
      var $509=$4;
      var $510=$5;
      var $511=(((-$510))|0);
      var $512=(($509+($511<<2))|0);
      var $513=$5;
      var $514=$qn;
      var $515=((($513)-($514))|0);
      var $516=___gmpn_sub_n($502, $508, $512, $515);
      var $517=$cy;
      var $518=((($517)+($516))|0);
      $cy=$518;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $521=$cy;
      var $522=(($521)|0)!=0;
      if ($522) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $524=$1;
      var $525=$1;
      var $526=$qn;
      var $527=___gmpn_sub_1($524, $525, $526, 1);
      var $528=$qh;
      var $529=((($528)-($527))|0);
      $qh=$529;
      var $530=$2;
      var $531=$5;
      var $532=(((-$531))|0);
      var $533=(($530+($532<<2))|0);
      var $534=$2;
      var $535=$5;
      var $536=(((-$535))|0);
      var $537=(($534+($536<<2))|0);
      var $538=$4;
      var $539=$5;
      var $540=(((-$539))|0);
      var $541=(($538+($540<<2))|0);
      var $542=$5;
      var $543=___gmpn_add_n($533, $537, $541, $542);
      var $544=$cy;
      var $545=((($544)-($543))|0);
      $cy=$545;
      label = 67; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $549=$3;
      var $550=$5;
      var $551=((($549)-($550))|0);
      var $552=$qn;
      var $553=((($551)-($552))|0);
      $qn=$553;
      label = 72; break;
    case 72: 
      var $555=$5;
      var $556=$1;
      var $557=(((-$555))|0);
      var $558=(($556+($557<<2))|0);
      $1=$558;
      var $559=$5;
      var $560=$2;
      var $561=(((-$559))|0);
      var $562=(($560+($561<<2))|0);
      $2=$562;
      var $563=$1;
      var $564=$2;
      var $565=$5;
      var $566=(((-$565))|0);
      var $567=(($564+($566<<2))|0);
      var $568=$4;
      var $569=$5;
      var $570=(((-$569))|0);
      var $571=(($568+($570<<2))|0);
      var $572=$5;
      var $573=$6;
      var $574=$tp;
      var $575=___gmpn_dcpi1_div_qr_n($563, $567, $571, $572, $573, $574);
      var $576=$5;
      var $577=$qn;
      var $578=((($577)-($576))|0);
      $qn=$578;
      label = 73; break;
    case 73: 
      var $580=$qn;
      var $581=(($580)|0) > 0;
      if ($581) { label = 72; break; } else { label = 74; break; }
    case 74: 
      label = 89; break;
    case 75: 
      var $584=$qn;
      var $585=$1;
      var $586=(((-$584))|0);
      var $587=(($585+($586<<2))|0);
      $1=$587;
      var $588=$qn;
      var $589=$2;
      var $590=(((-$588))|0);
      var $591=(($589+($590<<2))|0);
      $2=$591;
      var $592=$qn;
      var $593=(($592)|0) >= 50;
      if ($593) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $595=$1;
      var $596=$2;
      var $597=$qn;
      var $598=(((-$597))|0);
      var $599=(($596+($598<<2))|0);
      var $600=$qn;
      var $601=($600<<1);
      var $602=$4;
      var $603=$qn;
      var $604=(((-$603))|0);
      var $605=(($602+($604<<2))|0);
      var $606=$qn;
      var $607=$6;
      var $608=(($607)|0);
      var $609=HEAP32[(($608)>>2)];
      var $610=___gmpn_sbpi1_div_qr($595, $599, $601, $605, $606, $609);
      $qh=$610;
      label = 78; break;
    case 77: 
      var $612=$1;
      var $613=$2;
      var $614=$qn;
      var $615=(((-$614))|0);
      var $616=(($613+($615<<2))|0);
      var $617=$4;
      var $618=$qn;
      var $619=(((-$618))|0);
      var $620=(($617+($619<<2))|0);
      var $621=$qn;
      var $622=$6;
      var $623=$tp;
      var $624=___gmpn_dcpi1_div_qr_n($612, $616, $620, $621, $622, $623);
      $qh=$624;
      label = 78; break;
    case 78: 
      var $626=$qn;
      var $627=$5;
      var $628=(($626)|0)!=(($627)|0);
      if ($628) { label = 79; break; } else { label = 88; break; }
    case 79: 
      var $630=$qn;
      var $631=$5;
      var $632=$qn;
      var $633=((($631)-($632))|0);
      var $634=(($630)|0) > (($633)|0);
      if ($634) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $636=$tp;
      var $637=$1;
      var $638=$qn;
      var $639=$4;
      var $640=$5;
      var $641=(((-$640))|0);
      var $642=(($639+($641<<2))|0);
      var $643=$5;
      var $644=$qn;
      var $645=((($643)-($644))|0);
      var $646=___gmpn_mul($636, $637, $638, $642, $645);
      label = 82; break;
    case 81: 
      var $648=$tp;
      var $649=$4;
      var $650=$5;
      var $651=(((-$650))|0);
      var $652=(($649+($651<<2))|0);
      var $653=$5;
      var $654=$qn;
      var $655=((($653)-($654))|0);
      var $656=$1;
      var $657=$qn;
      var $658=___gmpn_mul($648, $652, $655, $656, $657);
      label = 82; break;
    case 82: 
      var $660=$2;
      var $661=$5;
      var $662=(((-$661))|0);
      var $663=(($660+($662<<2))|0);
      var $664=$2;
      var $665=$5;
      var $666=(((-$665))|0);
      var $667=(($664+($666<<2))|0);
      var $668=$tp;
      var $669=$5;
      var $670=___gmpn_sub_n($663, $667, $668, $669);
      $cy=$670;
      var $671=$qh;
      var $672=(($671)|0)!=0;
      if ($672) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $674=$2;
      var $675=$5;
      var $676=(((-$675))|0);
      var $677=(($674+($676<<2))|0);
      var $678=$qn;
      var $679=(($677+($678<<2))|0);
      var $680=$2;
      var $681=$5;
      var $682=(((-$681))|0);
      var $683=(($680+($682<<2))|0);
      var $684=$qn;
      var $685=(($683+($684<<2))|0);
      var $686=$4;
      var $687=$5;
      var $688=(((-$687))|0);
      var $689=(($686+($688<<2))|0);
      var $690=$5;
      var $691=$qn;
      var $692=((($690)-($691))|0);
      var $693=___gmpn_sub_n($679, $685, $689, $692);
      var $694=$cy;
      var $695=((($694)+($693))|0);
      $cy=$695;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $698=$cy;
      var $699=(($698)|0)!=0;
      if ($699) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $701=$1;
      var $702=$1;
      var $703=$qn;
      var $704=___gmpn_sub_1($701, $702, $703, 1);
      var $705=$qh;
      var $706=((($705)-($704))|0);
      $qh=$706;
      var $707=$2;
      var $708=$5;
      var $709=(((-$708))|0);
      var $710=(($707+($709<<2))|0);
      var $711=$2;
      var $712=$5;
      var $713=(((-$712))|0);
      var $714=(($711+($713<<2))|0);
      var $715=$4;
      var $716=$5;
      var $717=(((-$716))|0);
      var $718=(($715+($717<<2))|0);
      var $719=$5;
      var $720=___gmpn_add_n($710, $714, $718, $719);
      var $721=$cy;
      var $722=((($721)-($720))|0);
      $cy=$722;
      label = 85; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $727=$__tmp_marker;
      var $728=(($727)|0)!=0;
      if ($728) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $730=$__tmp_marker;
      ___gmp_tmp_reentrant_free($730);
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $733=$qh;
      STACKTOP = __stackBase__;
      return $733;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_div_qr["X"]=1;

function ___gmpn_dcpi1_divappr_q_n($qp, $np, $dp, $n, $dinv, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $lo;
      var $hi;
      var $cy;
      var $qh;
      var $ql;
      var $i;
      $1=$qp;
      $2=$np;
      $3=$dp;
      $4=$n;
      $5=$dinv;
      $6=$tp;
      var $7=$4;
      var $8=$7 >> 1;
      $lo=$8;
      var $9=$4;
      var $10=$lo;
      var $11=((($9)-($10))|0);
      $hi=$11;
      var $12=$hi;
      var $13=(($12)|0) >= 50;
      if ($13) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $15=$1;
      var $16=$lo;
      var $17=(($15+($16<<2))|0);
      var $18=$2;
      var $19=$lo;
      var $20=($19<<1);
      var $21=(($18+($20<<2))|0);
      var $22=$hi;
      var $23=($22<<1);
      var $24=$3;
      var $25=$lo;
      var $26=(($24+($25<<2))|0);
      var $27=$hi;
      var $28=$5;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=___gmpn_sbpi1_div_qr($17, $21, $23, $26, $27, $30);
      $qh=$31;
      label = 5; break;
    case 4: 
      var $33=$1;
      var $34=$lo;
      var $35=(($33+($34<<2))|0);
      var $36=$2;
      var $37=$lo;
      var $38=($37<<1);
      var $39=(($36+($38<<2))|0);
      var $40=$3;
      var $41=$lo;
      var $42=(($40+($41<<2))|0);
      var $43=$hi;
      var $44=$5;
      var $45=$6;
      var $46=___gmpn_dcpi1_div_qr_n($35, $39, $42, $43, $44, $45);
      $qh=$46;
      label = 5; break;
    case 5: 
      var $48=$6;
      var $49=$1;
      var $50=$lo;
      var $51=(($49+($50<<2))|0);
      var $52=$hi;
      var $53=$3;
      var $54=$lo;
      var $55=___gmpn_mul($48, $51, $52, $53, $54);
      var $56=$2;
      var $57=$lo;
      var $58=(($56+($57<<2))|0);
      var $59=$2;
      var $60=$lo;
      var $61=(($59+($60<<2))|0);
      var $62=$6;
      var $63=$4;
      var $64=___gmpn_sub_n($58, $61, $62, $63);
      $cy=$64;
      var $65=$qh;
      var $66=(($65)|0)!=0;
      if ($66) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $68=$2;
      var $69=$4;
      var $70=(($68+($69<<2))|0);
      var $71=$2;
      var $72=$4;
      var $73=(($71+($72<<2))|0);
      var $74=$3;
      var $75=$lo;
      var $76=___gmpn_sub_n($70, $73, $74, $75);
      var $77=$cy;
      var $78=((($77)+($76))|0);
      $cy=$78;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $81=$cy;
      var $82=(($81)|0)!=0;
      if ($82) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $84=$1;
      var $85=$lo;
      var $86=(($84+($85<<2))|0);
      var $87=$1;
      var $88=$lo;
      var $89=(($87+($88<<2))|0);
      var $90=$hi;
      var $91=___gmpn_sub_1($86, $89, $90, 1);
      var $92=$qh;
      var $93=((($92)-($91))|0);
      $qh=$93;
      var $94=$2;
      var $95=$lo;
      var $96=(($94+($95<<2))|0);
      var $97=$2;
      var $98=$lo;
      var $99=(($97+($98<<2))|0);
      var $100=$3;
      var $101=$4;
      var $102=___gmpn_add_n($96, $99, $100, $101);
      var $103=$cy;
      var $104=((($103)-($102))|0);
      $cy=$104;
      label = 8; break;
    case 10: 
      var $106=$lo;
      var $107=(($106)|0) >= 200;
      if ($107) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $109=$1;
      var $110=$2;
      var $111=$hi;
      var $112=(($110+($111<<2))|0);
      var $113=$lo;
      var $114=($113<<1);
      var $115=$3;
      var $116=$hi;
      var $117=(($115+($116<<2))|0);
      var $118=$lo;
      var $119=$5;
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=___gmpn_sbpi1_divappr_q($109, $112, $114, $117, $118, $121);
      $ql=$122;
      label = 13; break;
    case 12: 
      var $124=$1;
      var $125=$2;
      var $126=$hi;
      var $127=(($125+($126<<2))|0);
      var $128=$3;
      var $129=$hi;
      var $130=(($128+($129<<2))|0);
      var $131=$lo;
      var $132=$5;
      var $133=$6;
      var $134=___gmpn_dcpi1_divappr_q_n($124, $127, $130, $131, $132, $133);
      $ql=$134;
      label = 13; break;
    case 13: 
      var $136=$ql;
      var $137=(($136)|0)!=0;
      if ($137) { label = 14; break; } else { label = 19; break; }
    case 14: 
      $i=0;
      label = 15; break;
    case 15: 
      var $140=$i;
      var $141=$lo;
      var $142=(($140)|0) < (($141)|0);
      if ($142) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $144=$i;
      var $145=$1;
      var $146=(($145+($144<<2))|0);
      HEAP32[(($146)>>2)]=-1;
      label = 17; break;
    case 17: 
      var $148=$i;
      var $149=((($148)+(1))|0);
      $i=$149;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $152=$qh;

      return $152;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_divappr_q_n["X"]=1;

function ___gmpn_dcpi1_divappr_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qn;
      var $qh;
      var $cy;
      var $qsave;
      var $tp;
      var $__tmp_marker;
      var $q;
      var $n2;
      var $n1;
      var $n0;
      var $d1;
      var $d0;
      var $_q0;
      var $_t1;
      var $_t0;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__x4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      var $__x15;
      var $__x17;
      var $__x18;
      var $cy19;
      var $cy1;
      var $__n;
      var $__dst;
      var $__src;
      var $__x20;
      var $q2p;
      var $__n21;
      var $__dst22;
      var $__src23;
      var $__x24;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      $__tmp_marker=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$3;
      var $14=$5;
      var $15=((($13)-($14))|0);
      $qn=$15;
      var $16=$qn;
      var $17=$1;
      var $18=(($17+($16<<2))|0);
      $1=$18;
      var $19=$3;
      var $20=$2;
      var $21=(($20+($19<<2))|0);
      $2=$21;
      var $22=$5;
      var $23=$4;
      var $24=(($23+($22<<2))|0);
      $4=$24;
      var $25=$qn;
      var $26=$5;
      var $27=(($25)|0) >= (($26)|0);
      if ($27) { label = 9; break; } else { label = 88; break; }
    case 9: 
      var $29=$qn;
      var $30=((($29)+(1))|0);
      $qn=$30;
      label = 10; break;
    case 10: 
      var $32=$5;
      var $33=$qn;
      var $34=((($33)-($32))|0);
      $qn=$34;
      label = 11; break;
    case 11: 
      var $36=$qn;
      var $37=$5;
      var $38=(($36)|0) > (($37)|0);
      if ($38) { label = 10; break; } else { label = 12; break; }
    case 12: 
      var $40=$qn;
      var $41=$1;
      var $42=(((-$40))|0);
      var $43=(($41+($42<<2))|0);
      $1=$43;
      var $44=$qn;
      var $45=$2;
      var $46=(((-$44))|0);
      var $47=(($45+($46<<2))|0);
      $2=$47;
      var $48=$5;
      var $49=($48<<2);
      var $50=STACKTOP;STACKTOP = (STACKTOP + $49)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $51=$50;
      $tp=$51;
      var $52=$qn;
      var $53=(($52)|0)==1;
      if ($53) { label = 13; break; } else { label = 54; break; }
    case 13: 
      var $55=$2;
      var $56=$5;
      var $57=(((-$56))|0);
      var $58=(($55+($57<<2))|0);
      var $59=(($58+4)|0);
      var $60=$4;
      var $61=$5;
      var $62=(((-$61))|0);
      var $63=(($60+($62<<2))|0);
      var $64=$5;
      var $65=___gmpn_cmp($59, $63, $64);
      var $66=(($65)|0) >= 0;
      var $67=(($66)&1);
      $qh=$67;
      var $68=$qh;
      var $69=(($68)|0)!=0;
      if ($69) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $71=$2;
      var $72=$5;
      var $73=(((-$72))|0);
      var $74=(($71+($73<<2))|0);
      var $75=(($74+4)|0);
      var $76=$2;
      var $77=$5;
      var $78=(((-$77))|0);
      var $79=(($76+($78<<2))|0);
      var $80=(($79+4)|0);
      var $81=$4;
      var $82=$5;
      var $83=(((-$82))|0);
      var $84=(($81+($83<<2))|0);
      var $85=$5;
      var $86=___gmpn_sub_n($75, $80, $84, $85);
      label = 15; break;
    case 15: 
      var $88=$2;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      $n2=$90;
      var $91=$2;
      var $92=((($91)-(4))|0);
      var $93=HEAP32[(($92)>>2)];
      $n1=$93;
      var $94=$2;
      var $95=((($94)-(8))|0);
      var $96=HEAP32[(($95)>>2)];
      $n0=$96;
      var $97=$4;
      var $98=((($97)-(4))|0);
      var $99=HEAP32[(($98)>>2)];
      $d1=$99;
      var $100=$4;
      var $101=((($100)-(8))|0);
      var $102=HEAP32[(($101)>>2)];
      $d0=$102;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $105=$n2;
      var $106=$d1;
      var $107=(($105)|0)==(($106)|0);
      if ($107) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $109=$n1;
      var $110=$d0;
      var $111=(($109)|0)==(($110)|0);
      if ($111) { label = 19; break; } else { label = 22; break; }
    case 19: 
      $q=-1;
      var $113=$2;
      var $114=$5;
      var $115=(((-$114))|0);
      var $116=(($113+($115<<2))|0);
      var $117=$4;
      var $118=$5;
      var $119=(((-$118))|0);
      var $120=(($117+($119<<2))|0);
      var $121=$5;
      var $122=$q;
      var $123=___gmpn_submul_1($116, $120, $121, $122);
      $cy=$123;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 53; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $129=$n2;
      $__u=$129;
      var $130=$6;
      var $131=(($130)|0);
      var $132=HEAP32[(($131)>>2)];
      $__v=$132;
      var $133=$__u;
      var $134=$133 & 65535;
      $__ul=$134;
      var $135=$__u;
      var $136=$135 >>> 16;
      $__uh=$136;
      var $137=$__v;
      var $138=$137 & 65535;
      $__vl=$138;
      var $139=$__v;
      var $140=$139 >>> 16;
      $__vh=$140;
      var $141=$__ul;
      var $142=$__vl;
      var $143=Math.imul($141,$142);
      $__x0=$143;
      var $144=$__ul;
      var $145=$__vh;
      var $146=Math.imul($144,$145);
      $__x1=$146;
      var $147=$__uh;
      var $148=$__vl;
      var $149=Math.imul($147,$148);
      $__x2=$149;
      var $150=$__uh;
      var $151=$__vh;
      var $152=Math.imul($150,$151);
      $__x3=$152;
      var $153=$__x0;
      var $154=$153 >>> 16;
      var $155=$__x1;
      var $156=((($155)+($154))|0);
      $__x1=$156;
      var $157=$__x2;
      var $158=$__x1;
      var $159=((($158)+($157))|0);
      $__x1=$159;
      var $160=$__x1;
      var $161=$__x2;
      var $162=(($160)>>>0) < (($161)>>>0);
      if ($162) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $164=$__x3;
      var $165=((($164)+(65536))|0);
      $__x3=$165;
      label = 26; break;
    case 26: 
      var $167=$__x3;
      var $168=$__x1;
      var $169=$168 >>> 16;
      var $170=((($167)+($169))|0);
      $q=$170;
      var $171=$__x1;
      var $172=$171 << 16;
      var $173=$__x0;
      var $174=$173 & 65535;
      var $175=((($172)+($174))|0);
      $_q0=$175;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $178=$_q0;
      var $179=$n1;
      var $180=((($178)+($179))|0);
      $__x=$180;
      var $181=$q;
      var $182=$n2;
      var $183=((($181)+($182))|0);
      var $184=$__x;
      var $185=$_q0;
      var $186=(($184)>>>0) < (($185)>>>0);
      var $187=(($186)&1);
      var $188=((($183)+($187))|0);
      $q=$188;
      var $189=$__x;
      $_q0=$189;
      label = 29; break;
    case 29: 
      var $191=$n1;
      var $192=$d1;
      var $193=$q;
      var $194=Math.imul($192,$193);
      var $195=((($191)-($194))|0);
      $n1=$195;
      var $196=$n0;
      $n0=$196;
      label = 30; break;
    case 30: 
      var $198=$n0;
      var $199=$d0;
      var $200=((($198)-($199))|0);
      $__x4=$200;
      var $201=$n1;
      var $202=$d1;
      var $203=((($201)-($202))|0);
      var $204=$n0;
      var $205=$d0;
      var $206=(($204)>>>0) < (($205)>>>0);
      var $207=(($206)&1);
      var $208=((($203)-($207))|0);
      $n1=$208;
      var $209=$__x4;
      $n0=$209;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $212=$d0;
      $__u13=$212;
      var $213=$q;
      $__v14=$213;
      var $214=$__u13;
      var $215=$214 & 65535;
      $__ul9=$215;
      var $216=$__u13;
      var $217=$216 >>> 16;
      $__uh11=$217;
      var $218=$__v14;
      var $219=$218 & 65535;
      $__vl10=$219;
      var $220=$__v14;
      var $221=$220 >>> 16;
      $__vh12=$221;
      var $222=$__ul9;
      var $223=$__vl10;
      var $224=Math.imul($222,$223);
      $__x05=$224;
      var $225=$__ul9;
      var $226=$__vh12;
      var $227=Math.imul($225,$226);
      $__x16=$227;
      var $228=$__uh11;
      var $229=$__vl10;
      var $230=Math.imul($228,$229);
      $__x27=$230;
      var $231=$__uh11;
      var $232=$__vh12;
      var $233=Math.imul($231,$232);
      $__x38=$233;
      var $234=$__x05;
      var $235=$234 >>> 16;
      var $236=$__x16;
      var $237=((($236)+($235))|0);
      $__x16=$237;
      var $238=$__x27;
      var $239=$__x16;
      var $240=((($239)+($238))|0);
      $__x16=$240;
      var $241=$__x16;
      var $242=$__x27;
      var $243=(($241)>>>0) < (($242)>>>0);
      if ($243) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $245=$__x38;
      var $246=((($245)+(65536))|0);
      $__x38=$246;
      label = 34; break;
    case 34: 
      var $248=$__x38;
      var $249=$__x16;
      var $250=$249 >>> 16;
      var $251=((($248)+($250))|0);
      $_t1=$251;
      var $252=$__x16;
      var $253=$252 << 16;
      var $254=$__x05;
      var $255=$254 & 65535;
      var $256=((($253)+($255))|0);
      $_t0=$256;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $259=$n0;
      var $260=$_t0;
      var $261=((($259)-($260))|0);
      $__x15=$261;
      var $262=$n1;
      var $263=$_t1;
      var $264=((($262)-($263))|0);
      var $265=$n0;
      var $266=$_t0;
      var $267=(($265)>>>0) < (($266)>>>0);
      var $268=(($267)&1);
      var $269=((($264)-($268))|0);
      $n1=$269;
      var $270=$__x15;
      $n0=$270;
      label = 37; break;
    case 37: 
      var $272=$q;
      var $273=((($272)+(1))|0);
      $q=$273;
      var $274=$n1;
      var $275=$_q0;
      var $276=(($274)>>>0) >= (($275)>>>0);
      var $277=(($276)&1);
      var $278=(((-$277))|0);
      $_mask=$278;
      var $279=$_mask;
      var $280=$q;
      var $281=((($280)+($279))|0);
      $q=$281;
      label = 38; break;
    case 38: 
      var $283=$n0;
      var $284=$_mask;
      var $285=$d0;
      var $286=$284 & $285;
      var $287=((($283)+($286))|0);
      $__x17=$287;
      var $288=$n1;
      var $289=$_mask;
      var $290=$d1;
      var $291=$289 & $290;
      var $292=((($288)+($291))|0);
      var $293=$__x17;
      var $294=$n0;
      var $295=(($293)>>>0) < (($294)>>>0);
      var $296=(($295)&1);
      var $297=((($292)+($296))|0);
      $n1=$297;
      var $298=$__x17;
      $n0=$298;
      label = 39; break;
    case 39: 
      var $300=$n1;
      var $301=$d1;
      var $302=(($300)>>>0) >= (($301)>>>0);
      if ($302) { label = 40; break; } else { label = 46; break; }
    case 40: 
      var $304=$n1;
      var $305=$d1;
      var $306=(($304)>>>0) > (($305)>>>0);
      if ($306) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $308=$n0;
      var $309=$d0;
      var $310=(($308)>>>0) >= (($309)>>>0);
      if ($310) { label = 42; break; } else { label = 45; break; }
    case 42: 
      var $312=$q;
      var $313=((($312)+(1))|0);
      $q=$313;
      label = 43; break;
    case 43: 
      var $315=$n0;
      var $316=$d0;
      var $317=((($315)-($316))|0);
      $__x18=$317;
      var $318=$n1;
      var $319=$d1;
      var $320=((($318)-($319))|0);
      var $321=$n0;
      var $322=$d0;
      var $323=(($321)>>>0) < (($322)>>>0);
      var $324=(($323)&1);
      var $325=((($320)-($324))|0);
      $n1=$325;
      var $326=$__x18;
      $n0=$326;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $331=$5;
      var $332=(($331)|0) > 2;
      if ($332) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $334=$2;
      var $335=$5;
      var $336=(((-$335))|0);
      var $337=(($334+($336<<2))|0);
      var $338=$4;
      var $339=$5;
      var $340=(((-$339))|0);
      var $341=(($338+($340<<2))|0);
      var $342=$5;
      var $343=((($342)-(2))|0);
      var $344=$q;
      var $345=___gmpn_submul_1($337, $341, $343, $344);
      $cy19=$345;
      var $346=$n0;
      var $347=$cy19;
      var $348=(($346)>>>0) < (($347)>>>0);
      var $349=(($348)&1);
      $cy1=$349;
      var $350=$n0;
      var $351=$cy19;
      var $352=((($350)-($351))|0);
      $n0=$352;
      var $353=$n1;
      var $354=$cy1;
      var $355=(($353)>>>0) < (($354)>>>0);
      var $356=(($355)&1);
      $cy19=$356;
      var $357=$n1;
      var $358=$cy1;
      var $359=((($357)-($358))|0);
      $n1=$359;
      var $360=$n0;
      var $361=$2;
      var $362=((($361)-(8))|0);
      HEAP32[(($362)>>2)]=$360;
      var $363=$cy19;
      var $364=(($363)|0)!=0;
      if ($364) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $366=$d1;
      var $367=$2;
      var $368=$5;
      var $369=(((-$368))|0);
      var $370=(($367+($369<<2))|0);
      var $371=$2;
      var $372=$5;
      var $373=(((-$372))|0);
      var $374=(($371+($373<<2))|0);
      var $375=$4;
      var $376=$5;
      var $377=(((-$376))|0);
      var $378=(($375+($377<<2))|0);
      var $379=$5;
      var $380=((($379)-(1))|0);
      var $381=___gmpn_add_n($370, $374, $378, $380);
      var $382=((($366)+($381))|0);
      var $383=$n1;
      var $384=((($383)+($382))|0);
      $n1=$384;
      var $385=$q;
      var $386=(($385)|0)==0;
      var $387=(($386)&1);
      var $388=$qh;
      var $389=((($388)-($387))|0);
      $qh=$389;
      var $390=$q;
      var $391=((($390)-(1))|0);
      $q=$391;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      var $394=$n0;
      var $395=$2;
      var $396=((($395)-(8))|0);
      HEAP32[(($396)>>2)]=$394;
      label = 52; break;
    case 52: 
      var $398=$n1;
      var $399=$2;
      var $400=((($399)-(4))|0);
      HEAP32[(($400)>>2)]=$398;
      label = 53; break;
    case 53: 
      var $402=$q;
      var $403=$1;
      var $404=(($403)|0);
      HEAP32[(($404)>>2)]=$402;
      label = 71; break;
    case 54: 
      var $406=$qn;
      var $407=(($406)|0)==2;
      if ($407) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $409=$1;
      var $410=$2;
      var $411=((($410)-(8))|0);
      var $412=$4;
      var $413=((($412)-(8))|0);
      var $414=___gmpn_divrem_2($409, 0, $411, 4, $413);
      $qh=$414;
      label = 60; break;
    case 56: 
      var $416=$qn;
      var $417=(($416)|0) >= 50;
      if ($417) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $419=$1;
      var $420=$2;
      var $421=$qn;
      var $422=(((-$421))|0);
      var $423=(($420+($422<<2))|0);
      var $424=$qn;
      var $425=($424<<1);
      var $426=$4;
      var $427=$qn;
      var $428=(((-$427))|0);
      var $429=(($426+($428<<2))|0);
      var $430=$qn;
      var $431=$6;
      var $432=(($431)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=___gmpn_sbpi1_div_qr($419, $423, $425, $429, $430, $433);
      $qh=$434;
      label = 59; break;
    case 58: 
      var $436=$1;
      var $437=$2;
      var $438=$qn;
      var $439=(((-$438))|0);
      var $440=(($437+($439<<2))|0);
      var $441=$4;
      var $442=$qn;
      var $443=(((-$442))|0);
      var $444=(($441+($443<<2))|0);
      var $445=$qn;
      var $446=$6;
      var $447=$tp;
      var $448=___gmpn_dcpi1_div_qr_n($436, $440, $444, $445, $446, $447);
      $qh=$448;
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $451=$qn;
      var $452=$5;
      var $453=(($451)|0)!=(($452)|0);
      if ($453) { label = 61; break; } else { label = 70; break; }
    case 61: 
      var $455=$qn;
      var $456=$5;
      var $457=$qn;
      var $458=((($456)-($457))|0);
      var $459=(($455)|0) > (($458)|0);
      if ($459) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $461=$tp;
      var $462=$1;
      var $463=$qn;
      var $464=$4;
      var $465=$5;
      var $466=(((-$465))|0);
      var $467=(($464+($466<<2))|0);
      var $468=$5;
      var $469=$qn;
      var $470=((($468)-($469))|0);
      var $471=___gmpn_mul($461, $462, $463, $467, $470);
      label = 64; break;
    case 63: 
      var $473=$tp;
      var $474=$4;
      var $475=$5;
      var $476=(((-$475))|0);
      var $477=(($474+($476<<2))|0);
      var $478=$5;
      var $479=$qn;
      var $480=((($478)-($479))|0);
      var $481=$1;
      var $482=$qn;
      var $483=___gmpn_mul($473, $477, $480, $481, $482);
      label = 64; break;
    case 64: 
      var $485=$2;
      var $486=$5;
      var $487=(((-$486))|0);
      var $488=(($485+($487<<2))|0);
      var $489=$2;
      var $490=$5;
      var $491=(((-$490))|0);
      var $492=(($489+($491<<2))|0);
      var $493=$tp;
      var $494=$5;
      var $495=___gmpn_sub_n($488, $492, $493, $494);
      $cy=$495;
      var $496=$qh;
      var $497=(($496)|0)!=0;
      if ($497) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $499=$2;
      var $500=$5;
      var $501=(((-$500))|0);
      var $502=(($499+($501<<2))|0);
      var $503=$qn;
      var $504=(($502+($503<<2))|0);
      var $505=$2;
      var $506=$5;
      var $507=(((-$506))|0);
      var $508=(($505+($507<<2))|0);
      var $509=$qn;
      var $510=(($508+($509<<2))|0);
      var $511=$4;
      var $512=$5;
      var $513=(((-$512))|0);
      var $514=(($511+($513<<2))|0);
      var $515=$5;
      var $516=$qn;
      var $517=((($515)-($516))|0);
      var $518=___gmpn_sub_n($504, $510, $514, $517);
      var $519=$cy;
      var $520=((($519)+($518))|0);
      $cy=$520;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $523=$cy;
      var $524=(($523)|0)!=0;
      if ($524) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $526=$1;
      var $527=$1;
      var $528=$qn;
      var $529=___gmpn_sub_1($526, $527, $528, 1);
      var $530=$qh;
      var $531=((($530)-($529))|0);
      $qh=$531;
      var $532=$2;
      var $533=$5;
      var $534=(((-$533))|0);
      var $535=(($532+($534<<2))|0);
      var $536=$2;
      var $537=$5;
      var $538=(((-$537))|0);
      var $539=(($536+($538<<2))|0);
      var $540=$4;
      var $541=$5;
      var $542=(((-$541))|0);
      var $543=(($540+($542<<2))|0);
      var $544=$5;
      var $545=___gmpn_add_n($535, $539, $543, $544);
      var $546=$cy;
      var $547=((($546)-($545))|0);
      $cy=$547;
      label = 67; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $551=$3;
      var $552=$5;
      var $553=((($551)-($552))|0);
      var $554=$qn;
      var $555=((($553)-($554))|0);
      var $556=((($555)+(1))|0);
      $qn=$556;
      label = 72; break;
    case 72: 
      var $558=$qn;
      var $559=$5;
      var $560=(($558)|0) > (($559)|0);
      if ($560) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $562=$5;
      var $563=$1;
      var $564=(((-$562))|0);
      var $565=(($563+($564<<2))|0);
      $1=$565;
      var $566=$5;
      var $567=$2;
      var $568=(((-$566))|0);
      var $569=(($567+($568<<2))|0);
      $2=$569;
      var $570=$1;
      var $571=$2;
      var $572=$5;
      var $573=(((-$572))|0);
      var $574=(($571+($573<<2))|0);
      var $575=$4;
      var $576=$5;
      var $577=(((-$576))|0);
      var $578=(($575+($577<<2))|0);
      var $579=$5;
      var $580=$6;
      var $581=$tp;
      var $582=___gmpn_dcpi1_div_qr_n($570, $574, $578, $579, $580, $581);
      var $583=$5;
      var $584=$qn;
      var $585=((($584)-($583))|0);
      $qn=$585;
      label = 72; break;
    case 74: 
      var $587=$qn;
      var $588=((($587)-(1))|0);
      $qn=$588;
      var $589=$qn;
      var $590=$1;
      var $591=(((-$589))|0);
      var $592=(($590+($591<<2))|0);
      $1=$592;
      var $593=$5;
      var $594=$2;
      var $595=(((-$593))|0);
      var $596=(($594+($595<<2))|0);
      $2=$596;
      var $597=$qn;
      var $598=$1;
      var $599=(($598+($597<<2))|0);
      var $600=HEAP32[(($599)>>2)];
      $qsave=$600;
      var $601=$1;
      var $602=$2;
      var $603=$5;
      var $604=(((-$603))|0);
      var $605=(($602+($604<<2))|0);
      var $606=$4;
      var $607=$5;
      var $608=(((-$607))|0);
      var $609=(($606+($608<<2))|0);
      var $610=$5;
      var $611=$6;
      var $612=$tp;
      var $613=___gmpn_dcpi1_divappr_q_n($601, $605, $609, $610, $611, $612);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $619=$qn;
      var $620=(($619)|0)!=0;
      if ($620) { label = 80; break; } else { label = 86; break; }
    case 80: 
      var $622=$qn;
      var $623=((($622)-(1))|0);
      $__n=$623;
      var $624=$1;
      $__dst=$624;
      var $625=$1;
      var $626=(($625+4)|0);
      $__src=$626;
      var $627=$__src;
      var $628=(($627+4)|0);
      $__src=$628;
      var $629=HEAP32[(($627)>>2)];
      $__x20=$629;
      var $630=$__n;
      var $631=(($630)|0)!=0;
      if ($631) { label = 81; break; } else { label = 85; break; }
    case 81: 
      label = 82; break;
    case 82: 
      var $634=$__x20;
      var $635=$__dst;
      var $636=(($635+4)|0);
      $__dst=$636;
      HEAP32[(($635)>>2)]=$634;
      var $637=$__src;
      var $638=(($637+4)|0);
      $__src=$638;
      var $639=HEAP32[(($637)>>2)];
      $__x20=$639;
      label = 83; break;
    case 83: 
      var $641=$__n;
      var $642=((($641)-(1))|0);
      $__n=$642;
      var $643=(($642)|0)!=0;
      if ($643) { label = 82; break; } else { label = 84; break; }
    case 84: 
      label = 85; break;
    case 85: 
      var $646=$__x20;
      var $647=$__dst;
      var $648=(($647+4)|0);
      $__dst=$648;
      HEAP32[(($647)>>2)]=$646;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $651=$qsave;
      var $652=$qn;
      var $653=$1;
      var $654=(($653+($652<<2))|0);
      HEAP32[(($654)>>2)]=$651;
      label = 109; break;
    case 88: 
      var $656=$qn;
      var $657=$1;
      var $658=(((-$656))|0);
      var $659=(($657+($658<<2))|0);
      $1=$659;
      var $660=$qn;
      var $661=$2;
      var $662=(((-$660))|0);
      var $663=(($661+($662<<2))|0);
      $2=$663;
      var $664=$qn;
      var $665=((($664)+(1))|0);
      var $666=($665<<2);
      var $667=STACKTOP;STACKTOP = (STACKTOP + $666)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $668=$667;
      $q2p=$668;
      var $669=$qn;
      var $670=(($669)|0) >= 200;
      if ($670) { label = 90; break; } else { label = 89; break; }
    case 89: 
      var $672=$q2p;
      var $673=$2;
      var $674=$qn;
      var $675=(((-$674))|0);
      var $676=(($673+($675<<2))|0);
      var $677=((($676)-(8))|0);
      var $678=$qn;
      var $679=((($678)+(1))|0);
      var $680=($679<<1);
      var $681=$4;
      var $682=$qn;
      var $683=((($682)+(1))|0);
      var $684=(((-$683))|0);
      var $685=(($681+($684<<2))|0);
      var $686=$qn;
      var $687=((($686)+(1))|0);
      var $688=$6;
      var $689=(($688)|0);
      var $690=HEAP32[(($689)>>2)];
      var $691=___gmpn_sbpi1_divappr_q($672, $677, $680, $685, $687, $690);
      $qh=$691;
      label = 91; break;
    case 90: 
      var $693=$qn;
      var $694=((($693)+(1))|0);
      var $695=($694<<2);
      var $696=STACKTOP;STACKTOP = (STACKTOP + $695)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $697=$696;
      $tp=$697;
      var $698=$q2p;
      var $699=$2;
      var $700=$qn;
      var $701=(((-$700))|0);
      var $702=(($699+($701<<2))|0);
      var $703=((($702)-(8))|0);
      var $704=$4;
      var $705=$qn;
      var $706=((($705)+(1))|0);
      var $707=(((-$706))|0);
      var $708=(($704+($707<<2))|0);
      var $709=$qn;
      var $710=((($709)+(1))|0);
      var $711=$6;
      var $712=$tp;
      var $713=___gmpn_dcpi1_divappr_q_n($698, $703, $708, $710, $711, $712);
      $qh=$713;
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $723=$qn;
      var $724=(($723)|0)!=0;
      if ($724) { label = 100; break; } else { label = 106; break; }
    case 100: 
      var $726=$qn;
      var $727=((($726)-(1))|0);
      $__n21=$727;
      var $728=$1;
      $__dst22=$728;
      var $729=$q2p;
      var $730=(($729+4)|0);
      $__src23=$730;
      var $731=$__src23;
      var $732=(($731+4)|0);
      $__src23=$732;
      var $733=HEAP32[(($731)>>2)];
      $__x24=$733;
      var $734=$__n21;
      var $735=(($734)|0)!=0;
      if ($735) { label = 101; break; } else { label = 105; break; }
    case 101: 
      label = 102; break;
    case 102: 
      var $738=$__x24;
      var $739=$__dst22;
      var $740=(($739+4)|0);
      $__dst22=$740;
      HEAP32[(($739)>>2)]=$738;
      var $741=$__src23;
      var $742=(($741+4)|0);
      $__src23=$742;
      var $743=HEAP32[(($741)>>2)];
      $__x24=$743;
      label = 103; break;
    case 103: 
      var $745=$__n21;
      var $746=((($745)-(1))|0);
      $__n21=$746;
      var $747=(($746)|0)!=0;
      if ($747) { label = 102; break; } else { label = 104; break; }
    case 104: 
      label = 105; break;
    case 105: 
      var $750=$__x24;
      var $751=$__dst22;
      var $752=(($751+4)|0);
      $__dst22=$752;
      HEAP32[(($751)>>2)]=$750;
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $758=$__tmp_marker;
      var $759=(($758)|0)!=0;
      if ($759) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $761=$__tmp_marker;
      ___gmp_tmp_reentrant_free($761);
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      var $764=$qh;
      STACKTOP = __stackBase__;
      return $764;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_divappr_q["X"]=1;

function ___gmpn_divexact_1($dst, $src, $size, $divisor) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $c;
      var $h;
      var $l;
      var $ls;
      var $s;
      var $s_next;
      var $inverse;
      var $dummy;
      var $shift;
      var $__ctz_x;
      var $__ctz_c;
      var $__xr;
      var $__a;
      var $__n;
      var $__inv;
      var $__x;
      var $__y;
      var $__w;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x01;
      var $__x12;
      var $__x23;
      var $__x34;
      var $__ul5;
      var $__vl6;
      var $__uh7;
      var $__vh8;
      var $__u9;
      var $__v10;
      var $__x11;
      var $__y12;
      var $__w13;
      $1=$dst;
      $2=$src;
      $3=$size;
      $4=$divisor;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $15=$2;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      $s=$17;
      var $18=$3;
      var $19=(($18)|0)==1;
      if ($19) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$s;
      var $22=$4;
      var $23=Math.floor(((($21)>>>0))/((($22)>>>0)));
      var $24=$1;
      var $25=(($24)|0);
      HEAP32[(($25)>>2)]=$23;
      label = 53; break;
    case 14: 
      var $27=$4;
      var $28=$27 & 1;
      var $29=(($28)|0)==0;
      if ($29) { label = 15; break; } else { label = 25; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $32=$4;
      $__ctz_x=$32;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $36=$__ctz_x;
      var $37=$__ctz_x;
      var $38=(((-$37))|0);
      var $39=$36 & $38;
      $__xr=$39;
      var $40=$__xr;
      var $41=(($40)>>>0) < 65536;
      if ($41) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $43=$__xr;
      var $44=(($43)>>>0) < 256;
      var $45=$44 ? 1 : 9;
      var $51 = $45;label = 22; break;
    case 21: 
      var $47=$__xr;
      var $48=(($47)>>>0) < 16777216;
      var $49=$48 ? 17 : 25;
      var $51 = $49;label = 22; break;
    case 22: 
      var $51;
      $__a=$51;
      var $52=$__a;
      var $53=(((33)-($52))|0);
      var $54=$__xr;
      var $55=$__a;
      var $56=$54 >>> (($55)>>>0);
      var $57=((5244408+$56)|0);
      var $58=HEAP8[($57)];
      var $59=(($58)&255);
      var $60=((($53)-($59))|0);
      $__ctz_c=$60;
      label = 23; break;
    case 23: 
      var $62=$__ctz_c;
      var $63=(((31)-($62))|0);
      $shift=$63;
      label = 24; break;
    case 24: 
      var $65=$shift;
      var $66=$4;
      var $67=$66 >>> (($65)>>>0);
      $4=$67;
      label = 26; break;
    case 25: 
      $shift=0;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $71=$4;
      $__n=$71;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $74=$__n;
      var $75=Math.floor(((($74)>>>0))/(2));
      var $76=$75 & 127;
      var $77=((5249696+$76)|0);
      var $78=HEAP8[($77)];
      var $79=(($78)&255);
      $__inv=$79;
      var $80=$__inv;
      var $81=($80<<1);
      var $82=$__inv;
      var $83=$__inv;
      var $84=Math.imul($82,$83);
      var $85=$__n;
      var $86=Math.imul($84,$85);
      var $87=((($81)-($86))|0);
      $__inv=$87;
      var $88=$__inv;
      var $89=($88<<1);
      var $90=$__inv;
      var $91=$__inv;
      var $92=Math.imul($90,$91);
      var $93=$__n;
      var $94=Math.imul($92,$93);
      var $95=((($89)-($94))|0);
      $__inv=$95;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $98=$__inv;
      $inverse=$98;
      label = 32; break;
    case 32: 
      var $100=$4;
      var $101=$100 << 0;
      $4=$101;
      var $102=$shift;
      var $103=(($102)|0)!=0;
      if ($103) { label = 33; break; } else { label = 43; break; }
    case 33: 
      $c=0;
      $i=0;
      var $105=$3;
      var $106=((($105)-(1))|0);
      $3=$106;
      label = 34; break;
    case 34: 
      var $108=$i;
      var $109=((($108)+(1))|0);
      var $110=$2;
      var $111=(($110+($109<<2))|0);
      var $112=HEAP32[(($111)>>2)];
      $s_next=$112;
      var $113=$s;
      var $114=$shift;
      var $115=$113 >>> (($114)>>>0);
      var $116=$s_next;
      var $117=$shift;
      var $118=(((32)-($117))|0);
      var $119=$116 << $118;
      var $120=$115 | $119;
      $ls=$120;
      var $121=$s_next;
      $s=$121;
      label = 35; break;
    case 35: 
      var $123=$ls;
      $__x=$123;
      var $124=$c;
      $__y=$124;
      var $125=$__x;
      var $126=$__y;
      var $127=((($125)-($126))|0);
      $__w=$127;
      var $128=$__w;
      $l=$128;
      var $129=$__w;
      var $130=$__x;
      var $131=(($129)>>>0) > (($130)>>>0);
      var $132=(($131)&1);
      $c=$132;
      label = 36; break;
    case 36: 
      var $134=$l;
      var $135=$inverse;
      var $136=Math.imul($134,$135);
      $l=$136;
      var $137=$l;
      var $138=$i;
      var $139=$1;
      var $140=(($139+($138<<2))|0);
      HEAP32[(($140)>>2)]=$137;
      label = 37; break;
    case 37: 
      var $142=$l;
      $__u=$142;
      var $143=$4;
      $__v=$143;
      var $144=$__u;
      var $145=$144 & 65535;
      $__ul=$145;
      var $146=$__u;
      var $147=$146 >>> 16;
      $__uh=$147;
      var $148=$__v;
      var $149=$148 & 65535;
      $__vl=$149;
      var $150=$__v;
      var $151=$150 >>> 16;
      $__vh=$151;
      var $152=$__ul;
      var $153=$__vl;
      var $154=Math.imul($152,$153);
      $__x0=$154;
      var $155=$__ul;
      var $156=$__vh;
      var $157=Math.imul($155,$156);
      $__x1=$157;
      var $158=$__uh;
      var $159=$__vl;
      var $160=Math.imul($158,$159);
      $__x2=$160;
      var $161=$__uh;
      var $162=$__vh;
      var $163=Math.imul($161,$162);
      $__x3=$163;
      var $164=$__x0;
      var $165=$164 >>> 16;
      var $166=$__x1;
      var $167=((($166)+($165))|0);
      $__x1=$167;
      var $168=$__x2;
      var $169=$__x1;
      var $170=((($169)+($168))|0);
      $__x1=$170;
      var $171=$__x1;
      var $172=$__x2;
      var $173=(($171)>>>0) < (($172)>>>0);
      if ($173) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $175=$__x3;
      var $176=((($175)+(65536))|0);
      $__x3=$176;
      label = 39; break;
    case 39: 
      var $178=$__x3;
      var $179=$__x1;
      var $180=$179 >>> 16;
      var $181=((($178)+($180))|0);
      $h=$181;
      var $182=$__x1;
      var $183=$182 << 16;
      var $184=$__x0;
      var $185=$184 & 65535;
      var $186=((($183)+($185))|0);
      $dummy=$186;
      label = 40; break;
    case 40: 
      var $188=$h;
      var $189=$c;
      var $190=((($189)+($188))|0);
      $c=$190;
      var $191=$i;
      var $192=((($191)+(1))|0);
      $i=$192;
      label = 41; break;
    case 41: 
      var $194=$i;
      var $195=$3;
      var $196=(($194)|0) < (($195)|0);
      if ($196) { label = 34; break; } else { label = 42; break; }
    case 42: 
      var $198=$s;
      var $199=$shift;
      var $200=$198 >>> (($199)>>>0);
      $ls=$200;
      var $201=$ls;
      var $202=$c;
      var $203=((($201)-($202))|0);
      $l=$203;
      var $204=$l;
      var $205=$inverse;
      var $206=Math.imul($204,$205);
      $l=$206;
      var $207=$l;
      var $208=$i;
      var $209=$1;
      var $210=(($209+($208<<2))|0);
      HEAP32[(($210)>>2)]=$207;
      label = 53; break;
    case 43: 
      var $212=$s;
      var $213=$inverse;
      var $214=Math.imul($212,$213);
      $l=$214;
      var $215=$l;
      var $216=$1;
      var $217=(($216)|0);
      HEAP32[(($217)>>2)]=$215;
      $i=1;
      $c=0;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $220=$l;
      $__u9=$220;
      var $221=$4;
      $__v10=$221;
      var $222=$__u9;
      var $223=$222 & 65535;
      $__ul5=$223;
      var $224=$__u9;
      var $225=$224 >>> 16;
      $__uh7=$225;
      var $226=$__v10;
      var $227=$226 & 65535;
      $__vl6=$227;
      var $228=$__v10;
      var $229=$228 >>> 16;
      $__vh8=$229;
      var $230=$__ul5;
      var $231=$__vl6;
      var $232=Math.imul($230,$231);
      $__x01=$232;
      var $233=$__ul5;
      var $234=$__vh8;
      var $235=Math.imul($233,$234);
      $__x12=$235;
      var $236=$__uh7;
      var $237=$__vl6;
      var $238=Math.imul($236,$237);
      $__x23=$238;
      var $239=$__uh7;
      var $240=$__vh8;
      var $241=Math.imul($239,$240);
      $__x34=$241;
      var $242=$__x01;
      var $243=$242 >>> 16;
      var $244=$__x12;
      var $245=((($244)+($243))|0);
      $__x12=$245;
      var $246=$__x23;
      var $247=$__x12;
      var $248=((($247)+($246))|0);
      $__x12=$248;
      var $249=$__x12;
      var $250=$__x23;
      var $251=(($249)>>>0) < (($250)>>>0);
      if ($251) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $253=$__x34;
      var $254=((($253)+(65536))|0);
      $__x34=$254;
      label = 47; break;
    case 47: 
      var $256=$__x34;
      var $257=$__x12;
      var $258=$257 >>> 16;
      var $259=((($256)+($258))|0);
      $h=$259;
      var $260=$__x12;
      var $261=$260 << 16;
      var $262=$__x01;
      var $263=$262 & 65535;
      var $264=((($261)+($263))|0);
      $dummy=$264;
      label = 48; break;
    case 48: 
      var $266=$h;
      var $267=$c;
      var $268=((($267)+($266))|0);
      $c=$268;
      var $269=$i;
      var $270=$2;
      var $271=(($270+($269<<2))|0);
      var $272=HEAP32[(($271)>>2)];
      $s=$272;
      label = 49; break;
    case 49: 
      var $274=$s;
      $__x11=$274;
      var $275=$c;
      $__y12=$275;
      var $276=$__x11;
      var $277=$__y12;
      var $278=((($276)-($277))|0);
      $__w13=$278;
      var $279=$__w13;
      $l=$279;
      var $280=$__w13;
      var $281=$__x11;
      var $282=(($280)>>>0) > (($281)>>>0);
      var $283=(($282)&1);
      $c=$283;
      label = 50; break;
    case 50: 
      var $285=$l;
      var $286=$inverse;
      var $287=Math.imul($285,$286);
      $l=$287;
      var $288=$l;
      var $289=$i;
      var $290=$1;
      var $291=(($290+($289<<2))|0);
      HEAP32[(($291)>>2)]=$288;
      var $292=$i;
      var $293=((($292)+(1))|0);
      $i=$293;
      label = 51; break;
    case 51: 
      var $295=$i;
      var $296=$3;
      var $297=(($295)|0) < (($296)|0);
      if ($297) { label = 44; break; } else { label = 52; break; }
    case 52: 
      label = 53; break;
    case 53: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_divexact_1["X"]=1;

function ___gmpn_ni_invertappr($ip, $dp, $n, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $cy;
      var $xp;
      var $rn;
      var $mn;
      var $sizes=__stackBase__;
      var $sizp;
      var $tp;
      var $__tmp_marker=(__stackBase__)+(96);
      var $method;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__d;
      var $__s;
      var $__n;
      var $__x9;
      var $__p10;
      var $__x11;
      var $__p12;
      var $__x13;
      var $__p14;
      $1=$ip;
      $2=$dp;
      $3=$n;
      $4=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $15=(($sizes)|0);
      $sizp=$15;
      var $16=$3;
      $rn=$16;
      label = 13; break;
    case 13: 
      var $18=$rn;
      var $19=$sizp;
      HEAP32[(($19)>>2)]=$18;
      var $20=$rn;
      var $21=$20 >> 1;
      var $22=((($21)+(1))|0);
      $rn=$22;
      var $23=$sizp;
      var $24=(($23+4)|0);
      $sizp=$24;
      label = 14; break;
    case 14: 
      var $26=$rn;
      var $27=(($26)|0) >= 200;
      if ($27) { label = 13; break; } else { label = 15; break; }
    case 15: 
      var $29=$3;
      var $30=$2;
      var $31=(($30+($29<<2))|0);
      $2=$31;
      var $32=$3;
      var $33=$1;
      var $34=(($33+($32<<2))|0);
      $1=$34;
      var $35=$1;
      var $36=$rn;
      var $37=(((-$36))|0);
      var $38=(($35+($37<<2))|0);
      var $39=$2;
      var $40=$rn;
      var $41=(((-$40))|0);
      var $42=(($39+($41<<2))|0);
      var $43=$rn;
      var $44=$4;
      var $45=_mpn_bc_invertappr($38, $42, $43, $44);
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $46=$3;
      var $47=((($46)+(1))|0);
      var $48=___gmpn_mulmod_bnm1_next_size($47);
      $mn=$48;
      var $49=$mn;
      var $50=$3;
      var $51=$3;
      var $52=$51 >> 1;
      var $53=((($52)+(1))|0);
      var $54=_mpn_mulmod_bnm1_itch280($49, $50, $53);
      var $55=($54<<2);
      var $56=(($55)>>>0) < 65536;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $58=$mn;
      var $59=$3;
      var $60=$3;
      var $61=$60 >> 1;
      var $62=((($61)+(1))|0);
      var $63=_mpn_mulmod_bnm1_itch280($58, $59, $62);
      var $64=($63<<2);
      var $65=STACKTOP;STACKTOP = (STACKTOP + $64)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $76 = $65;label = 18; break;
    case 17: 
      var $67=$mn;
      var $68=$3;
      var $69=$3;
      var $70=$69 >> 1;
      var $71=((($70)+(1))|0);
      var $72=_mpn_mulmod_bnm1_itch280($67, $68, $71);
      var $73=($72<<2);
      var $74=___gmp_tmp_reentrant_alloc($__tmp_marker, $73);
      var $76 = $74;label = 18; break;
    case 18: 
      var $76;
      var $77=$76;
      $tp=$77;
      var $78=$4;
      var $79=$3;
      var $80=(($78+($79<<2))|0);
      var $81=(($80+12)|0);
      $xp=$81;
      label = 19; break;
    case 19: 
      var $83=$sizp;
      var $84=((($83)-(4))|0);
      $sizp=$84;
      var $85=HEAP32[(($84)>>2)];
      $3=$85;
      var $86=$3;
      var $87=((($86)+(1))|0);
      var $88=___gmpn_mulmod_bnm1_next_size($87);
      $mn=$88;
      var $89=$3;
      var $90=$rn;
      var $91=((($89)+($90))|0);
      var $92=(($88)|0) > (($91)|0);
      if ($92) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $94=$xp;
      var $95=$2;
      var $96=$3;
      var $97=(((-$96))|0);
      var $98=(($95+($97<<2))|0);
      var $99=$3;
      var $100=$1;
      var $101=$rn;
      var $102=(((-$101))|0);
      var $103=(($100+($102<<2))|0);
      var $104=$rn;
      var $105=___gmpn_mul($94, $98, $99, $103, $104);
      var $106=$xp;
      var $107=$rn;
      var $108=(($106+($107<<2))|0);
      var $109=$xp;
      var $110=$rn;
      var $111=(($109+($110<<2))|0);
      var $112=$2;
      var $113=$3;
      var $114=(((-$113))|0);
      var $115=(($112+($114<<2))|0);
      var $116=$3;
      var $117=$rn;
      var $118=((($116)-($117))|0);
      var $119=((($118)+(1))|0);
      var $120=___gmpn_add_n($108, $111, $115, $119);
      $method=1;
      label = 53; break;
    case 21: 
      var $122=$xp;
      var $123=$mn;
      var $124=$2;
      var $125=$3;
      var $126=(((-$125))|0);
      var $127=(($124+($126<<2))|0);
      var $128=$3;
      var $129=$1;
      var $130=$rn;
      var $131=(((-$130))|0);
      var $132=(($129+($131<<2))|0);
      var $133=$rn;
      var $134=$tp;
      ___gmpn_mulmod_bnm1($122, $123, $127, $128, $132, $133, $134);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $137=$xp;
      var $138=$rn;
      var $139=(($137+($138<<2))|0);
      var $140=$xp;
      var $141=$rn;
      var $142=(($140+($141<<2))|0);
      var $143=$2;
      var $144=$3;
      var $145=(((-$144))|0);
      var $146=(($143+($145<<2))|0);
      var $147=$mn;
      var $148=$rn;
      var $149=((($147)-($148))|0);
      var $150=___gmpn_add_n($139, $142, $146, $149);
      var $151=((($150)+(1))|0);
      var $152=$mn;
      var $153=$xp;
      var $154=(($153+($152<<2))|0);
      HEAP32[(($154)>>2)]=$151;
      var $155=$xp;
      var $156=$xp;
      var $157=$2;
      var $158=$3;
      var $159=$mn;
      var $160=$rn;
      var $161=((($159)-($160))|0);
      var $162=((($158)-($161))|0);
      var $163=(((-$162))|0);
      var $164=(($157+($163<<2))|0);
      var $165=$3;
      var $166=$mn;
      var $167=$rn;
      var $168=((($166)-($167))|0);
      var $169=((($165)-($168))|0);
      var $170=___gmpn_add_n($155, $156, $164, $169);
      $cy=$170;
      label = 24; break;
    case 24: 
      var $172=$xp;
      var $173=$3;
      var $174=(($172+($173<<2))|0);
      var $175=$mn;
      var $176=$rn;
      var $177=((($175)-($176))|0);
      var $178=(((-$177))|0);
      var $179=(($174+($178<<2))|0);
      $__p=$179;
      var $180=$__p;
      var $181=HEAP32[(($180)>>2)];
      var $182=$cy;
      var $183=((($181)+($182))|0);
      $__x=$183;
      var $184=$__x;
      var $185=$__p;
      HEAP32[(($185)>>2)]=$184;
      var $186=$__x;
      var $187=$cy;
      var $188=(($186)>>>0) < (($187)>>>0);
      if ($188) { label = 25; break; } else { label = 29; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $191=$__p;
      var $192=(($191+4)|0);
      $__p=$192;
      var $193=HEAP32[(($192)>>2)];
      var $194=((($193)+(1))|0);
      HEAP32[(($192)>>2)]=$194;
      var $195=(($194)|0)==0;
      if ($195) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 26; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $203=$xp;
      var $204=$rn;
      var $205=(($203+($204<<2))|0);
      var $206=$3;
      var $207=(($205+($206<<2))|0);
      var $208=$mn;
      var $209=(((-$208))|0);
      var $210=(($207+($209<<2))|0);
      $__p2=$210;
      label = 34; break;
    case 34: 
      var $212=$__p2;
      var $213=(($212+4)|0);
      $__p2=$213;
      var $214=HEAP32[(($212)>>2)];
      var $215=((($214)-(1))|0);
      HEAP32[(($212)>>2)]=$215;
      var $216=(($214)|0)==0;
      if ($216) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 34; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $220=$mn;
      var $221=$xp;
      var $222=(($221+($220<<2))|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=(($223)|0)!=0;
      if ($224) { label = 38; break; } else { label = 46; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $227=$xp;
      $__p4=$227;
      var $228=$__p4;
      var $229=HEAP32[(($228)>>2)];
      var $230=$mn;
      var $231=$xp;
      var $232=(($231+($230<<2))|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=((($233)-(1))|0);
      var $235=((($229)+($234))|0);
      $__x3=$235;
      var $236=$__x3;
      var $237=$__p4;
      HEAP32[(($237)>>2)]=$236;
      var $238=$__x3;
      var $239=$mn;
      var $240=$xp;
      var $241=(($240+($239<<2))|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=((($242)-(1))|0);
      var $244=(($238)>>>0) < (($243)>>>0);
      if ($244) { label = 40; break; } else { label = 44; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $247=$__p4;
      var $248=(($247+4)|0);
      $__p4=$248;
      var $249=HEAP32[(($248)>>2)];
      var $250=((($249)+(1))|0);
      HEAP32[(($248)>>2)]=$250;
      var $251=(($250)|0)==0;
      if ($251) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 41; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 52; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $258=$xp;
      $__p6=$258;
      label = 48; break;
    case 48: 
      var $260=$__p6;
      var $261=(($260+4)|0);
      $__p6=$261;
      var $262=HEAP32[(($260)>>2)];
      var $263=((($262)-(1))|0);
      HEAP32[(($260)>>2)]=$263;
      var $264=(($262)|0)==0;
      if ($264) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 48; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      $method=0;
      label = 53; break;
    case 53: 
      var $270=$3;
      var $271=$xp;
      var $272=(($271+($270<<2))|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=(($273)>>>0) < 2;
      if ($274) { label = 54; break; } else { label = 71; break; }
    case 54: 
      $cy=1;
      label = 55; break;
    case 55: 
      var $277=$3;
      var $278=$xp;
      var $279=(($278+($277<<2))|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280)|0)!=0;
      if ($281) { var $292 = 1;label = 57; break; } else { label = 56; break; }
    case 56: 
      var $283=$xp;
      var $284=$2;
      var $285=$3;
      var $286=(((-$285))|0);
      var $287=(($284+($286<<2))|0);
      var $288=$3;
      var $289=___gmpn_cmp($283, $287, $288);
      var $290=(($289)|0) > 0;
      var $292 = $290;label = 57; break;
    case 57: 
      var $292;
      if ($292) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $294=$xp;
      var $295=$xp;
      var $296=$2;
      var $297=$3;
      var $298=(((-$297))|0);
      var $299=(($296+($298<<2))|0);
      var $300=$3;
      var $301=___gmpn_sub_n($294, $295, $299, $300);
      var $302=$3;
      var $303=$xp;
      var $304=(($303+($302<<2))|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=((($305)-($301))|0);
      HEAP32[(($304)>>2)]=$306;
      var $307=$cy;
      var $308=((($307)+(1))|0);
      $cy=$308;
      label = 55; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $311=$1;
      var $312=$rn;
      var $313=(((-$312))|0);
      var $314=(($311+($313<<2))|0);
      $__p8=$314;
      var $315=$__p8;
      var $316=HEAP32[(($315)>>2)];
      $__x7=$316;
      var $317=$__x7;
      var $318=$cy;
      var $319=((($317)-($318))|0);
      var $320=$__p8;
      HEAP32[(($320)>>2)]=$319;
      var $321=$__x7;
      var $322=$cy;
      var $323=(($321)>>>0) < (($322)>>>0);
      if ($323) { label = 61; break; } else { label = 65; break; }
    case 61: 
      label = 62; break;
    case 62: 
      var $326=$__p8;
      var $327=(($326+4)|0);
      $__p8=$327;
      var $328=HEAP32[(($327)>>2)];
      var $329=((($328)-(1))|0);
      HEAP32[(($327)>>2)]=$329;
      var $330=(($328)|0)==0;
      if ($330) { label = 63; break; } else { label = 64; break; }
    case 63: 
      label = 62; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $337=$xp;
      var $338=$2;
      var $339=$3;
      var $340=(((-$339))|0);
      var $341=(($338+($340<<2))|0);
      var $342=$xp;
      var $343=$3;
      var $344=___gmpn_sub_n($337, $341, $342, $343);
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 97; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $349=$xp;
      $__d=$349;
      var $350=$xp;
      $__s=$350;
      var $351=$3;
      var $352=((($351)+(1))|0);
      $__n=$352;
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $358=$__s;
      var $359=(($358+4)|0);
      $__s=$359;
      var $360=HEAP32[(($358)>>2)];
      var $361=$360 ^ -1;
      var $362=$__d;
      var $363=(($362+4)|0);
      $__d=$363;
      HEAP32[(($362)>>2)]=$361;
      label = 78; break;
    case 78: 
      var $365=$__n;
      var $366=((($365)-(1))|0);
      $__n=$366;
      var $367=(($366)|0)!=0;
      if ($367) { label = 77; break; } else { label = 79; break; }
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $371=$xp;
      $__p10=$371;
      var $372=$__p10;
      var $373=HEAP32[(($372)>>2)];
      var $374=$method;
      var $375=((($373)+($374))|0);
      $__x9=$375;
      var $376=$__x9;
      var $377=$__p10;
      HEAP32[(($377)>>2)]=$376;
      var $378=$__x9;
      var $379=$method;
      var $380=(($378)>>>0) < (($379)>>>0);
      if ($380) { label = 82; break; } else { label = 86; break; }
    case 82: 
      label = 83; break;
    case 83: 
      var $383=$__p10;
      var $384=(($383+4)|0);
      $__p10=$384;
      var $385=HEAP32[(($384)>>2)];
      var $386=((($385)+(1))|0);
      HEAP32[(($384)>>2)]=$386;
      var $387=(($386)|0)==0;
      if ($387) { label = 84; break; } else { label = 85; break; }
    case 84: 
      label = 83; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $394=$3;
      var $395=$xp;
      var $396=(($395+($394<<2))|0);
      var $397=HEAP32[(($396)>>2)];
      var $398=(($397)|0)!=0;
      if ($398) { label = 90; break; } else { label = 96; break; }
    case 90: 
      label = 91; break;
    case 91: 
      var $401=$1;
      var $402=$rn;
      var $403=(((-$402))|0);
      var $404=(($401+($403<<2))|0);
      $__p12=$404;
      label = 92; break;
    case 92: 
      var $406=$__p12;
      var $407=(($406+4)|0);
      $__p12=$407;
      var $408=HEAP32[(($406)>>2)];
      var $409=((($408)+(1))|0);
      HEAP32[(($406)>>2)]=$409;
      var $410=(($409)|0)==0;
      if ($410) { label = 93; break; } else { label = 94; break; }
    case 93: 
      label = 92; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $414=$xp;
      var $415=$xp;
      var $416=$2;
      var $417=$3;
      var $418=(((-$417))|0);
      var $419=(($416+($418<<2))|0);
      var $420=$3;
      var $421=___gmpn_sub_n($414, $415, $419, $420);
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $424=$4;
      var $425=$xp;
      var $426=$3;
      var $427=(($425+($426<<2))|0);
      var $428=$rn;
      var $429=(((-$428))|0);
      var $430=(($427+($429<<2))|0);
      var $431=$1;
      var $432=$rn;
      var $433=(((-$432))|0);
      var $434=(($431+($433<<2))|0);
      var $435=$rn;
      ___gmpn_mul_n($424, $430, $434, $435);
      var $436=$4;
      var $437=$rn;
      var $438=(($436+($437<<2))|0);
      var $439=$4;
      var $440=$rn;
      var $441=(($439+($440<<2))|0);
      var $442=$xp;
      var $443=$3;
      var $444=(($442+($443<<2))|0);
      var $445=$rn;
      var $446=(((-$445))|0);
      var $447=(($444+($446<<2))|0);
      var $448=$rn;
      var $449=($448<<1);
      var $450=$3;
      var $451=((($449)-($450))|0);
      var $452=___gmpn_add_n($438, $441, $447, $451);
      $cy=$452;
      var $453=$1;
      var $454=$3;
      var $455=(((-$454))|0);
      var $456=(($453+($455<<2))|0);
      var $457=$4;
      var $458=$rn;
      var $459=((($458)*(3))&-1);
      var $460=(($457+($459<<2))|0);
      var $461=$3;
      var $462=(((-$461))|0);
      var $463=(($460+($462<<2))|0);
      var $464=$xp;
      var $465=$rn;
      var $466=(($464+($465<<2))|0);
      var $467=$3;
      var $468=$rn;
      var $469=((($467)-($468))|0);
      var $470=$cy;
      var $471=_mpn_add_nc281($456, $463, $466, $469, $470);
      $cy=$471;
      label = 98; break;
    case 98: 
      var $473=$1;
      var $474=$rn;
      var $475=(((-$474))|0);
      var $476=(($473+($475<<2))|0);
      $__p14=$476;
      var $477=$__p14;
      var $478=HEAP32[(($477)>>2)];
      var $479=$cy;
      var $480=$rn;
      var $481=($480<<1);
      var $482=$4;
      var $483=(($482+($481<<2))|0);
      var $484=HEAP32[(($483)>>2)];
      var $485=$3;
      var $486=$xp;
      var $487=(($486+($485<<2))|0);
      var $488=HEAP32[(($487)>>2)];
      var $489=((($484)+($488))|0);
      var $490=0;
      var $491=((($479)+($490))|0);
      var $492=((($478)+($491))|0);
      $__x13=$492;
      var $493=$__x13;
      var $494=$__p14;
      HEAP32[(($494)>>2)]=$493;
      var $495=$__x13;
      var $496=$cy;
      var $497=$rn;
      var $498=($497<<1);
      var $499=$4;
      var $500=(($499+($498<<2))|0);
      var $501=HEAP32[(($500)>>2)];
      var $502=$3;
      var $503=$xp;
      var $504=(($503+($502<<2))|0);
      var $505=HEAP32[(($504)>>2)];
      var $506=((($501)+($505))|0);
      var $507=0;
      var $508=((($496)+($507))|0);
      var $509=(($495)>>>0) < (($508)>>>0);
      if ($509) { label = 99; break; } else { label = 103; break; }
    case 99: 
      label = 100; break;
    case 100: 
      var $512=$__p14;
      var $513=(($512+4)|0);
      $__p14=$513;
      var $514=HEAP32[(($513)>>2)];
      var $515=((($514)+(1))|0);
      HEAP32[(($513)>>2)]=$515;
      var $516=(($515)|0)==0;
      if ($516) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 100; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $521=$sizp;
      var $522=(($sizes)|0);
      var $523=(($521)|0)==(($522)|0);
      if ($523) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $525=$rn;
      var $526=((($525)*(3))&-1);
      var $527=$3;
      var $528=((($526)-($527))|0);
      var $529=((($528)-(1))|0);
      var $530=$4;
      var $531=(($530+($529<<2))|0);
      var $532=HEAP32[(($531)>>2)];
      var $533=(($532)>>>0) > 4294967288;
      var $534=(($533)&1);
      $cy=$534;
      label = 107; break;
    case 106: 
      var $536=$3;
      $rn=$536;
      label = 19; break;
    case 107: 
      label = 108; break;
    case 108: 
      var $539=HEAP32[(($__tmp_marker)>>2)];
      var $540=(($539)|0)!=0;
      if ($540) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $542=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($542);
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $545=$cy;
      STACKTOP = __stackBase__;
      return $545;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_ni_invertappr["X"]=1;

function _mpn_mulmod_bnm1_itch280($rn, $an, $bn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      $3=$bn;
      var $4=$1;
      var $5=$4 >> 1;
      $n=$5;
      var $6=$1;
      var $7=((($6)+(4))|0);
      var $8=$2;
      var $9=$n;
      var $10=(($8)|0) > (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$3;
      var $13=$n;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $20 = $16;label = 6; break;
    case 5: 
      var $18=$n;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      var $23 = $20;label = 8; break;
    case 7: 
      var $23 = 0;label = 8; break;
    case 8: 
      var $23;
      var $24=((($7)+($23))|0);
      $itch=$24;
      var $25=$itch;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}


function _mpn_bc_invertappr($ip, $dp, $n, $tp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $xp;
      var $dummy;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $i;
      var $__d;
      var $__s;
      var $__n;
      var $inv=__stackBase__;
      var $v;
      var $p;
      var $t1;
      var $t0;
      var $mask;
      var $dummy1;
      var $__d12;
      var $__d03;
      var $__q14;
      var $__q05;
      var $__r16;
      var $__r07;
      var $__m8;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__p;
      $2=$ip;
      $3=$dp;
      $4=$n;
      $5=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $16=$4;
      var $17=(($16)|0)==1;
      if ($17) { label = 13; break; } else { label = 36; break; }
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $27=$3;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28 >>> 16;
      $__d1=$29;
      var $30=$3;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 65535;
      $__d0=$32;
      var $33=$3;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 ^ -1;
      var $36=$__d1;
      var $37=Math.floor(((($35)>>>0))/((($36)>>>0)));
      $__q1=$37;
      var $38=$3;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 ^ -1;
      var $41=$__q1;
      var $42=$__d1;
      var $43=Math.imul($41,$42);
      var $44=((($40)-($43))|0);
      $__r1=$44;
      var $45=$__q1;
      var $46=$__d0;
      var $47=Math.imul($45,$46);
      $__m=$47;
      var $48=$__r1;
      var $49=($48<<16);
      var $50=$49 | 65535;
      $__r1=$50;
      var $51=$__r1;
      var $52=$__m;
      var $53=(($51)>>>0) < (($52)>>>0);
      if ($53) { label = 22; break; } else { label = 27; break; }
    case 22: 
      var $55=$__q1;
      var $56=((($55)-(1))|0);
      $__q1=$56;
      var $57=$3;
      var $58=HEAP32[(($57)>>2)];
      var $59=$__r1;
      var $60=((($59)+($58))|0);
      $__r1=$60;
      var $61=$__r1;
      var $62=$3;
      var $63=HEAP32[(($62)>>2)];
      var $64=(($61)>>>0) >= (($63)>>>0);
      if ($64) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $66=$__r1;
      var $67=$__m;
      var $68=(($66)>>>0) < (($67)>>>0);
      if ($68) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $70=$__q1;
      var $71=((($70)-(1))|0);
      $__q1=$71;
      var $72=$3;
      var $73=HEAP32[(($72)>>2)];
      var $74=$__r1;
      var $75=((($74)+($73))|0);
      $__r1=$75;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $79=$__m;
      var $80=$__r1;
      var $81=((($80)-($79))|0);
      $__r1=$81;
      var $82=$__r1;
      var $83=$__d1;
      var $84=Math.floor(((($82)>>>0))/((($83)>>>0)));
      $__q0=$84;
      var $85=$__r1;
      var $86=$__q0;
      var $87=$__d1;
      var $88=Math.imul($86,$87);
      var $89=((($85)-($88))|0);
      $__r0=$89;
      var $90=$__q0;
      var $91=$__d0;
      var $92=Math.imul($90,$91);
      $__m=$92;
      var $93=$__r0;
      var $94=($93<<16);
      var $95=$94 | 65535;
      $__r0=$95;
      var $96=$__r0;
      var $97=$__m;
      var $98=(($96)>>>0) < (($97)>>>0);
      if ($98) { label = 28; break; } else { label = 33; break; }
    case 28: 
      var $100=$__q0;
      var $101=((($100)-(1))|0);
      $__q0=$101;
      var $102=$3;
      var $103=HEAP32[(($102)>>2)];
      var $104=$__r0;
      var $105=((($104)+($103))|0);
      $__r0=$105;
      var $106=$__r0;
      var $107=$3;
      var $108=HEAP32[(($107)>>2)];
      var $109=(($106)>>>0) >= (($108)>>>0);
      if ($109) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $111=$__r0;
      var $112=$__m;
      var $113=(($111)>>>0) < (($112)>>>0);
      if ($113) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $115=$__q0;
      var $116=((($115)-(1))|0);
      $__q0=$116;
      var $117=$3;
      var $118=HEAP32[(($117)>>2)];
      var $119=$__r0;
      var $120=((($119)+($118))|0);
      $__r0=$120;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $124=$__m;
      var $125=$__r0;
      var $126=((($125)-($124))|0);
      $__r0=$126;
      var $127=$__q1;
      var $128=($127<<16);
      var $129=$__q0;
      var $130=$128 | $129;
      var $131=$2;
      HEAP32[(($131)>>2)]=$130;
      var $132=$__r0;
      $dummy=$132;
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 95; break;
    case 36: 
      var $136=$5;
      var $137=$4;
      var $138=(($136+($137<<2))|0);
      var $139=(($138+8)|0);
      $xp=$139;
      var $140=$4;
      var $141=((($140)-(1))|0);
      $i=$141;
      label = 37; break;
    case 37: 
      var $143=$i;
      var $144=(($143)|0) >= 0;
      if ($144) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $146=$i;
      var $147=$xp;
      var $148=(($147+($146<<2))|0);
      HEAP32[(($148)>>2)]=-1;
      label = 39; break;
    case 39: 
      var $150=$i;
      var $151=((($150)-(1))|0);
      $i=$151;
      label = 37; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $154=$xp;
      var $155=$4;
      var $156=(($154+($155<<2))|0);
      $__d=$156;
      var $157=$3;
      $__s=$157;
      var $158=$4;
      $__n=$158;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $164=$__s;
      var $165=(($164+4)|0);
      $__s=$165;
      var $166=HEAP32[(($164)>>2)];
      var $167=$166 ^ -1;
      var $168=$__d;
      var $169=(($168+4)|0);
      $__d=$169;
      HEAP32[(($168)>>2)]=$167;
      label = 47; break;
    case 47: 
      var $171=$__n;
      var $172=((($171)-(1))|0);
      $__n=$172;
      var $173=(($172)|0)!=0;
      if ($173) { label = 46; break; } else { label = 48; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $176=$4;
      var $177=(($176)|0)==2;
      if ($177) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $179=$2;
      var $180=$xp;
      var $181=$3;
      var $182=___gmpn_divrem_2($179, 0, $180, 4, $181);
      label = 94; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $193=$4;
      var $194=((($193)-(1))|0);
      var $195=$3;
      var $196=(($195+($194<<2))|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=$197 >>> 16;
      $__d12=$198;
      var $199=$4;
      var $200=((($199)-(1))|0);
      var $201=$3;
      var $202=(($201+($200<<2))|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & 65535;
      $__d03=$204;
      var $205=$4;
      var $206=((($205)-(1))|0);
      var $207=$3;
      var $208=(($207+($206<<2))|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$209 ^ -1;
      var $211=$__d12;
      var $212=Math.floor(((($210)>>>0))/((($211)>>>0)));
      $__q14=$212;
      var $213=$4;
      var $214=((($213)-(1))|0);
      var $215=$3;
      var $216=(($215+($214<<2))|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=$217 ^ -1;
      var $219=$__q14;
      var $220=$__d12;
      var $221=Math.imul($219,$220);
      var $222=((($218)-($221))|0);
      $__r16=$222;
      var $223=$__q14;
      var $224=$__d03;
      var $225=Math.imul($223,$224);
      $__m8=$225;
      var $226=$__r16;
      var $227=($226<<16);
      var $228=$227 | 65535;
      $__r16=$228;
      var $229=$__r16;
      var $230=$__m8;
      var $231=(($229)>>>0) < (($230)>>>0);
      if ($231) { label = 61; break; } else { label = 66; break; }
    case 61: 
      var $233=$__q14;
      var $234=((($233)-(1))|0);
      $__q14=$234;
      var $235=$4;
      var $236=((($235)-(1))|0);
      var $237=$3;
      var $238=(($237+($236<<2))|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=$__r16;
      var $241=((($240)+($239))|0);
      $__r16=$241;
      var $242=$__r16;
      var $243=$4;
      var $244=((($243)-(1))|0);
      var $245=$3;
      var $246=(($245+($244<<2))|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($242)>>>0) >= (($247)>>>0);
      if ($248) { label = 62; break; } else { label = 65; break; }
    case 62: 
      var $250=$__r16;
      var $251=$__m8;
      var $252=(($250)>>>0) < (($251)>>>0);
      if ($252) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $254=$__q14;
      var $255=((($254)-(1))|0);
      $__q14=$255;
      var $256=$4;
      var $257=((($256)-(1))|0);
      var $258=$3;
      var $259=(($258+($257<<2))|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$__r16;
      var $262=((($261)+($260))|0);
      $__r16=$262;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $266=$__m8;
      var $267=$__r16;
      var $268=((($267)-($266))|0);
      $__r16=$268;
      var $269=$__r16;
      var $270=$__d12;
      var $271=Math.floor(((($269)>>>0))/((($270)>>>0)));
      $__q05=$271;
      var $272=$__r16;
      var $273=$__q05;
      var $274=$__d12;
      var $275=Math.imul($273,$274);
      var $276=((($272)-($275))|0);
      $__r07=$276;
      var $277=$__q05;
      var $278=$__d03;
      var $279=Math.imul($277,$278);
      $__m8=$279;
      var $280=$__r07;
      var $281=($280<<16);
      var $282=$281 | 65535;
      $__r07=$282;
      var $283=$__r07;
      var $284=$__m8;
      var $285=(($283)>>>0) < (($284)>>>0);
      if ($285) { label = 67; break; } else { label = 72; break; }
    case 67: 
      var $287=$__q05;
      var $288=((($287)-(1))|0);
      $__q05=$288;
      var $289=$4;
      var $290=((($289)-(1))|0);
      var $291=$3;
      var $292=(($291+($290<<2))|0);
      var $293=HEAP32[(($292)>>2)];
      var $294=$__r07;
      var $295=((($294)+($293))|0);
      $__r07=$295;
      var $296=$__r07;
      var $297=$4;
      var $298=((($297)-(1))|0);
      var $299=$3;
      var $300=(($299+($298<<2))|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=(($296)>>>0) >= (($301)>>>0);
      if ($302) { label = 68; break; } else { label = 71; break; }
    case 68: 
      var $304=$__r07;
      var $305=$__m8;
      var $306=(($304)>>>0) < (($305)>>>0);
      if ($306) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $308=$__q05;
      var $309=((($308)-(1))|0);
      $__q05=$309;
      var $310=$4;
      var $311=((($310)-(1))|0);
      var $312=$3;
      var $313=(($312+($311<<2))|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$__r07;
      var $316=((($315)+($314))|0);
      $__r07=$316;
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $320=$__m8;
      var $321=$__r07;
      var $322=((($321)-($320))|0);
      $__r07=$322;
      var $323=$__q14;
      var $324=($323<<16);
      var $325=$__q05;
      var $326=$324 | $325;
      $v=$326;
      var $327=$__r07;
      $dummy1=$327;
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $330=$4;
      var $331=((($330)-(1))|0);
      var $332=$3;
      var $333=(($332+($331<<2))|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=$v;
      var $336=Math.imul($334,$335);
      $p=$336;
      var $337=$4;
      var $338=((($337)-(2))|0);
      var $339=$3;
      var $340=(($339+($338<<2))|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$p;
      var $343=((($342)+($341))|0);
      $p=$343;
      var $344=$p;
      var $345=$4;
      var $346=((($345)-(2))|0);
      var $347=$3;
      var $348=(($347+($346<<2))|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=(($344)>>>0) < (($349)>>>0);
      if ($350) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $352=$v;
      var $353=((($352)-(1))|0);
      $v=$353;
      var $354=$p;
      var $355=$4;
      var $356=((($355)-(1))|0);
      var $357=$3;
      var $358=(($357+($356<<2))|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=(($354)>>>0) >= (($359)>>>0);
      var $361=(($360)&1);
      var $362=(((-$361))|0);
      $mask=$362;
      var $363=$4;
      var $364=((($363)-(1))|0);
      var $365=$3;
      var $366=(($365+($364<<2))|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=$p;
      var $369=((($368)-($367))|0);
      $p=$369;
      var $370=$mask;
      var $371=$v;
      var $372=((($371)+($370))|0);
      $v=$372;
      var $373=$mask;
      var $374=$4;
      var $375=((($374)-(1))|0);
      var $376=$3;
      var $377=(($376+($375<<2))|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=$373 & $378;
      var $380=$p;
      var $381=((($380)-($379))|0);
      $p=$381;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $384=$4;
      var $385=((($384)-(2))|0);
      var $386=$3;
      var $387=(($386+($385<<2))|0);
      var $388=HEAP32[(($387)>>2)];
      $__u=$388;
      var $389=$v;
      $__v=$389;
      var $390=$__u;
      var $391=$390 & 65535;
      $__ul=$391;
      var $392=$__u;
      var $393=$392 >>> 16;
      $__uh=$393;
      var $394=$__v;
      var $395=$394 & 65535;
      $__vl=$395;
      var $396=$__v;
      var $397=$396 >>> 16;
      $__vh=$397;
      var $398=$__ul;
      var $399=$__vl;
      var $400=Math.imul($398,$399);
      $__x0=$400;
      var $401=$__ul;
      var $402=$__vh;
      var $403=Math.imul($401,$402);
      $__x1=$403;
      var $404=$__uh;
      var $405=$__vl;
      var $406=Math.imul($404,$405);
      $__x2=$406;
      var $407=$__uh;
      var $408=$__vh;
      var $409=Math.imul($407,$408);
      $__x3=$409;
      var $410=$__x0;
      var $411=$410 >>> 16;
      var $412=$__x1;
      var $413=((($412)+($411))|0);
      $__x1=$413;
      var $414=$__x2;
      var $415=$__x1;
      var $416=((($415)+($414))|0);
      $__x1=$416;
      var $417=$__x1;
      var $418=$__x2;
      var $419=(($417)>>>0) < (($418)>>>0);
      if ($419) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $421=$__x3;
      var $422=((($421)+(65536))|0);
      $__x3=$422;
      label = 79; break;
    case 79: 
      var $424=$__x3;
      var $425=$__x1;
      var $426=$425 >>> 16;
      var $427=((($424)+($426))|0);
      $t1=$427;
      var $428=$__x1;
      var $429=$428 << 16;
      var $430=$__x0;
      var $431=$430 & 65535;
      var $432=((($429)+($431))|0);
      $t0=$432;
      label = 80; break;
    case 80: 
      var $434=$t1;
      var $435=$p;
      var $436=((($435)+($434))|0);
      $p=$436;
      var $437=$p;
      var $438=$t1;
      var $439=(($437)>>>0) < (($438)>>>0);
      if ($439) { label = 81; break; } else { label = 87; break; }
    case 81: 
      var $441=$v;
      var $442=((($441)-(1))|0);
      $v=$442;
      var $443=$p;
      var $444=$4;
      var $445=((($444)-(1))|0);
      var $446=$3;
      var $447=(($446+($445<<2))|0);
      var $448=HEAP32[(($447)>>2)];
      var $449=(($443)>>>0) >= (($448)>>>0);
      if ($449) { label = 82; break; } else { label = 86; break; }
    case 82: 
      var $451=$p;
      var $452=$4;
      var $453=((($452)-(1))|0);
      var $454=$3;
      var $455=(($454+($453<<2))|0);
      var $456=HEAP32[(($455)>>2)];
      var $457=(($451)>>>0) > (($456)>>>0);
      if ($457) { label = 84; break; } else { label = 83; break; }
    case 83: 
      var $459=$t0;
      var $460=$4;
      var $461=((($460)-(2))|0);
      var $462=$3;
      var $463=(($462+($461<<2))|0);
      var $464=HEAP32[(($463)>>2)];
      var $465=(($459)>>>0) >= (($464)>>>0);
      if ($465) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $467=$v;
      var $468=((($467)-(1))|0);
      $v=$468;
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $472=$v;
      var $473=(($inv)|0);
      HEAP32[(($473)>>2)]=$472;
      label = 88; break;
    case 88: 
      var $475=$2;
      var $476=$xp;
      var $477=$4;
      var $478=($477<<1);
      var $479=$3;
      var $480=$4;
      var $481=(($inv)|0);
      var $482=HEAP32[(($481)>>2)];
      var $483=___gmpn_sbpi1_divappr_q($475, $476, $478, $479, $480, $482);
      label = 89; break;
    case 89: 
      var $485=$2;
      $__p=$485;
      label = 90; break;
    case 90: 
      var $487=$__p;
      var $488=(($487+4)|0);
      $__p=$488;
      var $489=HEAP32[(($487)>>2)];
      var $490=((($489)-(1))|0);
      HEAP32[(($487)>>2)]=$490;
      var $491=(($489)|0)==0;
      if ($491) { label = 91; break; } else { label = 92; break; }
    case 91: 
      label = 90; break;
    case 92: 
      label = 93; break;
    case 93: 
      $1=1;
      label = 96; break;
    case 94: 
      label = 95; break;
    case 95: 
      $1=0;
      label = 96; break;
    case 96: 
      var $498=$1;
      STACKTOP = __stackBase__;
      return $498;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_bc_invertappr["X"]=1;

function _mpn_add_nc281($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_add_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_add_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_invertappr($ip, $dp, $n, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      var $__tmp_marker=__stackBase__;
      $1=$ip;
      $2=$dp;
      $3=$n;
      $4=$scratch;
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $5=$4;
      var $6=(($5)|0)==0;
      if ($6) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $8=$3;
      var $9=((($8)*(3))&-1);
      var $10=((($9)+(2))|0);
      var $11=($10<<2);
      var $12=(($11)>>>0) < 65536;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$3;
      var $15=((($14)*(3))&-1);
      var $16=((($15)+(2))|0);
      var $17=($16<<2);
      var $18=STACKTOP;STACKTOP = (STACKTOP + $17)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $26 = $18;label = 6; break;
    case 5: 
      var $20=$3;
      var $21=((($20)*(3))&-1);
      var $22=((($21)+(2))|0);
      var $23=($22<<2);
      var $24=___gmp_tmp_reentrant_alloc($__tmp_marker, $23);
      var $26 = $24;label = 6; break;
    case 6: 
      var $26;
      var $27=$26;
      $4=$27;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $39=$3;
      var $40=(($39)|0) >= 200;
      if ($40) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $42=$1;
      var $43=$2;
      var $44=$3;
      var $45=$4;
      var $46=_mpn_bc_invertappr($42, $43, $44, $45);
      $res=$46;
      label = 20; break;
    case 19: 
      var $48=$1;
      var $49=$2;
      var $50=$3;
      var $51=$4;
      var $52=___gmpn_ni_invertappr($48, $49, $50, $51);
      $res=$52;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $55=HEAP32[(($__tmp_marker)>>2)];
      var $56=(($55)|0)!=0;
      if ($56) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $58=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($58);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $61=$res;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_invertappr["X"]=1;

function ___gmpn_mu_bdiv_q($qp, $np, $nn, $dp, $dn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qn;
      var $in;
      var $cy;
      var $c0;
      var $tn;
      var $wn;
      var $b;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__x1;
      var $__p;
      var $__x2;
      var $__p3;
      var $__x4;
      var $__p5;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$scratch;
      var $7=$3;
      $qn=$7;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $12=$qn;
      var $13=$5;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 7; break; } else { label = 70; break; }
    case 7: 
      var $16=$qn;
      var $17=((($16)-(1))|0);
      var $18=$5;
      var $19=((((($17)|0))/((($18)|0)))&-1);
      var $20=((($19)+(1))|0);
      $b=$20;
      var $21=$qn;
      var $22=((($21)-(1))|0);
      var $23=$b;
      var $24=((((($22)|0))/((($23)|0)))&-1);
      var $25=((($24)+(1))|0);
      $in=$25;
      var $26=$6;
      var $27=$4;
      var $28=$in;
      var $29=$6;
      var $30=$in;
      var $31=(($29+($30<<2))|0);
      ___gmpn_binvert($26, $27, $28, $31);
      $cy=0;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $40=$5;
      var $41=(($40)|0)!=0;
      if ($41) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $43=$5;
      var $44=((($43)-(1))|0);
      $__n=$44;
      var $45=$6;
      var $46=$in;
      var $47=(($45+($46<<2))|0);
      $__dst=$47;
      var $48=$2;
      $__src=$48;
      var $49=$__src;
      var $50=(($49+4)|0);
      $__src=$50;
      var $51=HEAP32[(($49)>>2)];
      $__x=$51;
      var $52=$__n;
      var $53=(($52)|0)!=0;
      if ($53) { label = 17; break; } else { label = 21; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $56=$__x;
      var $57=$__dst;
      var $58=(($57+4)|0);
      $__dst=$58;
      HEAP32[(($57)>>2)]=$56;
      var $59=$__src;
      var $60=(($59+4)|0);
      $__src=$60;
      var $61=HEAP32[(($59)>>2)];
      $__x=$61;
      label = 19; break;
    case 19: 
      var $63=$__n;
      var $64=((($63)-(1))|0);
      $__n=$64;
      var $65=(($64)|0)!=0;
      if ($65) { label = 18; break; } else { label = 20; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $68=$__x;
      var $69=$__dst;
      var $70=(($69+4)|0);
      $__dst=$70;
      HEAP32[(($69)>>2)]=$68;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $74=$5;
      var $75=$2;
      var $76=(($75+($74<<2))|0);
      $2=$76;
      var $77=$1;
      var $78=$6;
      var $79=$in;
      var $80=(($78+($79<<2))|0);
      var $81=$6;
      var $82=$in;
      ___gmpn_mullo_n($77, $80, $81, $82);
      var $83=$in;
      var $84=$qn;
      var $85=((($84)-($83))|0);
      $qn=$85;
      label = 25; break;
    case 25: 
      var $87=$qn;
      var $88=$in;
      var $89=(($87)|0) > (($88)|0);
      if ($89) { label = 26; break; } else { label = 48; break; }
    case 26: 
      var $91=$in;
      var $92=(($91)|0) >= 40;
      if ($92) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $94=$6;
      var $95=$in;
      var $96=(($94+($95<<2))|0);
      var $97=$5;
      var $98=(($96+($97<<2))|0);
      var $99=$4;
      var $100=$5;
      var $101=$1;
      var $102=$in;
      var $103=___gmpn_mul($98, $99, $100, $101, $102);
      label = 38; break;
    case 28: 
      var $105=$5;
      var $106=___gmpn_mulmod_bnm1_next_size($105);
      $tn=$106;
      var $107=$6;
      var $108=$in;
      var $109=(($107+($108<<2))|0);
      var $110=$5;
      var $111=(($109+($110<<2))|0);
      var $112=$tn;
      var $113=$4;
      var $114=$5;
      var $115=$1;
      var $116=$in;
      var $117=$6;
      var $118=$in;
      var $119=(($117+($118<<2))|0);
      var $120=$5;
      var $121=(($119+($120<<2))|0);
      var $122=$tn;
      var $123=(($121+($122<<2))|0);
      ___gmpn_mulmod_bnm1($111, $112, $113, $114, $115, $116, $123);
      var $124=$5;
      var $125=$in;
      var $126=((($124)+($125))|0);
      var $127=$tn;
      var $128=((($126)-($127))|0);
      $wn=$128;
      var $129=$wn;
      var $130=(($129)|0) > 0;
      if ($130) { label = 29; break; } else { label = 37; break; }
    case 29: 
      var $132=$6;
      var $133=$in;
      var $134=(($132+($133<<2))|0);
      var $135=$5;
      var $136=(($134+($135<<2))|0);
      var $137=$tn;
      var $138=(($136+($137<<2))|0);
      var $139=$6;
      var $140=$in;
      var $141=(($139+($140<<2))|0);
      var $142=$5;
      var $143=(($141+($142<<2))|0);
      var $144=$6;
      var $145=$in;
      var $146=(($144+($145<<2))|0);
      var $147=$wn;
      var $148=___gmpn_sub_n($138, $143, $146, $147);
      $c0=$148;
      label = 30; break;
    case 30: 
      var $150=$6;
      var $151=$in;
      var $152=(($150+($151<<2))|0);
      var $153=$5;
      var $154=(($152+($153<<2))|0);
      var $155=$wn;
      var $156=(($154+($155<<2))|0);
      $__p=$156;
      var $157=$__p;
      var $158=HEAP32[(($157)>>2)];
      $__x1=$158;
      var $159=$__x1;
      var $160=$c0;
      var $161=((($159)-($160))|0);
      var $162=$__p;
      HEAP32[(($162)>>2)]=$161;
      var $163=$__x1;
      var $164=$c0;
      var $165=(($163)>>>0) < (($164)>>>0);
      if ($165) { label = 31; break; } else { label = 35; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $168=$__p;
      var $169=(($168+4)|0);
      $__p=$169;
      var $170=HEAP32[(($169)>>2)];
      var $171=((($170)-(1))|0);
      HEAP32[(($169)>>2)]=$171;
      var $172=(($170)|0)==0;
      if ($172) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 32; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $179=$in;
      var $180=$1;
      var $181=(($180+($179<<2))|0);
      $1=$181;
      var $182=$5;
      var $183=$in;
      var $184=(($182)|0)!=(($183)|0);
      if ($184) { label = 39; break; } else { label = 47; break; }
    case 39: 
      var $186=$6;
      var $187=$in;
      var $188=(($186+($187<<2))|0);
      var $189=$6;
      var $190=$in;
      var $191=(($189+($190<<2))|0);
      var $192=$in;
      var $193=(($191+($192<<2))|0);
      var $194=$6;
      var $195=$in;
      var $196=(($194+($195<<2))|0);
      var $197=$5;
      var $198=(($196+($197<<2))|0);
      var $199=$in;
      var $200=(($198+($199<<2))|0);
      var $201=$5;
      var $202=$in;
      var $203=((($201)-($202))|0);
      var $204=___gmpn_sub_n($188, $193, $200, $203);
      var $205=$cy;
      var $206=((($205)+($204))|0);
      $cy=$206;
      var $207=$cy;
      var $208=(($207)|0)==2;
      if ($208) { label = 40; break; } else { label = 46; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $211=$6;
      var $212=$in;
      var $213=(($211+($212<<2))|0);
      var $214=$5;
      var $215=(($213+($214<<2))|0);
      var $216=$5;
      var $217=(($215+($216<<2))|0);
      $__p3=$217;
      label = 42; break;
    case 42: 
      var $219=$__p3;
      var $220=(($219+4)|0);
      $__p3=$220;
      var $221=HEAP32[(($219)>>2)];
      var $222=((($221)+(1))|0);
      HEAP32[(($219)>>2)]=$222;
      var $223=(($222)|0)==0;
      if ($223) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 42; break;
    case 44: 
      label = 45; break;
    case 45: 
      $cy=1;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $229=$6;
      var $230=$in;
      var $231=(($229+($230<<2))|0);
      var $232=$5;
      var $233=(($231+($232<<2))|0);
      var $234=$in;
      var $235=(((-$234))|0);
      var $236=(($233+($235<<2))|0);
      var $237=$2;
      var $238=$6;
      var $239=$in;
      var $240=(($238+($239<<2))|0);
      var $241=$5;
      var $242=(($240+($241<<2))|0);
      var $243=$5;
      var $244=(($242+($243<<2))|0);
      var $245=$in;
      var $246=$cy;
      var $247=_mpn_sub_nc286($236, $237, $244, $245, $246);
      $cy=$247;
      var $248=$in;
      var $249=$2;
      var $250=(($249+($248<<2))|0);
      $2=$250;
      var $251=$1;
      var $252=$6;
      var $253=$in;
      var $254=(($252+($253<<2))|0);
      var $255=$6;
      var $256=$in;
      ___gmpn_mullo_n($251, $254, $255, $256);
      var $257=$in;
      var $258=$qn;
      var $259=((($258)-($257))|0);
      $qn=$259;
      label = 25; break;
    case 48: 
      var $261=$in;
      var $262=(($261)|0) >= 40;
      if ($262) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $264=$6;
      var $265=$in;
      var $266=(($264+($265<<2))|0);
      var $267=$5;
      var $268=(($266+($267<<2))|0);
      var $269=$4;
      var $270=$5;
      var $271=$1;
      var $272=$in;
      var $273=___gmpn_mul($268, $269, $270, $271, $272);
      label = 60; break;
    case 50: 
      var $275=$5;
      var $276=___gmpn_mulmod_bnm1_next_size($275);
      $tn=$276;
      var $277=$6;
      var $278=$in;
      var $279=(($277+($278<<2))|0);
      var $280=$5;
      var $281=(($279+($280<<2))|0);
      var $282=$tn;
      var $283=$4;
      var $284=$5;
      var $285=$1;
      var $286=$in;
      var $287=$6;
      var $288=$in;
      var $289=(($287+($288<<2))|0);
      var $290=$5;
      var $291=(($289+($290<<2))|0);
      var $292=$tn;
      var $293=(($291+($292<<2))|0);
      ___gmpn_mulmod_bnm1($281, $282, $283, $284, $285, $286, $293);
      var $294=$5;
      var $295=$in;
      var $296=((($294)+($295))|0);
      var $297=$tn;
      var $298=((($296)-($297))|0);
      $wn=$298;
      var $299=$wn;
      var $300=(($299)|0) > 0;
      if ($300) { label = 51; break; } else { label = 59; break; }
    case 51: 
      var $302=$6;
      var $303=$in;
      var $304=(($302+($303<<2))|0);
      var $305=$5;
      var $306=(($304+($305<<2))|0);
      var $307=$tn;
      var $308=(($306+($307<<2))|0);
      var $309=$6;
      var $310=$in;
      var $311=(($309+($310<<2))|0);
      var $312=$5;
      var $313=(($311+($312<<2))|0);
      var $314=$6;
      var $315=$in;
      var $316=(($314+($315<<2))|0);
      var $317=$wn;
      var $318=___gmpn_sub_n($308, $313, $316, $317);
      $c0=$318;
      label = 52; break;
    case 52: 
      var $320=$6;
      var $321=$in;
      var $322=(($320+($321<<2))|0);
      var $323=$5;
      var $324=(($322+($323<<2))|0);
      var $325=$wn;
      var $326=(($324+($325<<2))|0);
      $__p5=$326;
      var $327=$__p5;
      var $328=HEAP32[(($327)>>2)];
      $__x4=$328;
      var $329=$__x4;
      var $330=$c0;
      var $331=((($329)-($330))|0);
      var $332=$__p5;
      HEAP32[(($332)>>2)]=$331;
      var $333=$__x4;
      var $334=$c0;
      var $335=(($333)>>>0) < (($334)>>>0);
      if ($335) { label = 53; break; } else { label = 57; break; }
    case 53: 
      label = 54; break;
    case 54: 
      var $338=$__p5;
      var $339=(($338+4)|0);
      $__p5=$339;
      var $340=HEAP32[(($339)>>2)];
      var $341=((($340)-(1))|0);
      HEAP32[(($339)>>2)]=$341;
      var $342=(($340)|0)==0;
      if ($342) { label = 55; break; } else { label = 56; break; }
    case 55: 
      label = 54; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $349=$in;
      var $350=$1;
      var $351=(($350+($349<<2))|0);
      $1=$351;
      var $352=$5;
      var $353=$in;
      var $354=(($352)|0)!=(($353)|0);
      if ($354) { label = 61; break; } else { label = 69; break; }
    case 61: 
      var $356=$6;
      var $357=$in;
      var $358=(($356+($357<<2))|0);
      var $359=$6;
      var $360=$in;
      var $361=(($359+($360<<2))|0);
      var $362=$in;
      var $363=(($361+($362<<2))|0);
      var $364=$6;
      var $365=$in;
      var $366=(($364+($365<<2))|0);
      var $367=$5;
      var $368=(($366+($367<<2))|0);
      var $369=$in;
      var $370=(($368+($369<<2))|0);
      var $371=$5;
      var $372=$in;
      var $373=((($371)-($372))|0);
      var $374=___gmpn_sub_n($358, $363, $370, $373);
      var $375=$cy;
      var $376=((($375)+($374))|0);
      $cy=$376;
      var $377=$cy;
      var $378=(($377)|0)==2;
      if ($378) { label = 62; break; } else { label = 68; break; }
    case 62: 
      label = 63; break;
    case 63: 
      var $381=$6;
      var $382=$in;
      var $383=(($381+($382<<2))|0);
      var $384=$5;
      var $385=(($383+($384<<2))|0);
      var $386=$5;
      var $387=(($385+($386<<2))|0);
      $__p7=$387;
      label = 64; break;
    case 64: 
      var $389=$__p7;
      var $390=(($389+4)|0);
      $__p7=$390;
      var $391=HEAP32[(($389)>>2)];
      var $392=((($391)+(1))|0);
      HEAP32[(($389)>>2)]=$392;
      var $393=(($392)|0)==0;
      if ($393) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 64; break;
    case 66: 
      label = 67; break;
    case 67: 
      $cy=1;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $399=$6;
      var $400=$in;
      var $401=(($399+($400<<2))|0);
      var $402=$5;
      var $403=(($401+($402<<2))|0);
      var $404=$in;
      var $405=(((-$404))|0);
      var $406=(($403+($405<<2))|0);
      var $407=$2;
      var $408=$6;
      var $409=$in;
      var $410=(($408+($409<<2))|0);
      var $411=$5;
      var $412=(($410+($411<<2))|0);
      var $413=$5;
      var $414=(($412+($413<<2))|0);
      var $415=$qn;
      var $416=$5;
      var $417=$in;
      var $418=((($416)-($417))|0);
      var $419=((($415)-($418))|0);
      var $420=$cy;
      var $421=_mpn_sub_nc286($406, $407, $414, $419, $420);
      var $422=$1;
      var $423=$6;
      var $424=$in;
      var $425=(($423+($424<<2))|0);
      var $426=$6;
      var $427=$qn;
      ___gmpn_mullo_n($422, $425, $426, $427);
      label = 83; break;
    case 70: 
      var $429=$qn;
      var $430=$qn;
      var $431=$430 >> 1;
      var $432=((($429)-($431))|0);
      $in=$432;
      var $433=$6;
      var $434=$4;
      var $435=$in;
      var $436=$6;
      var $437=$in;
      var $438=(($436+($437<<2))|0);
      ___gmpn_binvert($433, $434, $435, $438);
      var $439=$1;
      var $440=$2;
      var $441=$6;
      var $442=$in;
      ___gmpn_mullo_n($439, $440, $441, $442);
      var $443=$in;
      var $444=(($443)|0) >= 40;
      if ($444) { label = 72; break; } else { label = 71; break; }
    case 71: 
      var $446=$6;
      var $447=$in;
      var $448=(($446+($447<<2))|0);
      var $449=$4;
      var $450=$qn;
      var $451=$1;
      var $452=$in;
      var $453=___gmpn_mul($448, $449, $450, $451, $452);
      label = 82; break;
    case 72: 
      var $455=$qn;
      var $456=___gmpn_mulmod_bnm1_next_size($455);
      $tn=$456;
      var $457=$6;
      var $458=$in;
      var $459=(($457+($458<<2))|0);
      var $460=$tn;
      var $461=$4;
      var $462=$qn;
      var $463=$1;
      var $464=$in;
      var $465=$6;
      var $466=$in;
      var $467=(($465+($466<<2))|0);
      var $468=$tn;
      var $469=(($467+($468<<2))|0);
      ___gmpn_mulmod_bnm1($459, $460, $461, $462, $463, $464, $469);
      var $470=$qn;
      var $471=$in;
      var $472=((($470)+($471))|0);
      var $473=$tn;
      var $474=((($472)-($473))|0);
      $wn=$474;
      var $475=$wn;
      var $476=(($475)|0) > 0;
      if ($476) { label = 73; break; } else { label = 81; break; }
    case 73: 
      var $478=$6;
      var $479=$in;
      var $480=(($478+($479<<2))|0);
      var $481=$2;
      var $482=$wn;
      var $483=___gmpn_cmp($480, $481, $482);
      var $484=(($483)|0) < 0;
      var $485=(($484)&1);
      $c0=$485;
      label = 74; break;
    case 74: 
      var $487=$6;
      var $488=$in;
      var $489=(($487+($488<<2))|0);
      var $490=$wn;
      var $491=(($489+($490<<2))|0);
      $__p9=$491;
      var $492=$__p9;
      var $493=HEAP32[(($492)>>2)];
      $__x8=$493;
      var $494=$__x8;
      var $495=$c0;
      var $496=((($494)-($495))|0);
      var $497=$__p9;
      HEAP32[(($497)>>2)]=$496;
      var $498=$__x8;
      var $499=$c0;
      var $500=(($498)>>>0) < (($499)>>>0);
      if ($500) { label = 75; break; } else { label = 79; break; }
    case 75: 
      label = 76; break;
    case 76: 
      var $503=$__p9;
      var $504=(($503+4)|0);
      $__p9=$504;
      var $505=HEAP32[(($504)>>2)];
      var $506=((($505)-(1))|0);
      HEAP32[(($504)>>2)]=$506;
      var $507=(($505)|0)==0;
      if ($507) { label = 77; break; } else { label = 78; break; }
    case 77: 
      label = 76; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $514=$6;
      var $515=$in;
      var $516=(($514+($515<<2))|0);
      var $517=$2;
      var $518=$in;
      var $519=(($517+($518<<2))|0);
      var $520=$6;
      var $521=$in;
      var $522=(($520+($521<<2))|0);
      var $523=$in;
      var $524=(($522+($523<<2))|0);
      var $525=$qn;
      var $526=$in;
      var $527=((($525)-($526))|0);
      var $528=___gmpn_sub_n($516, $519, $524, $527);
      var $529=$1;
      var $530=$in;
      var $531=(($529+($530<<2))|0);
      var $532=$6;
      var $533=$in;
      var $534=(($532+($533<<2))|0);
      var $535=$6;
      var $536=$qn;
      var $537=$in;
      var $538=((($536)-($537))|0);
      ___gmpn_mullo_n($531, $534, $535, $538);
      label = 83; break;
    case 83: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_bdiv_q["X"]=1;

function _mpn_sub_nc286($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function _mpn_mulmod_bnm1_itch289($rn, $an, $bn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      $3=$bn;
      var $4=$1;
      var $5=$4 >> 1;
      $n=$5;
      var $6=$1;
      var $7=((($6)+(4))|0);
      var $8=$2;
      var $9=$n;
      var $10=(($8)|0) > (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$3;
      var $13=$n;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $20 = $16;label = 6; break;
    case 5: 
      var $18=$n;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      var $23 = $20;label = 8; break;
    case 7: 
      var $23 = 0;label = 8; break;
    case 8: 
      var $23;
      var $24=((($7)+($23))|0);
      $itch=$24;
      var $25=$itch;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_fft_next_size($pl, $k) {
  var label = 0;


  var $1;
  var $2;
  $1=$pl;
  $2=$k;
  var $3=$1;
  var $4=((($3)-(1))|0);
  var $5=$2;
  var $6=$4 >> (($5)|0);
  var $7=((($6)+(1))|0);
  $1=$7;
  var $8=$1;
  var $9=$2;
  var $10=$8 << $9;

  return $10;
}


function _mpn_mul_fft_lcm($a, $k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $l;
      $1=$a;
      $2=$k;
      var $3=$2;
      $l=$3;
      label = 3; break;
    case 3: 
      var $5=$1;
      var $6=((($5)>>>0))%(2);
      var $7=(($6)|0)==0;
      if ($7) { label = 4; break; } else { var $12 = 0;label = 5; break; }
    case 4: 
      var $9=$2;
      var $10=(($9)>>>0) > 0;
      var $12 = $10;label = 5; break;
    case 5: 
      var $12;
      if ($12) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $14=$1;
      var $15=$14 >>> 1;
      $1=$15;
      var $16=$2;
      var $17=((($16)-(1))|0);
      $2=$17;
      label = 3; break;
    case 7: 
      var $19=$1;
      var $20=$l;
      var $21=$19 << $20;

      return $21;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_fft_best_k($n, $sqr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$n;
      $3=$sqr;
      $i=0;
      label = 3; break;
    case 3: 
      var $5=$i;
      var $6=$3;
      var $7=((5242952+($6<<6))|0);
      var $8=(($7+($5<<2))|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)!=0;
      if ($10) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $12=$2;
      var $13=$i;
      var $14=$3;
      var $15=((5242952+($14<<6))|0);
      var $16=(($15+($13<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($12)|0) < (($17)|0);
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $20=$i;
      var $21=((($20)+(4))|0);
      $1=$21;
      label = 12; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $24=$i;
      var $25=((($24)+(1))|0);
      $i=$25;
      label = 3; break;
    case 8: 
      var $27=$i;
      var $28=(($27)|0)==0;
      if ($28) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $30=$2;
      var $31=$i;
      var $32=((($31)-(1))|0);
      var $33=$3;
      var $34=((5242952+($33<<6))|0);
      var $35=(($34+($32<<2))|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=($36<<2);
      var $38=(($30)|0) < (($37)|0);
      if ($38) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $40=$i;
      var $41=((($40)+(4))|0);
      $1=$41;
      label = 12; break;
    case 11: 
      var $43=$i;
      var $44=((($43)+(4))|0);
      var $45=((($44)+(1))|0);
      $1=$45;
      label = 12; break;
    case 12: 
      var $47=$1;

      return $47;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_fft_best_k["X"]=1;

function _mpn_fft_initl($l, $k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $j;
      var $K;
      var $li;
      $1=$l;
      $2=$k;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      HEAP32[(($6)>>2)]=0;
      $i=1;
      $K=1;
      label = 3; break;
    case 3: 
      var $8=$i;
      var $9=$2;
      var $10=(($8)|0) <= (($9)|0);
      if ($10) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $12=$i;
      var $13=$1;
      var $14=(($13+($12<<2))|0);
      var $15=HEAP32[(($14)>>2)];
      $li=$15;
      $j=0;
      label = 5; break;
    case 5: 
      var $17=$j;
      var $18=$K;
      var $19=(($17)|0) < (($18)|0);
      if ($19) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $21=$j;
      var $22=$i;
      var $23=((($22)-(1))|0);
      var $24=$1;
      var $25=(($24+($23<<2))|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($21<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=($28<<1);
      var $30=$j;
      var $31=$li;
      var $32=(($31+($30<<2))|0);
      HEAP32[(($32)>>2)]=$29;
      var $33=$j;
      var $34=$li;
      var $35=(($34+($33<<2))|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)+(1))|0);
      var $38=$K;
      var $39=$j;
      var $40=((($38)+($39))|0);
      var $41=$li;
      var $42=(($41+($40<<2))|0);
      HEAP32[(($42)>>2)]=$37;
      label = 7; break;
    case 7: 
      var $44=$j;
      var $45=((($44)+(1))|0);
      $j=$45;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $48=$i;
      var $49=((($48)+(1))|0);
      $i=$49;
      var $50=$K;
      var $51=($50<<1);
      $K=$51;
      label = 3; break;
    case 10: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_initl["X"]=1;

function ___gmpn_mu_bdiv_q_itch($nn, $dn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $qn;
      var $in;
      var $tn;
      var $itch_binvert;
      var $itch_out;
      var $itches;
      var $b;
      $2=$nn;
      $3=$dn;
      var $4=$2;
      $qn=$4;
      var $5=$qn;
      var $6=$3;
      var $7=(($5)|0) > (($6)|0);
      if ($7) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $9=$qn;
      var $10=((($9)-(1))|0);
      var $11=$3;
      var $12=((((($10)|0))/((($11)|0)))&-1);
      var $13=((($12)+(1))|0);
      $b=$13;
      var $14=$qn;
      var $15=((($14)-(1))|0);
      var $16=$b;
      var $17=((((($15)|0))/((($16)|0)))&-1);
      var $18=((($17)+(1))|0);
      $in=$18;
      var $19=$in;
      var $20=(($19)|0) >= 40;
      if ($20) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $22=$3;
      var $23=$in;
      var $24=((($22)+($23))|0);
      $tn=$24;
      $itch_out=0;
      label = 6; break;
    case 5: 
      var $26=$3;
      var $27=___gmpn_mulmod_bnm1_next_size($26);
      $tn=$27;
      var $28=$tn;
      var $29=$3;
      var $30=$in;
      var $31=_mpn_mulmod_bnm1_itch289($28, $29, $30);
      $itch_out=$31;
      label = 6; break;
    case 6: 
      var $33=$in;
      var $34=___gmpn_binvert_itch($33);
      $itch_binvert=$34;
      var $35=$3;
      var $36=$tn;
      var $37=((($35)+($36))|0);
      var $38=$itch_out;
      var $39=((($37)+($38))|0);
      $itches=$39;
      var $40=$in;
      var $41=$itches;
      var $42=$itch_binvert;
      var $43=(($41)|0) > (($42)|0);
      if ($43) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $45=$itches;
      var $49 = $45;label = 9; break;
    case 8: 
      var $47=$itch_binvert;
      var $49 = $47;label = 9; break;
    case 9: 
      var $49;
      var $50=((($40)+($49))|0);
      $1=$50;
      label = 17; break;
    case 10: 
      var $52=$qn;
      var $53=$qn;
      var $54=$53 >> 1;
      var $55=((($52)-($54))|0);
      $in=$55;
      var $56=$in;
      var $57=(($56)|0) >= 40;
      if ($57) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $59=$qn;
      var $60=$in;
      var $61=((($59)+($60))|0);
      $tn=$61;
      $itch_out=0;
      label = 13; break;
    case 12: 
      var $63=$qn;
      var $64=___gmpn_mulmod_bnm1_next_size($63);
      $tn=$64;
      var $65=$tn;
      var $66=$qn;
      var $67=$in;
      var $68=_mpn_mulmod_bnm1_itch289($65, $66, $67);
      $itch_out=$68;
      label = 13; break;
    case 13: 
      var $70=$in;
      var $71=___gmpn_binvert_itch($70);
      $itch_binvert=$71;
      var $72=$tn;
      var $73=$itch_out;
      var $74=((($72)+($73))|0);
      $itches=$74;
      var $75=$in;
      var $76=$itches;
      var $77=$itch_binvert;
      var $78=(($76)|0) > (($77)|0);
      if ($78) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $80=$itches;
      var $84 = $80;label = 16; break;
    case 15: 
      var $82=$itch_binvert;
      var $84 = $82;label = 16; break;
    case 16: 
      var $84;
      var $85=((($75)+($84))|0);
      $1=$85;
      label = 17; break;
    case 17: 
      var $87=$1;

      return $87;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_bdiv_q_itch["X"]=1;

function ___gmpn_mul_fft($op, $pl, $n, $nl, $m, $ml, $k) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $K;
      var $maxLK;
      var $i;
      var $N;
      var $Nprime;
      var $nprime;
      var $M;
      var $Mp;
      var $l;
      var $Ap;
      var $Bp;
      var $A;
      var $T;
      var $B;
      var $fft_l;
      var $sqr;
      var $h;
      var $__tmp_marker=__stackBase__;
      var $K2;
      var $pla;
      $1=$op;
      $2=$pl;
      $3=$n;
      $4=$nl;
      $5=$m;
      $6=$ml;
      $7=$k;
      var $8=$3;
      var $9=$5;
      var $10=(($8)|0)==(($9)|0);
      if ($10) { label = 3; break; } else { var $16 = 0;label = 4; break; }
    case 3: 
      var $12=$4;
      var $13=$6;
      var $14=(($12)|0)==(($13)|0);
      var $16 = $14;label = 4; break;
    case 4: 
      var $16;
      var $17=(($16)&1);
      $sqr=$17;
      label = 5; break;
    case 5: 
      var $19=$2;
      var $20=$7;
      var $21=___gmpn_fft_next_size($19, $20);
      var $22=$2;
      var $23=(($21)|0)==(($22)|0);
      if ($23) { label = 7; break; } else { label = 6; break; }
    case 6: 
      ___gmp_assert_fail(((5243356)|0), 824, ((5243752)|0));
      throw "Reached an unreachable!"
    case 7: 
      label = 8; break;
    case 8: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $27=$2;
      var $28=($27<<5);
      $N=$28;
      var $29=$7;
      var $30=((($29)+(1))|0);
      var $31=($30<<2);
      var $32=(($31)>>>0) < 65536;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $34=$7;
      var $35=((($34)+(1))|0);
      var $36=($35<<2);
      var $37=STACKTOP;STACKTOP = (STACKTOP + $36)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $44 = $37;label = 11; break;
    case 10: 
      var $39=$7;
      var $40=((($39)+(1))|0);
      var $41=($40<<2);
      var $42=___gmp_tmp_reentrant_alloc($__tmp_marker, $41);
      var $44 = $42;label = 11; break;
    case 11: 
      var $44;
      var $45=$44;
      $fft_l=$45;
      $i=0;
      label = 12; break;
    case 12: 
      var $47=$i;
      var $48=$7;
      var $49=(($47)|0) <= (($48)|0);
      if ($49) { label = 13; break; } else { label = 18; break; }
    case 13: 
      var $51=$i;
      var $52=1 << $51;
      var $53=($52<<2);
      var $54=(($53)>>>0) < 65536;
      if ($54) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $56=$i;
      var $57=1 << $56;
      var $58=($57<<2);
      var $59=STACKTOP;STACKTOP = (STACKTOP + $58)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $66 = $59;label = 16; break;
    case 15: 
      var $61=$i;
      var $62=1 << $61;
      var $63=($62<<2);
      var $64=___gmp_tmp_reentrant_alloc($__tmp_marker, $63);
      var $66 = $64;label = 16; break;
    case 16: 
      var $66;
      var $67=$66;
      var $68=$i;
      var $69=$fft_l;
      var $70=(($69+($68<<2))|0);
      HEAP32[(($70)>>2)]=$67;
      label = 17; break;
    case 17: 
      var $72=$i;
      var $73=((($72)+(1))|0);
      $i=$73;
      label = 12; break;
    case 18: 
      var $75=$fft_l;
      var $76=$7;
      _mpn_fft_initl($75, $76);
      var $77=$7;
      var $78=1 << $77;
      $K=$78;
      var $79=$N;
      var $80=$7;
      var $81=$79 >> (($80)|0);
      $M=$81;
      var $82=$M;
      var $83=((($82)-(1))|0);
      var $84=((((($83)|0))/(32))&-1);
      var $85=((($84)+(1))|0);
      $l=$85;
      var $86=$7;
      var $87=_mpn_mul_fft_lcm(32, $86);
      $maxLK=$87;
      var $88=$M;
      var $89=($88<<1);
      var $90=$7;
      var $91=((($89)+($90))|0);
      var $92=((($91)+(2))|0);
      var $93=$maxLK;
      var $94=((((($92)|0))/((($93)|0)))&-1);
      var $95=((($94)+(1))|0);
      var $96=$maxLK;
      var $97=Math.imul($95,$96);
      $Nprime=$97;
      var $98=$Nprime;
      var $99=((((($98)|0))/(32))&-1);
      $nprime=$99;
      var $100=$nprime;
      var $101=$sqr;
      var $102=(($101)|0)!=0;
      var $103=$102 ? 360 : 300;
      var $104=(($100)|0) >= (($103)|0);
      if ($104) { label = 19; break; } else { label = 24; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $107=$nprime;
      var $108=$sqr;
      var $109=___gmpn_fft_best_k($107, $108);
      var $110=1 << $109;
      $K2=$110;
      var $111=$nprime;
      var $112=$K2;
      var $113=((($112)-(1))|0);
      var $114=$111 & $113;
      var $115=(($114)|0)==0;
      if ($115) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $118=$nprime;
      var $119=$K2;
      var $120=((($118)+($119))|0);
      var $121=((($120)-(1))|0);
      var $122=$K2;
      var $123=(((-$122))|0);
      var $124=$121 & $123;
      $nprime=$124;
      var $125=$nprime;
      var $126=($125<<5);
      $Nprime=$126;
      label = 20; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $130=$nprime;
      var $131=$2;
      var $132=(($130)|0) < (($131)|0);
      if ($132) { label = 27; break; } else { label = 26; break; }
    case 26: 
      ___gmp_assert_fail(((5243356)|0), 857, ((5243468)|0));
      throw "Reached an unreachable!"
    case 27: 
      label = 28; break;
    case 28: 
      var $136=$nprime;
      var $137=((($136)+(1))|0);
      var $138=($137<<1);
      var $139=($138<<2);
      var $140=(($139)>>>0) < 65536;
      if ($140) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $142=$nprime;
      var $143=((($142)+(1))|0);
      var $144=($143<<1);
      var $145=($144<<2);
      var $146=STACKTOP;STACKTOP = (STACKTOP + $145)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $154 = $146;label = 31; break;
    case 30: 
      var $148=$nprime;
      var $149=((($148)+(1))|0);
      var $150=($149<<1);
      var $151=($150<<2);
      var $152=___gmp_tmp_reentrant_alloc($__tmp_marker, $151);
      var $154 = $152;label = 31; break;
    case 31: 
      var $154;
      var $155=$154;
      $T=$155;
      var $156=$Nprime;
      var $157=$7;
      var $158=$156 >> (($157)|0);
      $Mp=$158;
      var $159=$K;
      var $160=$nprime;
      var $161=((($160)+(1))|0);
      var $162=Math.imul($159,$161);
      var $163=($162<<2);
      var $164=(($163)>>>0) < 65536;
      if ($164) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $166=$K;
      var $167=$nprime;
      var $168=((($167)+(1))|0);
      var $169=Math.imul($166,$168);
      var $170=($169<<2);
      var $171=STACKTOP;STACKTOP = (STACKTOP + $170)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $180 = $171;label = 34; break;
    case 33: 
      var $173=$K;
      var $174=$nprime;
      var $175=((($174)+(1))|0);
      var $176=Math.imul($173,$175);
      var $177=($176<<2);
      var $178=___gmp_tmp_reentrant_alloc($__tmp_marker, $177);
      var $180 = $178;label = 34; break;
    case 34: 
      var $180;
      var $181=$180;
      $A=$181;
      var $182=$K;
      var $183=($182<<2);
      var $184=(($183)>>>0) < 65536;
      if ($184) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $186=$K;
      var $187=($186<<2);
      var $188=STACKTOP;STACKTOP = (STACKTOP + $187)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $194 = $188;label = 37; break;
    case 36: 
      var $190=$K;
      var $191=($190<<2);
      var $192=___gmp_tmp_reentrant_alloc($__tmp_marker, $191);
      var $194 = $192;label = 37; break;
    case 37: 
      var $194;
      var $195=$194;
      $Ap=$195;
      var $196=$A;
      var $197=$Ap;
      var $198=$K;
      var $199=$nprime;
      var $200=$3;
      var $201=$4;
      var $202=$l;
      var $203=$Mp;
      var $204=$T;
      _mpn_mul_fft_decompose($196, $197, $198, $199, $200, $201, $202, $203, $204);
      var $205=$sqr;
      var $206=(($205)|0)!=0;
      if ($206) { label = 38; break; } else { label = 45; break; }
    case 38: 
      var $208=$l;
      var $209=$K;
      var $210=((($209)-(1))|0);
      var $211=Math.imul($208,$210);
      var $212=$nprime;
      var $213=((($211)+($212))|0);
      var $214=((($213)+(1))|0);
      $pla=$214;
      var $215=$pla;
      var $216=($215<<2);
      var $217=(($216)>>>0) < 65536;
      if ($217) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $219=$pla;
      var $220=($219<<2);
      var $221=STACKTOP;STACKTOP = (STACKTOP + $220)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $227 = $221;label = 41; break;
    case 40: 
      var $223=$pla;
      var $224=($223<<2);
      var $225=___gmp_tmp_reentrant_alloc($__tmp_marker, $224);
      var $227 = $225;label = 41; break;
    case 41: 
      var $227;
      var $228=$227;
      $B=$228;
      var $229=$K;
      var $230=($229<<2);
      var $231=(($230)>>>0) < 65536;
      if ($231) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $233=$K;
      var $234=($233<<2);
      var $235=STACKTOP;STACKTOP = (STACKTOP + $234)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $241 = $235;label = 44; break;
    case 43: 
      var $237=$K;
      var $238=($237<<2);
      var $239=___gmp_tmp_reentrant_alloc($__tmp_marker, $238);
      var $241 = $239;label = 44; break;
    case 44: 
      var $241;
      var $242=$241;
      $Bp=$242;
      label = 52; break;
    case 45: 
      var $244=$K;
      var $245=$nprime;
      var $246=((($245)+(1))|0);
      var $247=Math.imul($244,$246);
      var $248=($247<<2);
      var $249=(($248)>>>0) < 65536;
      if ($249) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $251=$K;
      var $252=$nprime;
      var $253=((($252)+(1))|0);
      var $254=Math.imul($251,$253);
      var $255=($254<<2);
      var $256=STACKTOP;STACKTOP = (STACKTOP + $255)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $265 = $256;label = 48; break;
    case 47: 
      var $258=$K;
      var $259=$nprime;
      var $260=((($259)+(1))|0);
      var $261=Math.imul($258,$260);
      var $262=($261<<2);
      var $263=___gmp_tmp_reentrant_alloc($__tmp_marker, $262);
      var $265 = $263;label = 48; break;
    case 48: 
      var $265;
      var $266=$265;
      $B=$266;
      var $267=$K;
      var $268=($267<<2);
      var $269=(($268)>>>0) < 65536;
      if ($269) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $271=$K;
      var $272=($271<<2);
      var $273=STACKTOP;STACKTOP = (STACKTOP + $272)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $279 = $273;label = 51; break;
    case 50: 
      var $275=$K;
      var $276=($275<<2);
      var $277=___gmp_tmp_reentrant_alloc($__tmp_marker, $276);
      var $279 = $277;label = 51; break;
    case 51: 
      var $279;
      var $280=$279;
      $Bp=$280;
      var $281=$B;
      var $282=$Bp;
      var $283=$K;
      var $284=$nprime;
      var $285=$5;
      var $286=$6;
      var $287=$l;
      var $288=$Mp;
      var $289=$T;
      _mpn_mul_fft_decompose($281, $282, $283, $284, $285, $286, $287, $288, $289);
      label = 52; break;
    case 52: 
      var $291=$1;
      var $292=$2;
      var $293=$7;
      var $294=$Ap;
      var $295=$Bp;
      var $296=$A;
      var $297=$B;
      var $298=$nprime;
      var $299=$l;
      var $300=$Mp;
      var $301=$fft_l;
      var $302=$T;
      var $303=$sqr;
      var $304=_mpn_mul_fft_internal($291, $292, $293, $294, $295, $296, $297, $298, $299, $300, $301, $302, $303);
      $h=$304;
      label = 53; break;
    case 53: 
      var $306=HEAP32[(($__tmp_marker)>>2)];
      var $307=(($306)|0)!=0;
      if ($307) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $309=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($309);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $312=$h;
      STACKTOP = __stackBase__;
      return $312;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul_fft["X"]=1;

function _mpn_mul_fft_decompose($A, $Ap, $K, $nprime, $n, $nl, $l, $Mp, $T) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $i;
      var $j;
      var $tmp;
      var $Kl;
      var $__tmp_marker=__stackBase__;
      var $dif;
      var $cy;
      var $subp;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__dst1;
      var $__n2;
      var $__dst3;
      var $__n4;
      $1=$A;
      $2=$Ap;
      $3=$K;
      $4=$nprime;
      $5=$n;
      $6=$nl;
      $7=$l;
      $8=$Mp;
      $9=$T;
      var $10=$3;
      var $11=$7;
      var $12=Math.imul($10,$11);
      $Kl=$12;
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $13=$6;
      var $14=$Kl;
      var $15=(($13)|0) > (($14)|0);
      if ($15) { label = 3; break; } else { label = 22; break; }
    case 3: 
      var $17=$6;
      var $18=$Kl;
      var $19=((($17)-($18))|0);
      $dif=$19;
      var $20=$Kl;
      var $21=((($20)+(1))|0);
      var $22=($21<<2);
      var $23=(($22)>>>0) < 65536;
      if ($23) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=$Kl;
      var $26=((($25)+(1))|0);
      var $27=($26<<2);
      var $28=STACKTOP;STACKTOP = (STACKTOP + $27)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $35 = $28;label = 6; break;
    case 5: 
      var $30=$Kl;
      var $31=((($30)+(1))|0);
      var $32=($31<<2);
      var $33=___gmp_tmp_reentrant_alloc($__tmp_marker, $32);
      var $35 = $33;label = 6; break;
    case 6: 
      var $35;
      var $36=$35;
      $tmp=$36;
      var $37=$dif;
      var $38=$Kl;
      var $39=(($37)|0) > (($38)|0);
      if ($39) { label = 7; break; } else { label = 20; break; }
    case 7: 
      $subp=0;
      var $41=$tmp;
      var $42=$5;
      var $43=$5;
      var $44=$Kl;
      var $45=(($43+($44<<2))|0);
      var $46=$Kl;
      var $47=___gmpn_sub_n($41, $42, $45, $46);
      $cy=$47;
      var $48=$Kl;
      var $49=($48<<1);
      var $50=$5;
      var $51=(($50+($49<<2))|0);
      $5=$51;
      var $52=$Kl;
      var $53=$dif;
      var $54=((($53)-($52))|0);
      $dif=$54;
      label = 8; break;
    case 8: 
      var $56=$dif;
      var $57=$Kl;
      var $58=(($56)|0) > (($57)|0);
      if ($58) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $60=$subp;
      var $61=(($60)|0)!=0;
      if ($61) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $63=$tmp;
      var $64=$tmp;
      var $65=$5;
      var $66=$Kl;
      var $67=___gmpn_sub_n($63, $64, $65, $66);
      var $68=$cy;
      var $69=((($68)+($67))|0);
      $cy=$69;
      label = 12; break;
    case 11: 
      var $71=$tmp;
      var $72=$tmp;
      var $73=$5;
      var $74=$Kl;
      var $75=___gmpn_add_n($71, $72, $73, $74);
      var $76=$cy;
      var $77=((($76)-($75))|0);
      $cy=$77;
      label = 12; break;
    case 12: 
      var $79=$subp;
      var $80=$79 ^ 1;
      $subp=$80;
      var $81=$Kl;
      var $82=$5;
      var $83=(($82+($81<<2))|0);
      $5=$83;
      var $84=$Kl;
      var $85=$dif;
      var $86=((($85)-($84))|0);
      $dif=$86;
      label = 8; break;
    case 13: 
      var $88=$subp;
      var $89=(($88)|0)!=0;
      if ($89) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $91=$tmp;
      var $92=$tmp;
      var $93=$Kl;
      var $94=$5;
      var $95=$dif;
      var $96=___gmpn_sub($91, $92, $93, $94, $95);
      var $97=$cy;
      var $98=((($97)+($96))|0);
      $cy=$98;
      label = 16; break;
    case 15: 
      var $100=$tmp;
      var $101=$tmp;
      var $102=$Kl;
      var $103=$5;
      var $104=$dif;
      var $105=___gmpn_add($100, $101, $102, $103, $104);
      var $106=$cy;
      var $107=((($106)-($105))|0);
      $cy=$107;
      label = 16; break;
    case 16: 
      var $109=$cy;
      var $110=(($109)|0) >= 0;
      if ($110) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $112=$tmp;
      var $113=$tmp;
      var $114=$Kl;
      var $115=$cy;
      var $116=___gmpn_add_1($112, $113, $114, $115);
      $cy=$116;
      label = 19; break;
    case 18: 
      var $118=$tmp;
      var $119=$tmp;
      var $120=$Kl;
      var $121=$cy;
      var $122=(((-$121))|0);
      var $123=___gmpn_sub_1($118, $119, $120, $122);
      $cy=$123;
      label = 19; break;
    case 19: 
      label = 21; break;
    case 20: 
      var $126=$tmp;
      var $127=$5;
      var $128=$Kl;
      var $129=$5;
      var $130=$Kl;
      var $131=(($129+($130<<2))|0);
      var $132=$dif;
      var $133=___gmpn_sub($126, $127, $128, $131, $132);
      $cy=$133;
      var $134=$tmp;
      var $135=$tmp;
      var $136=$Kl;
      var $137=$cy;
      var $138=___gmpn_add_1($134, $135, $136, $137);
      $cy=$138;
      label = 21; break;
    case 21: 
      var $140=$cy;
      var $141=$Kl;
      var $142=$tmp;
      var $143=(($142+($141<<2))|0);
      HEAP32[(($143)>>2)]=$140;
      var $144=$Kl;
      var $145=((($144)+(1))|0);
      $6=$145;
      var $146=$tmp;
      $5=$146;
      label = 22; break;
    case 22: 
      $i=0;
      label = 23; break;
    case 23: 
      var $149=$i;
      var $150=$3;
      var $151=(($149)|0) < (($150)|0);
      if ($151) { label = 24; break; } else { label = 68; break; }
    case 24: 
      var $153=$1;
      var $154=$i;
      var $155=$2;
      var $156=(($155+($154<<2))|0);
      HEAP32[(($156)>>2)]=$153;
      var $157=$6;
      var $158=(($157)|0) > 0;
      if ($158) { label = 25; break; } else { label = 56; break; }
    case 25: 
      var $160=$7;
      var $161=$6;
      var $162=(($160)|0) <= (($161)|0);
      if ($162) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $164=$i;
      var $165=$3;
      var $166=((($165)-(1))|0);
      var $167=(($164)|0) < (($166)|0);
      if ($167) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $169=$7;
      var $173 = $169;label = 29; break;
    case 28: 
      var $171=$6;
      var $173 = $171;label = 29; break;
    case 29: 
      var $173;
      $j=$173;
      var $174=$j;
      var $175=$6;
      var $176=((($175)-($174))|0);
      $6=$176;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $185=$j;
      var $186=(($185)|0)!=0;
      if ($186) { label = 38; break; } else { label = 44; break; }
    case 38: 
      var $188=$j;
      var $189=((($188)-(1))|0);
      $__n=$189;
      var $190=$9;
      $__dst=$190;
      var $191=$5;
      $__src=$191;
      var $192=$__src;
      var $193=(($192+4)|0);
      $__src=$193;
      var $194=HEAP32[(($192)>>2)];
      $__x=$194;
      var $195=$__n;
      var $196=(($195)|0)!=0;
      if ($196) { label = 39; break; } else { label = 43; break; }
    case 39: 
      label = 40; break;
    case 40: 
      var $199=$__x;
      var $200=$__dst;
      var $201=(($200+4)|0);
      $__dst=$201;
      HEAP32[(($200)>>2)]=$199;
      var $202=$__src;
      var $203=(($202+4)|0);
      $__src=$203;
      var $204=HEAP32[(($202)>>2)];
      $__x=$204;
      label = 41; break;
    case 41: 
      var $206=$__n;
      var $207=((($206)-(1))|0);
      $__n=$207;
      var $208=(($207)|0)!=0;
      if ($208) { label = 40; break; } else { label = 42; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $211=$__x;
      var $212=$__dst;
      var $213=(($212+4)|0);
      $__dst=$213;
      HEAP32[(($212)>>2)]=$211;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $220=$4;
      var $221=((($220)+(1))|0);
      var $222=$j;
      var $223=((($221)-($222))|0);
      var $224=(($223)|0)!=0;
      if ($224) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $226=$9;
      var $227=$j;
      var $228=(($226+($227<<2))|0);
      $__dst1=$228;
      var $229=$4;
      var $230=((($229)+(1))|0);
      var $231=$j;
      var $232=((($230)-($231))|0);
      $__n2=$232;
      label = 51; break;
    case 51: 
      var $234=$__dst1;
      var $235=(($234+4)|0);
      $__dst1=$235;
      HEAP32[(($234)>>2)]=0;
      label = 52; break;
    case 52: 
      var $237=$__n2;
      var $238=((($237)-(1))|0);
      $__n2=$238;
      var $239=(($238)|0)!=0;
      if ($239) { label = 51; break; } else { label = 53; break; }
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $243=$7;
      var $244=$5;
      var $245=(($244+($243<<2))|0);
      $5=$245;
      var $246=$1;
      var $247=$9;
      var $248=$i;
      var $249=$8;
      var $250=Math.imul($248,$249);
      var $251=$4;
      _mpn_fft_mul_2exp_modF($246, $247, $250, $251);
      label = 66; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $256=$4;
      var $257=((($256)+(1))|0);
      var $258=(($257)|0)!=0;
      if ($258) { label = 60; break; } else { label = 64; break; }
    case 60: 
      var $260=$1;
      $__dst3=$260;
      var $261=$4;
      var $262=((($261)+(1))|0);
      $__n4=$262;
      label = 61; break;
    case 61: 
      var $264=$__dst3;
      var $265=(($264+4)|0);
      $__dst3=$265;
      HEAP32[(($264)>>2)]=0;
      label = 62; break;
    case 62: 
      var $267=$__n4;
      var $268=((($267)-(1))|0);
      $__n4=$268;
      var $269=(($268)|0)!=0;
      if ($269) { label = 61; break; } else { label = 63; break; }
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $274=$4;
      var $275=((($274)+(1))|0);
      var $276=$1;
      var $277=(($276+($275<<2))|0);
      $1=$277;
      label = 67; break;
    case 67: 
      var $279=$i;
      var $280=((($279)+(1))|0);
      $i=$280;
      label = 23; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $283=$6;
      var $284=(($283)|0)==0;
      if ($284) { label = 71; break; } else { label = 70; break; }
    case 70: 
      ___gmp_assert_fail(((5243356)|0), 699, ((5243200)|0));
      throw "Reached an unreachable!"
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $289=HEAP32[(($__tmp_marker)>>2)];
      var $290=(($289)|0)!=0;
      if ($290) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $292=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($292);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_mul_fft_decompose["X"]=1;

function _mpn_mul_fft_internal($op, $pl, $k, $Ap, $Bp, $A, $B, $nprime, $l, $Mp, $fft_l, $T, $sqr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $11;
      var $12;
      var $13;
      var $K;
      var $i;
      var $pla;
      var $lo;
      var $sh;
      var $j;
      var $p;
      var $cc;
      var $__dst;
      var $__n;
      var $__dst1;
      var $__n2;
      var $n;
      $1=$op;
      $2=$pl;
      $3=$k;
      $4=$Ap;
      $5=$Bp;
      $6=$A;
      $7=$B;
      $8=$nprime;
      $9=$l;
      $10=$Mp;
      $11=$fft_l;
      $12=$T;
      $13=$sqr;
      var $14=$3;
      var $15=1 << $14;
      $K=$15;
      var $16=$4;
      var $17=$K;
      var $18=$11;
      var $19=$3;
      var $20=(($18+($19<<2))|0);
      var $21=$10;
      var $22=($21<<1);
      var $23=$8;
      var $24=$12;
      _mpn_fft_fft($16, $17, $20, $22, $23, 1, $24);
      var $25=$13;
      var $26=(($25)|0)!=0;
      if ($26) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $28=$5;
      var $29=$K;
      var $30=$11;
      var $31=$3;
      var $32=(($30+($31<<2))|0);
      var $33=$10;
      var $34=($33<<1);
      var $35=$8;
      var $36=$12;
      _mpn_fft_fft($28, $29, $32, $34, $35, 1, $36);
      label = 4; break;
    case 4: 
      var $38=$4;
      var $39=$13;
      var $40=(($39)|0)!=0;
      if ($40) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $42=$4;
      var $46 = $42;label = 7; break;
    case 6: 
      var $44=$5;
      var $46 = $44;label = 7; break;
    case 7: 
      var $46;
      var $47=$8;
      var $48=$K;
      _mpn_fft_mul_modF_K($38, $46, $47, $48);
      var $49=$4;
      var $50=$K;
      var $51=$10;
      var $52=($51<<1);
      var $53=$8;
      var $54=$12;
      _mpn_fft_fftinv($49, $50, $52, $53, $54);
      var $55=$12;
      var $56=$8;
      var $57=(($55+($56<<2))|0);
      var $58=(($57+4)|0);
      var $59=$5;
      var $60=(($59)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$5;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$4;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$3;
      var $68=$8;
      _mpn_fft_div_2exp_modF($63, $66, $67, $68);
      $i=1;
      label = 8; break;
    case 8: 
      var $70=$i;
      var $71=$K;
      var $72=(($70)|0) < (($71)|0);
      if ($72) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $74=$i;
      var $75=((($74)-(1))|0);
      var $76=$4;
      var $77=(($76+($75<<2))|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$i;
      var $80=$5;
      var $81=(($80+($79<<2))|0);
      HEAP32[(($81)>>2)]=$78;
      var $82=$i;
      var $83=$5;
      var $84=(($83+($82<<2))|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$i;
      var $87=$4;
      var $88=(($87+($86<<2))|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$3;
      var $91=$K;
      var $92=$i;
      var $93=((($91)-($92))|0);
      var $94=$10;
      var $95=Math.imul($93,$94);
      var $96=((($90)+($95))|0);
      var $97=$8;
      _mpn_fft_div_2exp_modF($85, $89, $96, $97);
      label = 10; break;
    case 10: 
      var $99=$i;
      var $100=((($99)+(1))|0);
      $i=$100;
      label = 8; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $105=$8;
      var $106=((($105)+(1))|0);
      var $107=(($106)|0)!=0;
      if ($107) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $109=$12;
      $__dst=$109;
      var $110=$8;
      var $111=((($110)+(1))|0);
      $__n=$111;
      label = 16; break;
    case 16: 
      var $113=$__dst;
      var $114=(($113+4)|0);
      $__dst=$114;
      HEAP32[(($113)>>2)]=0;
      label = 17; break;
    case 17: 
      var $116=$__n;
      var $117=((($116)-(1))|0);
      $__n=$117;
      var $118=(($117)|0)!=0;
      if ($118) { label = 16; break; } else { label = 18; break; }
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $122=$9;
      var $123=$K;
      var $124=((($123)-(1))|0);
      var $125=Math.imul($122,$124);
      var $126=$8;
      var $127=((($125)+($126))|0);
      var $128=((($127)+(1))|0);
      $pla=$128;
      var $129=$7;
      $p=$129;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $133=$pla;
      var $134=(($133)|0)!=0;
      if ($134) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $136=$p;
      $__dst1=$136;
      var $137=$pla;
      $__n2=$137;
      label = 25; break;
    case 25: 
      var $139=$__dst1;
      var $140=(($139+4)|0);
      $__dst1=$140;
      HEAP32[(($139)>>2)]=0;
      label = 26; break;
    case 26: 
      var $142=$__n2;
      var $143=((($142)-(1))|0);
      $__n2=$143;
      var $144=(($143)|0)!=0;
      if ($144) { label = 25; break; } else { label = 27; break; }
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      $cc=0;
      var $148=$K;
      var $149=((($148)-(1))|0);
      $i=$149;
      var $150=$9;
      var $151=$i;
      var $152=Math.imul($150,$151);
      var $153=$8;
      var $154=((($152)+($153))|0);
      $lo=$154;
      var $155=$9;
      var $156=$i;
      var $157=Math.imul($155,$156);
      $sh=$157;
      label = 30; break;
    case 30: 
      var $159=$i;
      var $160=(($159)|0) >= 0;
      if ($160) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $162=$p;
      var $163=$sh;
      var $164=(($162+($163<<2))|0);
      $n=$164;
      var $165=$K;
      var $166=$i;
      var $167=((($165)-($166))|0);
      var $168=$K;
      var $169=((($168)-(1))|0);
      var $170=$167 & $169;
      $j=$170;
      var $171=$n;
      var $172=$n;
      var $173=$j;
      var $174=$5;
      var $175=(($174+($173<<2))|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=$8;
      var $178=((($177)+(1))|0);
      var $179=___gmpn_add_n($171, $172, $176, $178);
      var $180=(($179)|0)!=0;
      if ($180) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $182=$n;
      var $183=$8;
      var $184=(($182+($183<<2))|0);
      var $185=(($184+4)|0);
      var $186=$n;
      var $187=$8;
      var $188=(($186+($187<<2))|0);
      var $189=(($188+4)|0);
      var $190=$pla;
      var $191=$sh;
      var $192=((($190)-($191))|0);
      var $193=$8;
      var $194=((($192)-($193))|0);
      var $195=((($194)-(1))|0);
      var $196=___gmpn_add_1($185, $189, $195, 1);
      var $197=$cc;
      var $198=((($197)+($196))|0);
      $cc=$198;
      label = 33; break;
    case 33: 
      var $200=$i;
      var $201=((($200)+(1))|0);
      var $202=$9;
      var $203=($202<<1);
      var $204=$12;
      var $205=(($204+($203<<2))|0);
      HEAP32[(($205)>>2)]=$201;
      var $206=$j;
      var $207=$5;
      var $208=(($207+($206<<2))|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$12;
      var $211=$8;
      var $212=((($211)+(1))|0);
      var $213=___gmpn_cmp($209, $210, $212);
      var $214=(($213)|0) > 0;
      if ($214) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $216=$n;
      var $217=$n;
      var $218=$pla;
      var $219=$sh;
      var $220=((($218)-($219))|0);
      var $221=___gmpn_sub_1($216, $217, $220, 1);
      var $222=$cc;
      var $223=((($222)-($221))|0);
      $cc=$223;
      var $224=$p;
      var $225=$lo;
      var $226=(($224+($225<<2))|0);
      var $227=$p;
      var $228=$lo;
      var $229=(($227+($228<<2))|0);
      var $230=$pla;
      var $231=$lo;
      var $232=((($230)-($231))|0);
      var $233=___gmpn_sub_1($226, $229, $232, 1);
      var $234=$cc;
      var $235=((($234)-($233))|0);
      $cc=$235;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $238=$i;
      var $239=((($238)-(1))|0);
      $i=$239;
      var $240=$9;
      var $241=$lo;
      var $242=((($241)-($240))|0);
      $lo=$242;
      var $243=$9;
      var $244=$sh;
      var $245=((($244)-($243))|0);
      $sh=$245;
      label = 30; break;
    case 37: 
      var $247=$cc;
      var $248=(($247)|0)==-1;
      if ($248) { label = 38; break; } else { label = 41; break; }
    case 38: 
      var $250=$p;
      var $251=$pla;
      var $252=(($250+($251<<2))|0);
      var $253=$2;
      var $254=(((-$253))|0);
      var $255=(($252+($254<<2))|0);
      var $256=$p;
      var $257=$pla;
      var $258=(($256+($257<<2))|0);
      var $259=$2;
      var $260=(((-$259))|0);
      var $261=(($258+($260<<2))|0);
      var $262=$2;
      var $263=___gmpn_add_1($255, $261, $262, 1);
      $cc=$263;
      var $264=(($263)|0)!=0;
      if ($264) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $266=$p;
      var $267=$pla;
      var $268=(($266+($267<<2))|0);
      var $269=$2;
      var $270=(((-$269))|0);
      var $271=(($268+($270<<2))|0);
      var $272=((($271)-(4))|0);
      var $273=$p;
      var $274=$pla;
      var $275=(($273+($274<<2))|0);
      var $276=$2;
      var $277=(((-$276))|0);
      var $278=(($275+($277<<2))|0);
      var $279=((($278)-(4))|0);
      var $280=$2;
      var $281=((($280)+(1))|0);
      var $282=___gmpn_sub_1($272, $279, $281, 1);
      var $283=$p;
      var $284=$pla;
      var $285=(($283+($284<<2))|0);
      var $286=((($285)-(4))|0);
      var $287=$p;
      var $288=$pla;
      var $289=(($287+($288<<2))|0);
      var $290=((($289)-(4))|0);
      var $291=___gmpn_sub_1($286, $290, 1, 1);
      label = 40; break;
    case 40: 
      label = 55; break;
    case 41: 
      var $294=$cc;
      var $295=(($294)|0)==1;
      if ($295) { label = 42; break; } else { label = 51; break; }
    case 42: 
      var $297=$pla;
      var $298=$2;
      var $299=($298<<1);
      var $300=(($297)|0) >= (($299)|0);
      if ($300) { label = 43; break; } else { label = 47; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $303=$p;
      var $304=$pla;
      var $305=(($303+($304<<2))|0);
      var $306=$2;
      var $307=($306<<1);
      var $308=(((-$307))|0);
      var $309=(($305+($308<<2))|0);
      var $310=$p;
      var $311=$pla;
      var $312=(($310+($311<<2))|0);
      var $313=$2;
      var $314=($313<<1);
      var $315=(((-$314))|0);
      var $316=(($312+($315<<2))|0);
      var $317=$2;
      var $318=($317<<1);
      var $319=$cc;
      var $320=___gmpn_add_1($309, $316, $318, $319);
      $cc=$320;
      var $321=(($320)|0)!=0;
      if ($321) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 44; break;
    case 46: 
      label = 50; break;
    case 47: 
      var $325=$p;
      var $326=$pla;
      var $327=(($325+($326<<2))|0);
      var $328=$2;
      var $329=(((-$328))|0);
      var $330=(($327+($329<<2))|0);
      var $331=$p;
      var $332=$pla;
      var $333=(($331+($332<<2))|0);
      var $334=$2;
      var $335=(((-$334))|0);
      var $336=(($333+($335<<2))|0);
      var $337=$2;
      var $338=$cc;
      var $339=___gmpn_sub_1($330, $336, $337, $338);
      $cc=$339;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 54; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $348=$1;
      var $349=$2;
      var $350=$p;
      var $351=$pla;
      var $352=_mpn_fft_norm_modF($348, $349, $350, $351);

      return $352;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_mul_fft_internal["X"]=1;

function _mpn_fft_fft($Ap, $K, $ll, $omega, $n, $inc, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $cy;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $j;
      var $lk;
      $1=$Ap;
      $2=$K;
      $3=$ll;
      $4=$omega;
      $5=$n;
      $6=$inc;
      $7=$tp;
      var $8=$2;
      var $9=(($8)|0)==2;
      if ($9) { label = 3; break; } else { label = 25; break; }
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $19=$5;
      var $20=((($19)+(1))|0);
      var $21=(($20)|0)!=0;
      if ($21) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $23=$5;
      var $24=((($23)+(1))|0);
      var $25=((($24)-(1))|0);
      $__n=$25;
      var $26=$7;
      $__dst=$26;
      var $27=$1;
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      $__src=$29;
      var $30=$__src;
      var $31=(($30+4)|0);
      $__src=$31;
      var $32=HEAP32[(($30)>>2)];
      $__x=$32;
      var $33=$__n;
      var $34=(($33)|0)!=0;
      if ($34) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $37=$__x;
      var $38=$__dst;
      var $39=(($38+4)|0);
      $__dst=$39;
      HEAP32[(($38)>>2)]=$37;
      var $40=$__src;
      var $41=(($40+4)|0);
      $__src=$41;
      var $42=HEAP32[(($40)>>2)];
      $__x=$42;
      label = 15; break;
    case 15: 
      var $44=$__n;
      var $45=((($44)-(1))|0);
      $__n=$45;
      var $46=(($45)|0)!=0;
      if ($46) { label = 14; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $49=$__x;
      var $50=$__dst;
      var $51=(($50+4)|0);
      $__dst=$51;
      HEAP32[(($50)>>2)]=$49;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $55=$1;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$1;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$6;
      var $62=$1;
      var $63=(($62+($61<<2))|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$5;
      var $66=((($65)+(1))|0);
      var $67=___gmpn_add_n($57, $60, $64, $66);
      var $68=$6;
      var $69=$1;
      var $70=(($69+($68<<2))|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$7;
      var $73=$6;
      var $74=$1;
      var $75=(($74+($73<<2))|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$5;
      var $78=((($77)+(1))|0);
      var $79=___gmpn_sub_n($71, $72, $76, $78);
      $cy=$79;
      var $80=$5;
      var $81=$1;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+($80<<2))|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85)>>>0) > 1;
      if ($86) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $88=$1;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$1;
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$5;
      var $95=$5;
      var $96=$1;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+($95<<2))|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)-(1))|0);
      var $102=___gmpn_sub_1($90, $93, $94, $101);
      var $103=(((1)-($102))|0);
      var $104=$5;
      var $105=$1;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+($104<<2))|0);
      HEAP32[(($108)>>2)]=$103;
      label = 22; break;
    case 22: 
      var $110=$cy;
      var $111=(($110)|0)!=0;
      if ($111) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $113=$6;
      var $114=$1;
      var $115=(($114+($113<<2))|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$6;
      var $118=$1;
      var $119=(($118+($117<<2))|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$5;
      var $122=$5;
      var $123=$6;
      var $124=$1;
      var $125=(($124+($123<<2))|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+($122<<2))|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$128 ^ -1;
      var $130=((($129)+(1))|0);
      var $131=___gmpn_add_1($116, $120, $121, $130);
      var $132=$5;
      var $133=$6;
      var $134=$1;
      var $135=(($134+($133<<2))|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136+($132<<2))|0);
      HEAP32[(($137)>>2)]=$131;
      label = 24; break;
    case 24: 
      label = 30; break;
    case 25: 
      var $140=$3;
      var $141=HEAP32[(($140)>>2)];
      $lk=$141;
      var $142=$1;
      var $143=$2;
      var $144=$143 >> 1;
      var $145=$3;
      var $146=((($145)-(4))|0);
      var $147=$4;
      var $148=($147<<1);
      var $149=$5;
      var $150=$6;
      var $151=($150<<1);
      var $152=$7;
      _mpn_fft_fft($142, $144, $146, $148, $149, $151, $152);
      var $153=$1;
      var $154=$6;
      var $155=(($153+($154<<2))|0);
      var $156=$2;
      var $157=$156 >> 1;
      var $158=$3;
      var $159=((($158)-(4))|0);
      var $160=$4;
      var $161=($160<<1);
      var $162=$5;
      var $163=$6;
      var $164=($163<<1);
      var $165=$7;
      _mpn_fft_fft($155, $157, $159, $161, $162, $164, $165);
      $j=0;
      label = 26; break;
    case 26: 
      var $167=$j;
      var $168=$2;
      var $169=$168 >> 1;
      var $170=(($167)|0) < (($169)|0);
      if ($170) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $172=$7;
      var $173=$6;
      var $174=$1;
      var $175=(($174+($173<<2))|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=$lk;
      var $178=(($177)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=$4;
      var $181=Math.imul($179,$180);
      var $182=$5;
      _mpn_fft_mul_2exp_modF($172, $176, $181, $182);
      var $183=$6;
      var $184=$1;
      var $185=(($184+($183<<2))|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=$1;
      var $188=(($187)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$7;
      var $191=$5;
      _mpn_fft_sub_modF($186, $189, $190, $191);
      var $192=$1;
      var $193=(($192)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=$1;
      var $196=(($195)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=$7;
      var $199=$5;
      _mpn_fft_add_modF($194, $197, $198, $199);
      label = 28; break;
    case 28: 
      var $201=$j;
      var $202=((($201)+(1))|0);
      $j=$202;
      var $203=$lk;
      var $204=(($203+8)|0);
      $lk=$204;
      var $205=$6;
      var $206=($205<<1);
      var $207=$1;
      var $208=(($207+($206<<2))|0);
      $1=$208;
      label = 26; break;
    case 29: 
      label = 30; break;
    case 30: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_fft["X"]=1;

function _mpn_fft_fftinv($Ap, $K, $omega, $n, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $cy;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $j;
      var $K2;
      $1=$Ap;
      $2=$K;
      $3=$omega;
      $4=$n;
      $5=$tp;
      var $6=$2;
      var $7=(($6)|0)==2;
      if ($7) { label = 3; break; } else { label = 25; break; }
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $17=$4;
      var $18=((($17)+(1))|0);
      var $19=(($18)|0)!=0;
      if ($19) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $21=$4;
      var $22=((($21)+(1))|0);
      var $23=((($22)-(1))|0);
      $__n=$23;
      var $24=$5;
      $__dst=$24;
      var $25=$1;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      $__src=$27;
      var $28=$__src;
      var $29=(($28+4)|0);
      $__src=$29;
      var $30=HEAP32[(($28)>>2)];
      $__x=$30;
      var $31=$__n;
      var $32=(($31)|0)!=0;
      if ($32) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $35=$__x;
      var $36=$__dst;
      var $37=(($36+4)|0);
      $__dst=$37;
      HEAP32[(($36)>>2)]=$35;
      var $38=$__src;
      var $39=(($38+4)|0);
      $__src=$39;
      var $40=HEAP32[(($38)>>2)];
      $__x=$40;
      label = 15; break;
    case 15: 
      var $42=$__n;
      var $43=((($42)-(1))|0);
      $__n=$43;
      var $44=(($43)|0)!=0;
      if ($44) { label = 14; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $47=$__x;
      var $48=$__dst;
      var $49=(($48+4)|0);
      $__dst=$49;
      HEAP32[(($48)>>2)]=$47;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $53=$1;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$1;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$4;
      var $63=((($62)+(1))|0);
      var $64=___gmpn_add_n($55, $58, $61, $63);
      var $65=$1;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$5;
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$4;
      var $73=((($72)+(1))|0);
      var $74=___gmpn_sub_n($67, $68, $71, $73);
      $cy=$74;
      var $75=$4;
      var $76=$1;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+($75<<2))|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)>>>0) > 1;
      if ($81) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $83=$1;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$1;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$4;
      var $90=$4;
      var $91=$1;
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+($90<<2))|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=((($95)-(1))|0);
      var $97=___gmpn_sub_1($85, $88, $89, $96);
      var $98=(((1)-($97))|0);
      var $99=$4;
      var $100=$1;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+($99<<2))|0);
      HEAP32[(($103)>>2)]=$98;
      label = 22; break;
    case 22: 
      var $105=$cy;
      var $106=(($105)|0)!=0;
      if ($106) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $108=$1;
      var $109=(($108+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$1;
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$4;
      var $115=$4;
      var $116=$1;
      var $117=(($116+4)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+($115<<2))|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$120 ^ -1;
      var $122=((($121)+(1))|0);
      var $123=___gmpn_add_1($110, $113, $114, $122);
      var $124=$4;
      var $125=$1;
      var $126=(($125+4)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+($124<<2))|0);
      HEAP32[(($128)>>2)]=$123;
      label = 24; break;
    case 24: 
      label = 30; break;
    case 25: 
      var $131=$2;
      var $132=$131 >> 1;
      $K2=$132;
      var $133=$1;
      var $134=$K2;
      var $135=$3;
      var $136=($135<<1);
      var $137=$4;
      var $138=$5;
      _mpn_fft_fftinv($133, $134, $136, $137, $138);
      var $139=$1;
      var $140=$K2;
      var $141=(($139+($140<<2))|0);
      var $142=$K2;
      var $143=$3;
      var $144=($143<<1);
      var $145=$4;
      var $146=$5;
      _mpn_fft_fftinv($141, $142, $144, $145, $146);
      $j=0;
      label = 26; break;
    case 26: 
      var $148=$j;
      var $149=$K2;
      var $150=(($148)|0) < (($149)|0);
      if ($150) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $152=$5;
      var $153=$K2;
      var $154=$1;
      var $155=(($154+($153<<2))|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=$j;
      var $158=$3;
      var $159=Math.imul($157,$158);
      var $160=$4;
      _mpn_fft_mul_2exp_modF($152, $156, $159, $160);
      var $161=$K2;
      var $162=$1;
      var $163=(($162+($161<<2))|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=$1;
      var $166=(($165)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$5;
      var $169=$4;
      _mpn_fft_sub_modF($164, $167, $168, $169);
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$1;
      var $174=(($173)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=$5;
      var $177=$4;
      _mpn_fft_add_modF($172, $175, $176, $177);
      label = 28; break;
    case 28: 
      var $179=$j;
      var $180=((($179)+(1))|0);
      $j=$180;
      var $181=$1;
      var $182=(($181+4)|0);
      $1=$182;
      label = 26; break;
    case 29: 
      label = 30; break;
    case 30: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_fftinv["X"]=1;

function _mpn_fft_div_2exp_modF($r, $a, $k, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $1=$r;
      $2=$a;
      $3=$k;
      $4=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$4;
      var $8=($7<<1);
      var $9=($8<<5);
      var $10=$3;
      var $11=((($9)-($10))|0);
      $i=$11;
      var $12=$1;
      var $13=$2;
      var $14=$i;
      var $15=$4;
      _mpn_fft_mul_2exp_modF($12, $13, $14, $15);
      var $16=$1;
      var $17=$4;
      _mpn_fft_normalize($16, $17);

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _mpn_fft_mul_modF_K($ap, $bp, $n, $K) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $sqr;
      var $__tmp_marker=__stackBase__;
      var $k;
      var $K2;
      var $nprime2;
      var $Nprime2;
      var $M2;
      var $maxLK;
      var $l;
      var $Mp2;
      var $fft_l;
      var $Ap;
      var $Bp;
      var $A;
      var $B;
      var $T;
      var $K3;
      var $cy;
      var $a;
      var $b;
      var $tp;
      var $tpn;
      var $cc;
      var $n2;
      $1=$ap;
      $2=$bp;
      $3=$n;
      $4=$K;
      var $5=$1;
      var $6=$2;
      var $7=(($5)|0)==(($6)|0);
      var $8=(($7)&1);
      $sqr=$8;
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $9=$3;
      var $10=$sqr;
      var $11=(($10)|0)!=0;
      var $12=$11 ? 360 : 300;
      var $13=(($9)|0) >= (($12)|0);
      if ($13) { label = 3; break; } else { label = 51; break; }
    case 3: 
      var $15=$3;
      var $16=$sqr;
      var $17=___gmpn_fft_best_k($15, $16);
      $k=$17;
      var $18=$k;
      var $19=1 << $18;
      $K2=$19;
      label = 4; break;
    case 4: 
      var $21=$3;
      var $22=$K2;
      var $23=((($22)-(1))|0);
      var $24=$21 & $23;
      var $25=(($24)|0)==0;
      if ($25) { label = 6; break; } else { label = 5; break; }
    case 5: 
      ___gmp_assert_fail(((5243356)|0), 437, ((5243292)|0));
      throw "Reached an unreachable!"
    case 6: 
      label = 7; break;
    case 7: 
      var $29=$K2;
      var $30=(($29)|0) > 32;
      if ($30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $32=$K2;
      var $35 = $32;label = 10; break;
    case 9: 
      var $35 = 32;label = 10; break;
    case 10: 
      var $35;
      $maxLK=$35;
      var $36=$3;
      var $37=($36<<5);
      var $38=$k;
      var $39=$37 >> (($38)|0);
      $M2=$39;
      var $40=$3;
      var $41=$k;
      var $42=$40 >> (($41)|0);
      $l=$42;
      var $43=$M2;
      var $44=($43<<1);
      var $45=$k;
      var $46=((($44)+($45))|0);
      var $47=((($46)+(2))|0);
      var $48=$maxLK;
      var $49=((($47)+($48))|0);
      var $50=$maxLK;
      var $51=((((($49)|0))/((($50)|0)))&-1);
      var $52=$maxLK;
      var $53=Math.imul($51,$52);
      $Nprime2=$53;
      var $54=$Nprime2;
      var $55=((((($54)|0))/(32))&-1);
      $nprime2=$55;
      var $56=$nprime2;
      var $57=$sqr;
      var $58=(($57)|0)!=0;
      var $59=$58 ? 360 : 300;
      var $60=(($56)|0) >= (($59)|0);
      if ($60) { label = 11; break; } else { label = 16; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $63=$nprime2;
      var $64=$sqr;
      var $65=___gmpn_fft_best_k($63, $64);
      var $66=1 << $65;
      $K3=$66;
      var $67=$nprime2;
      var $68=$K3;
      var $69=((($68)-(1))|0);
      var $70=$67 & $69;
      var $71=(($70)|0)==0;
      if ($71) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $74=$nprime2;
      var $75=$K3;
      var $76=((($74)+($75))|0);
      var $77=((($76)-(1))|0);
      var $78=$K3;
      var $79=(((-$78))|0);
      var $80=$77 & $79;
      $nprime2=$80;
      var $81=$nprime2;
      var $82=($81<<5);
      $Nprime2=$82;
      label = 12; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $86=$nprime2;
      var $87=$3;
      var $88=(($86)|0) < (($87)|0);
      if ($88) { label = 19; break; } else { label = 18; break; }
    case 18: 
      ___gmp_assert_fail(((5243356)|0), 459, ((5243220)|0));
      throw "Reached an unreachable!"
    case 19: 
      label = 20; break;
    case 20: 
      var $92=$Nprime2;
      var $93=$k;
      var $94=$92 >> (($93)|0);
      $Mp2=$94;
      var $95=$K2;
      var $96=($95<<2);
      var $97=(($96)>>>0) < 65536;
      if ($97) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $99=$K2;
      var $100=($99<<2);
      var $101=STACKTOP;STACKTOP = (STACKTOP + $100)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $107 = $101;label = 23; break;
    case 22: 
      var $103=$K2;
      var $104=($103<<2);
      var $105=___gmp_tmp_reentrant_alloc($__tmp_marker, $104);
      var $107 = $105;label = 23; break;
    case 23: 
      var $107;
      var $108=$107;
      $Ap=$108;
      var $109=$K2;
      var $110=($109<<2);
      var $111=(($110)>>>0) < 65536;
      if ($111) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $113=$K2;
      var $114=($113<<2);
      var $115=STACKTOP;STACKTOP = (STACKTOP + $114)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $121 = $115;label = 26; break;
    case 25: 
      var $117=$K2;
      var $118=($117<<2);
      var $119=___gmp_tmp_reentrant_alloc($__tmp_marker, $118);
      var $121 = $119;label = 26; break;
    case 26: 
      var $121;
      var $122=$121;
      $Bp=$122;
      var $123=$nprime2;
      var $124=((($123)+(1))|0);
      var $125=($124<<1);
      var $126=$k;
      var $127=$125 << $126;
      var $128=($127<<2);
      var $129=(($128)>>>0) < 65536;
      if ($129) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $131=$nprime2;
      var $132=((($131)+(1))|0);
      var $133=($132<<1);
      var $134=$k;
      var $135=$133 << $134;
      var $136=($135<<2);
      var $137=STACKTOP;STACKTOP = (STACKTOP + $136)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $147 = $137;label = 29; break;
    case 28: 
      var $139=$nprime2;
      var $140=((($139)+(1))|0);
      var $141=($140<<1);
      var $142=$k;
      var $143=$141 << $142;
      var $144=($143<<2);
      var $145=___gmp_tmp_reentrant_alloc($__tmp_marker, $144);
      var $147 = $145;label = 29; break;
    case 29: 
      var $147;
      var $148=$147;
      $A=$148;
      var $149=$nprime2;
      var $150=((($149)+(1))|0);
      var $151=($150<<1);
      var $152=($151<<2);
      var $153=(($152)>>>0) < 65536;
      if ($153) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $155=$nprime2;
      var $156=((($155)+(1))|0);
      var $157=($156<<1);
      var $158=($157<<2);
      var $159=STACKTOP;STACKTOP = (STACKTOP + $158)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $167 = $159;label = 32; break;
    case 31: 
      var $161=$nprime2;
      var $162=((($161)+(1))|0);
      var $163=($162<<1);
      var $164=($163<<2);
      var $165=___gmp_tmp_reentrant_alloc($__tmp_marker, $164);
      var $167 = $165;label = 32; break;
    case 32: 
      var $167;
      var $168=$167;
      $T=$168;
      var $169=$A;
      var $170=$nprime2;
      var $171=((($170)+(1))|0);
      var $172=$k;
      var $173=$171 << $172;
      var $174=(($169+($173<<2))|0);
      $B=$174;
      var $175=$k;
      var $176=((($175)+(1))|0);
      var $177=($176<<2);
      var $178=(($177)>>>0) < 65536;
      if ($178) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $180=$k;
      var $181=((($180)+(1))|0);
      var $182=($181<<2);
      var $183=STACKTOP;STACKTOP = (STACKTOP + $182)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $190 = $183;label = 35; break;
    case 34: 
      var $185=$k;
      var $186=((($185)+(1))|0);
      var $187=($186<<2);
      var $188=___gmp_tmp_reentrant_alloc($__tmp_marker, $187);
      var $190 = $188;label = 35; break;
    case 35: 
      var $190;
      var $191=$190;
      $fft_l=$191;
      $i=0;
      label = 36; break;
    case 36: 
      var $193=$i;
      var $194=$k;
      var $195=(($193)|0) <= (($194)|0);
      if ($195) { label = 37; break; } else { label = 42; break; }
    case 37: 
      var $197=$i;
      var $198=1 << $197;
      var $199=($198<<2);
      var $200=(($199)>>>0) < 65536;
      if ($200) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $202=$i;
      var $203=1 << $202;
      var $204=($203<<2);
      var $205=STACKTOP;STACKTOP = (STACKTOP + $204)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $212 = $205;label = 40; break;
    case 39: 
      var $207=$i;
      var $208=1 << $207;
      var $209=($208<<2);
      var $210=___gmp_tmp_reentrant_alloc($__tmp_marker, $209);
      var $212 = $210;label = 40; break;
    case 40: 
      var $212;
      var $213=$212;
      var $214=$i;
      var $215=$fft_l;
      var $216=(($215+($214<<2))|0);
      HEAP32[(($216)>>2)]=$213;
      label = 41; break;
    case 41: 
      var $218=$i;
      var $219=((($218)+(1))|0);
      $i=$219;
      label = 36; break;
    case 42: 
      var $221=$fft_l;
      var $222=$k;
      _mpn_fft_initl($221, $222);
      $i=0;
      label = 43; break;
    case 43: 
      var $224=$i;
      var $225=$4;
      var $226=(($224)|0) < (($225)|0);
      if ($226) { label = 44; break; } else { label = 50; break; }
    case 44: 
      var $228=$1;
      var $229=HEAP32[(($228)>>2)];
      var $230=$3;
      _mpn_fft_normalize($229, $230);
      var $231=$sqr;
      var $232=(($231)|0)!=0;
      if ($232) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $234=$2;
      var $235=HEAP32[(($234)>>2)];
      var $236=$3;
      _mpn_fft_normalize($235, $236);
      label = 46; break;
    case 46: 
      var $238=$A;
      var $239=$Ap;
      var $240=$K2;
      var $241=$nprime2;
      var $242=$1;
      var $243=HEAP32[(($242)>>2)];
      var $244=$l;
      var $245=$k;
      var $246=$244 << $245;
      var $247=((($246)+(1))|0);
      var $248=$l;
      var $249=$Mp2;
      var $250=$T;
      _mpn_mul_fft_decompose($238, $239, $240, $241, $243, $247, $248, $249, $250);
      var $251=$sqr;
      var $252=(($251)|0)!=0;
      if ($252) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $254=$B;
      var $255=$Bp;
      var $256=$K2;
      var $257=$nprime2;
      var $258=$2;
      var $259=HEAP32[(($258)>>2)];
      var $260=$l;
      var $261=$k;
      var $262=$260 << $261;
      var $263=((($262)+(1))|0);
      var $264=$l;
      var $265=$Mp2;
      var $266=$T;
      _mpn_mul_fft_decompose($254, $255, $256, $257, $259, $263, $264, $265, $266);
      label = 48; break;
    case 48: 
      var $268=$1;
      var $269=HEAP32[(($268)>>2)];
      var $270=$3;
      var $271=$k;
      var $272=$Ap;
      var $273=$Bp;
      var $274=$A;
      var $275=$B;
      var $276=$nprime2;
      var $277=$l;
      var $278=$Mp2;
      var $279=$fft_l;
      var $280=$T;
      var $281=$sqr;
      var $282=_mpn_mul_fft_internal($269, $270, $271, $272, $273, $274, $275, $276, $277, $278, $279, $280, $281);
      $cy=$282;
      var $283=$cy;
      var $284=$3;
      var $285=$1;
      var $286=HEAP32[(($285)>>2)];
      var $287=(($286+($284<<2))|0);
      HEAP32[(($287)>>2)]=$283;
      label = 49; break;
    case 49: 
      var $289=$i;
      var $290=((($289)+(1))|0);
      $i=$290;
      var $291=$1;
      var $292=(($291+4)|0);
      $1=$292;
      var $293=$2;
      var $294=(($293+4)|0);
      $2=$294;
      label = 43; break;
    case 50: 
      label = 73; break;
    case 51: 
      var $297=$3;
      var $298=($297<<1);
      $n2=$298;
      var $299=$n2;
      var $300=($299<<2);
      var $301=(($300)>>>0) < 65536;
      if ($301) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $303=$n2;
      var $304=($303<<2);
      var $305=STACKTOP;STACKTOP = (STACKTOP + $304)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $311 = $305;label = 54; break;
    case 53: 
      var $307=$n2;
      var $308=($307<<2);
      var $309=___gmp_tmp_reentrant_alloc($__tmp_marker, $308);
      var $311 = $309;label = 54; break;
    case 54: 
      var $311;
      var $312=$311;
      $tp=$312;
      var $313=$tp;
      var $314=$3;
      var $315=(($313+($314<<2))|0);
      $tpn=$315;
      $i=0;
      label = 55; break;
    case 55: 
      var $317=$i;
      var $318=$4;
      var $319=(($317)|0) < (($318)|0);
      if ($319) { label = 56; break; } else { label = 72; break; }
    case 56: 
      var $321=$1;
      var $322=(($321+4)|0);
      $1=$322;
      var $323=HEAP32[(($321)>>2)];
      $a=$323;
      var $324=$2;
      var $325=(($324+4)|0);
      $2=$325;
      var $326=HEAP32[(($324)>>2)];
      $b=$326;
      var $327=$sqr;
      var $328=(($327)|0)!=0;
      if ($328) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $330=$tp;
      var $331=$a;
      var $332=$3;
      ___gmpn_sqr($330, $331, $332);
      label = 59; break;
    case 58: 
      var $334=$tp;
      var $335=$b;
      var $336=$a;
      var $337=$3;
      ___gmpn_mul_n($334, $335, $336, $337);
      label = 59; break;
    case 59: 
      var $339=$3;
      var $340=$a;
      var $341=(($340+($339<<2))|0);
      var $342=HEAP32[(($341)>>2)];
      var $343=(($342)|0)!=0;
      if ($343) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $345=$tpn;
      var $346=$tpn;
      var $347=$b;
      var $348=$3;
      var $349=___gmpn_add_n($345, $346, $347, $348);
      $cc=$349;
      label = 62; break;
    case 61: 
      $cc=0;
      label = 62; break;
    case 62: 
      var $352=$3;
      var $353=$b;
      var $354=(($353+($352<<2))|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=(($355)|0)!=0;
      if ($356) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $358=$tpn;
      var $359=$tpn;
      var $360=$a;
      var $361=$3;
      var $362=___gmpn_add_n($358, $359, $360, $361);
      var $363=$3;
      var $364=$a;
      var $365=(($364+($363<<2))|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=((($362)+($366))|0);
      var $368=$cc;
      var $369=((($368)+($367))|0);
      $cc=$369;
      label = 64; break;
    case 64: 
      var $371=$cc;
      var $372=(($371)|0)!=0;
      if ($372) { label = 65; break; } else { label = 68; break; }
    case 65: 
      var $374=$tp;
      var $375=$tp;
      var $376=$n2;
      var $377=$cc;
      var $378=___gmpn_add_1($374, $375, $376, $377);
      $cc=$378;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $382=$a;
      var $383=$tp;
      var $384=$tpn;
      var $385=$3;
      var $386=___gmpn_sub_n($382, $383, $384, $385);
      var $387=(($386)|0)!=0;
      if ($387) { label = 69; break; } else { var $395 = 0;label = 70; break; }
    case 69: 
      var $389=$a;
      var $390=$a;
      var $391=$3;
      var $392=___gmpn_add_1($389, $390, $391, 1);
      var $393=(($392)|0)!=0;
      var $395 = $393;label = 70; break;
    case 70: 
      var $395;
      var $396=(($395)&1);
      var $397=$3;
      var $398=$a;
      var $399=(($398+($397<<2))|0);
      HEAP32[(($399)>>2)]=$396;
      label = 71; break;
    case 71: 
      var $401=$i;
      var $402=((($401)+(1))|0);
      $i=$402;
      label = 55; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $406=HEAP32[(($__tmp_marker)>>2)];
      var $407=(($406)|0)!=0;
      if ($407) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $409=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($409);
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_mul_modF_K["X"]=1;

function _mpn_fft_normalize($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $__x;
      var $__p;
      var $__dst;
      var $__n;
      $1=$ap;
      $2=$n;
      var $3=$2;
      var $4=$1;
      var $5=(($4+($3<<2))|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { label = 3; break; } else { label = 21; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $10=$1;
      $__p=$10;
      label = 5; break;
    case 5: 
      var $12=$__p;
      var $13=(($12+4)|0);
      $__p=$13;
      var $14=HEAP32[(($12)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($12)>>2)]=$15;
      var $16=(($14)|0)==0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $20=$2;
      var $21=$1;
      var $22=(($21+($20<<2))|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0)==0;
      if ($24) { label = 9; break; } else { label = 19; break; }
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $29=$2;
      var $30=(($29)|0)!=0;
      if ($30) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $32=$1;
      $__dst=$32;
      var $33=$2;
      $__n=$33;
      label = 14; break;
    case 14: 
      var $35=$__dst;
      var $36=(($35+4)|0);
      $__dst=$36;
      HEAP32[(($35)>>2)]=0;
      label = 15; break;
    case 15: 
      var $38=$__n;
      var $39=((($38)-(1))|0);
      $__n=$39;
      var $40=(($39)|0)!=0;
      if ($40) { label = 14; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $44=$2;
      var $45=$1;
      var $46=(($45+($44<<2))|0);
      HEAP32[(($46)>>2)]=1;
      label = 20; break;
    case 19: 
      var $48=$2;
      var $49=$1;
      var $50=(($49+($48<<2))|0);
      HEAP32[(($50)>>2)]=0;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_normalize["X"]=1;

function _mpn_fft_norm_modF($rp, $n, $ap, $an) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $l;
      var $m;
      var $cc;
      var $rpn;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$rp;
      $2=$n;
      $3=$ap;
      $4=$an;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$4;
      var $8=$2;
      var $9=($8<<1);
      var $10=((($7)-($9))|0);
      $m=$10;
      var $11=$m;
      var $12=(($11)|0) > 0;
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$2;
      $l=$14;
      var $15=$1;
      var $16=$3;
      var $17=$3;
      var $18=$2;
      var $19=($18<<1);
      var $20=(($17+($19<<2))|0);
      var $21=$m;
      var $22=___gmpn_add_n($15, $16, $20, $21);
      $cc=$22;
      var $23=$1;
      var $24=$m;
      var $25=(($23+($24<<2))|0);
      var $26=$3;
      var $27=$m;
      var $28=(($26+($27<<2))|0);
      var $29=$2;
      var $30=$m;
      var $31=((($29)-($30))|0);
      var $32=$cc;
      var $33=___gmpn_add_1($25, $28, $31, $32);
      $rpn=$33;
      label = 24; break;
    case 6: 
      var $35=$4;
      var $36=$2;
      var $37=((($35)-($36))|0);
      $l=$37;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $46=$2;
      var $47=(($46)|0)!=0;
      if ($47) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $49=$2;
      var $50=((($49)-(1))|0);
      $__n=$50;
      var $51=$1;
      $__dst=$51;
      var $52=$3;
      $__src=$52;
      var $53=$__src;
      var $54=(($53+4)|0);
      $__src=$54;
      var $55=HEAP32[(($53)>>2)];
      $__x=$55;
      var $56=$__n;
      var $57=(($56)|0)!=0;
      if ($57) { label = 16; break; } else { label = 20; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $60=$__x;
      var $61=$__dst;
      var $62=(($61+4)|0);
      $__dst=$62;
      HEAP32[(($61)>>2)]=$60;
      var $63=$__src;
      var $64=(($63+4)|0);
      $__src=$64;
      var $65=HEAP32[(($63)>>2)];
      $__x=$65;
      label = 18; break;
    case 18: 
      var $67=$__n;
      var $68=((($67)-(1))|0);
      $__n=$68;
      var $69=(($68)|0)!=0;
      if ($69) { label = 17; break; } else { label = 19; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $72=$__x;
      var $73=$__dst;
      var $74=(($73+4)|0);
      $__dst=$74;
      HEAP32[(($73)>>2)]=$72;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      $rpn=0;
      label = 24; break;
    case 24: 
      var $79=$1;
      var $80=$1;
      var $81=$3;
      var $82=$2;
      var $83=(($81+($82<<2))|0);
      var $84=$l;
      var $85=___gmpn_sub_n($79, $80, $83, $84);
      $cc=$85;
      var $86=$1;
      var $87=$l;
      var $88=(($86+($87<<2))|0);
      var $89=$1;
      var $90=$l;
      var $91=(($89+($90<<2))|0);
      var $92=$2;
      var $93=$l;
      var $94=((($92)-($93))|0);
      var $95=$cc;
      var $96=___gmpn_sub_1($88, $91, $94, $95);
      var $97=$rpn;
      var $98=((($97)-($96))|0);
      $rpn=$98;
      var $99=$rpn;
      var $100=(($99)|0) < 0;
      if ($100) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $102=$1;
      var $103=$1;
      var $104=$2;
      var $105=___gmpn_add_1($102, $103, $104, 1);
      $rpn=$105;
      label = 26; break;
    case 26: 
      var $107=$rpn;

      return $107;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_norm_modF["X"]=1;

function _mpn_fft_mul_2exp_modF($r, $a, $d, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $sh;
      var $cc;
      var $rd;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__d;
      var $__s;
      var $__n1;
      var $__x2;
      var $__p;
      var $__x3;
      var $__p4;
      var $__d5;
      var $__s6;
      var $__n7;
      var $__n8;
      var $__dst9;
      var $__src10;
      var $__x11;
      $1=$r;
      $2=$a;
      $3=$d;
      $4=$n;
      var $5=$3;
      var $6=((($5)>>>0))%(32);
      $sh=$6;
      var $7=$3;
      var $8=Math.floor(((($7)>>>0))/(32));
      $3=$8;
      var $9=$3;
      var $10=$4;
      var $11=(($9)>>>0) >= (($10)>>>0);
      if ($11) { label = 3; break; } else { label = 50; break; }
    case 3: 
      var $13=$4;
      var $14=$3;
      var $15=((($14)-($13))|0);
      $3=$15;
      var $16=$sh;
      var $17=(($16)|0)!=0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$1;
      var $20=$2;
      var $21=$4;
      var $22=(($20+($21<<2))|0);
      var $23=$3;
      var $24=(((-$23))|0);
      var $25=(($22+($24<<2))|0);
      var $26=$3;
      var $27=((($26)+(1))|0);
      var $28=$sh;
      var $29=___gmpn_lshift($19, $25, $27, $28);
      var $30=$3;
      var $31=$1;
      var $32=(($31+($30<<2))|0);
      var $33=HEAP32[(($32)>>2)];
      $rd=$33;
      var $34=$1;
      var $35=$3;
      var $36=(($34+($35<<2))|0);
      var $37=$2;
      var $38=$4;
      var $39=$3;
      var $40=((($38)-($39))|0);
      var $41=$sh;
      var $42=___gmpn_lshiftc($36, $37, $40, $41);
      $cc=$42;
      label = 32; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $52=$3;
      var $53=(($52)|0)!=0;
      if ($53) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $55=$3;
      var $56=((($55)-(1))|0);
      $__n=$56;
      var $57=$1;
      $__dst=$57;
      var $58=$2;
      var $59=$4;
      var $60=(($58+($59<<2))|0);
      var $61=$3;
      var $62=(((-$61))|0);
      var $63=(($60+($62<<2))|0);
      $__src=$63;
      var $64=$__src;
      var $65=(($64+4)|0);
      $__src=$65;
      var $66=HEAP32[(($64)>>2)];
      $__x=$66;
      var $67=$__n;
      var $68=(($67)|0)!=0;
      if ($68) { label = 15; break; } else { label = 19; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $71=$__x;
      var $72=$__dst;
      var $73=(($72+4)|0);
      $__dst=$73;
      HEAP32[(($72)>>2)]=$71;
      var $74=$__src;
      var $75=(($74+4)|0);
      $__src=$75;
      var $76=HEAP32[(($74)>>2)];
      $__x=$76;
      label = 17; break;
    case 17: 
      var $78=$__n;
      var $79=((($78)-(1))|0);
      $__n=$79;
      var $80=(($79)|0)!=0;
      if ($80) { label = 16; break; } else { label = 18; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $83=$__x;
      var $84=$__dst;
      var $85=(($84+4)|0);
      $__dst=$85;
      HEAP32[(($84)>>2)]=$83;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $89=$4;
      var $90=$2;
      var $91=(($90+($89<<2))|0);
      var $92=HEAP32[(($91)>>2)];
      $rd=$92;
      label = 23; break;
    case 23: 
      var $94=$1;
      var $95=$3;
      var $96=(($94+($95<<2))|0);
      $__d=$96;
      var $97=$2;
      $__s=$97;
      var $98=$4;
      var $99=$3;
      var $100=((($98)-($99))|0);
      $__n1=$100;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $106=$__s;
      var $107=(($106+4)|0);
      $__s=$107;
      var $108=HEAP32[(($106)>>2)];
      var $109=$108 ^ -1;
      var $110=$__d;
      var $111=(($110+4)|0);
      $__d=$111;
      HEAP32[(($110)>>2)]=$109;
      label = 29; break;
    case 29: 
      var $113=$__n1;
      var $114=((($113)-(1))|0);
      $__n1=$114;
      var $115=(($114)|0)!=0;
      if ($115) { label = 28; break; } else { label = 30; break; }
    case 30: 
      label = 31; break;
    case 31: 
      $cc=0;
      label = 32; break;
    case 32: 
      var $119=$4;
      var $120=$1;
      var $121=(($120+($119<<2))|0);
      HEAP32[(($121)>>2)]=0;
      var $122=$cc;
      var $123=((($122)+(1))|0);
      $cc=$123;
      label = 33; break;
    case 33: 
      var $125=$1;
      $__p=$125;
      var $126=$__p;
      var $127=HEAP32[(($126)>>2)];
      var $128=$cc;
      var $129=((($127)+($128))|0);
      $__x2=$129;
      var $130=$__x2;
      var $131=$__p;
      HEAP32[(($131)>>2)]=$130;
      var $132=$__x2;
      var $133=$cc;
      var $134=(($132)>>>0) < (($133)>>>0);
      if ($134) { label = 34; break; } else { label = 38; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $137=$__p;
      var $138=(($137+4)|0);
      $__p=$138;
      var $139=HEAP32[(($138)>>2)];
      var $140=((($139)+(1))|0);
      HEAP32[(($138)>>2)]=$140;
      var $141=(($140)|0)==0;
      if ($141) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 35; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $146=$rd;
      var $147=((($146)+(1))|0);
      $rd=$147;
      var $148=$rd;
      var $149=(($148)|0)==0;
      if ($149) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $154 = 1;label = 42; break;
    case 41: 
      var $152=$rd;
      var $154 = $152;label = 42; break;
    case 42: 
      var $154;
      $cc=$154;
      var $155=$1;
      var $156=$3;
      var $157=(($155+($156<<2))|0);
      var $158=$rd;
      var $159=(($158)|0)==0;
      var $160=(($159)&1);
      var $161=(($157+($160<<2))|0);
      $1=$161;
      label = 43; break;
    case 43: 
      var $163=$1;
      $__p4=$163;
      var $164=$__p4;
      var $165=HEAP32[(($164)>>2)];
      var $166=$cc;
      var $167=((($165)+($166))|0);
      $__x3=$167;
      var $168=$__x3;
      var $169=$__p4;
      HEAP32[(($169)>>2)]=$168;
      var $170=$__x3;
      var $171=$cc;
      var $172=(($170)>>>0) < (($171)>>>0);
      if ($172) { label = 44; break; } else { label = 48; break; }
    case 44: 
      label = 45; break;
    case 45: 
      var $175=$__p4;
      var $176=(($175+4)|0);
      $__p4=$176;
      var $177=HEAP32[(($176)>>2)];
      var $178=((($177)+(1))|0);
      HEAP32[(($176)>>2)]=$178;
      var $179=(($178)|0)==0;
      if ($179) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 45; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 86; break;
    case 50: 
      var $185=$sh;
      var $186=(($185)|0)!=0;
      if ($186) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $188=$1;
      var $189=$2;
      var $190=$4;
      var $191=(($189+($190<<2))|0);
      var $192=$3;
      var $193=(((-$192))|0);
      var $194=(($191+($193<<2))|0);
      var $195=$3;
      var $196=((($195)+(1))|0);
      var $197=$sh;
      var $198=___gmpn_lshiftc($188, $194, $196, $197);
      var $199=$3;
      var $200=$1;
      var $201=(($200+($199<<2))|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=$202 ^ -1;
      $rd=$203;
      var $204=$1;
      var $205=$3;
      var $206=(($204+($205<<2))|0);
      var $207=$2;
      var $208=$4;
      var $209=$3;
      var $210=((($208)-($209))|0);
      var $211=$sh;
      var $212=___gmpn_lshift($206, $207, $210, $211);
      $cc=$212;
      label = 79; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $215=$1;
      $__d5=$215;
      var $216=$2;
      var $217=$4;
      var $218=(($216+($217<<2))|0);
      var $219=$3;
      var $220=(((-$219))|0);
      var $221=(($218+($220<<2))|0);
      $__s6=$221;
      var $222=$3;
      var $223=((($222)+(1))|0);
      $__n7=$223;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $229=$__s6;
      var $230=(($229+4)|0);
      $__s6=$230;
      var $231=HEAP32[(($229)>>2)];
      var $232=$231 ^ -1;
      var $233=$__d5;
      var $234=(($233+4)|0);
      $__d5=$234;
      HEAP32[(($233)>>2)]=$232;
      label = 59; break;
    case 59: 
      var $236=$__n7;
      var $237=((($236)-(1))|0);
      $__n7=$237;
      var $238=(($237)|0)!=0;
      if ($238) { label = 58; break; } else { label = 60; break; }
    case 60: 
      label = 61; break;
    case 61: 
      var $241=$4;
      var $242=$2;
      var $243=(($242+($241<<2))|0);
      var $244=HEAP32[(($243)>>2)];
      $rd=$244;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $253=$4;
      var $254=$3;
      var $255=((($253)-($254))|0);
      var $256=(($255)|0)!=0;
      if ($256) { label = 70; break; } else { label = 76; break; }
    case 70: 
      var $258=$4;
      var $259=$3;
      var $260=((($258)-($259))|0);
      var $261=((($260)-(1))|0);
      $__n8=$261;
      var $262=$1;
      var $263=$3;
      var $264=(($262+($263<<2))|0);
      $__dst9=$264;
      var $265=$2;
      $__src10=$265;
      var $266=$__src10;
      var $267=(($266+4)|0);
      $__src10=$267;
      var $268=HEAP32[(($266)>>2)];
      $__x11=$268;
      var $269=$__n8;
      var $270=(($269)|0)!=0;
      if ($270) { label = 71; break; } else { label = 75; break; }
    case 71: 
      label = 72; break;
    case 72: 
      var $273=$__x11;
      var $274=$__dst9;
      var $275=(($274+4)|0);
      $__dst9=$275;
      HEAP32[(($274)>>2)]=$273;
      var $276=$__src10;
      var $277=(($276+4)|0);
      $__src10=$277;
      var $278=HEAP32[(($276)>>2)];
      $__x11=$278;
      label = 73; break;
    case 73: 
      var $280=$__n8;
      var $281=((($280)-(1))|0);
      $__n8=$281;
      var $282=(($281)|0)!=0;
      if ($282) { label = 72; break; } else { label = 74; break; }
    case 74: 
      label = 75; break;
    case 75: 
      var $285=$__x11;
      var $286=$__dst9;
      var $287=(($286+4)|0);
      $__dst9=$287;
      HEAP32[(($286)>>2)]=$285;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      $cc=0;
      label = 79; break;
    case 79: 
      var $292=$3;
      var $293=(($292)|0)!=0;
      if ($293) { label = 80; break; } else { label = 83; break; }
    case 80: 
      var $295=$cc;
      var $296=((($295)-(1))|0);
      $cc=$296;
      var $297=(($295)|0)==0;
      if ($297) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $299=$1;
      var $300=$1;
      var $301=$4;
      var $302=___gmpn_add_1($299, $300, $301, 1);
      $cc=$302;
      label = 82; break;
    case 82: 
      var $304=$1;
      var $305=$1;
      var $306=$3;
      var $307=$cc;
      var $308=___gmpn_sub_1($304, $305, $306, $307);
      var $309=((($308)+(1))|0);
      $cc=$309;
      label = 83; break;
    case 83: 
      var $311=$1;
      var $312=$3;
      var $313=(($311+($312<<2))|0);
      var $314=$1;
      var $315=$3;
      var $316=(($314+($315<<2))|0);
      var $317=$4;
      var $318=$3;
      var $319=((($317)-($318))|0);
      var $320=$cc;
      var $321=___gmpn_sub_1($313, $316, $319, $320);
      var $322=(((-$321))|0);
      var $323=$4;
      var $324=$1;
      var $325=(($324+($323<<2))|0);
      HEAP32[(($325)>>2)]=$322;
      var $326=$1;
      var $327=$3;
      var $328=(($326+($327<<2))|0);
      var $329=$1;
      var $330=$3;
      var $331=(($329+($330<<2))|0);
      var $332=$4;
      var $333=$3;
      var $334=((($332)-($333))|0);
      var $335=$rd;
      var $336=___gmpn_sub_1($328, $331, $334, $335);
      var $337=$4;
      var $338=$1;
      var $339=(($338+($337<<2))|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=((($340)-($336))|0);
      HEAP32[(($339)>>2)]=$341;
      var $342=$4;
      var $343=$1;
      var $344=(($343+($342<<2))|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=$345 & -2147483648;
      var $347=(($346)|0)!=0;
      if ($347) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $349=$1;
      var $350=$1;
      var $351=$4;
      var $352=___gmpn_add_1($349, $350, $351, 1);
      var $353=$4;
      var $354=$1;
      var $355=(($354+($353<<2))|0);
      HEAP32[(($355)>>2)]=$352;
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_mul_2exp_modF["X"]=1;

function _mpn_mullo_n_itch($n) {
  var label = 0;


  var $1;
  $1=$n;
  var $2=$1;
  var $3=($2<<1);

  return $3;
}


function _mpn_fft_sub_modF($r, $a, $b, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $c;
      var $x;
      var $__x;
      var $__p;
      $1=$r;
      $2=$a;
      $3=$b;
      $4=$n;
      var $5=$4;
      var $6=$2;
      var $7=(($6+($5<<2))|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$4;
      var $10=$3;
      var $11=(($10+($9<<2))|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($8)-($12))|0);
      var $14=$1;
      var $15=$2;
      var $16=$3;
      var $17=$4;
      var $18=___gmpn_sub_n($14, $15, $16, $17);
      var $19=((($13)-($18))|0);
      $c=$19;
      var $20=$c;
      var $21=(((-$20))|0);
      var $22=$c;
      var $23=$22 & -2147483648;
      var $24=(($23)|0)!=0;
      var $25=(($24)&1);
      var $26=(((-$25))|0);
      var $27=$21 & $26;
      $x=$27;
      var $28=$x;
      var $29=$c;
      var $30=((($28)+($29))|0);
      var $31=$4;
      var $32=$1;
      var $33=(($32+($31<<2))|0);
      HEAP32[(($33)>>2)]=$30;
      label = 3; break;
    case 3: 
      var $35=$1;
      $__p=$35;
      var $36=$__p;
      var $37=HEAP32[(($36)>>2)];
      var $38=$x;
      var $39=((($37)+($38))|0);
      $__x=$39;
      var $40=$__x;
      var $41=$__p;
      HEAP32[(($41)>>2)]=$40;
      var $42=$__x;
      var $43=$x;
      var $44=(($42)>>>0) < (($43)>>>0);
      if ($44) { label = 4; break; } else { label = 8; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $47=$__p;
      var $48=(($47+4)|0);
      $__p=$48;
      var $49=HEAP32[(($48)>>2)];
      var $50=((($49)+(1))|0);
      HEAP32[(($48)>>2)]=$50;
      var $51=(($50)|0)==0;
      if ($51) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_sub_modF["X"]=1;

function _mpn_fft_add_modF($r, $a, $b, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $c;
      var $x;
      var $__x;
      var $__p;
      $1=$r;
      $2=$a;
      $3=$b;
      $4=$n;
      var $5=$4;
      var $6=$2;
      var $7=(($6+($5<<2))|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$4;
      var $10=$3;
      var $11=(($10+($9<<2))|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($8)+($12))|0);
      var $14=$1;
      var $15=$2;
      var $16=$3;
      var $17=$4;
      var $18=___gmpn_add_n($14, $15, $16, $17);
      var $19=((($13)+($18))|0);
      $c=$19;
      var $20=$c;
      var $21=((($20)-(1))|0);
      var $22=$c;
      var $23=(($22)|0)!=0;
      var $24=(($23)&1);
      var $25=(((-$24))|0);
      var $26=$21 & $25;
      $x=$26;
      var $27=$c;
      var $28=$x;
      var $29=((($27)-($28))|0);
      var $30=$4;
      var $31=$1;
      var $32=(($31+($30<<2))|0);
      HEAP32[(($32)>>2)]=$29;
      label = 3; break;
    case 3: 
      var $34=$1;
      $__p=$34;
      var $35=$__p;
      var $36=HEAP32[(($35)>>2)];
      $__x=$36;
      var $37=$__x;
      var $38=$x;
      var $39=((($37)-($38))|0);
      var $40=$__p;
      HEAP32[(($40)>>2)]=$39;
      var $41=$__x;
      var $42=$x;
      var $43=(($41)>>>0) < (($42)>>>0);
      if ($43) { label = 4; break; } else { label = 8; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $46=$__p;
      var $47=(($46+4)|0);
      $__p=$47;
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($48)|0)==0;
      if ($50) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_add_modF["X"]=1;

function ___gmpn_mullo_n($rp, $xp, $yp, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tp;
      var $__tmp_marker=__stackBase__;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$rp;
      $2=$xp;
      $3=$yp;
      $4=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $11=$4;
      var $12=(($11)|0) >= 90;
      if ($12) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $14=$1;
      var $15=$2;
      var $16=$3;
      var $17=$4;
      ___gmpn_mullo_basecase($14, $15, $16, $17);
      label = 38; break;
    case 10: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $19=$4;
      var $20=_mpn_mullo_n_itch($19);
      var $21=($20<<2);
      var $22=(($21)>>>0) < 65536;
      if ($22) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $24=$4;
      var $25=_mpn_mullo_n_itch($24);
      var $26=($25<<2);
      var $27=STACKTOP;STACKTOP = (STACKTOP + $26)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $34 = $27;label = 13; break;
    case 12: 
      var $29=$4;
      var $30=_mpn_mullo_n_itch($29);
      var $31=($30<<2);
      var $32=___gmp_tmp_reentrant_alloc($__tmp_marker, $31);
      var $34 = $32;label = 13; break;
    case 13: 
      var $34;
      var $35=$34;
      $tp=$35;
      var $36=$4;
      var $37=(($36)|0) >= 3000;
      if ($37) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $39=$1;
      var $40=$2;
      var $41=$3;
      var $42=$4;
      var $43=$tp;
      _mpn_dc_mullo_n($39, $40, $41, $42, $43);
      label = 33; break;
    case 15: 
      var $45=$tp;
      var $46=$2;
      var $47=$3;
      var $48=$4;
      ___gmpn_mul_n($45, $46, $47, $48);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $57=$4;
      var $58=(($57)|0)!=0;
      if ($58) { label = 24; break; } else { label = 30; break; }
    case 24: 
      var $60=$4;
      var $61=((($60)-(1))|0);
      $__n=$61;
      var $62=$1;
      $__dst=$62;
      var $63=$tp;
      $__src=$63;
      var $64=$__src;
      var $65=(($64+4)|0);
      $__src=$65;
      var $66=HEAP32[(($64)>>2)];
      $__x=$66;
      var $67=$__n;
      var $68=(($67)|0)!=0;
      if ($68) { label = 25; break; } else { label = 29; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $71=$__x;
      var $72=$__dst;
      var $73=(($72+4)|0);
      $__dst=$73;
      HEAP32[(($72)>>2)]=$71;
      var $74=$__src;
      var $75=(($74+4)|0);
      $__src=$75;
      var $76=HEAP32[(($74)>>2)];
      $__x=$76;
      label = 27; break;
    case 27: 
      var $78=$__n;
      var $79=((($78)-(1))|0);
      $__n=$79;
      var $80=(($79)|0)!=0;
      if ($80) { label = 26; break; } else { label = 28; break; }
    case 28: 
      label = 29; break;
    case 29: 
      var $83=$__x;
      var $84=$__dst;
      var $85=(($84+4)|0);
      $__dst=$85;
      HEAP32[(($84)>>2)]=$83;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $91=HEAP32[(($__tmp_marker)>>2)];
      var $92=(($91)|0)!=0;
      if ($92) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $94=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($94);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mullo_n["X"]=1;

function _mpn_dc_mullo_n($rp, $xp, $yp, $n, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $n2;
      var $n1;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$rp;
      $2=$xp;
      $3=$yp;
      $4=$n;
      $5=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$4;
      var $15=(($14)|0) >= 144;
      if ($15) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $17=$4;
      var $18=((($17)*(11))&-1);
      var $19=Math.floor(((($18)>>>0))/(36));
      $n1=$19;
      label = 19; break;
    case 12: 
      var $21=$4;
      var $22=(($21)|0) >= 387;
      if ($22) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $24=$4;
      var $25=((($24)*(9))&-1);
      var $26=Math.floor(((($25)>>>0))/(40));
      $n1=$26;
      label = 18; break;
    case 14: 
      var $28=$4;
      var $29=(($28)|0) >= 500;
      if ($29) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $31=$4;
      var $32=((($31)*(7))&-1);
      var $33=Math.floor(((($32)>>>0))/(39));
      $n1=$33;
      label = 17; break;
    case 16: 
      var $35=$4;
      var $36=Math.floor(((($35)>>>0))/(10));
      $n1=$36;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $40=$4;
      var $41=$n1;
      var $42=((($40)-($41))|0);
      $n2=$42;
      var $43=$5;
      var $44=$2;
      var $45=$3;
      var $46=$n2;
      ___gmpn_mul_n($43, $44, $45, $46);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $55=$n2;
      var $56=(($55)|0)!=0;
      if ($56) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $58=$n2;
      var $59=((($58)-(1))|0);
      $__n=$59;
      var $60=$1;
      $__dst=$60;
      var $61=$5;
      $__src=$61;
      var $62=$__src;
      var $63=(($62+4)|0);
      $__src=$63;
      var $64=HEAP32[(($62)>>2)];
      $__x=$64;
      var $65=$__n;
      var $66=(($65)|0)!=0;
      if ($66) { label = 29; break; } else { label = 33; break; }
    case 29: 
      label = 30; break;
    case 30: 
      var $69=$__x;
      var $70=$__dst;
      var $71=(($70+4)|0);
      $__dst=$71;
      HEAP32[(($70)>>2)]=$69;
      var $72=$__src;
      var $73=(($72+4)|0);
      $__src=$73;
      var $74=HEAP32[(($72)>>2)];
      $__x=$74;
      label = 31; break;
    case 31: 
      var $76=$__n;
      var $77=((($76)-(1))|0);
      $__n=$77;
      var $78=(($77)|0)!=0;
      if ($78) { label = 30; break; } else { label = 32; break; }
    case 32: 
      label = 33; break;
    case 33: 
      var $81=$__x;
      var $82=$__dst;
      var $83=(($82+4)|0);
      $__dst=$83;
      HEAP32[(($82)>>2)]=$81;
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $87=$n1;
      var $88=(($87)|0) >= 90;
      if ($88) { label = 38; break; } else { label = 37; break; }
    case 37: 
      var $90=$5;
      var $91=$4;
      var $92=(($90+($91<<2))|0);
      var $93=$2;
      var $94=$n2;
      var $95=(($93+($94<<2))|0);
      var $96=$3;
      var $97=$n1;
      ___gmpn_mullo_basecase($92, $95, $96, $97);
      label = 39; break;
    case 38: 
      var $99=$5;
      var $100=$4;
      var $101=(($99+($100<<2))|0);
      var $102=$2;
      var $103=$n2;
      var $104=(($102+($103<<2))|0);
      var $105=$3;
      var $106=$n1;
      var $107=$5;
      var $108=$4;
      var $109=(($107+($108<<2))|0);
      _mpn_dc_mullo_n($101, $104, $105, $106, $109);
      label = 39; break;
    case 39: 
      var $111=$1;
      var $112=$n2;
      var $113=(($111+($112<<2))|0);
      var $114=$5;
      var $115=$n2;
      var $116=(($114+($115<<2))|0);
      var $117=$5;
      var $118=$4;
      var $119=(($117+($118<<2))|0);
      var $120=$n1;
      var $121=___gmpn_add_n($113, $116, $119, $120);
      var $122=$n1;
      var $123=(($122)|0) >= 90;
      if ($123) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $125=$5;
      var $126=$4;
      var $127=(($125+($126<<2))|0);
      var $128=$2;
      var $129=$3;
      var $130=$n2;
      var $131=(($129+($130<<2))|0);
      var $132=$n1;
      ___gmpn_mullo_basecase($127, $128, $131, $132);
      label = 42; break;
    case 41: 
      var $134=$5;
      var $135=$4;
      var $136=(($134+($135<<2))|0);
      var $137=$2;
      var $138=$3;
      var $139=$n2;
      var $140=(($138+($139<<2))|0);
      var $141=$n1;
      var $142=$5;
      var $143=$4;
      var $144=(($142+($143<<2))|0);
      _mpn_dc_mullo_n($136, $137, $140, $141, $144);
      label = 42; break;
    case 42: 
      var $146=$1;
      var $147=$n2;
      var $148=(($146+($147<<2))|0);
      var $149=$1;
      var $150=$n2;
      var $151=(($149+($150<<2))|0);
      var $152=$5;
      var $153=$4;
      var $154=(($152+($153<<2))|0);
      var $155=$n1;
      var $156=___gmpn_add_n($148, $151, $154, $155);

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_dc_mullo_n["X"]=1;

function ___gmpn_preinv_divrem_1($qp, $xsize, $ap, $size, $d_unnorm, $dinv, $shift) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ahigh;
      var $qhigh;
      var $r;
      var $i;
      var $n1;
      var $n0;
      var $d;
      var $_qh;
      var $_ql;
      var $_r;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $_qh1;
      var $_ql2;
      var $_r3;
      var $__x04;
      var $__x15;
      var $__x26;
      var $__x37;
      var $__ul8;
      var $__vl9;
      var $__uh10;
      var $__vh11;
      var $__u12;
      var $__v13;
      var $__x14;
      var $_qh15;
      var $_ql16;
      var $_r17;
      var $__x018;
      var $__x119;
      var $__x220;
      var $__x321;
      var $__ul22;
      var $__vl23;
      var $__uh24;
      var $__vh25;
      var $__u26;
      var $__v27;
      var $__x28;
      var $_qh29;
      var $_ql30;
      var $_r31;
      var $__x032;
      var $__x133;
      var $__x234;
      var $__x335;
      var $__ul36;
      var $__vl37;
      var $__uh38;
      var $__vh39;
      var $__u40;
      var $__v41;
      $1=$qp;
      $2=$xsize;
      $3=$ap;
      $4=$size;
      $5=$d_unnorm;
      $6=$dinv;
      $7=$shift;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $16=$4;
      var $17=((($16)-(1))|0);
      var $18=$3;
      var $19=(($18+($17<<2))|0);
      var $20=HEAP32[(($19)>>2)];
      $ahigh=$20;
      var $21=$5;
      var $22=$7;
      var $23=$21 << $22;
      $d=$23;
      var $24=$4;
      var $25=$2;
      var $26=((($24)+($25))|0);
      var $27=((($26)-(1))|0);
      var $28=$1;
      var $29=(($28+($27<<2))|0);
      $1=$29;
      var $30=$7;
      var $31=(($30)|0)==0;
      if ($31) { label = 11; break; } else { label = 31; break; }
    case 11: 
      var $33=$ahigh;
      $r=$33;
      var $34=$r;
      var $35=$d;
      var $36=(($34)>>>0) >= (($35)>>>0);
      var $37=(($36)&1);
      $qhigh=$37;
      var $38=$qhigh;
      var $39=(($38)|0)!=0;
      if ($39) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $41=$r;
      var $42=$d;
      var $43=((($41)-($42))|0);
      var $47 = $43;label = 14; break;
    case 13: 
      var $45=$r;
      var $47 = $45;label = 14; break;
    case 14: 
      var $47;
      $r=$47;
      var $48=$qhigh;
      var $49=$1;
      var $50=((($49)-(4))|0);
      $1=$50;
      HEAP32[(($49)>>2)]=$48;
      var $51=$4;
      var $52=((($51)-(1))|0);
      $4=$52;
      var $53=$4;
      var $54=((($53)-(1))|0);
      $i=$54;
      label = 15; break;
    case 15: 
      var $56=$i;
      var $57=(($56)|0) >= 0;
      if ($57) { label = 16; break; } else { label = 30; break; }
    case 16: 
      var $59=$i;
      var $60=$3;
      var $61=(($60+($59<<2))|0);
      var $62=HEAP32[(($61)>>2)];
      $n0=$62;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $65=$r;
      $__u=$65;
      var $66=$6;
      $__v=$66;
      var $67=$__u;
      var $68=$67 & 65535;
      $__ul=$68;
      var $69=$__u;
      var $70=$69 >>> 16;
      $__uh=$70;
      var $71=$__v;
      var $72=$71 & 65535;
      $__vl=$72;
      var $73=$__v;
      var $74=$73 >>> 16;
      $__vh=$74;
      var $75=$__ul;
      var $76=$__vl;
      var $77=Math.imul($75,$76);
      $__x0=$77;
      var $78=$__ul;
      var $79=$__vh;
      var $80=Math.imul($78,$79);
      $__x1=$80;
      var $81=$__uh;
      var $82=$__vl;
      var $83=Math.imul($81,$82);
      $__x2=$83;
      var $84=$__uh;
      var $85=$__vh;
      var $86=Math.imul($84,$85);
      $__x3=$86;
      var $87=$__x0;
      var $88=$87 >>> 16;
      var $89=$__x1;
      var $90=((($89)+($88))|0);
      $__x1=$90;
      var $91=$__x2;
      var $92=$__x1;
      var $93=((($92)+($91))|0);
      $__x1=$93;
      var $94=$__x1;
      var $95=$__x2;
      var $96=(($94)>>>0) < (($95)>>>0);
      if ($96) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $98=$__x3;
      var $99=((($98)+(65536))|0);
      $__x3=$99;
      label = 20; break;
    case 20: 
      var $101=$__x3;
      var $102=$__x1;
      var $103=$102 >>> 16;
      var $104=((($101)+($103))|0);
      $_qh=$104;
      var $105=$__x1;
      var $106=$105 << 16;
      var $107=$__x0;
      var $108=$107 & 65535;
      var $109=((($106)+($108))|0);
      $_ql=$109;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $112=$_ql;
      var $113=$n0;
      var $114=((($112)+($113))|0);
      $__x=$114;
      var $115=$_qh;
      var $116=$r;
      var $117=((($116)+(1))|0);
      var $118=((($115)+($117))|0);
      var $119=$__x;
      var $120=$_ql;
      var $121=(($119)>>>0) < (($120)>>>0);
      var $122=(($121)&1);
      var $123=((($118)+($122))|0);
      $_qh=$123;
      var $124=$__x;
      $_ql=$124;
      label = 23; break;
    case 23: 
      var $126=$n0;
      var $127=$_qh;
      var $128=$d;
      var $129=Math.imul($127,$128);
      var $130=((($126)-($129))|0);
      $_r=$130;
      var $131=$_r;
      var $132=$_ql;
      var $133=(($131)>>>0) > (($132)>>>0);
      if ($133) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $135=$d;
      var $136=$_r;
      var $137=((($136)+($135))|0);
      $_r=$137;
      var $138=$_qh;
      var $139=((($138)-(1))|0);
      $_qh=$139;
      label = 25; break;
    case 25: 
      var $141=$_r;
      var $142=$d;
      var $143=(($141)>>>0) >= (($142)>>>0);
      if ($143) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $145=$d;
      var $146=$_r;
      var $147=((($146)-($145))|0);
      $_r=$147;
      var $148=$_qh;
      var $149=((($148)+(1))|0);
      $_qh=$149;
      label = 27; break;
    case 27: 
      var $151=$_r;
      $r=$151;
      var $152=$_qh;
      var $153=$1;
      HEAP32[(($153)>>2)]=$152;
      label = 28; break;
    case 28: 
      var $155=$1;
      var $156=((($155)-(4))|0);
      $1=$156;
      label = 29; break;
    case 29: 
      var $158=$i;
      var $159=((($158)-(1))|0);
      $i=$159;
      label = 15; break;
    case 30: 
      label = 66; break;
    case 31: 
      $r=0;
      var $162=$ahigh;
      var $163=$5;
      var $164=(($162)>>>0) < (($163)>>>0);
      if ($164) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $166=$ahigh;
      var $167=$7;
      var $168=$166 << $167;
      $r=$168;
      var $169=$1;
      var $170=((($169)-(4))|0);
      $1=$170;
      HEAP32[(($169)>>2)]=0;
      var $171=$4;
      var $172=((($171)-(1))|0);
      $4=$172;
      var $173=$4;
      var $174=(($173)|0)==0;
      if ($174) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 67; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $178=$4;
      var $179=((($178)-(1))|0);
      var $180=$3;
      var $181=(($180+($179<<2))|0);
      var $182=HEAP32[(($181)>>2)];
      $n1=$182;
      var $183=$n1;
      var $184=$7;
      var $185=(((32)-($184))|0);
      var $186=$183 >>> (($185)>>>0);
      var $187=$r;
      var $188=$187 | $186;
      $r=$188;
      var $189=$4;
      var $190=((($189)-(2))|0);
      $i=$190;
      label = 36; break;
    case 36: 
      var $192=$i;
      var $193=(($192)|0) >= 0;
      if ($193) { label = 37; break; } else { label = 53; break; }
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $197=$i;
      var $198=$3;
      var $199=(($198+($197<<2))|0);
      var $200=HEAP32[(($199)>>2)];
      $n0=$200;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $203=$r;
      $__u12=$203;
      var $204=$6;
      $__v13=$204;
      var $205=$__u12;
      var $206=$205 & 65535;
      $__ul8=$206;
      var $207=$__u12;
      var $208=$207 >>> 16;
      $__uh10=$208;
      var $209=$__v13;
      var $210=$209 & 65535;
      $__vl9=$210;
      var $211=$__v13;
      var $212=$211 >>> 16;
      $__vh11=$212;
      var $213=$__ul8;
      var $214=$__vl9;
      var $215=Math.imul($213,$214);
      $__x04=$215;
      var $216=$__ul8;
      var $217=$__vh11;
      var $218=Math.imul($216,$217);
      $__x15=$218;
      var $219=$__uh10;
      var $220=$__vl9;
      var $221=Math.imul($219,$220);
      $__x26=$221;
      var $222=$__uh10;
      var $223=$__vh11;
      var $224=Math.imul($222,$223);
      $__x37=$224;
      var $225=$__x04;
      var $226=$225 >>> 16;
      var $227=$__x15;
      var $228=((($227)+($226))|0);
      $__x15=$228;
      var $229=$__x26;
      var $230=$__x15;
      var $231=((($230)+($229))|0);
      $__x15=$231;
      var $232=$__x15;
      var $233=$__x26;
      var $234=(($232)>>>0) < (($233)>>>0);
      if ($234) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $236=$__x37;
      var $237=((($236)+(65536))|0);
      $__x37=$237;
      label = 43; break;
    case 43: 
      var $239=$__x37;
      var $240=$__x15;
      var $241=$240 >>> 16;
      var $242=((($239)+($241))|0);
      $_qh1=$242;
      var $243=$__x15;
      var $244=$243 << 16;
      var $245=$__x04;
      var $246=$245 & 65535;
      var $247=((($244)+($246))|0);
      $_ql2=$247;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $250=$_ql2;
      var $251=$n1;
      var $252=$7;
      var $253=$251 << $252;
      var $254=$n0;
      var $255=$7;
      var $256=(((32)-($255))|0);
      var $257=$254 >>> (($256)>>>0);
      var $258=$253 | $257;
      var $259=((($250)+($258))|0);
      $__x14=$259;
      var $260=$_qh1;
      var $261=$r;
      var $262=((($261)+(1))|0);
      var $263=((($260)+($262))|0);
      var $264=$__x14;
      var $265=$_ql2;
      var $266=(($264)>>>0) < (($265)>>>0);
      var $267=(($266)&1);
      var $268=((($263)+($267))|0);
      $_qh1=$268;
      var $269=$__x14;
      $_ql2=$269;
      label = 46; break;
    case 46: 
      var $271=$n1;
      var $272=$7;
      var $273=$271 << $272;
      var $274=$n0;
      var $275=$7;
      var $276=(((32)-($275))|0);
      var $277=$274 >>> (($276)>>>0);
      var $278=$273 | $277;
      var $279=$_qh1;
      var $280=$d;
      var $281=Math.imul($279,$280);
      var $282=((($278)-($281))|0);
      $_r3=$282;
      var $283=$_r3;
      var $284=$_ql2;
      var $285=(($283)>>>0) > (($284)>>>0);
      if ($285) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $287=$d;
      var $288=$_r3;
      var $289=((($288)+($287))|0);
      $_r3=$289;
      var $290=$_qh1;
      var $291=((($290)-(1))|0);
      $_qh1=$291;
      label = 48; break;
    case 48: 
      var $293=$_r3;
      var $294=$d;
      var $295=(($293)>>>0) >= (($294)>>>0);
      if ($295) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $297=$d;
      var $298=$_r3;
      var $299=((($298)-($297))|0);
      $_r3=$299;
      var $300=$_qh1;
      var $301=((($300)+(1))|0);
      $_qh1=$301;
      label = 50; break;
    case 50: 
      var $303=$_r3;
      $r=$303;
      var $304=$_qh1;
      var $305=$1;
      HEAP32[(($305)>>2)]=$304;
      label = 51; break;
    case 51: 
      var $307=$1;
      var $308=((($307)-(4))|0);
      $1=$308;
      var $309=$n0;
      $n1=$309;
      label = 52; break;
    case 52: 
      var $311=$i;
      var $312=((($311)-(1))|0);
      $i=$312;
      label = 36; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $316=$r;
      $__u26=$316;
      var $317=$6;
      $__v27=$317;
      var $318=$__u26;
      var $319=$318 & 65535;
      $__ul22=$319;
      var $320=$__u26;
      var $321=$320 >>> 16;
      $__uh24=$321;
      var $322=$__v27;
      var $323=$322 & 65535;
      $__vl23=$323;
      var $324=$__v27;
      var $325=$324 >>> 16;
      $__vh25=$325;
      var $326=$__ul22;
      var $327=$__vl23;
      var $328=Math.imul($326,$327);
      $__x018=$328;
      var $329=$__ul22;
      var $330=$__vh25;
      var $331=Math.imul($329,$330);
      $__x119=$331;
      var $332=$__uh24;
      var $333=$__vl23;
      var $334=Math.imul($332,$333);
      $__x220=$334;
      var $335=$__uh24;
      var $336=$__vh25;
      var $337=Math.imul($335,$336);
      $__x321=$337;
      var $338=$__x018;
      var $339=$338 >>> 16;
      var $340=$__x119;
      var $341=((($340)+($339))|0);
      $__x119=$341;
      var $342=$__x220;
      var $343=$__x119;
      var $344=((($343)+($342))|0);
      $__x119=$344;
      var $345=$__x119;
      var $346=$__x220;
      var $347=(($345)>>>0) < (($346)>>>0);
      if ($347) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $349=$__x321;
      var $350=((($349)+(65536))|0);
      $__x321=$350;
      label = 57; break;
    case 57: 
      var $352=$__x321;
      var $353=$__x119;
      var $354=$353 >>> 16;
      var $355=((($352)+($354))|0);
      $_qh15=$355;
      var $356=$__x119;
      var $357=$356 << 16;
      var $358=$__x018;
      var $359=$358 & 65535;
      var $360=((($357)+($359))|0);
      $_ql16=$360;
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $363=$_ql16;
      var $364=$n1;
      var $365=$7;
      var $366=$364 << $365;
      var $367=((($363)+($366))|0);
      $__x28=$367;
      var $368=$_qh15;
      var $369=$r;
      var $370=((($369)+(1))|0);
      var $371=((($368)+($370))|0);
      var $372=$__x28;
      var $373=$_ql16;
      var $374=(($372)>>>0) < (($373)>>>0);
      var $375=(($374)&1);
      var $376=((($371)+($375))|0);
      $_qh15=$376;
      var $377=$__x28;
      $_ql16=$377;
      label = 60; break;
    case 60: 
      var $379=$n1;
      var $380=$7;
      var $381=$379 << $380;
      var $382=$_qh15;
      var $383=$d;
      var $384=Math.imul($382,$383);
      var $385=((($381)-($384))|0);
      $_r17=$385;
      var $386=$_r17;
      var $387=$_ql16;
      var $388=(($386)>>>0) > (($387)>>>0);
      if ($388) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $390=$d;
      var $391=$_r17;
      var $392=((($391)+($390))|0);
      $_r17=$392;
      var $393=$_qh15;
      var $394=((($393)-(1))|0);
      $_qh15=$394;
      label = 62; break;
    case 62: 
      var $396=$_r17;
      var $397=$d;
      var $398=(($396)>>>0) >= (($397)>>>0);
      if ($398) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $400=$d;
      var $401=$_r17;
      var $402=((($401)-($400))|0);
      $_r17=$402;
      var $403=$_qh15;
      var $404=((($403)+(1))|0);
      $_qh15=$404;
      label = 64; break;
    case 64: 
      var $406=$_r17;
      $r=$406;
      var $407=$_qh15;
      var $408=$1;
      HEAP32[(($408)>>2)]=$407;
      label = 65; break;
    case 65: 
      var $410=$1;
      var $411=((($410)-(4))|0);
      $1=$411;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      $i=0;
      label = 68; break;
    case 68: 
      var $415=$i;
      var $416=$2;
      var $417=(($415)|0) < (($416)|0);
      if ($417) { label = 69; break; } else { label = 81; break; }
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $421=$r;
      $__u40=$421;
      var $422=$6;
      $__v41=$422;
      var $423=$__u40;
      var $424=$423 & 65535;
      $__ul36=$424;
      var $425=$__u40;
      var $426=$425 >>> 16;
      $__uh38=$426;
      var $427=$__v41;
      var $428=$427 & 65535;
      $__vl37=$428;
      var $429=$__v41;
      var $430=$429 >>> 16;
      $__vh39=$430;
      var $431=$__ul36;
      var $432=$__vl37;
      var $433=Math.imul($431,$432);
      $__x032=$433;
      var $434=$__ul36;
      var $435=$__vh39;
      var $436=Math.imul($434,$435);
      $__x133=$436;
      var $437=$__uh38;
      var $438=$__vl37;
      var $439=Math.imul($437,$438);
      $__x234=$439;
      var $440=$__uh38;
      var $441=$__vh39;
      var $442=Math.imul($440,$441);
      $__x335=$442;
      var $443=$__x032;
      var $444=$443 >>> 16;
      var $445=$__x133;
      var $446=((($445)+($444))|0);
      $__x133=$446;
      var $447=$__x234;
      var $448=$__x133;
      var $449=((($448)+($447))|0);
      $__x133=$449;
      var $450=$__x133;
      var $451=$__x234;
      var $452=(($450)>>>0) < (($451)>>>0);
      if ($452) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $454=$__x335;
      var $455=((($454)+(65536))|0);
      $__x335=$455;
      label = 73; break;
    case 73: 
      var $457=$__x335;
      var $458=$__x133;
      var $459=$458 >>> 16;
      var $460=((($457)+($459))|0);
      $_qh29=$460;
      var $461=$__x133;
      var $462=$461 << 16;
      var $463=$__x032;
      var $464=$463 & 65535;
      var $465=((($462)+($464))|0);
      $_ql30=$465;
      label = 74; break;
    case 74: 
      var $467=$r;
      var $468=((($467)+(1))|0);
      var $469=$_qh29;
      var $470=((($469)+($468))|0);
      $_qh29=$470;
      var $471=$_qh29;
      var $472=$d;
      var $473=Math.imul($471,$472);
      var $474=(((-$473))|0);
      $_r31=$474;
      var $475=$_r31;
      var $476=$_ql30;
      var $477=(($475)>>>0) > (($476)>>>0);
      if ($477) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $479=$d;
      var $480=$_r31;
      var $481=((($480)+($479))|0);
      $_r31=$481;
      var $482=$_qh29;
      var $483=((($482)-(1))|0);
      $_qh29=$483;
      label = 76; break;
    case 76: 
      var $485=$_r31;
      var $486=$d;
      var $487=(($485)>>>0) >= (($486)>>>0);
      if ($487) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $489=$d;
      var $490=$_r31;
      var $491=((($490)-($489))|0);
      $_r31=$491;
      var $492=$_qh29;
      var $493=((($492)+(1))|0);
      $_qh29=$493;
      label = 78; break;
    case 78: 
      var $495=$_r31;
      $r=$495;
      var $496=$_qh29;
      var $497=$1;
      HEAP32[(($497)>>2)]=$496;
      label = 79; break;
    case 79: 
      var $499=$1;
      var $500=((($499)-(4))|0);
      $1=$500;
      label = 80; break;
    case 80: 
      var $502=$i;
      var $503=((($502)+(1))|0);
      $i=$503;
      label = 68; break;
    case 81: 
      var $505=$r;
      var $506=$7;
      var $507=$505 >>> (($506)>>>0);

      return $507;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_preinv_divrem_1["X"]=1;

function ___gmpn_sbpi1_bdiv_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $i;
      var $cy;
      var $q;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$3;
      var $14=$5;
      var $15=((($13)-($14))|0);
      $i=$15;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $18=(($17)|0) > 0;
      if ($18) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $20=$6;
      var $21=$2;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=Math.imul($20,$23);
      $q=$24;
      var $25=$q;
      var $26=$25 ^ -1;
      var $27=$1;
      var $28=(($27)|0);
      HEAP32[(($28)>>2)]=$26;
      var $29=$1;
      var $30=(($29+4)|0);
      $1=$30;
      var $31=$2;
      var $32=$4;
      var $33=$5;
      var $34=$q;
      var $35=___gmpn_addmul_1($31, $32, $33, $34);
      $cy=$35;
      var $36=$2;
      var $37=$5;
      var $38=(($36+($37<<2))|0);
      var $39=$2;
      var $40=$5;
      var $41=(($39+($40<<2))|0);
      var $42=$i;
      var $43=$cy;
      var $44=___gmpn_add_1($38, $41, $42, $43);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $47=$2;
      var $48=(($47+4)|0);
      $2=$48;
      label = 13; break;
    case 13: 
      var $50=$i;
      var $51=((($50)-(1))|0);
      $i=$51;
      label = 9; break;
    case 14: 
      var $53=$5;
      $i=$53;
      label = 15; break;
    case 15: 
      var $55=$i;
      var $56=(($55)|0) > 1;
      if ($56) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $58=$6;
      var $59=$2;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=Math.imul($58,$61);
      $q=$62;
      var $63=$q;
      var $64=$63 ^ -1;
      var $65=$1;
      var $66=(($65)|0);
      HEAP32[(($66)>>2)]=$64;
      var $67=$1;
      var $68=(($67+4)|0);
      $1=$68;
      var $69=$2;
      var $70=$4;
      var $71=$i;
      var $72=$q;
      var $73=___gmpn_addmul_1($69, $70, $71, $72);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $76=$2;
      var $77=(($76+4)|0);
      $2=$77;
      label = 19; break;
    case 19: 
      var $79=$i;
      var $80=((($79)-(1))|0);
      $i=$80;
      label = 15; break;
    case 20: 
      var $82=$6;
      var $83=$2;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=Math.imul($82,$85);
      $q=$86;
      var $87=$q;
      var $88=$87 ^ -1;
      var $89=$1;
      var $90=(($89)|0);
      HEAP32[(($90)>>2)]=$88;
      var $91=$1;
      var $92=$3;
      var $93=(((-$92))|0);
      var $94=(($91+($93<<2))|0);
      var $95=(($94+4)|0);
      var $96=$1;
      var $97=$3;
      var $98=(((-$97))|0);
      var $99=(($96+($98<<2))|0);
      var $100=(($99+4)|0);
      var $101=$3;
      var $102=___gmpn_add_1($95, $100, $101, 1);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sbpi1_bdiv_q["X"]=1;

function ___gmpn_sbpi1_bdiv_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $qn;
      var $i;
      var $rh;
      var $ql;
      var $q;
      var $q1;
      var $cy;
      $2=$qp;
      $3=$np;
      $4=$nn;
      $5=$dp;
      $6=$dn;
      $7=$dinv;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$4;
      var $15=$6;
      var $16=((($14)-($15))|0);
      $qn=$16;
      $rh=0;
      $ql=1;
      label = 9; break;
    case 9: 
      var $18=$qn;
      var $19=$6;
      var $20=(($18)|0) > (($19)|0);
      if ($20) { label = 10; break; } else { label = 15; break; }
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $23=$i;
      var $24=$6;
      var $25=(($23)|0) < (($24)|0);
      if ($25) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $27=$7;
      var $28=$i;
      var $29=$3;
      var $30=(($29+($28<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=Math.imul($27,$31);
      $q=$32;
      var $33=$q;
      var $34=$33 ^ -1;
      var $35=$i;
      var $36=$2;
      var $37=(($36+($35<<2))|0);
      HEAP32[(($37)>>2)]=$34;
      var $38=$3;
      var $39=$i;
      var $40=(($38+($39<<2))|0);
      var $41=$5;
      var $42=$6;
      var $43=$q;
      var $44=___gmpn_addmul_1($40, $41, $42, $43);
      var $45=$i;
      var $46=$3;
      var $47=(($46+($45<<2))|0);
      HEAP32[(($47)>>2)]=$44;
      label = 13; break;
    case 13: 
      var $49=$i;
      var $50=((($49)+(1))|0);
      $i=$50;
      label = 11; break;
    case 14: 
      var $52=$3;
      var $53=$6;
      var $54=(($52+($53<<2))|0);
      var $55=$3;
      var $56=$6;
      var $57=(($55+($56<<2))|0);
      var $58=$qn;
      var $59=$3;
      var $60=$6;
      var $61=___gmpn_add($54, $57, $58, $59, $60);
      var $62=$rh;
      var $63=((($62)+($61))|0);
      $rh=$63;
      var $64=$2;
      var $65=$2;
      var $66=$6;
      var $67=$ql;
      var $68=___gmpn_add_1($64, $65, $66, $67);
      $ql=$68;
      var $69=$6;
      var $70=$2;
      var $71=(($70+($69<<2))|0);
      $2=$71;
      var $72=$6;
      var $73=$qn;
      var $74=((($73)-($72))|0);
      $qn=$74;
      var $75=$6;
      var $76=$3;
      var $77=(($76+($75<<2))|0);
      $3=$77;
      var $78=$6;
      var $79=$4;
      var $80=((($79)-($78))|0);
      $4=$80;
      label = 9; break;
    case 15: 
      $i=0;
      label = 16; break;
    case 16: 
      var $83=$i;
      var $84=$qn;
      var $85=(($83)|0) < (($84)|0);
      if ($85) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $87=$7;
      var $88=$i;
      var $89=$3;
      var $90=(($89+($88<<2))|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=Math.imul($87,$91);
      $q1=$92;
      var $93=$q1;
      var $94=$93 ^ -1;
      var $95=$i;
      var $96=$2;
      var $97=(($96+($95<<2))|0);
      HEAP32[(($97)>>2)]=$94;
      var $98=$3;
      var $99=$i;
      var $100=(($98+($99<<2))|0);
      var $101=$5;
      var $102=$6;
      var $103=$q1;
      var $104=___gmpn_addmul_1($100, $101, $102, $103);
      var $105=$i;
      var $106=$3;
      var $107=(($106+($105<<2))|0);
      HEAP32[(($107)>>2)]=$104;
      label = 18; break;
    case 18: 
      var $109=$i;
      var $110=((($109)+(1))|0);
      $i=$110;
      label = 16; break;
    case 19: 
      var $112=$3;
      var $113=$6;
      var $114=(($112+($113<<2))|0);
      var $115=$3;
      var $116=$6;
      var $117=(($115+($116<<2))|0);
      var $118=$3;
      var $119=$qn;
      var $120=___gmpn_add_n($114, $117, $118, $119);
      var $121=$rh;
      var $122=((($121)+($120))|0);
      $rh=$122;
      var $123=$2;
      var $124=$2;
      var $125=$qn;
      var $126=$ql;
      var $127=___gmpn_add_1($123, $124, $125, $126);
      $ql=$127;
      var $128=$ql;
      var $129=(($128)>>>0) > 0;
      if ($129) { label = 20; break; } else { label = 23; break; }
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      $1=0;
      label = 26; break;
    case 23: 
      var $134=$3;
      var $135=$qn;
      var $136=(($134+($135<<2))|0);
      var $137=$3;
      var $138=$qn;
      var $139=(($137+($138<<2))|0);
      var $140=$5;
      var $141=$6;
      var $142=___gmpn_sub_n($136, $139, $140, $141);
      $cy=$142;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $145=$cy;
      var $146=$rh;
      var $147=((($145)-($146))|0);
      $1=$147;
      label = 26; break;
    case 26: 
      var $149=$1;

      return $149;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sbpi1_bdiv_qr["X"]=1;

function ___gmpn_sbpi1_div_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qh;
      var $i;
      var $n1;
      var $n0;
      var $d1;
      var $d0;
      var $cy;
      var $cy1;
      var $q;
      var $_q0;
      var $_t1;
      var $_t0;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__x4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      var $__x15;
      var $__x17;
      var $__x18;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+($13<<2))|0);
      $2=$15;
      var $16=$2;
      var $17=$5;
      var $18=(((-$17))|0);
      var $19=(($16+($18<<2))|0);
      var $20=$4;
      var $21=$5;
      var $22=___gmpn_cmp($19, $20, $21);
      var $23=(($22)|0) >= 0;
      var $24=(($23)&1);
      $qh=$24;
      var $25=$qh;
      var $26=(($25)|0)!=0;
      if ($26) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $28=$2;
      var $29=$5;
      var $30=(((-$29))|0);
      var $31=(($28+($30<<2))|0);
      var $32=$2;
      var $33=$5;
      var $34=(((-$33))|0);
      var $35=(($32+($34<<2))|0);
      var $36=$4;
      var $37=$5;
      var $38=___gmpn_sub_n($31, $35, $36, $37);
      label = 10; break;
    case 10: 
      var $40=$3;
      var $41=$5;
      var $42=((($40)-($41))|0);
      var $43=$1;
      var $44=(($43+($42<<2))|0);
      $1=$44;
      var $45=$5;
      var $46=((($45)-(2))|0);
      $5=$46;
      var $47=$5;
      var $48=((($47)+(1))|0);
      var $49=$4;
      var $50=(($49+($48<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      $d1=$51;
      var $52=$5;
      var $53=(($52)|0);
      var $54=$4;
      var $55=(($54+($53<<2))|0);
      var $56=HEAP32[(($55)>>2)];
      $d0=$56;
      var $57=$2;
      var $58=((($57)-(8))|0);
      $2=$58;
      var $59=$2;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      $n1=$61;
      var $62=$3;
      var $63=$5;
      var $64=((($63)+(2))|0);
      var $65=((($62)-($64))|0);
      $i=$65;
      label = 11; break;
    case 11: 
      var $67=$i;
      var $68=(($67)|0) > 0;
      if ($68) { label = 12; break; } else { label = 45; break; }
    case 12: 
      var $70=$2;
      var $71=((($70)-(4))|0);
      $2=$71;
      var $72=$n1;
      var $73=$d1;
      var $74=(($72)|0)==(($73)|0);
      if ($74) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $76=$2;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$d0;
      var $80=(($78)|0)==(($79)|0);
      if ($80) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $q=-1;
      var $82=$2;
      var $83=$5;
      var $84=(((-$83))|0);
      var $85=(($82+($84<<2))|0);
      var $86=$4;
      var $87=$5;
      var $88=((($87)+(2))|0);
      var $89=$q;
      var $90=___gmpn_submul_1($85, $86, $88, $89);
      var $91=$2;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      $n1=$93;
      label = 43; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $97=$n1;
      $__u=$97;
      var $98=$6;
      $__v=$98;
      var $99=$__u;
      var $100=$99 & 65535;
      $__ul=$100;
      var $101=$__u;
      var $102=$101 >>> 16;
      $__uh=$102;
      var $103=$__v;
      var $104=$103 & 65535;
      $__vl=$104;
      var $105=$__v;
      var $106=$105 >>> 16;
      $__vh=$106;
      var $107=$__ul;
      var $108=$__vl;
      var $109=Math.imul($107,$108);
      $__x0=$109;
      var $110=$__ul;
      var $111=$__vh;
      var $112=Math.imul($110,$111);
      $__x1=$112;
      var $113=$__uh;
      var $114=$__vl;
      var $115=Math.imul($113,$114);
      $__x2=$115;
      var $116=$__uh;
      var $117=$__vh;
      var $118=Math.imul($116,$117);
      $__x3=$118;
      var $119=$__x0;
      var $120=$119 >>> 16;
      var $121=$__x1;
      var $122=((($121)+($120))|0);
      $__x1=$122;
      var $123=$__x2;
      var $124=$__x1;
      var $125=((($124)+($123))|0);
      $__x1=$125;
      var $126=$__x1;
      var $127=$__x2;
      var $128=(($126)>>>0) < (($127)>>>0);
      if ($128) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $130=$__x3;
      var $131=((($130)+(65536))|0);
      $__x3=$131;
      label = 19; break;
    case 19: 
      var $133=$__x3;
      var $134=$__x1;
      var $135=$134 >>> 16;
      var $136=((($133)+($135))|0);
      $q=$136;
      var $137=$__x1;
      var $138=$137 << 16;
      var $139=$__x0;
      var $140=$139 & 65535;
      var $141=((($138)+($140))|0);
      $_q0=$141;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $144=$_q0;
      var $145=$2;
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=((($144)+($147))|0);
      $__x=$148;
      var $149=$q;
      var $150=$n1;
      var $151=((($149)+($150))|0);
      var $152=$__x;
      var $153=$_q0;
      var $154=(($152)>>>0) < (($153)>>>0);
      var $155=(($154)&1);
      var $156=((($151)+($155))|0);
      $q=$156;
      var $157=$__x;
      $_q0=$157;
      label = 22; break;
    case 22: 
      var $159=$2;
      var $160=(($159+4)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=$d1;
      var $163=$q;
      var $164=Math.imul($162,$163);
      var $165=((($161)-($164))|0);
      $n1=$165;
      var $166=$2;
      var $167=(($166)|0);
      var $168=HEAP32[(($167)>>2)];
      $n0=$168;
      label = 23; break;
    case 23: 
      var $170=$n0;
      var $171=$d0;
      var $172=((($170)-($171))|0);
      $__x4=$172;
      var $173=$n1;
      var $174=$d1;
      var $175=((($173)-($174))|0);
      var $176=$n0;
      var $177=$d0;
      var $178=(($176)>>>0) < (($177)>>>0);
      var $179=(($178)&1);
      var $180=((($175)-($179))|0);
      $n1=$180;
      var $181=$__x4;
      $n0=$181;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $184=$d0;
      $__u13=$184;
      var $185=$q;
      $__v14=$185;
      var $186=$__u13;
      var $187=$186 & 65535;
      $__ul9=$187;
      var $188=$__u13;
      var $189=$188 >>> 16;
      $__uh11=$189;
      var $190=$__v14;
      var $191=$190 & 65535;
      $__vl10=$191;
      var $192=$__v14;
      var $193=$192 >>> 16;
      $__vh12=$193;
      var $194=$__ul9;
      var $195=$__vl10;
      var $196=Math.imul($194,$195);
      $__x05=$196;
      var $197=$__ul9;
      var $198=$__vh12;
      var $199=Math.imul($197,$198);
      $__x16=$199;
      var $200=$__uh11;
      var $201=$__vl10;
      var $202=Math.imul($200,$201);
      $__x27=$202;
      var $203=$__uh11;
      var $204=$__vh12;
      var $205=Math.imul($203,$204);
      $__x38=$205;
      var $206=$__x05;
      var $207=$206 >>> 16;
      var $208=$__x16;
      var $209=((($208)+($207))|0);
      $__x16=$209;
      var $210=$__x27;
      var $211=$__x16;
      var $212=((($211)+($210))|0);
      $__x16=$212;
      var $213=$__x16;
      var $214=$__x27;
      var $215=(($213)>>>0) < (($214)>>>0);
      if ($215) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $217=$__x38;
      var $218=((($217)+(65536))|0);
      $__x38=$218;
      label = 27; break;
    case 27: 
      var $220=$__x38;
      var $221=$__x16;
      var $222=$221 >>> 16;
      var $223=((($220)+($222))|0);
      $_t1=$223;
      var $224=$__x16;
      var $225=$224 << 16;
      var $226=$__x05;
      var $227=$226 & 65535;
      var $228=((($225)+($227))|0);
      $_t0=$228;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $231=$n0;
      var $232=$_t0;
      var $233=((($231)-($232))|0);
      $__x15=$233;
      var $234=$n1;
      var $235=$_t1;
      var $236=((($234)-($235))|0);
      var $237=$n0;
      var $238=$_t0;
      var $239=(($237)>>>0) < (($238)>>>0);
      var $240=(($239)&1);
      var $241=((($236)-($240))|0);
      $n1=$241;
      var $242=$__x15;
      $n0=$242;
      label = 30; break;
    case 30: 
      var $244=$q;
      var $245=((($244)+(1))|0);
      $q=$245;
      var $246=$n1;
      var $247=$_q0;
      var $248=(($246)>>>0) >= (($247)>>>0);
      var $249=(($248)&1);
      var $250=(((-$249))|0);
      $_mask=$250;
      var $251=$_mask;
      var $252=$q;
      var $253=((($252)+($251))|0);
      $q=$253;
      label = 31; break;
    case 31: 
      var $255=$n0;
      var $256=$_mask;
      var $257=$d0;
      var $258=$256 & $257;
      var $259=((($255)+($258))|0);
      $__x17=$259;
      var $260=$n1;
      var $261=$_mask;
      var $262=$d1;
      var $263=$261 & $262;
      var $264=((($260)+($263))|0);
      var $265=$__x17;
      var $266=$n0;
      var $267=(($265)>>>0) < (($266)>>>0);
      var $268=(($267)&1);
      var $269=((($264)+($268))|0);
      $n1=$269;
      var $270=$__x17;
      $n0=$270;
      label = 32; break;
    case 32: 
      var $272=$n1;
      var $273=$d1;
      var $274=(($272)>>>0) >= (($273)>>>0);
      if ($274) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $276=$n1;
      var $277=$d1;
      var $278=(($276)>>>0) > (($277)>>>0);
      if ($278) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $280=$n0;
      var $281=$d0;
      var $282=(($280)>>>0) >= (($281)>>>0);
      if ($282) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $284=$q;
      var $285=((($284)+(1))|0);
      $q=$285;
      label = 36; break;
    case 36: 
      var $287=$n0;
      var $288=$d0;
      var $289=((($287)-($288))|0);
      $__x18=$289;
      var $290=$n1;
      var $291=$d1;
      var $292=((($290)-($291))|0);
      var $293=$n0;
      var $294=$d0;
      var $295=(($293)>>>0) < (($294)>>>0);
      var $296=(($295)&1);
      var $297=((($292)-($296))|0);
      $n1=$297;
      var $298=$__x18;
      $n0=$298;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $303=$2;
      var $304=$5;
      var $305=(((-$304))|0);
      var $306=(($303+($305<<2))|0);
      var $307=$4;
      var $308=$5;
      var $309=$q;
      var $310=___gmpn_submul_1($306, $307, $308, $309);
      $cy=$310;
      var $311=$n0;
      var $312=$cy;
      var $313=(($311)>>>0) < (($312)>>>0);
      var $314=(($313)&1);
      $cy1=$314;
      var $315=$n0;
      var $316=$cy;
      var $317=((($315)-($316))|0);
      $n0=$317;
      var $318=$n1;
      var $319=$cy1;
      var $320=(($318)>>>0) < (($319)>>>0);
      var $321=(($320)&1);
      $cy=$321;
      var $322=$n1;
      var $323=$cy1;
      var $324=((($322)-($323))|0);
      $n1=$324;
      var $325=$n0;
      var $326=$2;
      var $327=(($326)|0);
      HEAP32[(($327)>>2)]=$325;
      var $328=$cy;
      var $329=(($328)|0)!=0;
      if ($329) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $331=$d1;
      var $332=$2;
      var $333=$5;
      var $334=(((-$333))|0);
      var $335=(($332+($334<<2))|0);
      var $336=$2;
      var $337=$5;
      var $338=(((-$337))|0);
      var $339=(($336+($338<<2))|0);
      var $340=$4;
      var $341=$5;
      var $342=((($341)+(1))|0);
      var $343=___gmpn_add_n($335, $339, $340, $342);
      var $344=((($331)+($343))|0);
      var $345=$n1;
      var $346=((($345)+($344))|0);
      $n1=$346;
      var $347=$q;
      var $348=((($347)-(1))|0);
      $q=$348;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $351=$q;
      var $352=$1;
      var $353=((($352)-(4))|0);
      $1=$353;
      HEAP32[(($353)>>2)]=$351;
      label = 44; break;
    case 44: 
      var $355=$i;
      var $356=((($355)-(1))|0);
      $i=$356;
      label = 11; break;
    case 45: 
      var $358=$n1;
      var $359=$2;
      var $360=(($359+4)|0);
      HEAP32[(($360)>>2)]=$358;
      var $361=$qh;

      return $361;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sbpi1_div_qr["X"]=1;

function ___gmpn_binvert_itch($n) {
  var label = 0;


  var $1;
  var $itch_local;
  var $itch_out;
  $1=$n;
  var $2=$1;
  var $3=___gmpn_mulmod_bnm1_next_size($2);
  $itch_local=$3;
  var $4=$itch_local;
  var $5=$1;
  var $6=$1;
  var $7=((($6)+(1))|0);
  var $8=$7 >> 1;
  var $9=_mpn_mulmod_bnm1_itch316($4, $5, $8);
  $itch_out=$9;
  var $10=$itch_local;
  var $11=$itch_out;
  var $12=((($10)+($11))|0);

  return $12;
}


function _mpn_mulmod_bnm1_itch316($rn, $an, $bn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      $3=$bn;
      var $4=$1;
      var $5=$4 >> 1;
      $n=$5;
      var $6=$1;
      var $7=((($6)+(4))|0);
      var $8=$2;
      var $9=$n;
      var $10=(($8)|0) > (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$3;
      var $13=$n;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $20 = $16;label = 6; break;
    case 5: 
      var $18=$n;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      var $23 = $20;label = 8; break;
    case 7: 
      var $23 = 0;label = 8; break;
    case 8: 
      var $23;
      var $24=((($7)+($23))|0);
      $itch=$24;
      var $25=$itch;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_lshiftc($rp, $up, $n, $cnt) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $high_limb;
      var $low_limb;
      var $tnc;
      var $i;
      var $retval;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$cnt;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+($13<<2))|0);
      $2=$15;
      var $16=$3;
      var $17=$1;
      var $18=(($17+($16<<2))|0);
      $1=$18;
      var $19=$4;
      var $20=(((32)-($19))|0);
      $tnc=$20;
      var $21=$2;
      var $22=((($21)-(4))|0);
      $2=$22;
      var $23=HEAP32[(($22)>>2)];
      $low_limb=$23;
      var $24=$low_limb;
      var $25=$tnc;
      var $26=$24 >>> (($25)>>>0);
      $retval=$26;
      var $27=$low_limb;
      var $28=$4;
      var $29=$27 << $28;
      $high_limb=$29;
      var $30=$3;
      var $31=((($30)-(1))|0);
      $i=$31;
      label = 11; break;
    case 11: 
      var $33=$i;
      var $34=(($33)|0)!=0;
      if ($34) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $36=$2;
      var $37=((($36)-(4))|0);
      $2=$37;
      var $38=HEAP32[(($37)>>2)];
      $low_limb=$38;
      var $39=$high_limb;
      var $40=$low_limb;
      var $41=$tnc;
      var $42=$40 >>> (($41)>>>0);
      var $43=$39 | $42;
      var $44=$43 ^ -1;
      var $45=$1;
      var $46=((($45)-(4))|0);
      $1=$46;
      HEAP32[(($46)>>2)]=$44;
      var $47=$low_limb;
      var $48=$4;
      var $49=$47 << $48;
      $high_limb=$49;
      label = 13; break;
    case 13: 
      var $51=$i;
      var $52=((($51)-(1))|0);
      $i=$52;
      label = 11; break;
    case 14: 
      var $54=$high_limb;
      var $55=$54 ^ -1;
      var $56=$1;
      var $57=((($56)-(4))|0);
      $1=$57;
      HEAP32[(($57)>>2)]=$55;
      var $58=$retval;

      return $58;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_lshiftc["X"]=1;

function ___gmpn_neg($__gmp_rp, $__gmp_up, $__gmp_n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $__gmp_ul;
      var $__gmp_cy;
      $1=$__gmp_rp;
      $2=$__gmp_up;
      $3=$__gmp_n;
      $__gmp_cy=0;
      label = 3; break;
    case 3: 
      var $5=$2;
      var $6=(($5+4)|0);
      $2=$6;
      var $7=HEAP32[(($5)>>2)];
      $__gmp_ul=$7;
      var $8=$__gmp_ul;
      var $9=(((-$8))|0);
      var $10=$__gmp_cy;
      var $11=((($9)-($10))|0);
      var $12=$1;
      var $13=(($12+4)|0);
      $1=$13;
      HEAP32[(($12)>>2)]=$11;
      var $14=$__gmp_ul;
      var $15=(($14)|0)!=0;
      var $16=(($15)&1);
      var $17=$__gmp_cy;
      var $18=$17 | $16;
      $__gmp_cy=$18;
      label = 4; break;
    case 4: 
      var $20=$3;
      var $21=((($20)-(1))|0);
      $3=$21;
      var $22=(($21)|0)!=0;
      if ($22) { label = 3; break; } else { label = 5; break; }
    case 5: 
      var $24=$__gmp_cy;

      return $24;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_binvert($rp, $up, $n, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 92)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $xp;
      var $rn;
      var $newrn;
      var $sizes=__stackBase__;
      var $sizp;
      var $di;
      var $__dst;
      var $__n;
      var $__n1;
      var $__inv;
      var $m;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$scratch;
      var $5=(($sizes)|0);
      $sizp=$5;
      var $6=$3;
      $rn=$6;
      label = 3; break;
    case 3: 
      var $8=$rn;
      var $9=(($8)|0) >= 300;
      if ($9) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $11=$rn;
      var $12=$sizp;
      var $13=(($12+4)|0);
      $sizp=$13;
      HEAP32[(($12)>>2)]=$11;
      label = 5; break;
    case 5: 
      var $15=$rn;
      var $16=((($15)+(1))|0);
      var $17=$16 >> 1;
      $rn=$17;
      label = 3; break;
    case 6: 
      var $19=$4;
      $xp=$19;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $23=$rn;
      var $24=(($23)|0)!=0;
      if ($24) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $26=$xp;
      $__dst=$26;
      var $27=$rn;
      $__n=$27;
      label = 11; break;
    case 11: 
      var $29=$__dst;
      var $30=(($29+4)|0);
      $__dst=$30;
      HEAP32[(($29)>>2)]=0;
      label = 12; break;
    case 12: 
      var $32=$__n;
      var $33=((($32)-(1))|0);
      $__n=$33;
      var $34=(($33)|0)!=0;
      if ($34) { label = 11; break; } else { label = 13; break; }
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $38=$xp;
      var $39=(($38)|0);
      HEAP32[(($39)>>2)]=1;
      label = 16; break;
    case 16: 
      var $41=$2;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      $__n1=$43;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $46=$__n1;
      var $47=Math.floor(((($46)>>>0))/(2));
      var $48=$47 & 127;
      var $49=((5249696+$48)|0);
      var $50=HEAP8[($49)];
      var $51=(($50)&255);
      $__inv=$51;
      var $52=$__inv;
      var $53=($52<<1);
      var $54=$__inv;
      var $55=$__inv;
      var $56=Math.imul($54,$55);
      var $57=$__n1;
      var $58=Math.imul($56,$57);
      var $59=((($53)-($58))|0);
      $__inv=$59;
      var $60=$__inv;
      var $61=($60<<1);
      var $62=$__inv;
      var $63=$__inv;
      var $64=Math.imul($62,$63);
      var $65=$__n1;
      var $66=Math.imul($64,$65);
      var $67=((($61)-($66))|0);
      $__inv=$67;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $70=$__inv;
      $di=$70;
      label = 21; break;
    case 21: 
      var $72=$rn;
      var $73=(($72)|0) >= 180;
      if ($73) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $75=$1;
      var $76=$xp;
      var $77=$rn;
      var $78=$2;
      var $79=$rn;
      var $80=$di;
      var $81=(((-$80))|0);
      ___gmpn_sbpi1_bdiv_q($75, $76, $77, $78, $79, $81);
      label = 24; break;
    case 23: 
      var $83=$1;
      var $84=$xp;
      var $85=$rn;
      var $86=$2;
      var $87=$rn;
      var $88=$di;
      var $89=(((-$88))|0);
      ___gmpn_dcpi1_bdiv_q($83, $84, $85, $86, $87, $89);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $92=$rn;
      var $93=$3;
      var $94=(($92)|0) < (($93)|0);
      if ($94) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $96=$sizp;
      var $97=((($96)-(4))|0);
      $sizp=$97;
      var $98=HEAP32[(($97)>>2)];
      $newrn=$98;
      var $99=$newrn;
      var $100=___gmpn_mulmod_bnm1_next_size($99);
      $m=$100;
      var $101=$xp;
      var $102=$m;
      var $103=$2;
      var $104=$newrn;
      var $105=$1;
      var $106=$rn;
      var $107=$xp;
      var $108=$m;
      var $109=(($107+($108<<2))|0);
      ___gmpn_mulmod_bnm1($101, $102, $103, $104, $105, $106, $109);
      var $110=$xp;
      var $111=$m;
      var $112=(($110+($111<<2))|0);
      var $113=$xp;
      var $114=$rn;
      var $115=$m;
      var $116=$newrn;
      var $117=((($115)-($116))|0);
      var $118=((($114)-($117))|0);
      var $119=___gmpn_sub_1($112, $113, $118, 1);
      var $120=$1;
      var $121=$rn;
      var $122=(($120+($121<<2))|0);
      var $123=$1;
      var $124=$xp;
      var $125=$rn;
      var $126=(($124+($125<<2))|0);
      var $127=$newrn;
      var $128=$rn;
      var $129=((($127)-($128))|0);
      ___gmpn_mullo_n($122, $123, $126, $129);
      var $130=$1;
      var $131=$rn;
      var $132=(($130+($131<<2))|0);
      var $133=$1;
      var $134=$rn;
      var $135=(($133+($134<<2))|0);
      var $136=$newrn;
      var $137=$rn;
      var $138=((($136)-($137))|0);
      var $139=___gmpn_neg($132, $135, $138);
      label = 27; break;
    case 27: 
      var $141=$newrn;
      $rn=$141;
      label = 25; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_binvert["X"]=1;

function ___gmpn_mullo_basecase($rp, $up, $vp, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $1=$rp;
      $2=$up;
      $3=$vp;
      $4=$n;
      var $5=$1;
      var $6=$2;
      var $7=$4;
      var $8=$3;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=___gmpn_mul_1($5, $6, $7, $10);
      $i=1;
      label = 3; break;
    case 3: 
      var $13=$i;
      var $14=$4;
      var $15=(($13)|0) < (($14)|0);
      if ($15) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $17=$1;
      var $18=$i;
      var $19=(($17+($18<<2))|0);
      var $20=$2;
      var $21=$4;
      var $22=$i;
      var $23=((($21)-($22))|0);
      var $24=$i;
      var $25=$3;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=___gmpn_addmul_1($19, $20, $23, $27);
      label = 5; break;
    case 5: 
      var $30=$i;
      var $31=((($30)+(1))|0);
      $i=$31;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _malloc($bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b1;
      var $p2;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F3;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F4;
      var $rsize5;
      var $p6;
      var $r7;
      var $dvs;
      var $rsize8;
      var $p9;
      var $r10;
      $1=$bytes;
      var $2=$1;
      var $3=(($2)>>>0) <= 244;
      if ($3) { label = 3; break; } else { label = 38; break; }
    case 3: 
      var $5=$1;
      var $6=(($5)>>>0) < 11;
      if ($6) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14 = 16;label = 6; break;
    case 5: 
      var $9=$1;
      var $10=((($9)+(4))|0);
      var $11=((($10)+(7))|0);
      var $12=$11 & -8;
      var $14 = $12;label = 6; break;
    case 6: 
      var $14;
      $nb=$14;
      var $15=$nb;
      var $16=$15 >>> 3;
      $idx=$16;
      var $17=HEAP32[((((5243940)|0))>>2)];
      var $18=$idx;
      var $19=$17 >>> (($18)>>>0);
      $smallbits=$19;
      var $20=$smallbits;
      var $21=$20 & 3;
      var $22=(($21)|0)!=0;
      if ($22) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $24=$smallbits;
      var $25=$24 ^ -1;
      var $26=$25 & 1;
      var $27=$idx;
      var $28=((($27)+($26))|0);
      $idx=$28;
      var $29=$idx;
      var $30=$29 << 1;
      var $31=((((5243980)|0)+($30<<2))|0);
      var $32=$31;
      var $33=$32;
      $b=$33;
      var $34=$b;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      $p=$36;
      var $37=$p;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      $F=$39;
      var $40=$b;
      var $41=$F;
      var $42=(($40)|0)==(($41)|0);
      if ($42) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$idx;
      var $45=1 << $44;
      var $46=$45 ^ -1;
      var $47=HEAP32[((((5243940)|0))>>2)];
      var $48=$47 & $46;
      HEAP32[((((5243940)|0))>>2)]=$48;
      label = 13; break;
    case 9: 
      var $50=$F;
      var $51=$50;
      var $52=HEAP32[((((5243956)|0))>>2)];
      var $53=(($51)>>>0) >= (($52)>>>0);
      var $54=(($53)&1);
      var $55=($54);
      var $56=(($55)|0)!=0;
      if ($56) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $58=$F;
      var $59=$b;
      var $60=(($59+8)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$b;
      var $62=$F;
      var $63=(($62+12)|0);
      HEAP32[(($63)>>2)]=$61;
      label = 12; break;
    case 11: 
      _abort();
      throw "Reached an unreachable!"
    case 12: 
      label = 13; break;
    case 13: 
      var $67=$idx;
      var $68=$67 << 3;
      var $69=$68 | 1;
      var $70=$69 | 2;
      var $71=$p;
      var $72=(($71+4)|0);
      HEAP32[(($72)>>2)]=$70;
      var $73=$p;
      var $74=$73;
      var $75=$idx;
      var $76=$75 << 3;
      var $77=(($74+$76)|0);
      var $78=$77;
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$80 | 1;
      HEAP32[(($79)>>2)]=$81;
      var $82=$p;
      var $83=$82;
      var $84=(($83+8)|0);
      $mem=$84;
      label = 54; break;
    case 14: 
      var $86=$nb;
      var $87=HEAP32[((((5243948)|0))>>2)];
      var $88=(($86)>>>0) > (($87)>>>0);
      if ($88) { label = 15; break; } else { label = 36; break; }
    case 15: 
      var $90=$smallbits;
      var $91=(($90)|0)!=0;
      if ($91) { label = 16; break; } else { label = 31; break; }
    case 16: 
      var $93=$smallbits;
      var $94=$idx;
      var $95=$93 << $94;
      var $96=$idx;
      var $97=1 << $96;
      var $98=$97 << 1;
      var $99=$idx;
      var $100=1 << $99;
      var $101=$100 << 1;
      var $102=(((-$101))|0);
      var $103=$98 | $102;
      var $104=$95 & $103;
      $leftbits=$104;
      var $105=$leftbits;
      var $106=$leftbits;
      var $107=(((-$106))|0);
      var $108=$105 & $107;
      $leastbit=$108;
      var $109=$leastbit;
      var $110=((($109)-(1))|0);
      $Y=$110;
      var $111=$Y;
      var $112=$111 >>> 12;
      var $113=$112 & 16;
      $K=$113;
      var $114=$K;
      $N=$114;
      var $115=$K;
      var $116=$Y;
      var $117=$116 >>> (($115)>>>0);
      $Y=$117;
      var $118=$Y;
      var $119=$118 >>> 5;
      var $120=$119 & 8;
      $K=$120;
      var $121=$N;
      var $122=((($121)+($120))|0);
      $N=$122;
      var $123=$K;
      var $124=$Y;
      var $125=$124 >>> (($123)>>>0);
      $Y=$125;
      var $126=$Y;
      var $127=$126 >>> 2;
      var $128=$127 & 4;
      $K=$128;
      var $129=$N;
      var $130=((($129)+($128))|0);
      $N=$130;
      var $131=$K;
      var $132=$Y;
      var $133=$132 >>> (($131)>>>0);
      $Y=$133;
      var $134=$Y;
      var $135=$134 >>> 1;
      var $136=$135 & 2;
      $K=$136;
      var $137=$N;
      var $138=((($137)+($136))|0);
      $N=$138;
      var $139=$K;
      var $140=$Y;
      var $141=$140 >>> (($139)>>>0);
      $Y=$141;
      var $142=$Y;
      var $143=$142 >>> 1;
      var $144=$143 & 1;
      $K=$144;
      var $145=$N;
      var $146=((($145)+($144))|0);
      $N=$146;
      var $147=$K;
      var $148=$Y;
      var $149=$148 >>> (($147)>>>0);
      $Y=$149;
      var $150=$N;
      var $151=$Y;
      var $152=((($150)+($151))|0);
      $i=$152;
      var $153=$i;
      var $154=$153 << 1;
      var $155=((((5243980)|0)+($154<<2))|0);
      var $156=$155;
      var $157=$156;
      $b1=$157;
      var $158=$b1;
      var $159=(($158+8)|0);
      var $160=HEAP32[(($159)>>2)];
      $p2=$160;
      var $161=$p2;
      var $162=(($161+8)|0);
      var $163=HEAP32[(($162)>>2)];
      $F3=$163;
      var $164=$b1;
      var $165=$F3;
      var $166=(($164)|0)==(($165)|0);
      if ($166) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $168=$i;
      var $169=1 << $168;
      var $170=$169 ^ -1;
      var $171=HEAP32[((((5243940)|0))>>2)];
      var $172=$171 & $170;
      HEAP32[((((5243940)|0))>>2)]=$172;
      label = 22; break;
    case 18: 
      var $174=$F3;
      var $175=$174;
      var $176=HEAP32[((((5243956)|0))>>2)];
      var $177=(($175)>>>0) >= (($176)>>>0);
      var $178=(($177)&1);
      var $179=($178);
      var $180=(($179)|0)!=0;
      if ($180) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $182=$F3;
      var $183=$b1;
      var $184=(($183+8)|0);
      HEAP32[(($184)>>2)]=$182;
      var $185=$b1;
      var $186=$F3;
      var $187=(($186+12)|0);
      HEAP32[(($187)>>2)]=$185;
      label = 21; break;
    case 20: 
      _abort();
      throw "Reached an unreachable!"
    case 21: 
      label = 22; break;
    case 22: 
      var $191=$i;
      var $192=$191 << 3;
      var $193=$nb;
      var $194=((($192)-($193))|0);
      $rsize=$194;
      var $195=$nb;
      var $196=$195 | 1;
      var $197=$196 | 2;
      var $198=$p2;
      var $199=(($198+4)|0);
      HEAP32[(($199)>>2)]=$197;
      var $200=$p2;
      var $201=$200;
      var $202=$nb;
      var $203=(($201+$202)|0);
      var $204=$203;
      $r=$204;
      var $205=$rsize;
      var $206=$205 | 1;
      var $207=$r;
      var $208=(($207+4)|0);
      HEAP32[(($208)>>2)]=$206;
      var $209=$rsize;
      var $210=$r;
      var $211=$210;
      var $212=$rsize;
      var $213=(($211+$212)|0);
      var $214=$213;
      var $215=(($214)|0);
      HEAP32[(($215)>>2)]=$209;
      var $216=HEAP32[((((5243948)|0))>>2)];
      $DVS=$216;
      var $217=$DVS;
      var $218=(($217)|0)!=0;
      if ($218) { label = 23; break; } else { label = 30; break; }
    case 23: 
      var $220=HEAP32[((((5243960)|0))>>2)];
      $DV=$220;
      var $221=$DVS;
      var $222=$221 >>> 3;
      $I=$222;
      var $223=$I;
      var $224=$223 << 1;
      var $225=((((5243980)|0)+($224<<2))|0);
      var $226=$225;
      var $227=$226;
      $B=$227;
      var $228=$B;
      $F4=$228;
      var $229=HEAP32[((((5243940)|0))>>2)];
      var $230=$I;
      var $231=1 << $230;
      var $232=$229 & $231;
      var $233=(($232)|0)!=0;
      if ($233) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $235=$I;
      var $236=1 << $235;
      var $237=HEAP32[((((5243940)|0))>>2)];
      var $238=$237 | $236;
      HEAP32[((((5243940)|0))>>2)]=$238;
      label = 29; break;
    case 25: 
      var $240=$B;
      var $241=(($240+8)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$242;
      var $244=HEAP32[((((5243956)|0))>>2)];
      var $245=(($243)>>>0) >= (($244)>>>0);
      var $246=(($245)&1);
      var $247=($246);
      var $248=(($247)|0)!=0;
      if ($248) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $250=$B;
      var $251=(($250+8)|0);
      var $252=HEAP32[(($251)>>2)];
      $F4=$252;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      var $256=$DV;
      var $257=$B;
      var $258=(($257+8)|0);
      HEAP32[(($258)>>2)]=$256;
      var $259=$DV;
      var $260=$F4;
      var $261=(($260+12)|0);
      HEAP32[(($261)>>2)]=$259;
      var $262=$F4;
      var $263=$DV;
      var $264=(($263+8)|0);
      HEAP32[(($264)>>2)]=$262;
      var $265=$B;
      var $266=$DV;
      var $267=(($266+12)|0);
      HEAP32[(($267)>>2)]=$265;
      label = 30; break;
    case 30: 
      var $269=$rsize;
      HEAP32[((((5243948)|0))>>2)]=$269;
      var $270=$r;
      HEAP32[((((5243960)|0))>>2)]=$270;
      var $271=$p2;
      var $272=$271;
      var $273=(($272+8)|0);
      $mem=$273;
      label = 54; break;
    case 31: 
      var $275=HEAP32[((((5243944)|0))>>2)];
      var $276=(($275)|0)!=0;
      if ($276) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $278=$nb;
      var $279=_tmalloc_small(5243940, $278);
      $mem=$279;
      var $280=(($279)|0)!=0;
      if ($280) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 54; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 45; break;
    case 38: 
      var $287=$1;
      var $288=(($287)>>>0) >= 4294967232;
      if ($288) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $nb=-1;
      label = 44; break;
    case 40: 
      var $291=$1;
      var $292=((($291)+(4))|0);
      var $293=((($292)+(7))|0);
      var $294=$293 & -8;
      $nb=$294;
      var $295=HEAP32[((((5243944)|0))>>2)];
      var $296=(($295)|0)!=0;
      if ($296) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $298=$nb;
      var $299=_tmalloc_large(5243940, $298);
      $mem=$299;
      var $300=(($299)|0)!=0;
      if ($300) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 54; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $305=$nb;
      var $306=HEAP32[((((5243948)|0))>>2)];
      var $307=(($305)>>>0) <= (($306)>>>0);
      if ($307) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $309=HEAP32[((((5243948)|0))>>2)];
      var $310=$nb;
      var $311=((($309)-($310))|0);
      $rsize5=$311;
      var $312=HEAP32[((((5243960)|0))>>2)];
      $p6=$312;
      var $313=$rsize5;
      var $314=(($313)>>>0) >= 16;
      if ($314) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $316=$p6;
      var $317=$316;
      var $318=$nb;
      var $319=(($317+$318)|0);
      var $320=$319;
      HEAP32[((((5243960)|0))>>2)]=$320;
      $r7=$320;
      var $321=$rsize5;
      HEAP32[((((5243948)|0))>>2)]=$321;
      var $322=$rsize5;
      var $323=$322 | 1;
      var $324=$r7;
      var $325=(($324+4)|0);
      HEAP32[(($325)>>2)]=$323;
      var $326=$rsize5;
      var $327=$r7;
      var $328=$327;
      var $329=$rsize5;
      var $330=(($328+$329)|0);
      var $331=$330;
      var $332=(($331)|0);
      HEAP32[(($332)>>2)]=$326;
      var $333=$nb;
      var $334=$333 | 1;
      var $335=$334 | 2;
      var $336=$p6;
      var $337=(($336+4)|0);
      HEAP32[(($337)>>2)]=$335;
      label = 49; break;
    case 48: 
      var $339=HEAP32[((((5243948)|0))>>2)];
      $dvs=$339;
      HEAP32[((((5243948)|0))>>2)]=0;
      HEAP32[((((5243960)|0))>>2)]=0;
      var $340=$dvs;
      var $341=$340 | 1;
      var $342=$341 | 2;
      var $343=$p6;
      var $344=(($343+4)|0);
      HEAP32[(($344)>>2)]=$342;
      var $345=$p6;
      var $346=$345;
      var $347=$dvs;
      var $348=(($346+$347)|0);
      var $349=$348;
      var $350=(($349+4)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=$351 | 1;
      HEAP32[(($350)>>2)]=$352;
      label = 49; break;
    case 49: 
      var $354=$p6;
      var $355=$354;
      var $356=(($355+8)|0);
      $mem=$356;
      label = 54; break;
    case 50: 
      var $358=$nb;
      var $359=HEAP32[((((5243952)|0))>>2)];
      var $360=(($358)>>>0) < (($359)>>>0);
      if ($360) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $362=$nb;
      var $363=HEAP32[((((5243952)|0))>>2)];
      var $364=((($363)-($362))|0);
      HEAP32[((((5243952)|0))>>2)]=$364;
      $rsize8=$364;
      var $365=HEAP32[((((5243964)|0))>>2)];
      $p9=$365;
      var $366=$p9;
      var $367=$366;
      var $368=$nb;
      var $369=(($367+$368)|0);
      var $370=$369;
      HEAP32[((((5243964)|0))>>2)]=$370;
      $r10=$370;
      var $371=$rsize8;
      var $372=$371 | 1;
      var $373=$r10;
      var $374=(($373+4)|0);
      HEAP32[(($374)>>2)]=$372;
      var $375=$nb;
      var $376=$375 | 1;
      var $377=$376 | 2;
      var $378=$p9;
      var $379=(($378+4)|0);
      HEAP32[(($379)>>2)]=$377;
      var $380=$p9;
      var $381=$380;
      var $382=(($381+8)|0);
      $mem=$382;
      label = 54; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $385=$nb;
      var $386=_sys_alloc(5243940, $385);
      $mem=$386;
      label = 54; break;
    case 54: 
      var $388=$mem;

      return $388;
    default: assert(0, "bad label: " + label);
  }

}
_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F1;
      $1=$m;
      $2=$nb;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(((-$8))|0);
      var $10=$5 & $9;
      $leastbit=$10;
      var $11=$leastbit;
      var $12=((($11)-(1))|0);
      $Y=$12;
      var $13=$Y;
      var $14=$13 >>> 12;
      var $15=$14 & 16;
      $K=$15;
      var $16=$K;
      $N=$16;
      var $17=$K;
      var $18=$Y;
      var $19=$18 >>> (($17)>>>0);
      $Y=$19;
      var $20=$Y;
      var $21=$20 >>> 5;
      var $22=$21 & 8;
      $K=$22;
      var $23=$N;
      var $24=((($23)+($22))|0);
      $N=$24;
      var $25=$K;
      var $26=$Y;
      var $27=$26 >>> (($25)>>>0);
      $Y=$27;
      var $28=$Y;
      var $29=$28 >>> 2;
      var $30=$29 & 4;
      $K=$30;
      var $31=$N;
      var $32=((($31)+($30))|0);
      $N=$32;
      var $33=$K;
      var $34=$Y;
      var $35=$34 >>> (($33)>>>0);
      $Y=$35;
      var $36=$Y;
      var $37=$36 >>> 1;
      var $38=$37 & 2;
      $K=$38;
      var $39=$N;
      var $40=((($39)+($38))|0);
      $N=$40;
      var $41=$K;
      var $42=$Y;
      var $43=$42 >>> (($41)>>>0);
      $Y=$43;
      var $44=$Y;
      var $45=$44 >>> 1;
      var $46=$45 & 1;
      $K=$46;
      var $47=$N;
      var $48=((($47)+($46))|0);
      $N=$48;
      var $49=$K;
      var $50=$Y;
      var $51=$50 >>> (($49)>>>0);
      $Y=$51;
      var $52=$N;
      var $53=$Y;
      var $54=((($52)+($53))|0);
      $i=$54;
      var $55=$i;
      var $56=$1;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      $v=$59;
      var $60=$t;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & -8;
      var $64=$2;
      var $65=((($63)-($64))|0);
      $rsize=$65;
      label = 3; break;
    case 3: 
      var $67=$t;
      var $68=(($67+16)|0);
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|0)!=0;
      if ($71) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $73=$t;
      var $74=(($73+16)|0);
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $83 = $76;label = 6; break;
    case 5: 
      var $78=$t;
      var $79=(($78+16)|0);
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $83 = $81;label = 6; break;
    case 6: 
      var $83;
      $t=$83;
      var $84=(($83)|0)!=0;
      if ($84) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $86=$t;
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 & -8;
      var $90=$2;
      var $91=((($89)-($90))|0);
      $trem=$91;
      var $92=$trem;
      var $93=$rsize;
      var $94=(($92)>>>0) < (($93)>>>0);
      if ($94) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $96=$trem;
      $rsize=$96;
      var $97=$t;
      $v=$97;
      label = 9; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $100=$v;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>0) >= (($104)>>>0);
      var $106=(($105)&1);
      var $107=($106);
      var $108=(($107)|0)!=0;
      if ($108) { label = 11; break; } else { label = 70; break; }
    case 11: 
      var $110=$v;
      var $111=$110;
      var $112=$2;
      var $113=(($111+$112)|0);
      var $114=$113;
      $r=$114;
      var $115=$v;
      var $116=$115;
      var $117=$r;
      var $118=$117;
      var $119=(($116)>>>0) < (($118)>>>0);
      var $120=(($119)&1);
      var $121=($120);
      var $122=(($121)|0)!=0;
      if ($122) { label = 12; break; } else { label = 69; break; }
    case 12: 
      var $124=$v;
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      $XP=$126;
      var $127=$v;
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$v;
      var $131=(($129)|0)!=(($130)|0);
      if ($131) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $133=$v;
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      $F=$135;
      var $136=$v;
      var $137=(($136+12)|0);
      var $138=HEAP32[(($137)>>2)];
      $R=$138;
      var $139=$F;
      var $140=$139;
      var $141=$1;
      var $142=(($141+16)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($140)>>>0) >= (($143)>>>0);
      var $145=(($144)&1);
      var $146=($145);
      var $147=(($146)|0)!=0;
      if ($147) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $149=$R;
      var $150=$F;
      var $151=(($150+12)|0);
      HEAP32[(($151)>>2)]=$149;
      var $152=$F;
      var $153=$R;
      var $154=(($153+8)|0);
      HEAP32[(($154)>>2)]=$152;
      label = 16; break;
    case 15: 
      _abort();
      throw "Reached an unreachable!"
    case 16: 
      label = 29; break;
    case 17: 
      var $158=$v;
      var $159=(($158+16)|0);
      var $160=(($159+4)|0);
      $RP=$160;
      var $161=HEAP32[(($160)>>2)];
      $R=$161;
      var $162=(($161)|0)!=0;
      if ($162) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $164=$v;
      var $165=(($164+16)|0);
      var $166=(($165)|0);
      $RP=$166;
      var $167=HEAP32[(($166)>>2)];
      $R=$167;
      var $168=(($167)|0)!=0;
      if ($168) { label = 19; break; } else { label = 28; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $171=$R;
      var $172=(($171+16)|0);
      var $173=(($172+4)|0);
      $CP=$173;
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174)|0)!=0;
      if ($175) { var $183 = 1;label = 22; break; } else { label = 21; break; }
    case 21: 
      var $177=$R;
      var $178=(($177+16)|0);
      var $179=(($178)|0);
      $CP=$179;
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180)|0)!=0;
      var $183 = $181;label = 22; break;
    case 22: 
      var $183;
      if ($183) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $185=$CP;
      $RP=$185;
      var $186=HEAP32[(($185)>>2)];
      $R=$186;
      label = 20; break;
    case 24: 
      var $188=$RP;
      var $189=$188;
      var $190=$1;
      var $191=(($190+16)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($189)>>>0) >= (($192)>>>0);
      var $194=(($193)&1);
      var $195=($194);
      var $196=(($195)|0)!=0;
      if ($196) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $198=$RP;
      HEAP32[(($198)>>2)]=0;
      label = 27; break;
    case 26: 
      _abort();
      throw "Reached an unreachable!"
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $203=$XP;
      var $204=(($203)|0)!=0;
      if ($204) { label = 30; break; } else { label = 57; break; }
    case 30: 
      var $206=$v;
      var $207=(($206+28)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$1;
      var $210=(($209+304)|0);
      var $211=(($210+($208<<2))|0);
      $H=$211;
      var $212=$v;
      var $213=$H;
      var $214=HEAP32[(($213)>>2)];
      var $215=(($212)|0)==(($214)|0);
      if ($215) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $217=$R;
      var $218=$H;
      HEAP32[(($218)>>2)]=$217;
      var $219=(($217)|0)==0;
      if ($219) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $221=$v;
      var $222=(($221+28)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=1 << $223;
      var $225=$224 ^ -1;
      var $226=$1;
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=$228 & $225;
      HEAP32[(($227)>>2)]=$229;
      label = 33; break;
    case 33: 
      label = 41; break;
    case 34: 
      var $232=$XP;
      var $233=$232;
      var $234=$1;
      var $235=(($234+16)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($233)>>>0) >= (($236)>>>0);
      var $238=(($237)&1);
      var $239=($238);
      var $240=(($239)|0)!=0;
      if ($240) { label = 35; break; } else { label = 39; break; }
    case 35: 
      var $242=$XP;
      var $243=(($242+16)|0);
      var $244=(($243)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$v;
      var $247=(($245)|0)==(($246)|0);
      if ($247) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $249=$R;
      var $250=$XP;
      var $251=(($250+16)|0);
      var $252=(($251)|0);
      HEAP32[(($252)>>2)]=$249;
      label = 38; break;
    case 37: 
      var $254=$R;
      var $255=$XP;
      var $256=(($255+16)|0);
      var $257=(($256+4)|0);
      HEAP32[(($257)>>2)]=$254;
      label = 38; break;
    case 38: 
      label = 40; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 41; break;
    case 41: 
      var $262=$R;
      var $263=(($262)|0)!=0;
      if ($263) { label = 42; break; } else { label = 56; break; }
    case 42: 
      var $265=$R;
      var $266=$265;
      var $267=$1;
      var $268=(($267+16)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($266)>>>0) >= (($269)>>>0);
      var $271=(($270)&1);
      var $272=($271);
      var $273=(($272)|0)!=0;
      if ($273) { label = 43; break; } else { label = 54; break; }
    case 43: 
      var $275=$XP;
      var $276=$R;
      var $277=(($276+24)|0);
      HEAP32[(($277)>>2)]=$275;
      var $278=$v;
      var $279=(($278+16)|0);
      var $280=(($279)|0);
      var $281=HEAP32[(($280)>>2)];
      $C0=$281;
      var $282=(($281)|0)!=0;
      if ($282) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $284=$C0;
      var $285=$284;
      var $286=$1;
      var $287=(($286+16)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=(($285)>>>0) >= (($288)>>>0);
      var $290=(($289)&1);
      var $291=($290);
      var $292=(($291)|0)!=0;
      if ($292) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $294=$C0;
      var $295=$R;
      var $296=(($295+16)|0);
      var $297=(($296)|0);
      HEAP32[(($297)>>2)]=$294;
      var $298=$R;
      var $299=$C0;
      var $300=(($299+24)|0);
      HEAP32[(($300)>>2)]=$298;
      label = 47; break;
    case 46: 
      _abort();
      throw "Reached an unreachable!"
    case 47: 
      label = 48; break;
    case 48: 
      var $304=$v;
      var $305=(($304+16)|0);
      var $306=(($305+4)|0);
      var $307=HEAP32[(($306)>>2)];
      $C1=$307;
      var $308=(($307)|0)!=0;
      if ($308) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $310=$C1;
      var $311=$310;
      var $312=$1;
      var $313=(($312+16)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=(($311)>>>0) >= (($314)>>>0);
      var $316=(($315)&1);
      var $317=($316);
      var $318=(($317)|0)!=0;
      if ($318) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $320=$C1;
      var $321=$R;
      var $322=(($321+16)|0);
      var $323=(($322+4)|0);
      HEAP32[(($323)>>2)]=$320;
      var $324=$R;
      var $325=$C1;
      var $326=(($325+24)|0);
      HEAP32[(($326)>>2)]=$324;
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      label = 55; break;
    case 54: 
      _abort();
      throw "Reached an unreachable!"
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $334=$rsize;
      var $335=(($334)>>>0) < 16;
      if ($335) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $337=$rsize;
      var $338=$2;
      var $339=((($337)+($338))|0);
      var $340=$339 | 1;
      var $341=$340 | 2;
      var $342=$v;
      var $343=(($342+4)|0);
      HEAP32[(($343)>>2)]=$341;
      var $344=$v;
      var $345=$344;
      var $346=$rsize;
      var $347=$2;
      var $348=((($346)+($347))|0);
      var $349=(($345+$348)|0);
      var $350=$349;
      var $351=(($350+4)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=$352 | 1;
      HEAP32[(($351)>>2)]=$353;
      label = 68; break;
    case 59: 
      var $355=$2;
      var $356=$355 | 1;
      var $357=$356 | 2;
      var $358=$v;
      var $359=(($358+4)|0);
      HEAP32[(($359)>>2)]=$357;
      var $360=$rsize;
      var $361=$360 | 1;
      var $362=$r;
      var $363=(($362+4)|0);
      HEAP32[(($363)>>2)]=$361;
      var $364=$rsize;
      var $365=$r;
      var $366=$365;
      var $367=$rsize;
      var $368=(($366+$367)|0);
      var $369=$368;
      var $370=(($369)|0);
      HEAP32[(($370)>>2)]=$364;
      var $371=$1;
      var $372=(($371+8)|0);
      var $373=HEAP32[(($372)>>2)];
      $DVS=$373;
      var $374=$DVS;
      var $375=(($374)|0)!=0;
      if ($375) { label = 60; break; } else { label = 67; break; }
    case 60: 
      var $377=$1;
      var $378=(($377+20)|0);
      var $379=HEAP32[(($378)>>2)];
      $DV=$379;
      var $380=$DVS;
      var $381=$380 >>> 3;
      $I=$381;
      var $382=$I;
      var $383=$382 << 1;
      var $384=$1;
      var $385=(($384+40)|0);
      var $386=(($385+($383<<2))|0);
      var $387=$386;
      var $388=$387;
      $B=$388;
      var $389=$B;
      $F1=$389;
      var $390=$1;
      var $391=(($390)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=$I;
      var $394=1 << $393;
      var $395=$392 & $394;
      var $396=(($395)|0)!=0;
      if ($396) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $398=$I;
      var $399=1 << $398;
      var $400=$1;
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$402 | $399;
      HEAP32[(($401)>>2)]=$403;
      label = 66; break;
    case 62: 
      var $405=$B;
      var $406=(($405+8)|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=$407;
      var $409=$1;
      var $410=(($409+16)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=(($408)>>>0) >= (($411)>>>0);
      var $413=(($412)&1);
      var $414=($413);
      var $415=(($414)|0)!=0;
      if ($415) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $417=$B;
      var $418=(($417+8)|0);
      var $419=HEAP32[(($418)>>2)];
      $F1=$419;
      label = 65; break;
    case 64: 
      _abort();
      throw "Reached an unreachable!"
    case 65: 
      label = 66; break;
    case 66: 
      var $423=$DV;
      var $424=$B;
      var $425=(($424+8)|0);
      HEAP32[(($425)>>2)]=$423;
      var $426=$DV;
      var $427=$F1;
      var $428=(($427+12)|0);
      HEAP32[(($428)>>2)]=$426;
      var $429=$F1;
      var $430=$DV;
      var $431=(($430+8)|0);
      HEAP32[(($431)>>2)]=$429;
      var $432=$B;
      var $433=$DV;
      var $434=(($433+12)|0);
      HEAP32[(($434)>>2)]=$432;
      label = 67; break;
    case 67: 
      var $436=$rsize;
      var $437=$1;
      var $438=(($437+8)|0);
      HEAP32[(($438)>>2)]=$436;
      var $439=$r;
      var $440=$1;
      var $441=(($440+20)|0);
      HEAP32[(($441)>>2)]=$439;
      label = 68; break;
    case 68: 
      var $443=$v;
      var $444=$443;
      var $445=(($444+8)|0);

      return $445;
    case 69: 
      label = 70; break;
    case 70: 
      _abort();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }

}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y1;
      var $K2;
      var $N3;
      var $trem4;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F5;
      var $TP;
      var $H6;
      var $I7;
      var $X8;
      var $Y9;
      var $N10;
      var $K11;
      var $T;
      var $K12;
      var $C;
      var $F13;
      $2=$m;
      $3=$nb;
      $v=0;
      var $4=$3;
      var $5=(((-$4))|0);
      $rsize=$5;
      var $6=$3;
      var $7=$6 >>> 8;
      $X=$7;
      var $8=$X;
      var $9=(($8)|0)==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $idx=0;
      label = 8; break;
    case 4: 
      var $12=$X;
      var $13=(($12)>>>0) > 65535;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $idx=31;
      label = 7; break;
    case 6: 
      var $16=$X;
      $Y=$16;
      var $17=$Y;
      var $18=((($17)-(256))|0);
      var $19=$18 >>> 16;
      var $20=$19 & 8;
      $N=$20;
      var $21=$N;
      var $22=$Y;
      var $23=$22 << $21;
      $Y=$23;
      var $24=((($23)-(4096))|0);
      var $25=$24 >>> 16;
      var $26=$25 & 4;
      $K=$26;
      var $27=$K;
      var $28=$N;
      var $29=((($28)+($27))|0);
      $N=$29;
      var $30=$K;
      var $31=$Y;
      var $32=$31 << $30;
      $Y=$32;
      var $33=((($32)-(16384))|0);
      var $34=$33 >>> 16;
      var $35=$34 & 2;
      $K=$35;
      var $36=$N;
      var $37=((($36)+($35))|0);
      $N=$37;
      var $38=$N;
      var $39=(((14)-($38))|0);
      var $40=$K;
      var $41=$Y;
      var $42=$41 << $40;
      $Y=$42;
      var $43=$42 >>> 15;
      var $44=((($39)+($43))|0);
      $K=$44;
      var $45=$K;
      var $46=$45 << 1;
      var $47=$3;
      var $48=$K;
      var $49=((($48)+(7))|0);
      var $50=$47 >>> (($49)>>>0);
      var $51=$50 & 1;
      var $52=((($46)+($51))|0);
      $idx=$52;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $55=$idx;
      var $56=$2;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      var $60=(($59)|0)!=0;
      if ($60) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $62=$3;
      var $63=$idx;
      var $64=(($63)|0)==31;
      if ($64) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $73 = 0;label = 12; break;
    case 11: 
      var $67=$idx;
      var $68=$67 >>> 1;
      var $69=((($68)+(8))|0);
      var $70=((($69)-(2))|0);
      var $71=(((31)-($70))|0);
      var $73 = $71;label = 12; break;
    case 12: 
      var $73;
      var $74=$62 << $73;
      $sizebits=$74;
      $rst=0;
      label = 13; break;
    case 13: 
      var $76=$t;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 & -8;
      var $80=$3;
      var $81=((($79)-($80))|0);
      $trem=$81;
      var $82=$trem;
      var $83=$rsize;
      var $84=(($82)>>>0) < (($83)>>>0);
      if ($84) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $86=$t;
      $v=$86;
      var $87=$trem;
      $rsize=$87;
      var $88=(($87)|0)==0;
      if ($88) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 23; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $92=$t;
      var $93=(($92+16)|0);
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      $rt=$95;
      var $96=$sizebits;
      var $97=$96 >>> 31;
      var $98=$97 & 1;
      var $99=$t;
      var $100=(($99+16)|0);
      var $101=(($100+($98<<2))|0);
      var $102=HEAP32[(($101)>>2)];
      $t=$102;
      var $103=$rt;
      var $104=(($103)|0)!=0;
      if ($104) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $106=$rt;
      var $107=$t;
      var $108=(($106)|0)!=(($107)|0);
      if ($108) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $110=$rt;
      $rst=$110;
      label = 20; break;
    case 20: 
      var $112=$t;
      var $113=(($112)|0)==0;
      if ($113) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $115=$rst;
      $t=$115;
      label = 23; break;
    case 22: 
      var $117=$sizebits;
      var $118=$117 << 1;
      $sizebits=$118;
      label = 13; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $121=$t;
      var $122=(($121)|0)==0;
      if ($122) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $124=$v;
      var $125=(($124)|0)==0;
      if ($125) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $127=$idx;
      var $128=1 << $127;
      var $129=$128 << 1;
      var $130=$idx;
      var $131=1 << $130;
      var $132=$131 << 1;
      var $133=(((-$132))|0);
      var $134=$129 | $133;
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$134 & $137;
      $leftbits=$138;
      var $139=$leftbits;
      var $140=(($139)|0)!=0;
      if ($140) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $142=$leftbits;
      var $143=$leftbits;
      var $144=(((-$143))|0);
      var $145=$142 & $144;
      $leastbit=$145;
      var $146=$leastbit;
      var $147=((($146)-(1))|0);
      $Y1=$147;
      var $148=$Y1;
      var $149=$148 >>> 12;
      var $150=$149 & 16;
      $K2=$150;
      var $151=$K2;
      $N3=$151;
      var $152=$K2;
      var $153=$Y1;
      var $154=$153 >>> (($152)>>>0);
      $Y1=$154;
      var $155=$Y1;
      var $156=$155 >>> 5;
      var $157=$156 & 8;
      $K2=$157;
      var $158=$N3;
      var $159=((($158)+($157))|0);
      $N3=$159;
      var $160=$K2;
      var $161=$Y1;
      var $162=$161 >>> (($160)>>>0);
      $Y1=$162;
      var $163=$Y1;
      var $164=$163 >>> 2;
      var $165=$164 & 4;
      $K2=$165;
      var $166=$N3;
      var $167=((($166)+($165))|0);
      $N3=$167;
      var $168=$K2;
      var $169=$Y1;
      var $170=$169 >>> (($168)>>>0);
      $Y1=$170;
      var $171=$Y1;
      var $172=$171 >>> 1;
      var $173=$172 & 2;
      $K2=$173;
      var $174=$N3;
      var $175=((($174)+($173))|0);
      $N3=$175;
      var $176=$K2;
      var $177=$Y1;
      var $178=$177 >>> (($176)>>>0);
      $Y1=$178;
      var $179=$Y1;
      var $180=$179 >>> 1;
      var $181=$180 & 1;
      $K2=$181;
      var $182=$N3;
      var $183=((($182)+($181))|0);
      $N3=$183;
      var $184=$K2;
      var $185=$Y1;
      var $186=$185 >>> (($184)>>>0);
      $Y1=$186;
      var $187=$N3;
      var $188=$Y1;
      var $189=((($187)+($188))|0);
      $i=$189;
      var $190=$i;
      var $191=$2;
      var $192=(($191+304)|0);
      var $193=(($192+($190<<2))|0);
      var $194=HEAP32[(($193)>>2)];
      $t=$194;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $198=$t;
      var $199=(($198)|0)!=0;
      if ($199) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $201=$t;
      var $202=(($201+4)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & -8;
      var $205=$3;
      var $206=((($204)-($205))|0);
      $trem4=$206;
      var $207=$trem4;
      var $208=$rsize;
      var $209=(($207)>>>0) < (($208)>>>0);
      if ($209) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $211=$trem4;
      $rsize=$211;
      var $212=$t;
      $v=$212;
      label = 33; break;
    case 33: 
      var $214=$t;
      var $215=(($214+16)|0);
      var $216=(($215)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217)|0)!=0;
      if ($218) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $220=$t;
      var $221=(($220+16)|0);
      var $222=(($221)|0);
      var $223=HEAP32[(($222)>>2)];
      var $230 = $223;label = 36; break;
    case 35: 
      var $225=$t;
      var $226=(($225+16)|0);
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $230 = $228;label = 36; break;
    case 36: 
      var $230;
      $t=$230;
      label = 30; break;
    case 37: 
      var $232=$v;
      var $233=(($232)|0)!=0;
      if ($233) { label = 38; break; } else { label = 127; break; }
    case 38: 
      var $235=$rsize;
      var $236=$2;
      var $237=(($236+8)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$3;
      var $240=((($238)-($239))|0);
      var $241=(($235)>>>0) < (($240)>>>0);
      if ($241) { label = 39; break; } else { label = 127; break; }
    case 39: 
      var $243=$v;
      var $244=$243;
      var $245=$2;
      var $246=(($245+16)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($244)>>>0) >= (($247)>>>0);
      var $249=(($248)&1);
      var $250=($249);
      var $251=(($250)|0)!=0;
      if ($251) { label = 40; break; } else { label = 126; break; }
    case 40: 
      var $253=$v;
      var $254=$253;
      var $255=$3;
      var $256=(($254+$255)|0);
      var $257=$256;
      $r=$257;
      var $258=$v;
      var $259=$258;
      var $260=$r;
      var $261=$260;
      var $262=(($259)>>>0) < (($261)>>>0);
      var $263=(($262)&1);
      var $264=($263);
      var $265=(($264)|0)!=0;
      if ($265) { label = 41; break; } else { label = 125; break; }
    case 41: 
      var $267=$v;
      var $268=(($267+24)|0);
      var $269=HEAP32[(($268)>>2)];
      $XP=$269;
      var $270=$v;
      var $271=(($270+12)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$v;
      var $274=(($272)|0)!=(($273)|0);
      if ($274) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $276=$v;
      var $277=(($276+8)|0);
      var $278=HEAP32[(($277)>>2)];
      $F=$278;
      var $279=$v;
      var $280=(($279+12)|0);
      var $281=HEAP32[(($280)>>2)];
      $R=$281;
      var $282=$F;
      var $283=$282;
      var $284=$2;
      var $285=(($284+16)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=(($283)>>>0) >= (($286)>>>0);
      var $288=(($287)&1);
      var $289=($288);
      var $290=(($289)|0)!=0;
      if ($290) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $292=$R;
      var $293=$F;
      var $294=(($293+12)|0);
      HEAP32[(($294)>>2)]=$292;
      var $295=$F;
      var $296=$R;
      var $297=(($296+8)|0);
      HEAP32[(($297)>>2)]=$295;
      label = 45; break;
    case 44: 
      _abort();
      throw "Reached an unreachable!"
    case 45: 
      label = 58; break;
    case 46: 
      var $301=$v;
      var $302=(($301+16)|0);
      var $303=(($302+4)|0);
      $RP=$303;
      var $304=HEAP32[(($303)>>2)];
      $R=$304;
      var $305=(($304)|0)!=0;
      if ($305) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $307=$v;
      var $308=(($307+16)|0);
      var $309=(($308)|0);
      $RP=$309;
      var $310=HEAP32[(($309)>>2)];
      $R=$310;
      var $311=(($310)|0)!=0;
      if ($311) { label = 48; break; } else { label = 57; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $314=$R;
      var $315=(($314+16)|0);
      var $316=(($315+4)|0);
      $CP=$316;
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317)|0)!=0;
      if ($318) { var $326 = 1;label = 51; break; } else { label = 50; break; }
    case 50: 
      var $320=$R;
      var $321=(($320+16)|0);
      var $322=(($321)|0);
      $CP=$322;
      var $323=HEAP32[(($322)>>2)];
      var $324=(($323)|0)!=0;
      var $326 = $324;label = 51; break;
    case 51: 
      var $326;
      if ($326) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $328=$CP;
      $RP=$328;
      var $329=HEAP32[(($328)>>2)];
      $R=$329;
      label = 49; break;
    case 53: 
      var $331=$RP;
      var $332=$331;
      var $333=$2;
      var $334=(($333+16)|0);
      var $335=HEAP32[(($334)>>2)];
      var $336=(($332)>>>0) >= (($335)>>>0);
      var $337=(($336)&1);
      var $338=($337);
      var $339=(($338)|0)!=0;
      if ($339) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $341=$RP;
      HEAP32[(($341)>>2)]=0;
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $346=$XP;
      var $347=(($346)|0)!=0;
      if ($347) { label = 59; break; } else { label = 86; break; }
    case 59: 
      var $349=$v;
      var $350=(($349+28)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=$2;
      var $353=(($352+304)|0);
      var $354=(($353+($351<<2))|0);
      $H=$354;
      var $355=$v;
      var $356=$H;
      var $357=HEAP32[(($356)>>2)];
      var $358=(($355)|0)==(($357)|0);
      if ($358) { label = 60; break; } else { label = 63; break; }
    case 60: 
      var $360=$R;
      var $361=$H;
      HEAP32[(($361)>>2)]=$360;
      var $362=(($360)|0)==0;
      if ($362) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $364=$v;
      var $365=(($364+28)|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=1 << $366;
      var $368=$367 ^ -1;
      var $369=$2;
      var $370=(($369+4)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$371 & $368;
      HEAP32[(($370)>>2)]=$372;
      label = 62; break;
    case 62: 
      label = 70; break;
    case 63: 
      var $375=$XP;
      var $376=$375;
      var $377=$2;
      var $378=(($377+16)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=(($376)>>>0) >= (($379)>>>0);
      var $381=(($380)&1);
      var $382=($381);
      var $383=(($382)|0)!=0;
      if ($383) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $385=$XP;
      var $386=(($385+16)|0);
      var $387=(($386)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=$v;
      var $390=(($388)|0)==(($389)|0);
      if ($390) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $392=$R;
      var $393=$XP;
      var $394=(($393+16)|0);
      var $395=(($394)|0);
      HEAP32[(($395)>>2)]=$392;
      label = 67; break;
    case 66: 
      var $397=$R;
      var $398=$XP;
      var $399=(($398+16)|0);
      var $400=(($399+4)|0);
      HEAP32[(($400)>>2)]=$397;
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      var $405=$R;
      var $406=(($405)|0)!=0;
      if ($406) { label = 71; break; } else { label = 85; break; }
    case 71: 
      var $408=$R;
      var $409=$408;
      var $410=$2;
      var $411=(($410+16)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=(($409)>>>0) >= (($412)>>>0);
      var $414=(($413)&1);
      var $415=($414);
      var $416=(($415)|0)!=0;
      if ($416) { label = 72; break; } else { label = 83; break; }
    case 72: 
      var $418=$XP;
      var $419=$R;
      var $420=(($419+24)|0);
      HEAP32[(($420)>>2)]=$418;
      var $421=$v;
      var $422=(($421+16)|0);
      var $423=(($422)|0);
      var $424=HEAP32[(($423)>>2)];
      $C0=$424;
      var $425=(($424)|0)!=0;
      if ($425) { label = 73; break; } else { label = 77; break; }
    case 73: 
      var $427=$C0;
      var $428=$427;
      var $429=$2;
      var $430=(($429+16)|0);
      var $431=HEAP32[(($430)>>2)];
      var $432=(($428)>>>0) >= (($431)>>>0);
      var $433=(($432)&1);
      var $434=($433);
      var $435=(($434)|0)!=0;
      if ($435) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $437=$C0;
      var $438=$R;
      var $439=(($438+16)|0);
      var $440=(($439)|0);
      HEAP32[(($440)>>2)]=$437;
      var $441=$R;
      var $442=$C0;
      var $443=(($442+24)|0);
      HEAP32[(($443)>>2)]=$441;
      label = 76; break;
    case 75: 
      _abort();
      throw "Reached an unreachable!"
    case 76: 
      label = 77; break;
    case 77: 
      var $447=$v;
      var $448=(($447+16)|0);
      var $449=(($448+4)|0);
      var $450=HEAP32[(($449)>>2)];
      $C1=$450;
      var $451=(($450)|0)!=0;
      if ($451) { label = 78; break; } else { label = 82; break; }
    case 78: 
      var $453=$C1;
      var $454=$453;
      var $455=$2;
      var $456=(($455+16)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($454)>>>0) >= (($457)>>>0);
      var $459=(($458)&1);
      var $460=($459);
      var $461=(($460)|0)!=0;
      if ($461) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $463=$C1;
      var $464=$R;
      var $465=(($464+16)|0);
      var $466=(($465+4)|0);
      HEAP32[(($466)>>2)]=$463;
      var $467=$R;
      var $468=$C1;
      var $469=(($468+24)|0);
      HEAP32[(($469)>>2)]=$467;
      label = 81; break;
    case 80: 
      _abort();
      throw "Reached an unreachable!"
    case 81: 
      label = 82; break;
    case 82: 
      label = 84; break;
    case 83: 
      _abort();
      throw "Reached an unreachable!"
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $477=$rsize;
      var $478=(($477)>>>0) < 16;
      if ($478) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $480=$rsize;
      var $481=$3;
      var $482=((($480)+($481))|0);
      var $483=$482 | 1;
      var $484=$483 | 2;
      var $485=$v;
      var $486=(($485+4)|0);
      HEAP32[(($486)>>2)]=$484;
      var $487=$v;
      var $488=$487;
      var $489=$rsize;
      var $490=$3;
      var $491=((($489)+($490))|0);
      var $492=(($488+$491)|0);
      var $493=$492;
      var $494=(($493+4)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=$495 | 1;
      HEAP32[(($494)>>2)]=$496;
      label = 124; break;
    case 88: 
      var $498=$3;
      var $499=$498 | 1;
      var $500=$499 | 2;
      var $501=$v;
      var $502=(($501+4)|0);
      HEAP32[(($502)>>2)]=$500;
      var $503=$rsize;
      var $504=$503 | 1;
      var $505=$r;
      var $506=(($505+4)|0);
      HEAP32[(($506)>>2)]=$504;
      var $507=$rsize;
      var $508=$r;
      var $509=$508;
      var $510=$rsize;
      var $511=(($509+$510)|0);
      var $512=$511;
      var $513=(($512)|0);
      HEAP32[(($513)>>2)]=$507;
      var $514=$rsize;
      var $515=$514 >>> 3;
      var $516=(($515)>>>0) < 32;
      if ($516) { label = 89; break; } else { label = 96; break; }
    case 89: 
      var $518=$rsize;
      var $519=$518 >>> 3;
      $I=$519;
      var $520=$I;
      var $521=$520 << 1;
      var $522=$2;
      var $523=(($522+40)|0);
      var $524=(($523+($521<<2))|0);
      var $525=$524;
      var $526=$525;
      $B=$526;
      var $527=$B;
      $F5=$527;
      var $528=$2;
      var $529=(($528)|0);
      var $530=HEAP32[(($529)>>2)];
      var $531=$I;
      var $532=1 << $531;
      var $533=$530 & $532;
      var $534=(($533)|0)!=0;
      if ($534) { label = 91; break; } else { label = 90; break; }
    case 90: 
      var $536=$I;
      var $537=1 << $536;
      var $538=$2;
      var $539=(($538)|0);
      var $540=HEAP32[(($539)>>2)];
      var $541=$540 | $537;
      HEAP32[(($539)>>2)]=$541;
      label = 95; break;
    case 91: 
      var $543=$B;
      var $544=(($543+8)|0);
      var $545=HEAP32[(($544)>>2)];
      var $546=$545;
      var $547=$2;
      var $548=(($547+16)|0);
      var $549=HEAP32[(($548)>>2)];
      var $550=(($546)>>>0) >= (($549)>>>0);
      var $551=(($550)&1);
      var $552=($551);
      var $553=(($552)|0)!=0;
      if ($553) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $555=$B;
      var $556=(($555+8)|0);
      var $557=HEAP32[(($556)>>2)];
      $F5=$557;
      label = 94; break;
    case 93: 
      _abort();
      throw "Reached an unreachable!"
    case 94: 
      label = 95; break;
    case 95: 
      var $561=$r;
      var $562=$B;
      var $563=(($562+8)|0);
      HEAP32[(($563)>>2)]=$561;
      var $564=$r;
      var $565=$F5;
      var $566=(($565+12)|0);
      HEAP32[(($566)>>2)]=$564;
      var $567=$F5;
      var $568=$r;
      var $569=(($568+8)|0);
      HEAP32[(($569)>>2)]=$567;
      var $570=$B;
      var $571=$r;
      var $572=(($571+12)|0);
      HEAP32[(($572)>>2)]=$570;
      label = 123; break;
    case 96: 
      var $574=$r;
      var $575=$574;
      $TP=$575;
      var $576=$rsize;
      var $577=$576 >>> 8;
      $X8=$577;
      var $578=$X8;
      var $579=(($578)|0)==0;
      if ($579) { label = 97; break; } else { label = 98; break; }
    case 97: 
      $I7=0;
      label = 102; break;
    case 98: 
      var $582=$X8;
      var $583=(($582)>>>0) > 65535;
      if ($583) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $I7=31;
      label = 101; break;
    case 100: 
      var $586=$X8;
      $Y9=$586;
      var $587=$Y9;
      var $588=((($587)-(256))|0);
      var $589=$588 >>> 16;
      var $590=$589 & 8;
      $N10=$590;
      var $591=$N10;
      var $592=$Y9;
      var $593=$592 << $591;
      $Y9=$593;
      var $594=((($593)-(4096))|0);
      var $595=$594 >>> 16;
      var $596=$595 & 4;
      $K11=$596;
      var $597=$K11;
      var $598=$N10;
      var $599=((($598)+($597))|0);
      $N10=$599;
      var $600=$K11;
      var $601=$Y9;
      var $602=$601 << $600;
      $Y9=$602;
      var $603=((($602)-(16384))|0);
      var $604=$603 >>> 16;
      var $605=$604 & 2;
      $K11=$605;
      var $606=$N10;
      var $607=((($606)+($605))|0);
      $N10=$607;
      var $608=$N10;
      var $609=(((14)-($608))|0);
      var $610=$K11;
      var $611=$Y9;
      var $612=$611 << $610;
      $Y9=$612;
      var $613=$612 >>> 15;
      var $614=((($609)+($613))|0);
      $K11=$614;
      var $615=$K11;
      var $616=$615 << 1;
      var $617=$rsize;
      var $618=$K11;
      var $619=((($618)+(7))|0);
      var $620=$617 >>> (($619)>>>0);
      var $621=$620 & 1;
      var $622=((($616)+($621))|0);
      $I7=$622;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $625=$I7;
      var $626=$2;
      var $627=(($626+304)|0);
      var $628=(($627+($625<<2))|0);
      $H6=$628;
      var $629=$I7;
      var $630=$TP;
      var $631=(($630+28)|0);
      HEAP32[(($631)>>2)]=$629;
      var $632=$TP;
      var $633=(($632+16)|0);
      var $634=(($633+4)|0);
      HEAP32[(($634)>>2)]=0;
      var $635=$TP;
      var $636=(($635+16)|0);
      var $637=(($636)|0);
      HEAP32[(($637)>>2)]=0;
      var $638=$2;
      var $639=(($638+4)|0);
      var $640=HEAP32[(($639)>>2)];
      var $641=$I7;
      var $642=1 << $641;
      var $643=$640 & $642;
      var $644=(($643)|0)!=0;
      if ($644) { label = 104; break; } else { label = 103; break; }
    case 103: 
      var $646=$I7;
      var $647=1 << $646;
      var $648=$2;
      var $649=(($648+4)|0);
      var $650=HEAP32[(($649)>>2)];
      var $651=$650 | $647;
      HEAP32[(($649)>>2)]=$651;
      var $652=$TP;
      var $653=$H6;
      HEAP32[(($653)>>2)]=$652;
      var $654=$H6;
      var $655=$654;
      var $656=$TP;
      var $657=(($656+24)|0);
      HEAP32[(($657)>>2)]=$655;
      var $658=$TP;
      var $659=$TP;
      var $660=(($659+12)|0);
      HEAP32[(($660)>>2)]=$658;
      var $661=$TP;
      var $662=(($661+8)|0);
      HEAP32[(($662)>>2)]=$658;
      label = 122; break;
    case 104: 
      var $664=$H6;
      var $665=HEAP32[(($664)>>2)];
      $T=$665;
      var $666=$rsize;
      var $667=$I7;
      var $668=(($667)|0)==31;
      if ($668) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $677 = 0;label = 107; break;
    case 106: 
      var $671=$I7;
      var $672=$671 >>> 1;
      var $673=((($672)+(8))|0);
      var $674=((($673)-(2))|0);
      var $675=(((31)-($674))|0);
      var $677 = $675;label = 107; break;
    case 107: 
      var $677;
      var $678=$666 << $677;
      $K12=$678;
      label = 108; break;
    case 108: 
      var $680=$T;
      var $681=(($680+4)|0);
      var $682=HEAP32[(($681)>>2)];
      var $683=$682 & -8;
      var $684=$rsize;
      var $685=(($683)|0)!=(($684)|0);
      if ($685) { label = 109; break; } else { label = 115; break; }
    case 109: 
      var $687=$K12;
      var $688=$687 >>> 31;
      var $689=$688 & 1;
      var $690=$T;
      var $691=(($690+16)|0);
      var $692=(($691+($689<<2))|0);
      $C=$692;
      var $693=$K12;
      var $694=$693 << 1;
      $K12=$694;
      var $695=$C;
      var $696=HEAP32[(($695)>>2)];
      var $697=(($696)|0)!=0;
      if ($697) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $699=$C;
      var $700=HEAP32[(($699)>>2)];
      $T=$700;
      label = 114; break;
    case 111: 
      var $702=$C;
      var $703=$702;
      var $704=$2;
      var $705=(($704+16)|0);
      var $706=HEAP32[(($705)>>2)];
      var $707=(($703)>>>0) >= (($706)>>>0);
      var $708=(($707)&1);
      var $709=($708);
      var $710=(($709)|0)!=0;
      if ($710) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $712=$TP;
      var $713=$C;
      HEAP32[(($713)>>2)]=$712;
      var $714=$T;
      var $715=$TP;
      var $716=(($715+24)|0);
      HEAP32[(($716)>>2)]=$714;
      var $717=$TP;
      var $718=$TP;
      var $719=(($718+12)|0);
      HEAP32[(($719)>>2)]=$717;
      var $720=$TP;
      var $721=(($720+8)|0);
      HEAP32[(($721)>>2)]=$717;
      label = 121; break;
    case 113: 
      _abort();
      throw "Reached an unreachable!"
    case 114: 
      label = 120; break;
    case 115: 
      var $725=$T;
      var $726=(($725+8)|0);
      var $727=HEAP32[(($726)>>2)];
      $F13=$727;
      var $728=$T;
      var $729=$728;
      var $730=$2;
      var $731=(($730+16)|0);
      var $732=HEAP32[(($731)>>2)];
      var $733=(($729)>>>0) >= (($732)>>>0);
      if ($733) { label = 116; break; } else { var $742 = 0;label = 117; break; }
    case 116: 
      var $735=$F13;
      var $736=$735;
      var $737=$2;
      var $738=(($737+16)|0);
      var $739=HEAP32[(($738)>>2)];
      var $740=(($736)>>>0) >= (($739)>>>0);
      var $742 = $740;label = 117; break;
    case 117: 
      var $742;
      var $743=(($742)&1);
      var $744=($743);
      var $745=(($744)|0)!=0;
      if ($745) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $747=$TP;
      var $748=$F13;
      var $749=(($748+12)|0);
      HEAP32[(($749)>>2)]=$747;
      var $750=$T;
      var $751=(($750+8)|0);
      HEAP32[(($751)>>2)]=$747;
      var $752=$F13;
      var $753=$TP;
      var $754=(($753+8)|0);
      HEAP32[(($754)>>2)]=$752;
      var $755=$T;
      var $756=$TP;
      var $757=(($756+12)|0);
      HEAP32[(($757)>>2)]=$755;
      var $758=$TP;
      var $759=(($758+24)|0);
      HEAP32[(($759)>>2)]=0;
      label = 121; break;
    case 119: 
      _abort();
      throw "Reached an unreachable!"
    case 120: 
      label = 108; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $766=$v;
      var $767=$766;
      var $768=(($767+8)|0);
      $1=$768;
      label = 128; break;
    case 125: 
      label = 126; break;
    case 126: 
      _abort();
      throw "Reached an unreachable!"
    case 127: 
      $1=0;
      label = 128; break;
    case 128: 
      var $773=$1;

      return $773;
    default: assert(0, "bad label: " + label);
  }

}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize1;
      var $br2;
      var $end3;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $2=$m;
      $3=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $4=HEAP32[((((5243080)|0))>>2)];
      var $5=(($4)|0)!=0;
      if ($5) { var $10 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=_init_mparams();
      var $8=(($7)|0)!=0;
      var $10 = $8;label = 4; break;
    case 4: 
      var $10;
      var $11=(($10)&1);
      var $12=$2;
      var $13=(($12+440)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 0;
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $18=$3;
      var $19=HEAP32[((((5243092)|0))>>2)];
      var $20=(($18)>>>0) >= (($19)>>>0);
      if ($20) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $22=$2;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)!=0;
      if ($25) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $27=$2;
      var $28=$3;
      var $29=_mmap_alloc($27, $28);
      $mem=$29;
      var $30=$mem;
      var $31=(($30)|0)!=0;
      if ($31) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $33=$mem;
      $1=$33;
      label = 93; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $36=$2;
      var $37=(($36+440)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38 & 4;
      var $40=(($39)|0)!=0;
      if ($40) { label = 43; break; } else { label = 11; break; }
    case 11: 
      $br=-1;
      var $42=$2;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|0)==0;
      if ($45) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $55 = 0;label = 14; break;
    case 13: 
      var $48=$2;
      var $49=$2;
      var $50=(($49+24)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=_segment_holding($48, $52);
      var $55 = $53;label = 14; break;
    case 14: 
      var $55;
      $ss=$55;
      $asize=0;
      var $56=$ss;
      var $57=(($56)|0)==0;
      if ($57) { label = 15; break; } else { label = 23; break; }
    case 15: 
      var $59=_sbrk(0);
      $base=$59;
      var $60=$base;
      var $61=(($60)|0)!=-1;
      if ($61) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $63=$3;
      var $64=((($63)+(48))|0);
      var $65=HEAP32[((((5243088)|0))>>2)];
      var $66=((($65)-(1))|0);
      var $67=((($64)+($66))|0);
      var $68=HEAP32[((((5243088)|0))>>2)];
      var $69=((($68)-(1))|0);
      var $70=$69 ^ -1;
      var $71=$67 & $70;
      $asize=$71;
      var $72=$base;
      var $73=$72;
      var $74=HEAP32[((((5243084)|0))>>2)];
      var $75=((($74)-(1))|0);
      var $76=$73 & $75;
      var $77=(($76)|0)==0;
      if ($77) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $79=$base;
      var $80=$79;
      var $81=HEAP32[((((5243084)|0))>>2)];
      var $82=((($81)-(1))|0);
      var $83=((($80)+($82))|0);
      var $84=HEAP32[((((5243084)|0))>>2)];
      var $85=((($84)-(1))|0);
      var $86=$85 ^ -1;
      var $87=$83 & $86;
      var $88=$base;
      var $89=$88;
      var $90=((($87)-($89))|0);
      var $91=$asize;
      var $92=((($91)+($90))|0);
      $asize=$92;
      label = 18; break;
    case 18: 
      var $94=$asize;
      var $95=(($94)>>>0) < 2147483647;
      if ($95) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $97=$asize;
      var $98=_sbrk($97);
      $br=$98;
      var $99=$base;
      var $100=(($98)|0)==(($99)|0);
      if ($100) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $102=$base;
      $tbase=$102;
      var $103=$asize;
      $tsize=$103;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 27; break;
    case 23: 
      var $107=$3;
      var $108=$2;
      var $109=(($108+12)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($107)-($110))|0);
      var $112=((($111)+(48))|0);
      var $113=HEAP32[((((5243088)|0))>>2)];
      var $114=((($113)-(1))|0);
      var $115=((($112)+($114))|0);
      var $116=HEAP32[((((5243088)|0))>>2)];
      var $117=((($116)-(1))|0);
      var $118=$117 ^ -1;
      var $119=$115 & $118;
      $asize=$119;
      var $120=$asize;
      var $121=(($120)>>>0) < 2147483647;
      if ($121) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $123=$asize;
      var $124=_sbrk($123);
      $br=$124;
      var $125=$ss;
      var $126=(($125)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$ss;
      var $129=(($128+4)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($127+$130)|0);
      var $132=(($124)|0)==(($131)|0);
      if ($132) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $134=$br;
      $tbase=$134;
      var $135=$asize;
      $tsize=$135;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $138=$tbase;
      var $139=(($138)|0)==-1;
      if ($139) { label = 28; break; } else { label = 42; break; }
    case 28: 
      var $141=$br;
      var $142=(($141)|0)!=-1;
      if ($142) { label = 29; break; } else { label = 38; break; }
    case 29: 
      var $144=$asize;
      var $145=(($144)>>>0) < 2147483647;
      if ($145) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $147=$asize;
      var $148=$3;
      var $149=((($148)+(48))|0);
      var $150=(($147)>>>0) < (($149)>>>0);
      if ($150) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $152=$3;
      var $153=((($152)+(48))|0);
      var $154=$asize;
      var $155=((($153)-($154))|0);
      var $156=HEAP32[((((5243088)|0))>>2)];
      var $157=((($156)-(1))|0);
      var $158=((($155)+($157))|0);
      var $159=HEAP32[((((5243088)|0))>>2)];
      var $160=((($159)-(1))|0);
      var $161=$160 ^ -1;
      var $162=$158 & $161;
      $esize=$162;
      var $163=$esize;
      var $164=(($163)>>>0) < 2147483647;
      if ($164) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $166=$esize;
      var $167=_sbrk($166);
      $end=$167;
      var $168=$end;
      var $169=(($168)|0)!=-1;
      if ($169) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $171=$esize;
      var $172=$asize;
      var $173=((($172)+($171))|0);
      $asize=$173;
      label = 35; break;
    case 34: 
      var $175=$asize;
      var $176=(((-$175))|0);
      var $177=_sbrk($176);
      $br=-1;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $182=$br;
      var $183=(($182)|0)!=-1;
      if ($183) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $185=$br;
      $tbase=$185;
      var $186=$asize;
      $tsize=$186;
      label = 41; break;
    case 40: 
      var $188=$2;
      var $189=(($188+440)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$190 | 4;
      HEAP32[(($189)>>2)]=$191;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $195=$tbase;
      var $196=(($195)|0)==-1;
      if ($196) { label = 44; break; } else { label = 53; break; }
    case 44: 
      var $198=$3;
      var $199=((($198)+(48))|0);
      var $200=HEAP32[((((5243088)|0))>>2)];
      var $201=((($200)-(1))|0);
      var $202=((($199)+($201))|0);
      var $203=HEAP32[((((5243088)|0))>>2)];
      var $204=((($203)-(1))|0);
      var $205=$204 ^ -1;
      var $206=$202 & $205;
      $asize1=$206;
      var $207=$asize1;
      var $208=(($207)>>>0) < 2147483647;
      if ($208) { label = 45; break; } else { label = 52; break; }
    case 45: 
      $br2=-1;
      $end3=-1;
      var $210=$asize1;
      var $211=_sbrk($210);
      $br2=$211;
      var $212=_sbrk(0);
      $end3=$212;
      var $213=$br2;
      var $214=(($213)|0)!=-1;
      if ($214) { label = 46; break; } else { label = 51; break; }
    case 46: 
      var $216=$end3;
      var $217=(($216)|0)!=-1;
      if ($217) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $219=$br2;
      var $220=$end3;
      var $221=(($219)>>>0) < (($220)>>>0);
      if ($221) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $223=$end3;
      var $224=$br2;
      var $225=$223;
      var $226=$224;
      var $227=((($225)-($226))|0);
      $ssize=$227;
      var $228=$ssize;
      var $229=$3;
      var $230=((($229)+(40))|0);
      var $231=(($228)>>>0) > (($230)>>>0);
      if ($231) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $233=$br2;
      $tbase=$233;
      var $234=$ssize;
      $tsize=$234;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $239=$tbase;
      var $240=(($239)|0)!=-1;
      if ($240) { label = 54; break; } else { label = 92; break; }
    case 54: 
      var $242=$tsize;
      var $243=$2;
      var $244=(($243+432)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=((($245)+($242))|0);
      HEAP32[(($244)>>2)]=$246;
      var $247=$2;
      var $248=(($247+436)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($246)>>>0) > (($249)>>>0);
      if ($250) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $252=$2;
      var $253=(($252+432)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=$2;
      var $256=(($255+436)|0);
      HEAP32[(($256)>>2)]=$254;
      label = 56; break;
    case 56: 
      var $258=$2;
      var $259=(($258+24)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260)|0)!=0;
      if ($261) { label = 64; break; } else { label = 57; break; }
    case 57: 
      var $263=$2;
      var $264=(($263+16)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=(($265)|0)==0;
      if ($266) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $268=$tbase;
      var $269=$2;
      var $270=(($269+16)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=(($268)>>>0) < (($271)>>>0);
      if ($272) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $274=$tbase;
      var $275=$2;
      var $276=(($275+16)|0);
      HEAP32[(($276)>>2)]=$274;
      label = 60; break;
    case 60: 
      var $278=$tbase;
      var $279=$2;
      var $280=(($279+444)|0);
      var $281=(($280)|0);
      HEAP32[(($281)>>2)]=$278;
      var $282=$tsize;
      var $283=$2;
      var $284=(($283+444)|0);
      var $285=(($284+4)|0);
      HEAP32[(($285)>>2)]=$282;
      var $286=$mmap_flag;
      var $287=$2;
      var $288=(($287+444)|0);
      var $289=(($288+12)|0);
      HEAP32[(($289)>>2)]=$286;
      var $290=HEAP32[((((5243080)|0))>>2)];
      var $291=$2;
      var $292=(($291+36)|0);
      HEAP32[(($292)>>2)]=$290;
      var $293=$2;
      var $294=(($293+32)|0);
      HEAP32[(($294)>>2)]=-1;
      var $295=$2;
      _init_bins($295);
      var $296=$2;
      var $297=(($296)|0)==5243940;
      if ($297) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $299=$2;
      var $300=$tbase;
      var $301=$300;
      var $302=$tsize;
      var $303=((($302)-(40))|0);
      _init_top($299, $301, $303);
      label = 63; break;
    case 62: 
      var $305=$2;
      var $306=$305;
      var $307=((($306)-(8))|0);
      var $308=$307;
      var $309=$308;
      var $310=$2;
      var $311=$310;
      var $312=((($311)-(8))|0);
      var $313=$312;
      var $314=(($313+4)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=$315 & -8;
      var $317=(($309+$316)|0);
      var $318=$317;
      $mn=$318;
      var $319=$2;
      var $320=$mn;
      var $321=$tbase;
      var $322=$tsize;
      var $323=(($321+$322)|0);
      var $324=$mn;
      var $325=$324;
      var $326=$323;
      var $327=$325;
      var $328=((($326)-($327))|0);
      var $329=((($328)-(40))|0);
      _init_top($319, $320, $329);
      label = 63; break;
    case 63: 
      label = 89; break;
    case 64: 
      var $332=$2;
      var $333=(($332+444)|0);
      $sp=$333;
      label = 65; break;
    case 65: 
      var $335=$sp;
      var $336=(($335)|0)!=0;
      if ($336) { label = 66; break; } else { var $348 = 0;label = 67; break; }
    case 66: 
      var $338=$tbase;
      var $339=$sp;
      var $340=(($339)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$sp;
      var $343=(($342+4)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=(($341+$344)|0);
      var $346=(($338)|0)!=(($345)|0);
      var $348 = $346;label = 67; break;
    case 67: 
      var $348;
      if ($348) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $350=$sp;
      var $351=(($350+8)|0);
      var $352=HEAP32[(($351)>>2)];
      $sp=$352;
      label = 65; break;
    case 69: 
      var $354=$sp;
      var $355=(($354)|0)!=0;
      if ($355) { label = 70; break; } else { label = 75; break; }
    case 70: 
      var $357=$sp;
      var $358=(($357+12)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=$359 & 8;
      var $361=(($360)|0)!=0;
      if ($361) { label = 75; break; } else { label = 71; break; }
    case 71: 
      var $363=$sp;
      var $364=(($363+12)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=$365 & 0;
      var $367=$mmap_flag;
      var $368=(($366)|0)==(($367)|0);
      if ($368) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $370=$2;
      var $371=(($370+24)|0);
      var $372=HEAP32[(($371)>>2)];
      var $373=$372;
      var $374=$sp;
      var $375=(($374)|0);
      var $376=HEAP32[(($375)>>2)];
      var $377=(($373)>>>0) >= (($376)>>>0);
      if ($377) { label = 73; break; } else { label = 75; break; }
    case 73: 
      var $379=$2;
      var $380=(($379+24)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=$381;
      var $383=$sp;
      var $384=(($383)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=$sp;
      var $387=(($386+4)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=(($385+$388)|0);
      var $390=(($382)>>>0) < (($389)>>>0);
      if ($390) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $392=$tsize;
      var $393=$sp;
      var $394=(($393+4)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=((($395)+($392))|0);
      HEAP32[(($394)>>2)]=$396;
      var $397=$2;
      var $398=$2;
      var $399=(($398+24)|0);
      var $400=HEAP32[(($399)>>2)];
      var $401=$2;
      var $402=(($401+12)|0);
      var $403=HEAP32[(($402)>>2)];
      var $404=$tsize;
      var $405=((($403)+($404))|0);
      _init_top($397, $400, $405);
      label = 88; break;
    case 75: 
      var $407=$tbase;
      var $408=$2;
      var $409=(($408+16)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=(($407)>>>0) < (($410)>>>0);
      if ($411) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $413=$tbase;
      var $414=$2;
      var $415=(($414+16)|0);
      HEAP32[(($415)>>2)]=$413;
      label = 77; break;
    case 77: 
      var $417=$2;
      var $418=(($417+444)|0);
      $sp=$418;
      label = 78; break;
    case 78: 
      var $420=$sp;
      var $421=(($420)|0)!=0;
      if ($421) { label = 79; break; } else { var $431 = 0;label = 80; break; }
    case 79: 
      var $423=$sp;
      var $424=(($423)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=$tbase;
      var $427=$tsize;
      var $428=(($426+$427)|0);
      var $429=(($425)|0)!=(($428)|0);
      var $431 = $429;label = 80; break;
    case 80: 
      var $431;
      if ($431) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $433=$sp;
      var $434=(($433+8)|0);
      var $435=HEAP32[(($434)>>2)];
      $sp=$435;
      label = 78; break;
    case 82: 
      var $437=$sp;
      var $438=(($437)|0)!=0;
      if ($438) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $440=$sp;
      var $441=(($440+12)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=$442 & 8;
      var $444=(($443)|0)!=0;
      if ($444) { label = 86; break; } else { label = 84; break; }
    case 84: 
      var $446=$sp;
      var $447=(($446+12)|0);
      var $448=HEAP32[(($447)>>2)];
      var $449=$448 & 0;
      var $450=$mmap_flag;
      var $451=(($449)|0)==(($450)|0);
      if ($451) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $453=$sp;
      var $454=(($453)|0);
      var $455=HEAP32[(($454)>>2)];
      $oldbase=$455;
      var $456=$tbase;
      var $457=$sp;
      var $458=(($457)|0);
      HEAP32[(($458)>>2)]=$456;
      var $459=$tsize;
      var $460=$sp;
      var $461=(($460+4)|0);
      var $462=HEAP32[(($461)>>2)];
      var $463=((($462)+($459))|0);
      HEAP32[(($461)>>2)]=$463;
      var $464=$2;
      var $465=$tbase;
      var $466=$oldbase;
      var $467=$3;
      var $468=_prepend_alloc($464, $465, $466, $467);
      $1=$468;
      label = 93; break;
    case 86: 
      var $470=$2;
      var $471=$tbase;
      var $472=$tsize;
      var $473=$mmap_flag;
      _add_segment($470, $471, $472, $473);
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $477=$3;
      var $478=$2;
      var $479=(($478+12)|0);
      var $480=HEAP32[(($479)>>2)];
      var $481=(($477)>>>0) < (($480)>>>0);
      if ($481) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $483=$3;
      var $484=$2;
      var $485=(($484+12)|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=((($486)-($483))|0);
      HEAP32[(($485)>>2)]=$487;
      $rsize=$487;
      var $488=$2;
      var $489=(($488+24)|0);
      var $490=HEAP32[(($489)>>2)];
      $p=$490;
      var $491=$p;
      var $492=$491;
      var $493=$3;
      var $494=(($492+$493)|0);
      var $495=$494;
      var $496=$2;
      var $497=(($496+24)|0);
      HEAP32[(($497)>>2)]=$495;
      $r=$495;
      var $498=$rsize;
      var $499=$498 | 1;
      var $500=$r;
      var $501=(($500+4)|0);
      HEAP32[(($501)>>2)]=$499;
      var $502=$3;
      var $503=$502 | 1;
      var $504=$503 | 2;
      var $505=$p;
      var $506=(($505+4)|0);
      HEAP32[(($506)>>2)]=$504;
      var $507=$p;
      var $508=$507;
      var $509=(($508+8)|0);
      $1=$509;
      label = 93; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $512=___errno_location();
      HEAP32[(($512)>>2)]=12;
      $1=0;
      label = 93; break;
    case 93: 
      var $514=$1;

      return $514;
    default: assert(0, "bad label: " + label);
  }

}
_sys_alloc["X"]=1;

function _free($mem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $tp;
      var $H17;
      var $I18;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K19;
      var $C;
      var $F20;
      $1=$mem;
      var $2=$1;
      var $3=(($2)|0)!=0;
      if ($3) { label = 3; break; } else { label = 197; break; }
    case 3: 
      var $5=$1;
      var $6=((($5)-(8))|0);
      var $7=$6;
      $p=$7;
      var $8=$p;
      var $9=$8;
      var $10=HEAP32[((((5243956)|0))>>2)];
      var $11=(($9)>>>0) >= (($10)>>>0);
      if ($11) { label = 4; break; } else { var $19 = 0;label = 5; break; }
    case 4: 
      var $13=$p;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 3;
      var $17=(($16)|0)!=1;
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      var $20=(($19)&1);
      var $21=($20);
      var $22=(($21)|0)!=0;
      if ($22) { label = 6; break; } else { label = 194; break; }
    case 6: 
      var $24=$p;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & -8;
      $psize=$27;
      var $28=$p;
      var $29=$28;
      var $30=$psize;
      var $31=(($29+$30)|0);
      var $32=$31;
      $next=$32;
      var $33=$p;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 & 1;
      var $37=(($36)|0)!=0;
      if ($37) { label = 78; break; } else { label = 7; break; }
    case 7: 
      var $39=$p;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      $prevsize=$41;
      var $42=$p;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & 3;
      var $46=(($45)|0)==0;
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$prevsize;
      var $49=((($48)+(16))|0);
      var $50=$psize;
      var $51=((($50)+($49))|0);
      $psize=$51;
      label = 196; break;
    case 9: 
      var $53=$p;
      var $54=$53;
      var $55=$prevsize;
      var $56=(((-$55))|0);
      var $57=(($54+$56)|0);
      var $58=$57;
      $prev=$58;
      var $59=$prevsize;
      var $60=$psize;
      var $61=((($60)+($59))|0);
      $psize=$61;
      var $62=$prev;
      $p=$62;
      var $63=$prev;
      var $64=$63;
      var $65=HEAP32[((((5243956)|0))>>2)];
      var $66=(($64)>>>0) >= (($65)>>>0);
      var $67=(($66)&1);
      var $68=($67);
      var $69=(($68)|0)!=0;
      if ($69) { label = 10; break; } else { label = 75; break; }
    case 10: 
      var $71=$p;
      var $72=HEAP32[((((5243960)|0))>>2)];
      var $73=(($71)|0)!=(($72)|0);
      if ($73) { label = 11; break; } else { label = 71; break; }
    case 11: 
      var $75=$prevsize;
      var $76=$75 >>> 3;
      var $77=(($76)>>>0) < 32;
      if ($77) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $79=$p;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      $F=$81;
      var $82=$p;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      $B=$84;
      var $85=$prevsize;
      var $86=$85 >>> 3;
      $I=$86;
      var $87=$F;
      var $88=$B;
      var $89=(($87)|0)==(($88)|0);
      if ($89) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $91=$I;
      var $92=1 << $91;
      var $93=$92 ^ -1;
      var $94=HEAP32[((((5243940)|0))>>2)];
      var $95=$94 & $93;
      HEAP32[((((5243940)|0))>>2)]=$95;
      label = 23; break;
    case 14: 
      var $97=$F;
      var $98=$I;
      var $99=$98 << 1;
      var $100=((((5243980)|0)+($99<<2))|0);
      var $101=$100;
      var $102=$101;
      var $103=(($97)|0)==(($102)|0);
      if ($103) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $105=$F;
      var $106=$105;
      var $107=HEAP32[((((5243956)|0))>>2)];
      var $108=(($106)>>>0) >= (($107)>>>0);
      if ($108) { label = 16; break; } else { var $125 = 0;label = 19; break; }
    case 16: 
      var $110=$B;
      var $111=$I;
      var $112=$111 << 1;
      var $113=((((5243980)|0)+($112<<2))|0);
      var $114=$113;
      var $115=$114;
      var $116=(($110)|0)==(($115)|0);
      if ($116) { var $123 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      var $118=$B;
      var $119=$118;
      var $120=HEAP32[((((5243956)|0))>>2)];
      var $121=(($119)>>>0) >= (($120)>>>0);
      var $123 = $121;label = 18; break;
    case 18: 
      var $123;
      var $125 = $123;label = 19; break;
    case 19: 
      var $125;
      var $126=(($125)&1);
      var $127=($126);
      var $128=(($127)|0)!=0;
      if ($128) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $130=$B;
      var $131=$F;
      var $132=(($131+12)|0);
      HEAP32[(($132)>>2)]=$130;
      var $133=$F;
      var $134=$B;
      var $135=(($134+8)|0);
      HEAP32[(($135)>>2)]=$133;
      label = 22; break;
    case 21: 
      _abort();
      throw "Reached an unreachable!"
    case 22: 
      label = 23; break;
    case 23: 
      label = 70; break;
    case 24: 
      var $140=$p;
      var $141=$140;
      $TP=$141;
      var $142=$TP;
      var $143=(($142+24)|0);
      var $144=HEAP32[(($143)>>2)];
      $XP=$144;
      var $145=$TP;
      var $146=(($145+12)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$TP;
      var $149=(($147)|0)!=(($148)|0);
      if ($149) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $151=$TP;
      var $152=(($151+8)|0);
      var $153=HEAP32[(($152)>>2)];
      $F1=$153;
      var $154=$TP;
      var $155=(($154+12)|0);
      var $156=HEAP32[(($155)>>2)];
      $R=$156;
      var $157=$F1;
      var $158=$157;
      var $159=HEAP32[((((5243956)|0))>>2)];
      var $160=(($158)>>>0) >= (($159)>>>0);
      var $161=(($160)&1);
      var $162=($161);
      var $163=(($162)|0)!=0;
      if ($163) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $165=$R;
      var $166=$F1;
      var $167=(($166+12)|0);
      HEAP32[(($167)>>2)]=$165;
      var $168=$F1;
      var $169=$R;
      var $170=(($169+8)|0);
      HEAP32[(($170)>>2)]=$168;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 41; break;
    case 29: 
      var $174=$TP;
      var $175=(($174+16)|0);
      var $176=(($175+4)|0);
      $RP=$176;
      var $177=HEAP32[(($176)>>2)];
      $R=$177;
      var $178=(($177)|0)!=0;
      if ($178) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $180=$TP;
      var $181=(($180+16)|0);
      var $182=(($181)|0);
      $RP=$182;
      var $183=HEAP32[(($182)>>2)];
      $R=$183;
      var $184=(($183)|0)!=0;
      if ($184) { label = 31; break; } else { label = 40; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $187=$R;
      var $188=(($187+16)|0);
      var $189=(($188+4)|0);
      $CP=$189;
      var $190=HEAP32[(($189)>>2)];
      var $191=(($190)|0)!=0;
      if ($191) { var $199 = 1;label = 34; break; } else { label = 33; break; }
    case 33: 
      var $193=$R;
      var $194=(($193+16)|0);
      var $195=(($194)|0);
      $CP=$195;
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196)|0)!=0;
      var $199 = $197;label = 34; break;
    case 34: 
      var $199;
      if ($199) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $201=$CP;
      $RP=$201;
      var $202=HEAP32[(($201)>>2)];
      $R=$202;
      label = 32; break;
    case 36: 
      var $204=$RP;
      var $205=$204;
      var $206=HEAP32[((((5243956)|0))>>2)];
      var $207=(($205)>>>0) >= (($206)>>>0);
      var $208=(($207)&1);
      var $209=($208);
      var $210=(($209)|0)!=0;
      if ($210) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $212=$RP;
      HEAP32[(($212)>>2)]=0;
      label = 39; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!"
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $217=$XP;
      var $218=(($217)|0)!=0;
      if ($218) { label = 42; break; } else { label = 69; break; }
    case 42: 
      var $220=$TP;
      var $221=(($220+28)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=((((5244244)|0)+($222<<2))|0);
      $H=$223;
      var $224=$TP;
      var $225=$H;
      var $226=HEAP32[(($225)>>2)];
      var $227=(($224)|0)==(($226)|0);
      if ($227) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $229=$R;
      var $230=$H;
      HEAP32[(($230)>>2)]=$229;
      var $231=(($229)|0)==0;
      if ($231) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $233=$TP;
      var $234=(($233+28)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=1 << $235;
      var $237=$236 ^ -1;
      var $238=HEAP32[((((5243944)|0))>>2)];
      var $239=$238 & $237;
      HEAP32[((((5243944)|0))>>2)]=$239;
      label = 45; break;
    case 45: 
      label = 53; break;
    case 46: 
      var $242=$XP;
      var $243=$242;
      var $244=HEAP32[((((5243956)|0))>>2)];
      var $245=(($243)>>>0) >= (($244)>>>0);
      var $246=(($245)&1);
      var $247=($246);
      var $248=(($247)|0)!=0;
      if ($248) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $250=$XP;
      var $251=(($250+16)|0);
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=$TP;
      var $255=(($253)|0)==(($254)|0);
      if ($255) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $257=$R;
      var $258=$XP;
      var $259=(($258+16)|0);
      var $260=(($259)|0);
      HEAP32[(($260)>>2)]=$257;
      label = 50; break;
    case 49: 
      var $262=$R;
      var $263=$XP;
      var $264=(($263+16)|0);
      var $265=(($264+4)|0);
      HEAP32[(($265)>>2)]=$262;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      var $270=$R;
      var $271=(($270)|0)!=0;
      if ($271) { label = 54; break; } else { label = 68; break; }
    case 54: 
      var $273=$R;
      var $274=$273;
      var $275=HEAP32[((((5243956)|0))>>2)];
      var $276=(($274)>>>0) >= (($275)>>>0);
      var $277=(($276)&1);
      var $278=($277);
      var $279=(($278)|0)!=0;
      if ($279) { label = 55; break; } else { label = 66; break; }
    case 55: 
      var $281=$XP;
      var $282=$R;
      var $283=(($282+24)|0);
      HEAP32[(($283)>>2)]=$281;
      var $284=$TP;
      var $285=(($284+16)|0);
      var $286=(($285)|0);
      var $287=HEAP32[(($286)>>2)];
      $C0=$287;
      var $288=(($287)|0)!=0;
      if ($288) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $290=$C0;
      var $291=$290;
      var $292=HEAP32[((((5243956)|0))>>2)];
      var $293=(($291)>>>0) >= (($292)>>>0);
      var $294=(($293)&1);
      var $295=($294);
      var $296=(($295)|0)!=0;
      if ($296) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $298=$C0;
      var $299=$R;
      var $300=(($299+16)|0);
      var $301=(($300)|0);
      HEAP32[(($301)>>2)]=$298;
      var $302=$R;
      var $303=$C0;
      var $304=(($303+24)|0);
      HEAP32[(($304)>>2)]=$302;
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!"
    case 59: 
      label = 60; break;
    case 60: 
      var $308=$TP;
      var $309=(($308+16)|0);
      var $310=(($309+4)|0);
      var $311=HEAP32[(($310)>>2)];
      $C1=$311;
      var $312=(($311)|0)!=0;
      if ($312) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $314=$C1;
      var $315=$314;
      var $316=HEAP32[((((5243956)|0))>>2)];
      var $317=(($315)>>>0) >= (($316)>>>0);
      var $318=(($317)&1);
      var $319=($318);
      var $320=(($319)|0)!=0;
      if ($320) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $322=$C1;
      var $323=$R;
      var $324=(($323+16)|0);
      var $325=(($324+4)|0);
      HEAP32[(($325)>>2)]=$322;
      var $326=$R;
      var $327=$C1;
      var $328=(($327+24)|0);
      HEAP32[(($328)>>2)]=$326;
      label = 64; break;
    case 63: 
      _abort();
      throw "Reached an unreachable!"
    case 64: 
      label = 65; break;
    case 65: 
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!"
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 74; break;
    case 71: 
      var $338=$next;
      var $339=(($338+4)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=$340 & 3;
      var $342=(($341)|0)==3;
      if ($342) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $344=$psize;
      HEAP32[((((5243948)|0))>>2)]=$344;
      var $345=$next;
      var $346=(($345+4)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=$347 & -2;
      HEAP32[(($346)>>2)]=$348;
      var $349=$psize;
      var $350=$349 | 1;
      var $351=$p;
      var $352=(($351+4)|0);
      HEAP32[(($352)>>2)]=$350;
      var $353=$psize;
      var $354=$p;
      var $355=$354;
      var $356=$psize;
      var $357=(($355+$356)|0);
      var $358=$357;
      var $359=(($358)|0);
      HEAP32[(($359)>>2)]=$353;
      label = 196; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      label = 195; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $366=$p;
      var $367=$366;
      var $368=$next;
      var $369=$368;
      var $370=(($367)>>>0) < (($369)>>>0);
      if ($370) { label = 79; break; } else { var $378 = 0;label = 80; break; }
    case 79: 
      var $372=$next;
      var $373=(($372+4)|0);
      var $374=HEAP32[(($373)>>2)];
      var $375=$374 & 1;
      var $376=(($375)|0)!=0;
      var $378 = $376;label = 80; break;
    case 80: 
      var $378;
      var $379=(($378)&1);
      var $380=($379);
      var $381=(($380)|0)!=0;
      if ($381) { label = 81; break; } else { label = 193; break; }
    case 81: 
      var $383=$next;
      var $384=(($383+4)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=$385 & 2;
      var $387=(($386)|0)!=0;
      if ($387) { label = 154; break; } else { label = 82; break; }
    case 82: 
      var $389=$next;
      var $390=HEAP32[((((5243964)|0))>>2)];
      var $391=(($389)|0)==(($390)|0);
      if ($391) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $393=$psize;
      var $394=HEAP32[((((5243952)|0))>>2)];
      var $395=((($394)+($393))|0);
      HEAP32[((((5243952)|0))>>2)]=$395;
      $tsize=$395;
      var $396=$p;
      HEAP32[((((5243964)|0))>>2)]=$396;
      var $397=$tsize;
      var $398=$397 | 1;
      var $399=$p;
      var $400=(($399+4)|0);
      HEAP32[(($400)>>2)]=$398;
      var $401=$p;
      var $402=HEAP32[((((5243960)|0))>>2)];
      var $403=(($401)|0)==(($402)|0);
      if ($403) { label = 84; break; } else { label = 85; break; }
    case 84: 
      HEAP32[((((5243960)|0))>>2)]=0;
      HEAP32[((((5243948)|0))>>2)]=0;
      label = 85; break;
    case 85: 
      var $406=$tsize;
      var $407=HEAP32[((((5243968)|0))>>2)];
      var $408=(($406)>>>0) > (($407)>>>0);
      if ($408) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $410=_sys_trim(5243940, 0);
      label = 87; break;
    case 87: 
      label = 196; break;
    case 88: 
      var $413=$next;
      var $414=HEAP32[((((5243960)|0))>>2)];
      var $415=(($413)|0)==(($414)|0);
      if ($415) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $417=$psize;
      var $418=HEAP32[((((5243948)|0))>>2)];
      var $419=((($418)+($417))|0);
      HEAP32[((((5243948)|0))>>2)]=$419;
      $dsize=$419;
      var $420=$p;
      HEAP32[((((5243960)|0))>>2)]=$420;
      var $421=$dsize;
      var $422=$421 | 1;
      var $423=$p;
      var $424=(($423+4)|0);
      HEAP32[(($424)>>2)]=$422;
      var $425=$dsize;
      var $426=$p;
      var $427=$426;
      var $428=$dsize;
      var $429=(($427+$428)|0);
      var $430=$429;
      var $431=(($430)|0);
      HEAP32[(($431)>>2)]=$425;
      label = 196; break;
    case 90: 
      var $433=$next;
      var $434=(($433+4)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=$435 & -8;
      $nsize=$436;
      var $437=$nsize;
      var $438=$psize;
      var $439=((($438)+($437))|0);
      $psize=$439;
      var $440=$nsize;
      var $441=$440 >>> 3;
      var $442=(($441)>>>0) < 32;
      if ($442) { label = 91; break; } else { label = 103; break; }
    case 91: 
      var $444=$next;
      var $445=(($444+8)|0);
      var $446=HEAP32[(($445)>>2)];
      $F2=$446;
      var $447=$next;
      var $448=(($447+12)|0);
      var $449=HEAP32[(($448)>>2)];
      $B3=$449;
      var $450=$nsize;
      var $451=$450 >>> 3;
      $I4=$451;
      var $452=$F2;
      var $453=$B3;
      var $454=(($452)|0)==(($453)|0);
      if ($454) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $456=$I4;
      var $457=1 << $456;
      var $458=$457 ^ -1;
      var $459=HEAP32[((((5243940)|0))>>2)];
      var $460=$459 & $458;
      HEAP32[((((5243940)|0))>>2)]=$460;
      label = 102; break;
    case 93: 
      var $462=$F2;
      var $463=$I4;
      var $464=$463 << 1;
      var $465=((((5243980)|0)+($464<<2))|0);
      var $466=$465;
      var $467=$466;
      var $468=(($462)|0)==(($467)|0);
      if ($468) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $470=$F2;
      var $471=$470;
      var $472=HEAP32[((((5243956)|0))>>2)];
      var $473=(($471)>>>0) >= (($472)>>>0);
      if ($473) { label = 95; break; } else { var $490 = 0;label = 98; break; }
    case 95: 
      var $475=$B3;
      var $476=$I4;
      var $477=$476 << 1;
      var $478=((((5243980)|0)+($477<<2))|0);
      var $479=$478;
      var $480=$479;
      var $481=(($475)|0)==(($480)|0);
      if ($481) { var $488 = 1;label = 97; break; } else { label = 96; break; }
    case 96: 
      var $483=$B3;
      var $484=$483;
      var $485=HEAP32[((((5243956)|0))>>2)];
      var $486=(($484)>>>0) >= (($485)>>>0);
      var $488 = $486;label = 97; break;
    case 97: 
      var $488;
      var $490 = $488;label = 98; break;
    case 98: 
      var $490;
      var $491=(($490)&1);
      var $492=($491);
      var $493=(($492)|0)!=0;
      if ($493) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $495=$B3;
      var $496=$F2;
      var $497=(($496+12)|0);
      HEAP32[(($497)>>2)]=$495;
      var $498=$F2;
      var $499=$B3;
      var $500=(($499+8)|0);
      HEAP32[(($500)>>2)]=$498;
      label = 101; break;
    case 100: 
      _abort();
      throw "Reached an unreachable!"
    case 101: 
      label = 102; break;
    case 102: 
      label = 149; break;
    case 103: 
      var $505=$next;
      var $506=$505;
      $TP5=$506;
      var $507=$TP5;
      var $508=(($507+24)|0);
      var $509=HEAP32[(($508)>>2)];
      $XP6=$509;
      var $510=$TP5;
      var $511=(($510+12)|0);
      var $512=HEAP32[(($511)>>2)];
      var $513=$TP5;
      var $514=(($512)|0)!=(($513)|0);
      if ($514) { label = 104; break; } else { label = 108; break; }
    case 104: 
      var $516=$TP5;
      var $517=(($516+8)|0);
      var $518=HEAP32[(($517)>>2)];
      $F8=$518;
      var $519=$TP5;
      var $520=(($519+12)|0);
      var $521=HEAP32[(($520)>>2)];
      $R7=$521;
      var $522=$F8;
      var $523=$522;
      var $524=HEAP32[((((5243956)|0))>>2)];
      var $525=(($523)>>>0) >= (($524)>>>0);
      var $526=(($525)&1);
      var $527=($526);
      var $528=(($527)|0)!=0;
      if ($528) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $530=$R7;
      var $531=$F8;
      var $532=(($531+12)|0);
      HEAP32[(($532)>>2)]=$530;
      var $533=$F8;
      var $534=$R7;
      var $535=(($534+8)|0);
      HEAP32[(($535)>>2)]=$533;
      label = 107; break;
    case 106: 
      _abort();
      throw "Reached an unreachable!"
    case 107: 
      label = 120; break;
    case 108: 
      var $539=$TP5;
      var $540=(($539+16)|0);
      var $541=(($540+4)|0);
      $RP9=$541;
      var $542=HEAP32[(($541)>>2)];
      $R7=$542;
      var $543=(($542)|0)!=0;
      if ($543) { label = 110; break; } else { label = 109; break; }
    case 109: 
      var $545=$TP5;
      var $546=(($545+16)|0);
      var $547=(($546)|0);
      $RP9=$547;
      var $548=HEAP32[(($547)>>2)];
      $R7=$548;
      var $549=(($548)|0)!=0;
      if ($549) { label = 110; break; } else { label = 119; break; }
    case 110: 
      label = 111; break;
    case 111: 
      var $552=$R7;
      var $553=(($552+16)|0);
      var $554=(($553+4)|0);
      $CP10=$554;
      var $555=HEAP32[(($554)>>2)];
      var $556=(($555)|0)!=0;
      if ($556) { var $564 = 1;label = 113; break; } else { label = 112; break; }
    case 112: 
      var $558=$R7;
      var $559=(($558+16)|0);
      var $560=(($559)|0);
      $CP10=$560;
      var $561=HEAP32[(($560)>>2)];
      var $562=(($561)|0)!=0;
      var $564 = $562;label = 113; break;
    case 113: 
      var $564;
      if ($564) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $566=$CP10;
      $RP9=$566;
      var $567=HEAP32[(($566)>>2)];
      $R7=$567;
      label = 111; break;
    case 115: 
      var $569=$RP9;
      var $570=$569;
      var $571=HEAP32[((((5243956)|0))>>2)];
      var $572=(($570)>>>0) >= (($571)>>>0);
      var $573=(($572)&1);
      var $574=($573);
      var $575=(($574)|0)!=0;
      if ($575) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $577=$RP9;
      HEAP32[(($577)>>2)]=0;
      label = 118; break;
    case 117: 
      _abort();
      throw "Reached an unreachable!"
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $582=$XP6;
      var $583=(($582)|0)!=0;
      if ($583) { label = 121; break; } else { label = 148; break; }
    case 121: 
      var $585=$TP5;
      var $586=(($585+28)|0);
      var $587=HEAP32[(($586)>>2)];
      var $588=((((5244244)|0)+($587<<2))|0);
      $H11=$588;
      var $589=$TP5;
      var $590=$H11;
      var $591=HEAP32[(($590)>>2)];
      var $592=(($589)|0)==(($591)|0);
      if ($592) { label = 122; break; } else { label = 125; break; }
    case 122: 
      var $594=$R7;
      var $595=$H11;
      HEAP32[(($595)>>2)]=$594;
      var $596=(($594)|0)==0;
      if ($596) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $598=$TP5;
      var $599=(($598+28)|0);
      var $600=HEAP32[(($599)>>2)];
      var $601=1 << $600;
      var $602=$601 ^ -1;
      var $603=HEAP32[((((5243944)|0))>>2)];
      var $604=$603 & $602;
      HEAP32[((((5243944)|0))>>2)]=$604;
      label = 124; break;
    case 124: 
      label = 132; break;
    case 125: 
      var $607=$XP6;
      var $608=$607;
      var $609=HEAP32[((((5243956)|0))>>2)];
      var $610=(($608)>>>0) >= (($609)>>>0);
      var $611=(($610)&1);
      var $612=($611);
      var $613=(($612)|0)!=0;
      if ($613) { label = 126; break; } else { label = 130; break; }
    case 126: 
      var $615=$XP6;
      var $616=(($615+16)|0);
      var $617=(($616)|0);
      var $618=HEAP32[(($617)>>2)];
      var $619=$TP5;
      var $620=(($618)|0)==(($619)|0);
      if ($620) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $622=$R7;
      var $623=$XP6;
      var $624=(($623+16)|0);
      var $625=(($624)|0);
      HEAP32[(($625)>>2)]=$622;
      label = 129; break;
    case 128: 
      var $627=$R7;
      var $628=$XP6;
      var $629=(($628+16)|0);
      var $630=(($629+4)|0);
      HEAP32[(($630)>>2)]=$627;
      label = 129; break;
    case 129: 
      label = 131; break;
    case 130: 
      _abort();
      throw "Reached an unreachable!"
    case 131: 
      label = 132; break;
    case 132: 
      var $635=$R7;
      var $636=(($635)|0)!=0;
      if ($636) { label = 133; break; } else { label = 147; break; }
    case 133: 
      var $638=$R7;
      var $639=$638;
      var $640=HEAP32[((((5243956)|0))>>2)];
      var $641=(($639)>>>0) >= (($640)>>>0);
      var $642=(($641)&1);
      var $643=($642);
      var $644=(($643)|0)!=0;
      if ($644) { label = 134; break; } else { label = 145; break; }
    case 134: 
      var $646=$XP6;
      var $647=$R7;
      var $648=(($647+24)|0);
      HEAP32[(($648)>>2)]=$646;
      var $649=$TP5;
      var $650=(($649+16)|0);
      var $651=(($650)|0);
      var $652=HEAP32[(($651)>>2)];
      $C012=$652;
      var $653=(($652)|0)!=0;
      if ($653) { label = 135; break; } else { label = 139; break; }
    case 135: 
      var $655=$C012;
      var $656=$655;
      var $657=HEAP32[((((5243956)|0))>>2)];
      var $658=(($656)>>>0) >= (($657)>>>0);
      var $659=(($658)&1);
      var $660=($659);
      var $661=(($660)|0)!=0;
      if ($661) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $663=$C012;
      var $664=$R7;
      var $665=(($664+16)|0);
      var $666=(($665)|0);
      HEAP32[(($666)>>2)]=$663;
      var $667=$R7;
      var $668=$C012;
      var $669=(($668+24)|0);
      HEAP32[(($669)>>2)]=$667;
      label = 138; break;
    case 137: 
      _abort();
      throw "Reached an unreachable!"
    case 138: 
      label = 139; break;
    case 139: 
      var $673=$TP5;
      var $674=(($673+16)|0);
      var $675=(($674+4)|0);
      var $676=HEAP32[(($675)>>2)];
      $C113=$676;
      var $677=(($676)|0)!=0;
      if ($677) { label = 140; break; } else { label = 144; break; }
    case 140: 
      var $679=$C113;
      var $680=$679;
      var $681=HEAP32[((((5243956)|0))>>2)];
      var $682=(($680)>>>0) >= (($681)>>>0);
      var $683=(($682)&1);
      var $684=($683);
      var $685=(($684)|0)!=0;
      if ($685) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $687=$C113;
      var $688=$R7;
      var $689=(($688+16)|0);
      var $690=(($689+4)|0);
      HEAP32[(($690)>>2)]=$687;
      var $691=$R7;
      var $692=$C113;
      var $693=(($692+24)|0);
      HEAP32[(($693)>>2)]=$691;
      label = 143; break;
    case 142: 
      _abort();
      throw "Reached an unreachable!"
    case 143: 
      label = 144; break;
    case 144: 
      label = 146; break;
    case 145: 
      _abort();
      throw "Reached an unreachable!"
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $702=$psize;
      var $703=$702 | 1;
      var $704=$p;
      var $705=(($704+4)|0);
      HEAP32[(($705)>>2)]=$703;
      var $706=$psize;
      var $707=$p;
      var $708=$707;
      var $709=$psize;
      var $710=(($708+$709)|0);
      var $711=$710;
      var $712=(($711)|0);
      HEAP32[(($712)>>2)]=$706;
      var $713=$p;
      var $714=HEAP32[((((5243960)|0))>>2)];
      var $715=(($713)|0)==(($714)|0);
      if ($715) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $717=$psize;
      HEAP32[((((5243948)|0))>>2)]=$717;
      label = 196; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 155; break;
    case 154: 
      var $722=$next;
      var $723=(($722+4)|0);
      var $724=HEAP32[(($723)>>2)];
      var $725=$724 & -2;
      HEAP32[(($723)>>2)]=$725;
      var $726=$psize;
      var $727=$726 | 1;
      var $728=$p;
      var $729=(($728+4)|0);
      HEAP32[(($729)>>2)]=$727;
      var $730=$psize;
      var $731=$p;
      var $732=$731;
      var $733=$psize;
      var $734=(($732+$733)|0);
      var $735=$734;
      var $736=(($735)|0);
      HEAP32[(($736)>>2)]=$730;
      label = 155; break;
    case 155: 
      var $738=$psize;
      var $739=$738 >>> 3;
      var $740=(($739)>>>0) < 32;
      if ($740) { label = 156; break; } else { label = 163; break; }
    case 156: 
      var $742=$psize;
      var $743=$742 >>> 3;
      $I14=$743;
      var $744=$I14;
      var $745=$744 << 1;
      var $746=((((5243980)|0)+($745<<2))|0);
      var $747=$746;
      var $748=$747;
      $B15=$748;
      var $749=$B15;
      $F16=$749;
      var $750=HEAP32[((((5243940)|0))>>2)];
      var $751=$I14;
      var $752=1 << $751;
      var $753=$750 & $752;
      var $754=(($753)|0)!=0;
      if ($754) { label = 158; break; } else { label = 157; break; }
    case 157: 
      var $756=$I14;
      var $757=1 << $756;
      var $758=HEAP32[((((5243940)|0))>>2)];
      var $759=$758 | $757;
      HEAP32[((((5243940)|0))>>2)]=$759;
      label = 162; break;
    case 158: 
      var $761=$B15;
      var $762=(($761+8)|0);
      var $763=HEAP32[(($762)>>2)];
      var $764=$763;
      var $765=HEAP32[((((5243956)|0))>>2)];
      var $766=(($764)>>>0) >= (($765)>>>0);
      var $767=(($766)&1);
      var $768=($767);
      var $769=(($768)|0)!=0;
      if ($769) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $771=$B15;
      var $772=(($771+8)|0);
      var $773=HEAP32[(($772)>>2)];
      $F16=$773;
      label = 161; break;
    case 160: 
      _abort();
      throw "Reached an unreachable!"
    case 161: 
      label = 162; break;
    case 162: 
      var $777=$p;
      var $778=$B15;
      var $779=(($778+8)|0);
      HEAP32[(($779)>>2)]=$777;
      var $780=$p;
      var $781=$F16;
      var $782=(($781+12)|0);
      HEAP32[(($782)>>2)]=$780;
      var $783=$F16;
      var $784=$p;
      var $785=(($784+8)|0);
      HEAP32[(($785)>>2)]=$783;
      var $786=$B15;
      var $787=$p;
      var $788=(($787+12)|0);
      HEAP32[(($788)>>2)]=$786;
      label = 192; break;
    case 163: 
      var $790=$p;
      var $791=$790;
      $tp=$791;
      var $792=$psize;
      var $793=$792 >>> 8;
      $X=$793;
      var $794=$X;
      var $795=(($794)|0)==0;
      if ($795) { label = 164; break; } else { label = 165; break; }
    case 164: 
      $I18=0;
      label = 169; break;
    case 165: 
      var $798=$X;
      var $799=(($798)>>>0) > 65535;
      if ($799) { label = 166; break; } else { label = 167; break; }
    case 166: 
      $I18=31;
      label = 168; break;
    case 167: 
      var $802=$X;
      $Y=$802;
      var $803=$Y;
      var $804=((($803)-(256))|0);
      var $805=$804 >>> 16;
      var $806=$805 & 8;
      $N=$806;
      var $807=$N;
      var $808=$Y;
      var $809=$808 << $807;
      $Y=$809;
      var $810=((($809)-(4096))|0);
      var $811=$810 >>> 16;
      var $812=$811 & 4;
      $K=$812;
      var $813=$K;
      var $814=$N;
      var $815=((($814)+($813))|0);
      $N=$815;
      var $816=$K;
      var $817=$Y;
      var $818=$817 << $816;
      $Y=$818;
      var $819=((($818)-(16384))|0);
      var $820=$819 >>> 16;
      var $821=$820 & 2;
      $K=$821;
      var $822=$N;
      var $823=((($822)+($821))|0);
      $N=$823;
      var $824=$N;
      var $825=(((14)-($824))|0);
      var $826=$K;
      var $827=$Y;
      var $828=$827 << $826;
      $Y=$828;
      var $829=$828 >>> 15;
      var $830=((($825)+($829))|0);
      $K=$830;
      var $831=$K;
      var $832=$831 << 1;
      var $833=$psize;
      var $834=$K;
      var $835=((($834)+(7))|0);
      var $836=$833 >>> (($835)>>>0);
      var $837=$836 & 1;
      var $838=((($832)+($837))|0);
      $I18=$838;
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $841=$I18;
      var $842=((((5244244)|0)+($841<<2))|0);
      $H17=$842;
      var $843=$I18;
      var $844=$tp;
      var $845=(($844+28)|0);
      HEAP32[(($845)>>2)]=$843;
      var $846=$tp;
      var $847=(($846+16)|0);
      var $848=(($847+4)|0);
      HEAP32[(($848)>>2)]=0;
      var $849=$tp;
      var $850=(($849+16)|0);
      var $851=(($850)|0);
      HEAP32[(($851)>>2)]=0;
      var $852=HEAP32[((((5243944)|0))>>2)];
      var $853=$I18;
      var $854=1 << $853;
      var $855=$852 & $854;
      var $856=(($855)|0)!=0;
      if ($856) { label = 171; break; } else { label = 170; break; }
    case 170: 
      var $858=$I18;
      var $859=1 << $858;
      var $860=HEAP32[((((5243944)|0))>>2)];
      var $861=$860 | $859;
      HEAP32[((((5243944)|0))>>2)]=$861;
      var $862=$tp;
      var $863=$H17;
      HEAP32[(($863)>>2)]=$862;
      var $864=$H17;
      var $865=$864;
      var $866=$tp;
      var $867=(($866+24)|0);
      HEAP32[(($867)>>2)]=$865;
      var $868=$tp;
      var $869=$tp;
      var $870=(($869+12)|0);
      HEAP32[(($870)>>2)]=$868;
      var $871=$tp;
      var $872=(($871+8)|0);
      HEAP32[(($872)>>2)]=$868;
      label = 189; break;
    case 171: 
      var $874=$H17;
      var $875=HEAP32[(($874)>>2)];
      $T=$875;
      var $876=$psize;
      var $877=$I18;
      var $878=(($877)|0)==31;
      if ($878) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $887 = 0;label = 174; break;
    case 173: 
      var $881=$I18;
      var $882=$881 >>> 1;
      var $883=((($882)+(8))|0);
      var $884=((($883)-(2))|0);
      var $885=(((31)-($884))|0);
      var $887 = $885;label = 174; break;
    case 174: 
      var $887;
      var $888=$876 << $887;
      $K19=$888;
      label = 175; break;
    case 175: 
      var $890=$T;
      var $891=(($890+4)|0);
      var $892=HEAP32[(($891)>>2)];
      var $893=$892 & -8;
      var $894=$psize;
      var $895=(($893)|0)!=(($894)|0);
      if ($895) { label = 176; break; } else { label = 182; break; }
    case 176: 
      var $897=$K19;
      var $898=$897 >>> 31;
      var $899=$898 & 1;
      var $900=$T;
      var $901=(($900+16)|0);
      var $902=(($901+($899<<2))|0);
      $C=$902;
      var $903=$K19;
      var $904=$903 << 1;
      $K19=$904;
      var $905=$C;
      var $906=HEAP32[(($905)>>2)];
      var $907=(($906)|0)!=0;
      if ($907) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $909=$C;
      var $910=HEAP32[(($909)>>2)];
      $T=$910;
      label = 181; break;
    case 178: 
      var $912=$C;
      var $913=$912;
      var $914=HEAP32[((((5243956)|0))>>2)];
      var $915=(($913)>>>0) >= (($914)>>>0);
      var $916=(($915)&1);
      var $917=($916);
      var $918=(($917)|0)!=0;
      if ($918) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $920=$tp;
      var $921=$C;
      HEAP32[(($921)>>2)]=$920;
      var $922=$T;
      var $923=$tp;
      var $924=(($923+24)|0);
      HEAP32[(($924)>>2)]=$922;
      var $925=$tp;
      var $926=$tp;
      var $927=(($926+12)|0);
      HEAP32[(($927)>>2)]=$925;
      var $928=$tp;
      var $929=(($928+8)|0);
      HEAP32[(($929)>>2)]=$925;
      label = 188; break;
    case 180: 
      _abort();
      throw "Reached an unreachable!"
    case 181: 
      label = 187; break;
    case 182: 
      var $933=$T;
      var $934=(($933+8)|0);
      var $935=HEAP32[(($934)>>2)];
      $F20=$935;
      var $936=$T;
      var $937=$936;
      var $938=HEAP32[((((5243956)|0))>>2)];
      var $939=(($937)>>>0) >= (($938)>>>0);
      if ($939) { label = 183; break; } else { var $946 = 0;label = 184; break; }
    case 183: 
      var $941=$F20;
      var $942=$941;
      var $943=HEAP32[((((5243956)|0))>>2)];
      var $944=(($942)>>>0) >= (($943)>>>0);
      var $946 = $944;label = 184; break;
    case 184: 
      var $946;
      var $947=(($946)&1);
      var $948=($947);
      var $949=(($948)|0)!=0;
      if ($949) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $951=$tp;
      var $952=$F20;
      var $953=(($952+12)|0);
      HEAP32[(($953)>>2)]=$951;
      var $954=$T;
      var $955=(($954+8)|0);
      HEAP32[(($955)>>2)]=$951;
      var $956=$F20;
      var $957=$tp;
      var $958=(($957+8)|0);
      HEAP32[(($958)>>2)]=$956;
      var $959=$T;
      var $960=$tp;
      var $961=(($960+12)|0);
      HEAP32[(($961)>>2)]=$959;
      var $962=$tp;
      var $963=(($962+24)|0);
      HEAP32[(($963)>>2)]=0;
      label = 188; break;
    case 186: 
      _abort();
      throw "Reached an unreachable!"
    case 187: 
      label = 175; break;
    case 188: 
      label = 189; break;
    case 189: 
      var $968=HEAP32[((((5243972)|0))>>2)];
      var $969=((($968)-(1))|0);
      HEAP32[((((5243972)|0))>>2)]=$969;
      var $970=(($969)|0)==0;
      if ($970) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $972=_release_unused_segments(5243940);
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 196; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      _abort();
      throw "Reached an unreachable!"
    case 196: 
      label = 197; break;
    case 197: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_free["X"]=1;

function _sys_trim($m, $pad) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $1=$m;
      $2=$pad;
      $released=0;
      var $3=HEAP32[((((5243080)|0))>>2)];
      var $4=(($3)|0)!=0;
      if ($4) { var $9 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=_init_mparams();
      var $7=(($6)|0)!=0;
      var $9 = $7;label = 4; break;
    case 4: 
      var $9;
      var $10=(($9)&1);
      var $11=$2;
      var $12=(($11)>>>0) < 4294967232;
      if ($12) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $14=$1;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)!=0;
      if ($17) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $19=$2;
      var $20=((($19)+(40))|0);
      $2=$20;
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($23)>>>0) > (($24)>>>0);
      if ($25) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $27=HEAP32[((((5243088)|0))>>2)];
      $unit=$27;
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=((($30)-($31))|0);
      var $33=$unit;
      var $34=((($33)-(1))|0);
      var $35=((($32)+($34))|0);
      var $36=$unit;
      var $37=Math.floor(((($35)>>>0))/((($36)>>>0)));
      var $38=((($37)-(1))|0);
      var $39=$unit;
      var $40=Math.imul($38,$39);
      $extra=$40;
      var $41=$1;
      var $42=$1;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=_segment_holding($41, $45);
      $sp=$46;
      var $47=$sp;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & 8;
      var $51=(($50)|0)!=0;
      if ($51) { label = 19; break; } else { label = 8; break; }
    case 8: 
      var $53=$sp;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 0;
      var $57=(($56)|0)!=0;
      if ($57) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 18; break;
    case 10: 
      var $60=$extra;
      var $61=(($60)>>>0) >= 2147483647;
      if ($61) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $63=$unit;
      var $64=(((-2147483648)-($63))|0);
      $extra=$64;
      label = 12; break;
    case 12: 
      var $66=_sbrk(0);
      $old_br=$66;
      var $67=$old_br;
      var $68=$sp;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$sp;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($70+$73)|0);
      var $75=(($67)|0)==(($74)|0);
      if ($75) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $77=$extra;
      var $78=(((-$77))|0);
      var $79=_sbrk($78);
      $rel_br=$79;
      var $80=_sbrk(0);
      $new_br=$80;
      var $81=$rel_br;
      var $82=(($81)|0)!=-1;
      if ($82) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $84=$new_br;
      var $85=$old_br;
      var $86=(($84)>>>0) < (($85)>>>0);
      if ($86) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $88=$old_br;
      var $89=$new_br;
      var $90=$88;
      var $91=$89;
      var $92=((($90)-($91))|0);
      $released=$92;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $97=$released;
      var $98=(($97)|0)!=0;
      if ($98) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $100=$released;
      var $101=$sp;
      var $102=(($101+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)-($100))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=$released;
      var $106=$1;
      var $107=(($106+432)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-($105))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=$1;
      var $111=$1;
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$1;
      var $115=(($114+12)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$released;
      var $118=((($116)-($117))|0);
      _init_top($110, $113, $118);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $121=$released;
      var $122=(($121)|0)==0;
      if ($122) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $124=$1;
      var $125=(($124+12)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$1;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($126)>>>0) > (($129)>>>0);
      if ($130) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $132=$1;
      var $133=(($132+28)|0);
      HEAP32[(($133)>>2)]=-1;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $136=$released;
      var $137=(($136)|0)!=0;
      var $138=$137 ? 1 : 0;

      return $138;
    default: assert(0, "bad label: " + label);
  }

}
_sys_trim["X"]=1;

function _realloc($oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $m;
      $2=$oldmem;
      $3=$bytes;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$3;
      var $8=_malloc($7);
      $1=$8;
      label = 5; break;
    case 4: 
      $m=5243940;
      var $10=$m;
      var $11=$2;
      var $12=$3;
      var $13=_internal_realloc($10, $11, $12);
      $1=$13;
      label = 5; break;
    case 5: 
      var $15=$1;

      return $15;
    default: assert(0, "bad label: " + label);
  }

}
Module["_realloc"] = _realloc;

function _release_unused_segments($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H1;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $released=0;
      $nsegs=0;
      var $2=$1;
      var $3=(($2+444)|0);
      $pred=$3;
      var $4=$pred;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      $sp=$6;
      label = 3; break;
    case 3: 
      var $8=$sp;
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { label = 88; break; }
    case 4: 
      var $11=$sp;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      $base=$13;
      var $14=$sp;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      $size=$16;
      var $17=$sp;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      $next=$19;
      var $20=$nsegs;
      var $21=((($20)+(1))|0);
      $nsegs=$21;
      var $22=$sp;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & 0;
      var $26=(($25)|0)!=0;
      if ($26) { label = 5; break; } else { label = 87; break; }
    case 5: 
      var $28=$sp;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 & 8;
      var $32=(($31)|0)!=0;
      if ($32) { label = 87; break; } else { label = 6; break; }
    case 6: 
      var $34=$base;
      var $35=$base;
      var $36=(($35+8)|0);
      var $37=$36;
      var $38=$37 & 7;
      var $39=(($38)|0)==0;
      if ($39) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $49 = 0;label = 9; break;
    case 8: 
      var $42=$base;
      var $43=(($42+8)|0);
      var $44=$43;
      var $45=$44 & 7;
      var $46=(((8)-($45))|0);
      var $47=$46 & 7;
      var $49 = $47;label = 9; break;
    case 9: 
      var $49;
      var $50=(($34+$49)|0);
      var $51=$50;
      $p=$51;
      var $52=$p;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54 & -8;
      $psize=$55;
      var $56=$p;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 & 3;
      var $60=(($59)|0)!=1;
      if ($60) { label = 86; break; } else { label = 10; break; }
    case 10: 
      var $62=$p;
      var $63=$62;
      var $64=$psize;
      var $65=(($63+$64)|0);
      var $66=$base;
      var $67=$size;
      var $68=(($66+$67)|0);
      var $69=((($68)-(40))|0);
      var $70=(($65)>>>0) >= (($69)>>>0);
      if ($70) { label = 11; break; } else { label = 86; break; }
    case 11: 
      var $72=$p;
      var $73=$72;
      $tp=$73;
      var $74=$p;
      var $75=$1;
      var $76=(($75+20)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74)|0)==(($77)|0);
      if ($78) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $80=$1;
      var $81=(($80+20)|0);
      HEAP32[(($81)>>2)]=0;
      var $82=$1;
      var $83=(($82+8)|0);
      HEAP32[(($83)>>2)]=0;
      label = 59; break;
    case 13: 
      var $85=$tp;
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      $XP=$87;
      var $88=$tp;
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$tp;
      var $92=(($90)|0)!=(($91)|0);
      if ($92) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $94=$tp;
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      $F=$96;
      var $97=$tp;
      var $98=(($97+12)|0);
      var $99=HEAP32[(($98)>>2)];
      $R=$99;
      var $100=$F;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>0) >= (($104)>>>0);
      var $106=(($105)&1);
      var $107=($106);
      var $108=(($107)|0)!=0;
      if ($108) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $110=$R;
      var $111=$F;
      var $112=(($111+12)|0);
      HEAP32[(($112)>>2)]=$110;
      var $113=$F;
      var $114=$R;
      var $115=(($114+8)|0);
      HEAP32[(($115)>>2)]=$113;
      label = 17; break;
    case 16: 
      _abort();
      throw "Reached an unreachable!"
    case 17: 
      label = 30; break;
    case 18: 
      var $119=$tp;
      var $120=(($119+16)|0);
      var $121=(($120+4)|0);
      $RP=$121;
      var $122=HEAP32[(($121)>>2)];
      $R=$122;
      var $123=(($122)|0)!=0;
      if ($123) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $125=$tp;
      var $126=(($125+16)|0);
      var $127=(($126)|0);
      $RP=$127;
      var $128=HEAP32[(($127)>>2)];
      $R=$128;
      var $129=(($128)|0)!=0;
      if ($129) { label = 20; break; } else { label = 29; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $132=$R;
      var $133=(($132+16)|0);
      var $134=(($133+4)|0);
      $CP=$134;
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135)|0)!=0;
      if ($136) { var $144 = 1;label = 23; break; } else { label = 22; break; }
    case 22: 
      var $138=$R;
      var $139=(($138+16)|0);
      var $140=(($139)|0);
      $CP=$140;
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141)|0)!=0;
      var $144 = $142;label = 23; break;
    case 23: 
      var $144;
      if ($144) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $146=$CP;
      $RP=$146;
      var $147=HEAP32[(($146)>>2)];
      $R=$147;
      label = 21; break;
    case 25: 
      var $149=$RP;
      var $150=$149;
      var $151=$1;
      var $152=(($151+16)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($150)>>>0) >= (($153)>>>0);
      var $155=(($154)&1);
      var $156=($155);
      var $157=(($156)|0)!=0;
      if ($157) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $159=$RP;
      HEAP32[(($159)>>2)]=0;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $164=$XP;
      var $165=(($164)|0)!=0;
      if ($165) { label = 31; break; } else { label = 58; break; }
    case 31: 
      var $167=$tp;
      var $168=(($167+28)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$1;
      var $171=(($170+304)|0);
      var $172=(($171+($169<<2))|0);
      $H=$172;
      var $173=$tp;
      var $174=$H;
      var $175=HEAP32[(($174)>>2)];
      var $176=(($173)|0)==(($175)|0);
      if ($176) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $178=$R;
      var $179=$H;
      HEAP32[(($179)>>2)]=$178;
      var $180=(($178)|0)==0;
      if ($180) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $182=$tp;
      var $183=(($182+28)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=1 << $184;
      var $186=$185 ^ -1;
      var $187=$1;
      var $188=(($187+4)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$189 & $186;
      HEAP32[(($188)>>2)]=$190;
      label = 34; break;
    case 34: 
      label = 42; break;
    case 35: 
      var $193=$XP;
      var $194=$193;
      var $195=$1;
      var $196=(($195+16)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=(($194)>>>0) >= (($197)>>>0);
      var $199=(($198)&1);
      var $200=($199);
      var $201=(($200)|0)!=0;
      if ($201) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $203=$XP;
      var $204=(($203+16)|0);
      var $205=(($204)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=$tp;
      var $208=(($206)|0)==(($207)|0);
      if ($208) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $210=$R;
      var $211=$XP;
      var $212=(($211+16)|0);
      var $213=(($212)|0);
      HEAP32[(($213)>>2)]=$210;
      label = 39; break;
    case 38: 
      var $215=$R;
      var $216=$XP;
      var $217=(($216+16)|0);
      var $218=(($217+4)|0);
      HEAP32[(($218)>>2)]=$215;
      label = 39; break;
    case 39: 
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      var $223=$R;
      var $224=(($223)|0)!=0;
      if ($224) { label = 43; break; } else { label = 57; break; }
    case 43: 
      var $226=$R;
      var $227=$226;
      var $228=$1;
      var $229=(($228+16)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=(($227)>>>0) >= (($230)>>>0);
      var $232=(($231)&1);
      var $233=($232);
      var $234=(($233)|0)!=0;
      if ($234) { label = 44; break; } else { label = 55; break; }
    case 44: 
      var $236=$XP;
      var $237=$R;
      var $238=(($237+24)|0);
      HEAP32[(($238)>>2)]=$236;
      var $239=$tp;
      var $240=(($239+16)|0);
      var $241=(($240)|0);
      var $242=HEAP32[(($241)>>2)];
      $C0=$242;
      var $243=(($242)|0)!=0;
      if ($243) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $245=$C0;
      var $246=$245;
      var $247=$1;
      var $248=(($247+16)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($246)>>>0) >= (($249)>>>0);
      var $251=(($250)&1);
      var $252=($251);
      var $253=(($252)|0)!=0;
      if ($253) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $255=$C0;
      var $256=$R;
      var $257=(($256+16)|0);
      var $258=(($257)|0);
      HEAP32[(($258)>>2)]=$255;
      var $259=$R;
      var $260=$C0;
      var $261=(($260+24)|0);
      HEAP32[(($261)>>2)]=$259;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!"
    case 48: 
      label = 49; break;
    case 49: 
      var $265=$tp;
      var $266=(($265+16)|0);
      var $267=(($266+4)|0);
      var $268=HEAP32[(($267)>>2)];
      $C1=$268;
      var $269=(($268)|0)!=0;
      if ($269) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $271=$C1;
      var $272=$271;
      var $273=$1;
      var $274=(($273+16)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($272)>>>0) >= (($275)>>>0);
      var $277=(($276)&1);
      var $278=($277);
      var $279=(($278)|0)!=0;
      if ($279) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $281=$C1;
      var $282=$R;
      var $283=(($282+16)|0);
      var $284=(($283+4)|0);
      HEAP32[(($284)>>2)]=$281;
      var $285=$R;
      var $286=$C1;
      var $287=(($286+24)|0);
      HEAP32[(($287)>>2)]=$285;
      label = 53; break;
    case 52: 
      _abort();
      throw "Reached an unreachable!"
    case 53: 
      label = 54; break;
    case 54: 
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $296=$psize;
      var $297=$296 >>> 8;
      $X=$297;
      var $298=$X;
      var $299=(($298)|0)==0;
      if ($299) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $I=0;
      label = 65; break;
    case 61: 
      var $302=$X;
      var $303=(($302)>>>0) > 65535;
      if ($303) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $I=31;
      label = 64; break;
    case 63: 
      var $306=$X;
      $Y=$306;
      var $307=$Y;
      var $308=((($307)-(256))|0);
      var $309=$308 >>> 16;
      var $310=$309 & 8;
      $N=$310;
      var $311=$N;
      var $312=$Y;
      var $313=$312 << $311;
      $Y=$313;
      var $314=((($313)-(4096))|0);
      var $315=$314 >>> 16;
      var $316=$315 & 4;
      $K=$316;
      var $317=$K;
      var $318=$N;
      var $319=((($318)+($317))|0);
      $N=$319;
      var $320=$K;
      var $321=$Y;
      var $322=$321 << $320;
      $Y=$322;
      var $323=((($322)-(16384))|0);
      var $324=$323 >>> 16;
      var $325=$324 & 2;
      $K=$325;
      var $326=$N;
      var $327=((($326)+($325))|0);
      $N=$327;
      var $328=$N;
      var $329=(((14)-($328))|0);
      var $330=$K;
      var $331=$Y;
      var $332=$331 << $330;
      $Y=$332;
      var $333=$332 >>> 15;
      var $334=((($329)+($333))|0);
      $K=$334;
      var $335=$K;
      var $336=$335 << 1;
      var $337=$psize;
      var $338=$K;
      var $339=((($338)+(7))|0);
      var $340=$337 >>> (($339)>>>0);
      var $341=$340 & 1;
      var $342=((($336)+($341))|0);
      $I=$342;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $345=$I;
      var $346=$1;
      var $347=(($346+304)|0);
      var $348=(($347+($345<<2))|0);
      $H1=$348;
      var $349=$I;
      var $350=$tp;
      var $351=(($350+28)|0);
      HEAP32[(($351)>>2)]=$349;
      var $352=$tp;
      var $353=(($352+16)|0);
      var $354=(($353+4)|0);
      HEAP32[(($354)>>2)]=0;
      var $355=$tp;
      var $356=(($355+16)|0);
      var $357=(($356)|0);
      HEAP32[(($357)>>2)]=0;
      var $358=$1;
      var $359=(($358+4)|0);
      var $360=HEAP32[(($359)>>2)];
      var $361=$I;
      var $362=1 << $361;
      var $363=$360 & $362;
      var $364=(($363)|0)!=0;
      if ($364) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $366=$I;
      var $367=1 << $366;
      var $368=$1;
      var $369=(($368+4)|0);
      var $370=HEAP32[(($369)>>2)];
      var $371=$370 | $367;
      HEAP32[(($369)>>2)]=$371;
      var $372=$tp;
      var $373=$H1;
      HEAP32[(($373)>>2)]=$372;
      var $374=$H1;
      var $375=$374;
      var $376=$tp;
      var $377=(($376+24)|0);
      HEAP32[(($377)>>2)]=$375;
      var $378=$tp;
      var $379=$tp;
      var $380=(($379+12)|0);
      HEAP32[(($380)>>2)]=$378;
      var $381=$tp;
      var $382=(($381+8)|0);
      HEAP32[(($382)>>2)]=$378;
      label = 85; break;
    case 67: 
      var $384=$H1;
      var $385=HEAP32[(($384)>>2)];
      $T=$385;
      var $386=$psize;
      var $387=$I;
      var $388=(($387)|0)==31;
      if ($388) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $397 = 0;label = 70; break;
    case 69: 
      var $391=$I;
      var $392=$391 >>> 1;
      var $393=((($392)+(8))|0);
      var $394=((($393)-(2))|0);
      var $395=(((31)-($394))|0);
      var $397 = $395;label = 70; break;
    case 70: 
      var $397;
      var $398=$386 << $397;
      $K2=$398;
      label = 71; break;
    case 71: 
      var $400=$T;
      var $401=(($400+4)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$402 & -8;
      var $404=$psize;
      var $405=(($403)|0)!=(($404)|0);
      if ($405) { label = 72; break; } else { label = 78; break; }
    case 72: 
      var $407=$K2;
      var $408=$407 >>> 31;
      var $409=$408 & 1;
      var $410=$T;
      var $411=(($410+16)|0);
      var $412=(($411+($409<<2))|0);
      $C=$412;
      var $413=$K2;
      var $414=$413 << 1;
      $K2=$414;
      var $415=$C;
      var $416=HEAP32[(($415)>>2)];
      var $417=(($416)|0)!=0;
      if ($417) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $419=$C;
      var $420=HEAP32[(($419)>>2)];
      $T=$420;
      label = 77; break;
    case 74: 
      var $422=$C;
      var $423=$422;
      var $424=$1;
      var $425=(($424+16)|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=(($423)>>>0) >= (($426)>>>0);
      var $428=(($427)&1);
      var $429=($428);
      var $430=(($429)|0)!=0;
      if ($430) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $432=$tp;
      var $433=$C;
      HEAP32[(($433)>>2)]=$432;
      var $434=$T;
      var $435=$tp;
      var $436=(($435+24)|0);
      HEAP32[(($436)>>2)]=$434;
      var $437=$tp;
      var $438=$tp;
      var $439=(($438+12)|0);
      HEAP32[(($439)>>2)]=$437;
      var $440=$tp;
      var $441=(($440+8)|0);
      HEAP32[(($441)>>2)]=$437;
      label = 84; break;
    case 76: 
      _abort();
      throw "Reached an unreachable!"
    case 77: 
      label = 83; break;
    case 78: 
      var $445=$T;
      var $446=(($445+8)|0);
      var $447=HEAP32[(($446)>>2)];
      $F3=$447;
      var $448=$T;
      var $449=$448;
      var $450=$1;
      var $451=(($450+16)|0);
      var $452=HEAP32[(($451)>>2)];
      var $453=(($449)>>>0) >= (($452)>>>0);
      if ($453) { label = 79; break; } else { var $462 = 0;label = 80; break; }
    case 79: 
      var $455=$F3;
      var $456=$455;
      var $457=$1;
      var $458=(($457+16)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=(($456)>>>0) >= (($459)>>>0);
      var $462 = $460;label = 80; break;
    case 80: 
      var $462;
      var $463=(($462)&1);
      var $464=($463);
      var $465=(($464)|0)!=0;
      if ($465) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $467=$tp;
      var $468=$F3;
      var $469=(($468+12)|0);
      HEAP32[(($469)>>2)]=$467;
      var $470=$T;
      var $471=(($470+8)|0);
      HEAP32[(($471)>>2)]=$467;
      var $472=$F3;
      var $473=$tp;
      var $474=(($473+8)|0);
      HEAP32[(($474)>>2)]=$472;
      var $475=$T;
      var $476=$tp;
      var $477=(($476+12)|0);
      HEAP32[(($477)>>2)]=$475;
      var $478=$tp;
      var $479=(($478+24)|0);
      HEAP32[(($479)>>2)]=0;
      label = 84; break;
    case 82: 
      _abort();
      throw "Reached an unreachable!"
    case 83: 
      label = 71; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $486=$sp;
      $pred=$486;
      var $487=$next;
      $sp=$487;
      label = 3; break;
    case 88: 
      var $489=$nsegs;
      var $490=(($489)>>>0) > 4294967295;
      if ($490) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $492=$nsegs;
      var $495 = $492;label = 91; break;
    case 90: 
      var $495 = -1;label = 91; break;
    case 91: 
      var $495;
      var $496=$1;
      var $497=(($496+32)|0);
      HEAP32[(($497)>>2)]=$495;
      var $498=$released;

      return $498;
    default: assert(0, "bad label: " + label);
  }

}
_release_unused_segments["X"]=1;

function _mmap_resize($m, $oldp, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $2=$m;
      $3=$oldp;
      $4=$nb;
      var $5=$3;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & -8;
      $oldsize=$8;
      var $9=$4;
      var $10=$9 >>> 3;
      var $11=(($10)>>>0) < 32;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 15; break;
    case 4: 
      var $14=$oldsize;
      var $15=$4;
      var $16=((($15)+(4))|0);
      var $17=(($14)>>>0) >= (($16)>>>0);
      if ($17) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $19=$oldsize;
      var $20=$4;
      var $21=((($19)-($20))|0);
      var $22=HEAP32[((((5243088)|0))>>2)];
      var $23=$22 << 1;
      var $24=(($21)>>>0) <= (($23)>>>0);
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $26=$3;
      $1=$26;
      label = 15; break;
    case 7: 
      var $28=$3;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      $offset=$30;
      var $31=$oldsize;
      var $32=$offset;
      var $33=((($31)+($32))|0);
      var $34=((($33)+(16))|0);
      $oldmmsize=$34;
      var $35=$4;
      var $36=((($35)+(24))|0);
      var $37=((($36)+(7))|0);
      var $38=HEAP32[((((5243084)|0))>>2)];
      var $39=((($38)-(1))|0);
      var $40=((($37)+($39))|0);
      var $41=HEAP32[((((5243084)|0))>>2)];
      var $42=((($41)-(1))|0);
      var $43=$42 ^ -1;
      var $44=$40 & $43;
      $newmmsize=$44;
      $cp=-1;
      var $45=$cp;
      var $46=(($45)|0)!=-1;
      if ($46) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $48=$cp;
      var $49=$offset;
      var $50=(($48+$49)|0);
      var $51=$50;
      $newp=$51;
      var $52=$newmmsize;
      var $53=$offset;
      var $54=((($52)-($53))|0);
      var $55=((($54)-(16))|0);
      $psize=$55;
      var $56=$psize;
      var $57=$newp;
      var $58=(($57+4)|0);
      HEAP32[(($58)>>2)]=$56;
      var $59=$newp;
      var $60=$59;
      var $61=$psize;
      var $62=(($60+$61)|0);
      var $63=$62;
      var $64=(($63+4)|0);
      HEAP32[(($64)>>2)]=7;
      var $65=$newp;
      var $66=$65;
      var $67=$psize;
      var $68=((($67)+(4))|0);
      var $69=(($66+$68)|0);
      var $70=$69;
      var $71=(($70+4)|0);
      HEAP32[(($71)>>2)]=0;
      var $72=$cp;
      var $73=$2;
      var $74=(($73+16)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($72)>>>0) < (($75)>>>0);
      if ($76) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $78=$cp;
      var $79=$2;
      var $80=(($79+16)|0);
      HEAP32[(($80)>>2)]=$78;
      label = 10; break;
    case 10: 
      var $82=$newmmsize;
      var $83=$oldmmsize;
      var $84=((($82)-($83))|0);
      var $85=$2;
      var $86=(($85+432)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)+($84))|0);
      HEAP32[(($86)>>2)]=$88;
      var $89=$2;
      var $90=(($89+436)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($88)>>>0) > (($91)>>>0);
      if ($92) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $94=$2;
      var $95=(($94+432)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$2;
      var $98=(($97+436)|0);
      HEAP32[(($98)>>2)]=$96;
      label = 12; break;
    case 12: 
      var $100=$newp;
      $1=$100;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $104=$1;

      return $104;
    default: assert(0, "bad label: " + label);
  }

}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$m;
      $3=$addr;
      var $4=$2;
      var $5=(($4+444)|0);
      $sp=$5;
      label = 3; break;
    case 3: 
      var $7=$3;
      var $8=$sp;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)>>>0) >= (($10)>>>0);
      if ($11) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $13=$3;
      var $14=$sp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$sp;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16+$19)|0);
      var $21=(($13)>>>0) < (($20)>>>0);
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=$sp;
      $1=$23;
      label = 9; break;
    case 6: 
      var $25=$sp;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      $sp=$27;
      var $28=(($27)|0)==0;
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $32=$1;

      return $32;
    default: assert(0, "bad label: " + label);
  }

}


function _init_top($m, $p, $psize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2;
      var $5=$4;
      var $6=(($5+8)|0);
      var $7=$6;
      var $8=$7 & 7;
      var $9=(($8)|0)==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $20 = 0;label = 5; break;
    case 4: 
      var $12=$2;
      var $13=$12;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 5; break;
    case 5: 
      var $20;
      $offset=$20;
      var $21=$2;
      var $22=$21;
      var $23=$offset;
      var $24=(($22+$23)|0);
      var $25=$24;
      $2=$25;
      var $26=$offset;
      var $27=$3;
      var $28=((($27)-($26))|0);
      $3=$28;
      var $29=$2;
      var $30=$1;
      var $31=(($30+24)|0);
      HEAP32[(($31)>>2)]=$29;
      var $32=$3;
      var $33=$1;
      var $34=(($33+12)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$3;
      var $36=$35 | 1;
      var $37=$2;
      var $38=(($37+4)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$2;
      var $40=$39;
      var $41=$3;
      var $42=(($40+$41)|0);
      var $43=$42;
      var $44=(($43+4)|0);
      HEAP32[(($44)>>2)]=40;
      var $45=HEAP32[((((5243096)|0))>>2)];
      var $46=$1;
      var $47=(($46+28)|0);
      HEAP32[(($47)>>2)]=$45;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $2=$m;
      $3=$nb;
      var $4=$3;
      var $5=((($4)+(24))|0);
      var $6=((($5)+(7))|0);
      var $7=HEAP32[((((5243084)|0))>>2)];
      var $8=((($7)-(1))|0);
      var $9=((($6)+($8))|0);
      var $10=HEAP32[((((5243084)|0))>>2)];
      var $11=((($10)-(1))|0);
      var $12=$11 ^ -1;
      var $13=$9 & $12;
      $mmsize=$13;
      var $14=$mmsize;
      var $15=$3;
      var $16=(($14)>>>0) > (($15)>>>0);
      if ($16) { label = 3; break; } else { label = 14; break; }
    case 3: 
      $mm=-1;
      var $18=$mm;
      var $19=(($18)|0)!=-1;
      if ($19) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $21=$mm;
      var $22=(($21+8)|0);
      var $23=$22;
      var $24=$23 & 7;
      var $25=(($24)|0)==0;
      if ($25) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $35 = 0;label = 7; break;
    case 6: 
      var $28=$mm;
      var $29=(($28+8)|0);
      var $30=$29;
      var $31=$30 & 7;
      var $32=(((8)-($31))|0);
      var $33=$32 & 7;
      var $35 = $33;label = 7; break;
    case 7: 
      var $35;
      $offset=$35;
      var $36=$mmsize;
      var $37=$offset;
      var $38=((($36)-($37))|0);
      var $39=((($38)-(16))|0);
      $psize=$39;
      var $40=$mm;
      var $41=$offset;
      var $42=(($40+$41)|0);
      var $43=$42;
      $p=$43;
      var $44=$offset;
      var $45=$p;
      var $46=(($45)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$psize;
      var $48=$p;
      var $49=(($48+4)|0);
      HEAP32[(($49)>>2)]=$47;
      var $50=$p;
      var $51=$50;
      var $52=$psize;
      var $53=(($51+$52)|0);
      var $54=$53;
      var $55=(($54+4)|0);
      HEAP32[(($55)>>2)]=7;
      var $56=$p;
      var $57=$56;
      var $58=$psize;
      var $59=((($58)+(4))|0);
      var $60=(($57+$59)|0);
      var $61=$60;
      var $62=(($61+4)|0);
      HEAP32[(($62)>>2)]=0;
      var $63=$2;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0)==0;
      if ($66) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $68=$mm;
      var $69=$2;
      var $70=(($69+16)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($68)>>>0) < (($71)>>>0);
      if ($72) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $74=$mm;
      var $75=$2;
      var $76=(($75+16)|0);
      HEAP32[(($76)>>2)]=$74;
      label = 10; break;
    case 10: 
      var $78=$mmsize;
      var $79=$2;
      var $80=(($79+432)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)+($78))|0);
      HEAP32[(($80)>>2)]=$82;
      var $83=$2;
      var $84=(($83+436)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($82)>>>0) > (($85)>>>0);
      if ($86) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $88=$2;
      var $89=(($88+432)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$2;
      var $92=(($91+436)|0);
      HEAP32[(($92)>>2)]=$90;
      label = 12; break;
    case 12: 
      var $94=$p;
      var $95=$94;
      var $96=(($95+8)|0);
      $1=$96;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $100=$1;

      return $100;
    default: assert(0, "bad label: " + label);
  }

}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $i;
      var $bin;
      $1=$m;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=(($3)>>>0) < 32;
      if ($4) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$i;
      var $7=$6 << 1;
      var $8=$1;
      var $9=(($8+40)|0);
      var $10=(($9+($7<<2))|0);
      var $11=$10;
      var $12=$11;
      $bin=$12;
      var $13=$bin;
      var $14=$bin;
      var $15=(($14+12)|0);
      HEAP32[(($15)>>2)]=$13;
      var $16=$bin;
      var $17=(($16+8)|0);
      HEAP32[(($17)>>2)]=$13;
      label = 5; break;
    case 5: 
      var $19=$i;
      var $20=((($19)+(1))|0);
      $i=$20;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _internal_realloc($m, $oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $2=$m;
      $3=$oldmem;
      $4=$bytes;
      var $5=$4;
      var $6=(($5)>>>0) >= 4294967232;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=___errno_location();
      HEAP32[(($8)>>2)]=12;
      $1=0;
      label = 35; break;
    case 4: 
      var $10=$3;
      var $11=((($10)-(8))|0);
      var $12=$11;
      $oldp=$12;
      var $13=$oldp;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & -8;
      $oldsize=$16;
      var $17=$oldp;
      var $18=$17;
      var $19=$oldsize;
      var $20=(($18+$19)|0);
      var $21=$20;
      $next=$21;
      $newp=0;
      $extra=0;
      var $22=$oldp;
      var $23=$22;
      var $24=$2;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)>>>0) >= (($26)>>>0);
      if ($27) { label = 5; break; } else { var $47 = 0;label = 8; break; }
    case 5: 
      var $29=$oldp;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 3;
      var $33=(($32)|0)!=1;
      if ($33) { label = 6; break; } else { var $47 = 0;label = 8; break; }
    case 6: 
      var $35=$oldp;
      var $36=$35;
      var $37=$next;
      var $38=$37;
      var $39=(($36)>>>0) < (($38)>>>0);
      if ($39) { label = 7; break; } else { var $47 = 0;label = 8; break; }
    case 7: 
      var $41=$next;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 & 1;
      var $45=(($44)|0)!=0;
      var $47 = $45;label = 8; break;
    case 8: 
      var $47;
      var $48=(($47)&1);
      var $49=($48);
      var $50=(($49)|0)!=0;
      if ($50) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $52=$4;
      var $53=(($52)>>>0) < 11;
      if ($53) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $61 = 16;label = 12; break;
    case 11: 
      var $56=$4;
      var $57=((($56)+(4))|0);
      var $58=((($57)+(7))|0);
      var $59=$58 & -8;
      var $61 = $59;label = 12; break;
    case 12: 
      var $61;
      $nb=$61;
      var $62=$oldp;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 & 3;
      var $66=(($65)|0)==0;
      if ($66) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $68=$2;
      var $69=$oldp;
      var $70=$nb;
      var $71=_mmap_resize($68, $69, $70);
      $newp=$71;
      label = 23; break;
    case 14: 
      var $73=$oldsize;
      var $74=$nb;
      var $75=(($73)>>>0) >= (($74)>>>0);
      if ($75) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $77=$oldsize;
      var $78=$nb;
      var $79=((($77)-($78))|0);
      $rsize=$79;
      var $80=$oldp;
      $newp=$80;
      var $81=$rsize;
      var $82=(($81)>>>0) >= 16;
      if ($82) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $84=$newp;
      var $85=$84;
      var $86=$nb;
      var $87=(($85+$86)|0);
      var $88=$87;
      $remainder=$88;
      var $89=$newp;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$91 & 1;
      var $93=$nb;
      var $94=$92 | $93;
      var $95=$94 | 2;
      var $96=$newp;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$newp;
      var $99=$98;
      var $100=$nb;
      var $101=(($99+$100)|0);
      var $102=$101;
      var $103=(($102+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$104 | 1;
      HEAP32[(($103)>>2)]=$105;
      var $106=$rsize;
      var $107=$106 | 1;
      var $108=$107 | 2;
      var $109=$remainder;
      var $110=(($109+4)|0);
      HEAP32[(($110)>>2)]=$108;
      var $111=$remainder;
      var $112=$111;
      var $113=$rsize;
      var $114=(($112+$113)|0);
      var $115=$114;
      var $116=(($115+4)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$117 | 1;
      HEAP32[(($116)>>2)]=$118;
      var $119=$remainder;
      var $120=$119;
      var $121=(($120+8)|0);
      $extra=$121;
      label = 17; break;
    case 17: 
      label = 22; break;
    case 18: 
      var $124=$next;
      var $125=$2;
      var $126=(($125+24)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($124)|0)==(($127)|0);
      if ($128) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $130=$oldsize;
      var $131=$2;
      var $132=(($131+12)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($130)+($133))|0);
      var $135=$nb;
      var $136=(($134)>>>0) > (($135)>>>0);
      if ($136) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $138=$oldsize;
      var $139=$2;
      var $140=(($139+12)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=((($138)+($141))|0);
      $newsize=$142;
      var $143=$newsize;
      var $144=$nb;
      var $145=((($143)-($144))|0);
      $newtopsize=$145;
      var $146=$oldp;
      var $147=$146;
      var $148=$nb;
      var $149=(($147+$148)|0);
      var $150=$149;
      $newtop=$150;
      var $151=$oldp;
      var $152=(($151+4)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$153 & 1;
      var $155=$nb;
      var $156=$154 | $155;
      var $157=$156 | 2;
      var $158=$oldp;
      var $159=(($158+4)|0);
      HEAP32[(($159)>>2)]=$157;
      var $160=$oldp;
      var $161=$160;
      var $162=$nb;
      var $163=(($161+$162)|0);
      var $164=$163;
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=$166 | 1;
      HEAP32[(($165)>>2)]=$167;
      var $168=$newtopsize;
      var $169=$168 | 1;
      var $170=$newtop;
      var $171=(($170+4)|0);
      HEAP32[(($171)>>2)]=$169;
      var $172=$newtop;
      var $173=$2;
      var $174=(($173+24)|0);
      HEAP32[(($174)>>2)]=$172;
      var $175=$newtopsize;
      var $176=$2;
      var $177=(($176+12)|0);
      HEAP32[(($177)>>2)]=$175;
      var $178=$oldp;
      $newp=$178;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!"
    case 25: 
      var $184=$newp;
      var $185=(($184)|0)!=0;
      if ($185) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $187=$extra;
      var $188=(($187)|0)!=0;
      if ($188) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $190=$extra;
      _free($190);
      label = 28; break;
    case 28: 
      var $192=$newp;
      var $193=$192;
      var $194=(($193+8)|0);
      $1=$194;
      label = 35; break;
    case 29: 
      var $196=$4;
      var $197=_malloc($196);
      $newmem=$197;
      var $198=$newmem;
      var $199=(($198)|0)!=0;
      if ($199) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $201=$oldsize;
      var $202=$oldp;
      var $203=(($202+4)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$204 & 3;
      var $206=(($205)|0)==0;
      var $207=$206 ? 8 : 4;
      var $208=((($201)-($207))|0);
      $oc=$208;
      var $209=$newmem;
      var $210=$3;
      var $211=$oc;
      var $212=$4;
      var $213=(($211)>>>0) < (($212)>>>0);
      if ($213) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $215=$oc;
      var $219 = $215;label = 33; break;
    case 32: 
      var $217=$4;
      var $219 = $217;label = 33; break;
    case 33: 
      var $219;
      assert($219 % 1 === 0);_memcpy($209, $210, $219);
      var $220=$3;
      _free($220);
      label = 34; break;
    case 34: 
      var $222=$newmem;
      $1=$222;
      label = 35; break;
    case 35: 
      var $224=$1;

      return $224;
    default: assert(0, "bad label: " + label);
  }

}
_internal_realloc["X"]=1;

function _init_mparams() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $1=HEAP32[((((5243080)|0))>>2)];
      var $2=(($1)|0)==0;
      if ($2) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=_sysconf(8);
      $psize=$4;
      var $5=$psize;
      $gsize=$5;
      var $6=$gsize;
      var $7=$gsize;
      var $8=((($7)-(1))|0);
      var $9=$6 & $8;
      var $10=(($9)|0)!=0;
      if ($10) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $12=$psize;
      var $13=$psize;
      var $14=((($13)-(1))|0);
      var $15=$12 & $14;
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _abort();
      throw "Reached an unreachable!"
    case 6: 
      var $19=$gsize;
      HEAP32[((((5243088)|0))>>2)]=$19;
      var $20=$psize;
      HEAP32[((((5243084)|0))>>2)]=$20;
      HEAP32[((((5243092)|0))>>2)]=-1;
      HEAP32[((((5243096)|0))>>2)]=2097152;
      HEAP32[((((5243100)|0))>>2)]=0;
      var $21=HEAP32[((((5243100)|0))>>2)];
      HEAP32[((((5244380)|0))>>2)]=$21;
      var $22=_time(0);
      var $23=$22 ^ 1431655765;
      $magic=$23;
      var $24=$magic;
      var $25=$24 | 8;
      $magic=$25;
      var $26=$magic;
      var $27=$26 & -8;
      $magic=$27;
      var $28=$magic;
      HEAP32[((((5243080)|0))>>2)]=$28;
      label = 7; break;
    case 7: 

      return 1;
    default: assert(0, "bad label: " + label);
  }

}


function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I2;
      var $B3;
      var $F4;
      var $TP5;
      var $H6;
      var $I7;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K8;
      var $C;
      var $F9;
      $1=$m;
      $2=$newbase;
      $3=$oldbase;
      $4=$nb;
      var $5=$2;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=$7;
      var $9=$8 & 7;
      var $10=(($9)|0)==0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $20 = 0;label = 5; break;
    case 4: 
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 5; break;
    case 5: 
      var $20;
      var $21=(($5+$20)|0);
      var $22=$21;
      $p=$22;
      var $23=$3;
      var $24=$3;
      var $25=(($24+8)|0);
      var $26=$25;
      var $27=$26 & 7;
      var $28=(($27)|0)==0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $38 = 0;label = 8; break;
    case 7: 
      var $31=$3;
      var $32=(($31+8)|0);
      var $33=$32;
      var $34=$33 & 7;
      var $35=(((8)-($34))|0);
      var $36=$35 & 7;
      var $38 = $36;label = 8; break;
    case 8: 
      var $38;
      var $39=(($23+$38)|0);
      var $40=$39;
      $oldfirst=$40;
      var $41=$oldfirst;
      var $42=$41;
      var $43=$p;
      var $44=$43;
      var $45=$42;
      var $46=$44;
      var $47=((($45)-($46))|0);
      $psize=$47;
      var $48=$p;
      var $49=$48;
      var $50=$4;
      var $51=(($49+$50)|0);
      var $52=$51;
      $q=$52;
      var $53=$psize;
      var $54=$4;
      var $55=((($53)-($54))|0);
      $qsize=$55;
      var $56=$4;
      var $57=$56 | 1;
      var $58=$57 | 2;
      var $59=$p;
      var $60=(($59+4)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$oldfirst;
      var $62=$1;
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($61)|0)==(($64)|0);
      if ($65) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $67=$qsize;
      var $68=$1;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)+($67))|0);
      HEAP32[(($69)>>2)]=$71;
      $tsize=$71;
      var $72=$q;
      var $73=$1;
      var $74=(($73+24)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$tsize;
      var $76=$75 | 1;
      var $77=$q;
      var $78=(($77+4)|0);
      HEAP32[(($78)>>2)]=$76;
      label = 110; break;
    case 10: 
      var $80=$oldfirst;
      var $81=$1;
      var $82=(($81+20)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($80)|0)==(($83)|0);
      if ($84) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $86=$qsize;
      var $87=$1;
      var $88=(($87+8)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)+($86))|0);
      HEAP32[(($88)>>2)]=$90;
      $dsize=$90;
      var $91=$q;
      var $92=$1;
      var $93=(($92+20)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$dsize;
      var $95=$94 | 1;
      var $96=$q;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$dsize;
      var $99=$q;
      var $100=$99;
      var $101=$dsize;
      var $102=(($100+$101)|0);
      var $103=$102;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$98;
      label = 109; break;
    case 12: 
      var $106=$oldfirst;
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$108 & 3;
      var $110=(($109)|0)!=1;
      if ($110) { label = 73; break; } else { label = 13; break; }
    case 13: 
      var $112=$oldfirst;
      var $113=(($112+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & -8;
      $nsize=$115;
      var $116=$nsize;
      var $117=$116 >>> 3;
      var $118=(($117)>>>0) < 32;
      if ($118) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $120=$oldfirst;
      var $121=(($120+8)|0);
      var $122=HEAP32[(($121)>>2)];
      $F=$122;
      var $123=$oldfirst;
      var $124=(($123+12)|0);
      var $125=HEAP32[(($124)>>2)];
      $B=$125;
      var $126=$nsize;
      var $127=$126 >>> 3;
      $I=$127;
      var $128=$F;
      var $129=$B;
      var $130=(($128)|0)==(($129)|0);
      if ($130) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $132=$I;
      var $133=1 << $132;
      var $134=$133 ^ -1;
      var $135=$1;
      var $136=(($135)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$137 & $134;
      HEAP32[(($136)>>2)]=$138;
      label = 25; break;
    case 16: 
      var $140=$F;
      var $141=$I;
      var $142=$141 << 1;
      var $143=$1;
      var $144=(($143+40)|0);
      var $145=(($144+($142<<2))|0);
      var $146=$145;
      var $147=$146;
      var $148=(($140)|0)==(($147)|0);
      if ($148) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $150=$F;
      var $151=$150;
      var $152=$1;
      var $153=(($152+16)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($151)>>>0) >= (($154)>>>0);
      if ($155) { label = 18; break; } else { var $176 = 0;label = 21; break; }
    case 18: 
      var $157=$B;
      var $158=$I;
      var $159=$158 << 1;
      var $160=$1;
      var $161=(($160+40)|0);
      var $162=(($161+($159<<2))|0);
      var $163=$162;
      var $164=$163;
      var $165=(($157)|0)==(($164)|0);
      if ($165) { var $174 = 1;label = 20; break; } else { label = 19; break; }
    case 19: 
      var $167=$B;
      var $168=$167;
      var $169=$1;
      var $170=(($169+16)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($168)>>>0) >= (($171)>>>0);
      var $174 = $172;label = 20; break;
    case 20: 
      var $174;
      var $176 = $174;label = 21; break;
    case 21: 
      var $176;
      var $177=(($176)&1);
      var $178=($177);
      var $179=(($178)|0)!=0;
      if ($179) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $181=$B;
      var $182=$F;
      var $183=(($182+12)|0);
      HEAP32[(($183)>>2)]=$181;
      var $184=$F;
      var $185=$B;
      var $186=(($185+8)|0);
      HEAP32[(($186)>>2)]=$184;
      label = 24; break;
    case 23: 
      _abort();
      throw "Reached an unreachable!"
    case 24: 
      label = 25; break;
    case 25: 
      label = 72; break;
    case 26: 
      var $191=$oldfirst;
      var $192=$191;
      $TP=$192;
      var $193=$TP;
      var $194=(($193+24)|0);
      var $195=HEAP32[(($194)>>2)];
      $XP=$195;
      var $196=$TP;
      var $197=(($196+12)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$TP;
      var $200=(($198)|0)!=(($199)|0);
      if ($200) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $202=$TP;
      var $203=(($202+8)|0);
      var $204=HEAP32[(($203)>>2)];
      $F1=$204;
      var $205=$TP;
      var $206=(($205+12)|0);
      var $207=HEAP32[(($206)>>2)];
      $R=$207;
      var $208=$F1;
      var $209=$208;
      var $210=$1;
      var $211=(($210+16)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=(($209)>>>0) >= (($212)>>>0);
      var $214=(($213)&1);
      var $215=($214);
      var $216=(($215)|0)!=0;
      if ($216) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $218=$R;
      var $219=$F1;
      var $220=(($219+12)|0);
      HEAP32[(($220)>>2)]=$218;
      var $221=$F1;
      var $222=$R;
      var $223=(($222+8)|0);
      HEAP32[(($223)>>2)]=$221;
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!"
    case 30: 
      label = 43; break;
    case 31: 
      var $227=$TP;
      var $228=(($227+16)|0);
      var $229=(($228+4)|0);
      $RP=$229;
      var $230=HEAP32[(($229)>>2)];
      $R=$230;
      var $231=(($230)|0)!=0;
      if ($231) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $233=$TP;
      var $234=(($233+16)|0);
      var $235=(($234)|0);
      $RP=$235;
      var $236=HEAP32[(($235)>>2)];
      $R=$236;
      var $237=(($236)|0)!=0;
      if ($237) { label = 33; break; } else { label = 42; break; }
    case 33: 
      label = 34; break;
    case 34: 
      var $240=$R;
      var $241=(($240+16)|0);
      var $242=(($241+4)|0);
      $CP=$242;
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243)|0)!=0;
      if ($244) { var $252 = 1;label = 36; break; } else { label = 35; break; }
    case 35: 
      var $246=$R;
      var $247=(($246+16)|0);
      var $248=(($247)|0);
      $CP=$248;
      var $249=HEAP32[(($248)>>2)];
      var $250=(($249)|0)!=0;
      var $252 = $250;label = 36; break;
    case 36: 
      var $252;
      if ($252) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $254=$CP;
      $RP=$254;
      var $255=HEAP32[(($254)>>2)];
      $R=$255;
      label = 34; break;
    case 38: 
      var $257=$RP;
      var $258=$257;
      var $259=$1;
      var $260=(($259+16)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=(($258)>>>0) >= (($261)>>>0);
      var $263=(($262)&1);
      var $264=($263);
      var $265=(($264)|0)!=0;
      if ($265) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $267=$RP;
      HEAP32[(($267)>>2)]=0;
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $272=$XP;
      var $273=(($272)|0)!=0;
      if ($273) { label = 44; break; } else { label = 71; break; }
    case 44: 
      var $275=$TP;
      var $276=(($275+28)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=$1;
      var $279=(($278+304)|0);
      var $280=(($279+($277<<2))|0);
      $H=$280;
      var $281=$TP;
      var $282=$H;
      var $283=HEAP32[(($282)>>2)];
      var $284=(($281)|0)==(($283)|0);
      if ($284) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $286=$R;
      var $287=$H;
      HEAP32[(($287)>>2)]=$286;
      var $288=(($286)|0)==0;
      if ($288) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $290=$TP;
      var $291=(($290+28)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=1 << $292;
      var $294=$293 ^ -1;
      var $295=$1;
      var $296=(($295+4)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$297 & $294;
      HEAP32[(($296)>>2)]=$298;
      label = 47; break;
    case 47: 
      label = 55; break;
    case 48: 
      var $301=$XP;
      var $302=$301;
      var $303=$1;
      var $304=(($303+16)|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=(($302)>>>0) >= (($305)>>>0);
      var $307=(($306)&1);
      var $308=($307);
      var $309=(($308)|0)!=0;
      if ($309) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $311=$XP;
      var $312=(($311+16)|0);
      var $313=(($312)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$TP;
      var $316=(($314)|0)==(($315)|0);
      if ($316) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $318=$R;
      var $319=$XP;
      var $320=(($319+16)|0);
      var $321=(($320)|0);
      HEAP32[(($321)>>2)]=$318;
      label = 52; break;
    case 51: 
      var $323=$R;
      var $324=$XP;
      var $325=(($324+16)|0);
      var $326=(($325+4)|0);
      HEAP32[(($326)>>2)]=$323;
      label = 52; break;
    case 52: 
      label = 54; break;
    case 53: 
      _abort();
      throw "Reached an unreachable!"
    case 54: 
      label = 55; break;
    case 55: 
      var $331=$R;
      var $332=(($331)|0)!=0;
      if ($332) { label = 56; break; } else { label = 70; break; }
    case 56: 
      var $334=$R;
      var $335=$334;
      var $336=$1;
      var $337=(($336+16)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($335)>>>0) >= (($338)>>>0);
      var $340=(($339)&1);
      var $341=($340);
      var $342=(($341)|0)!=0;
      if ($342) { label = 57; break; } else { label = 68; break; }
    case 57: 
      var $344=$XP;
      var $345=$R;
      var $346=(($345+24)|0);
      HEAP32[(($346)>>2)]=$344;
      var $347=$TP;
      var $348=(($347+16)|0);
      var $349=(($348)|0);
      var $350=HEAP32[(($349)>>2)];
      $C0=$350;
      var $351=(($350)|0)!=0;
      if ($351) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $353=$C0;
      var $354=$353;
      var $355=$1;
      var $356=(($355+16)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=(($354)>>>0) >= (($357)>>>0);
      var $359=(($358)&1);
      var $360=($359);
      var $361=(($360)|0)!=0;
      if ($361) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $363=$C0;
      var $364=$R;
      var $365=(($364+16)|0);
      var $366=(($365)|0);
      HEAP32[(($366)>>2)]=$363;
      var $367=$R;
      var $368=$C0;
      var $369=(($368+24)|0);
      HEAP32[(($369)>>2)]=$367;
      label = 61; break;
    case 60: 
      _abort();
      throw "Reached an unreachable!"
    case 61: 
      label = 62; break;
    case 62: 
      var $373=$TP;
      var $374=(($373+16)|0);
      var $375=(($374+4)|0);
      var $376=HEAP32[(($375)>>2)];
      $C1=$376;
      var $377=(($376)|0)!=0;
      if ($377) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $379=$C1;
      var $380=$379;
      var $381=$1;
      var $382=(($381+16)|0);
      var $383=HEAP32[(($382)>>2)];
      var $384=(($380)>>>0) >= (($383)>>>0);
      var $385=(($384)&1);
      var $386=($385);
      var $387=(($386)|0)!=0;
      if ($387) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $389=$C1;
      var $390=$R;
      var $391=(($390+16)|0);
      var $392=(($391+4)|0);
      HEAP32[(($392)>>2)]=$389;
      var $393=$R;
      var $394=$C1;
      var $395=(($394+24)|0);
      HEAP32[(($395)>>2)]=$393;
      label = 66; break;
    case 65: 
      _abort();
      throw "Reached an unreachable!"
    case 66: 
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $404=$oldfirst;
      var $405=$404;
      var $406=$nsize;
      var $407=(($405+$406)|0);
      var $408=$407;
      $oldfirst=$408;
      var $409=$nsize;
      var $410=$qsize;
      var $411=((($410)+($409))|0);
      $qsize=$411;
      label = 73; break;
    case 73: 
      var $413=$oldfirst;
      var $414=(($413+4)|0);
      var $415=HEAP32[(($414)>>2)];
      var $416=$415 & -2;
      HEAP32[(($414)>>2)]=$416;
      var $417=$qsize;
      var $418=$417 | 1;
      var $419=$q;
      var $420=(($419+4)|0);
      HEAP32[(($420)>>2)]=$418;
      var $421=$qsize;
      var $422=$q;
      var $423=$422;
      var $424=$qsize;
      var $425=(($423+$424)|0);
      var $426=$425;
      var $427=(($426)|0);
      HEAP32[(($427)>>2)]=$421;
      var $428=$qsize;
      var $429=$428 >>> 3;
      var $430=(($429)>>>0) < 32;
      if ($430) { label = 74; break; } else { label = 81; break; }
    case 74: 
      var $432=$qsize;
      var $433=$432 >>> 3;
      $I2=$433;
      var $434=$I2;
      var $435=$434 << 1;
      var $436=$1;
      var $437=(($436+40)|0);
      var $438=(($437+($435<<2))|0);
      var $439=$438;
      var $440=$439;
      $B3=$440;
      var $441=$B3;
      $F4=$441;
      var $442=$1;
      var $443=(($442)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=$I2;
      var $446=1 << $445;
      var $447=$444 & $446;
      var $448=(($447)|0)!=0;
      if ($448) { label = 76; break; } else { label = 75; break; }
    case 75: 
      var $450=$I2;
      var $451=1 << $450;
      var $452=$1;
      var $453=(($452)|0);
      var $454=HEAP32[(($453)>>2)];
      var $455=$454 | $451;
      HEAP32[(($453)>>2)]=$455;
      label = 80; break;
    case 76: 
      var $457=$B3;
      var $458=(($457+8)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=$459;
      var $461=$1;
      var $462=(($461+16)|0);
      var $463=HEAP32[(($462)>>2)];
      var $464=(($460)>>>0) >= (($463)>>>0);
      var $465=(($464)&1);
      var $466=($465);
      var $467=(($466)|0)!=0;
      if ($467) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $469=$B3;
      var $470=(($469+8)|0);
      var $471=HEAP32[(($470)>>2)];
      $F4=$471;
      label = 79; break;
    case 78: 
      _abort();
      throw "Reached an unreachable!"
    case 79: 
      label = 80; break;
    case 80: 
      var $475=$q;
      var $476=$B3;
      var $477=(($476+8)|0);
      HEAP32[(($477)>>2)]=$475;
      var $478=$q;
      var $479=$F4;
      var $480=(($479+12)|0);
      HEAP32[(($480)>>2)]=$478;
      var $481=$F4;
      var $482=$q;
      var $483=(($482+8)|0);
      HEAP32[(($483)>>2)]=$481;
      var $484=$B3;
      var $485=$q;
      var $486=(($485+12)|0);
      HEAP32[(($486)>>2)]=$484;
      label = 108; break;
    case 81: 
      var $488=$q;
      var $489=$488;
      $TP5=$489;
      var $490=$qsize;
      var $491=$490 >>> 8;
      $X=$491;
      var $492=$X;
      var $493=(($492)|0)==0;
      if ($493) { label = 82; break; } else { label = 83; break; }
    case 82: 
      $I7=0;
      label = 87; break;
    case 83: 
      var $496=$X;
      var $497=(($496)>>>0) > 65535;
      if ($497) { label = 84; break; } else { label = 85; break; }
    case 84: 
      $I7=31;
      label = 86; break;
    case 85: 
      var $500=$X;
      $Y=$500;
      var $501=$Y;
      var $502=((($501)-(256))|0);
      var $503=$502 >>> 16;
      var $504=$503 & 8;
      $N=$504;
      var $505=$N;
      var $506=$Y;
      var $507=$506 << $505;
      $Y=$507;
      var $508=((($507)-(4096))|0);
      var $509=$508 >>> 16;
      var $510=$509 & 4;
      $K=$510;
      var $511=$K;
      var $512=$N;
      var $513=((($512)+($511))|0);
      $N=$513;
      var $514=$K;
      var $515=$Y;
      var $516=$515 << $514;
      $Y=$516;
      var $517=((($516)-(16384))|0);
      var $518=$517 >>> 16;
      var $519=$518 & 2;
      $K=$519;
      var $520=$N;
      var $521=((($520)+($519))|0);
      $N=$521;
      var $522=$N;
      var $523=(((14)-($522))|0);
      var $524=$K;
      var $525=$Y;
      var $526=$525 << $524;
      $Y=$526;
      var $527=$526 >>> 15;
      var $528=((($523)+($527))|0);
      $K=$528;
      var $529=$K;
      var $530=$529 << 1;
      var $531=$qsize;
      var $532=$K;
      var $533=((($532)+(7))|0);
      var $534=$531 >>> (($533)>>>0);
      var $535=$534 & 1;
      var $536=((($530)+($535))|0);
      $I7=$536;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $539=$I7;
      var $540=$1;
      var $541=(($540+304)|0);
      var $542=(($541+($539<<2))|0);
      $H6=$542;
      var $543=$I7;
      var $544=$TP5;
      var $545=(($544+28)|0);
      HEAP32[(($545)>>2)]=$543;
      var $546=$TP5;
      var $547=(($546+16)|0);
      var $548=(($547+4)|0);
      HEAP32[(($548)>>2)]=0;
      var $549=$TP5;
      var $550=(($549+16)|0);
      var $551=(($550)|0);
      HEAP32[(($551)>>2)]=0;
      var $552=$1;
      var $553=(($552+4)|0);
      var $554=HEAP32[(($553)>>2)];
      var $555=$I7;
      var $556=1 << $555;
      var $557=$554 & $556;
      var $558=(($557)|0)!=0;
      if ($558) { label = 89; break; } else { label = 88; break; }
    case 88: 
      var $560=$I7;
      var $561=1 << $560;
      var $562=$1;
      var $563=(($562+4)|0);
      var $564=HEAP32[(($563)>>2)];
      var $565=$564 | $561;
      HEAP32[(($563)>>2)]=$565;
      var $566=$TP5;
      var $567=$H6;
      HEAP32[(($567)>>2)]=$566;
      var $568=$H6;
      var $569=$568;
      var $570=$TP5;
      var $571=(($570+24)|0);
      HEAP32[(($571)>>2)]=$569;
      var $572=$TP5;
      var $573=$TP5;
      var $574=(($573+12)|0);
      HEAP32[(($574)>>2)]=$572;
      var $575=$TP5;
      var $576=(($575+8)|0);
      HEAP32[(($576)>>2)]=$572;
      label = 107; break;
    case 89: 
      var $578=$H6;
      var $579=HEAP32[(($578)>>2)];
      $T=$579;
      var $580=$qsize;
      var $581=$I7;
      var $582=(($581)|0)==31;
      if ($582) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $591 = 0;label = 92; break;
    case 91: 
      var $585=$I7;
      var $586=$585 >>> 1;
      var $587=((($586)+(8))|0);
      var $588=((($587)-(2))|0);
      var $589=(((31)-($588))|0);
      var $591 = $589;label = 92; break;
    case 92: 
      var $591;
      var $592=$580 << $591;
      $K8=$592;
      label = 93; break;
    case 93: 
      var $594=$T;
      var $595=(($594+4)|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=$596 & -8;
      var $598=$qsize;
      var $599=(($597)|0)!=(($598)|0);
      if ($599) { label = 94; break; } else { label = 100; break; }
    case 94: 
      var $601=$K8;
      var $602=$601 >>> 31;
      var $603=$602 & 1;
      var $604=$T;
      var $605=(($604+16)|0);
      var $606=(($605+($603<<2))|0);
      $C=$606;
      var $607=$K8;
      var $608=$607 << 1;
      $K8=$608;
      var $609=$C;
      var $610=HEAP32[(($609)>>2)];
      var $611=(($610)|0)!=0;
      if ($611) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $613=$C;
      var $614=HEAP32[(($613)>>2)];
      $T=$614;
      label = 99; break;
    case 96: 
      var $616=$C;
      var $617=$616;
      var $618=$1;
      var $619=(($618+16)|0);
      var $620=HEAP32[(($619)>>2)];
      var $621=(($617)>>>0) >= (($620)>>>0);
      var $622=(($621)&1);
      var $623=($622);
      var $624=(($623)|0)!=0;
      if ($624) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $626=$TP5;
      var $627=$C;
      HEAP32[(($627)>>2)]=$626;
      var $628=$T;
      var $629=$TP5;
      var $630=(($629+24)|0);
      HEAP32[(($630)>>2)]=$628;
      var $631=$TP5;
      var $632=$TP5;
      var $633=(($632+12)|0);
      HEAP32[(($633)>>2)]=$631;
      var $634=$TP5;
      var $635=(($634+8)|0);
      HEAP32[(($635)>>2)]=$631;
      label = 106; break;
    case 98: 
      _abort();
      throw "Reached an unreachable!"
    case 99: 
      label = 105; break;
    case 100: 
      var $639=$T;
      var $640=(($639+8)|0);
      var $641=HEAP32[(($640)>>2)];
      $F9=$641;
      var $642=$T;
      var $643=$642;
      var $644=$1;
      var $645=(($644+16)|0);
      var $646=HEAP32[(($645)>>2)];
      var $647=(($643)>>>0) >= (($646)>>>0);
      if ($647) { label = 101; break; } else { var $656 = 0;label = 102; break; }
    case 101: 
      var $649=$F9;
      var $650=$649;
      var $651=$1;
      var $652=(($651+16)|0);
      var $653=HEAP32[(($652)>>2)];
      var $654=(($650)>>>0) >= (($653)>>>0);
      var $656 = $654;label = 102; break;
    case 102: 
      var $656;
      var $657=(($656)&1);
      var $658=($657);
      var $659=(($658)|0)!=0;
      if ($659) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $661=$TP5;
      var $662=$F9;
      var $663=(($662+12)|0);
      HEAP32[(($663)>>2)]=$661;
      var $664=$T;
      var $665=(($664+8)|0);
      HEAP32[(($665)>>2)]=$661;
      var $666=$F9;
      var $667=$TP5;
      var $668=(($667+8)|0);
      HEAP32[(($668)>>2)]=$666;
      var $669=$T;
      var $670=$TP5;
      var $671=(($670+12)|0);
      HEAP32[(($671)>>2)]=$669;
      var $672=$TP5;
      var $673=(($672+24)|0);
      HEAP32[(($673)>>2)]=0;
      label = 106; break;
    case 104: 
      _abort();
      throw "Reached an unreachable!"
    case 105: 
      label = 93; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $681=$p;
      var $682=$681;
      var $683=(($682+8)|0);

      return $683;
    default: assert(0, "bad label: " + label);
  }

}
_prepend_alloc["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I1;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $2=$tbase;
      $3=$tsize;
      $4=$mmapped;
      var $5=$1;
      var $6=(($5+24)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      $old_top=$8;
      var $9=$1;
      var $10=$old_top;
      var $11=_segment_holding($9, $10);
      $oldsp=$11;
      var $12=$oldsp;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$oldsp;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14+$17)|0);
      $old_end=$18;
      $ssize=24;
      var $19=$old_end;
      var $20=$ssize;
      var $21=((($20)+(16))|0);
      var $22=((($21)+(7))|0);
      var $23=(((-$22))|0);
      var $24=(($19+$23)|0);
      $rawsp=$24;
      var $25=$rawsp;
      var $26=(($25+8)|0);
      var $27=$26;
      var $28=$27 & 7;
      var $29=(($28)|0)==0;
      if ($29) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $39 = 0;label = 5; break;
    case 4: 
      var $32=$rawsp;
      var $33=(($32+8)|0);
      var $34=$33;
      var $35=$34 & 7;
      var $36=(((8)-($35))|0);
      var $37=$36 & 7;
      var $39 = $37;label = 5; break;
    case 5: 
      var $39;
      $offset=$39;
      var $40=$rawsp;
      var $41=$offset;
      var $42=(($40+$41)|0);
      $asp=$42;
      var $43=$asp;
      var $44=$old_top;
      var $45=(($44+16)|0);
      var $46=(($43)>>>0) < (($45)>>>0);
      if ($46) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $48=$old_top;
      var $52 = $48;label = 8; break;
    case 7: 
      var $50=$asp;
      var $52 = $50;label = 8; break;
    case 8: 
      var $52;
      $csp=$52;
      var $53=$csp;
      var $54=$53;
      $sp=$54;
      var $55=$sp;
      var $56=$55;
      var $57=(($56+8)|0);
      var $58=$57;
      $ss=$58;
      var $59=$sp;
      var $60=$59;
      var $61=$ssize;
      var $62=(($60+$61)|0);
      var $63=$62;
      $tnext=$63;
      var $64=$tnext;
      $p=$64;
      $nfences=0;
      var $65=$1;
      var $66=$2;
      var $67=$66;
      var $68=$3;
      var $69=((($68)-(40))|0);
      _init_top($65, $67, $69);
      var $70=$ssize;
      var $71=$70 | 1;
      var $72=$71 | 2;
      var $73=$sp;
      var $74=(($73+4)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$ss;
      var $76=$1;
      var $77=(($76+444)|0);
      var $78=$75;
      var $79=$77;
      assert(16 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($79)+(12))>>2)];
      var $80=$2;
      var $81=$1;
      var $82=(($81+444)|0);
      var $83=(($82)|0);
      HEAP32[(($83)>>2)]=$80;
      var $84=$3;
      var $85=$1;
      var $86=(($85+444)|0);
      var $87=(($86+4)|0);
      HEAP32[(($87)>>2)]=$84;
      var $88=$4;
      var $89=$1;
      var $90=(($89+444)|0);
      var $91=(($90+12)|0);
      HEAP32[(($91)>>2)]=$88;
      var $92=$ss;
      var $93=$1;
      var $94=(($93+444)|0);
      var $95=(($94+8)|0);
      HEAP32[(($95)>>2)]=$92;
      label = 9; break;
    case 9: 
      var $97=$p;
      var $98=$97;
      var $99=(($98+4)|0);
      var $100=$99;
      $nextp=$100;
      var $101=$p;
      var $102=(($101+4)|0);
      HEAP32[(($102)>>2)]=7;
      var $103=$nfences;
      var $104=((($103)+(1))|0);
      $nfences=$104;
      var $105=$nextp;
      var $106=(($105+4)|0);
      var $107=$106;
      var $108=$old_end;
      var $109=(($107)>>>0) < (($108)>>>0);
      if ($109) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $111=$nextp;
      $p=$111;
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      var $115=$csp;
      var $116=$old_top;
      var $117=(($115)|0)!=(($116)|0);
      if ($117) { label = 14; break; } else { label = 50; break; }
    case 14: 
      var $119=$old_top;
      var $120=$119;
      $q=$120;
      var $121=$csp;
      var $122=$old_top;
      var $123=$121;
      var $124=$122;
      var $125=((($123)-($124))|0);
      $psize=$125;
      var $126=$q;
      var $127=$126;
      var $128=$psize;
      var $129=(($127+$128)|0);
      var $130=$129;
      $tn=$130;
      var $131=$tn;
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$133 & -2;
      HEAP32[(($132)>>2)]=$134;
      var $135=$psize;
      var $136=$135 | 1;
      var $137=$q;
      var $138=(($137+4)|0);
      HEAP32[(($138)>>2)]=$136;
      var $139=$psize;
      var $140=$q;
      var $141=$140;
      var $142=$psize;
      var $143=(($141+$142)|0);
      var $144=$143;
      var $145=(($144)|0);
      HEAP32[(($145)>>2)]=$139;
      var $146=$psize;
      var $147=$146 >>> 3;
      var $148=(($147)>>>0) < 32;
      if ($148) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $150=$psize;
      var $151=$150 >>> 3;
      $I=$151;
      var $152=$I;
      var $153=$152 << 1;
      var $154=$1;
      var $155=(($154+40)|0);
      var $156=(($155+($153<<2))|0);
      var $157=$156;
      var $158=$157;
      $B=$158;
      var $159=$B;
      $F=$159;
      var $160=$1;
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$I;
      var $164=1 << $163;
      var $165=$162 & $164;
      var $166=(($165)|0)!=0;
      if ($166) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $168=$I;
      var $169=1 << $168;
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$172 | $169;
      HEAP32[(($171)>>2)]=$173;
      label = 21; break;
    case 17: 
      var $175=$B;
      var $176=(($175+8)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$177;
      var $179=$1;
      var $180=(($179+16)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($178)>>>0) >= (($181)>>>0);
      var $183=(($182)&1);
      var $184=($183);
      var $185=(($184)|0)!=0;
      if ($185) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $187=$B;
      var $188=(($187+8)|0);
      var $189=HEAP32[(($188)>>2)];
      $F=$189;
      label = 20; break;
    case 19: 
      _abort();
      throw "Reached an unreachable!"
    case 20: 
      label = 21; break;
    case 21: 
      var $193=$q;
      var $194=$B;
      var $195=(($194+8)|0);
      HEAP32[(($195)>>2)]=$193;
      var $196=$q;
      var $197=$F;
      var $198=(($197+12)|0);
      HEAP32[(($198)>>2)]=$196;
      var $199=$F;
      var $200=$q;
      var $201=(($200+8)|0);
      HEAP32[(($201)>>2)]=$199;
      var $202=$B;
      var $203=$q;
      var $204=(($203+12)|0);
      HEAP32[(($204)>>2)]=$202;
      label = 49; break;
    case 22: 
      var $206=$q;
      var $207=$206;
      $TP=$207;
      var $208=$psize;
      var $209=$208 >>> 8;
      $X=$209;
      var $210=$X;
      var $211=(($210)|0)==0;
      if ($211) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $I1=0;
      label = 28; break;
    case 24: 
      var $214=$X;
      var $215=(($214)>>>0) > 65535;
      if ($215) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $I1=31;
      label = 27; break;
    case 26: 
      var $218=$X;
      $Y=$218;
      var $219=$Y;
      var $220=((($219)-(256))|0);
      var $221=$220 >>> 16;
      var $222=$221 & 8;
      $N=$222;
      var $223=$N;
      var $224=$Y;
      var $225=$224 << $223;
      $Y=$225;
      var $226=((($225)-(4096))|0);
      var $227=$226 >>> 16;
      var $228=$227 & 4;
      $K=$228;
      var $229=$K;
      var $230=$N;
      var $231=((($230)+($229))|0);
      $N=$231;
      var $232=$K;
      var $233=$Y;
      var $234=$233 << $232;
      $Y=$234;
      var $235=((($234)-(16384))|0);
      var $236=$235 >>> 16;
      var $237=$236 & 2;
      $K=$237;
      var $238=$N;
      var $239=((($238)+($237))|0);
      $N=$239;
      var $240=$N;
      var $241=(((14)-($240))|0);
      var $242=$K;
      var $243=$Y;
      var $244=$243 << $242;
      $Y=$244;
      var $245=$244 >>> 15;
      var $246=((($241)+($245))|0);
      $K=$246;
      var $247=$K;
      var $248=$247 << 1;
      var $249=$psize;
      var $250=$K;
      var $251=((($250)+(7))|0);
      var $252=$249 >>> (($251)>>>0);
      var $253=$252 & 1;
      var $254=((($248)+($253))|0);
      $I1=$254;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $257=$I1;
      var $258=$1;
      var $259=(($258+304)|0);
      var $260=(($259+($257<<2))|0);
      $H=$260;
      var $261=$I1;
      var $262=$TP;
      var $263=(($262+28)|0);
      HEAP32[(($263)>>2)]=$261;
      var $264=$TP;
      var $265=(($264+16)|0);
      var $266=(($265+4)|0);
      HEAP32[(($266)>>2)]=0;
      var $267=$TP;
      var $268=(($267+16)|0);
      var $269=(($268)|0);
      HEAP32[(($269)>>2)]=0;
      var $270=$1;
      var $271=(($270+4)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$I1;
      var $274=1 << $273;
      var $275=$272 & $274;
      var $276=(($275)|0)!=0;
      if ($276) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $278=$I1;
      var $279=1 << $278;
      var $280=$1;
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$282 | $279;
      HEAP32[(($281)>>2)]=$283;
      var $284=$TP;
      var $285=$H;
      HEAP32[(($285)>>2)]=$284;
      var $286=$H;
      var $287=$286;
      var $288=$TP;
      var $289=(($288+24)|0);
      HEAP32[(($289)>>2)]=$287;
      var $290=$TP;
      var $291=$TP;
      var $292=(($291+12)|0);
      HEAP32[(($292)>>2)]=$290;
      var $293=$TP;
      var $294=(($293+8)|0);
      HEAP32[(($294)>>2)]=$290;
      label = 48; break;
    case 30: 
      var $296=$H;
      var $297=HEAP32[(($296)>>2)];
      $T=$297;
      var $298=$psize;
      var $299=$I1;
      var $300=(($299)|0)==31;
      if ($300) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $309 = 0;label = 33; break;
    case 32: 
      var $303=$I1;
      var $304=$303 >>> 1;
      var $305=((($304)+(8))|0);
      var $306=((($305)-(2))|0);
      var $307=(((31)-($306))|0);
      var $309 = $307;label = 33; break;
    case 33: 
      var $309;
      var $310=$298 << $309;
      $K2=$310;
      label = 34; break;
    case 34: 
      var $312=$T;
      var $313=(($312+4)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$314 & -8;
      var $316=$psize;
      var $317=(($315)|0)!=(($316)|0);
      if ($317) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $319=$K2;
      var $320=$319 >>> 31;
      var $321=$320 & 1;
      var $322=$T;
      var $323=(($322+16)|0);
      var $324=(($323+($321<<2))|0);
      $C=$324;
      var $325=$K2;
      var $326=$325 << 1;
      $K2=$326;
      var $327=$C;
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328)|0)!=0;
      if ($329) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $331=$C;
      var $332=HEAP32[(($331)>>2)];
      $T=$332;
      label = 40; break;
    case 37: 
      var $334=$C;
      var $335=$334;
      var $336=$1;
      var $337=(($336+16)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($335)>>>0) >= (($338)>>>0);
      var $340=(($339)&1);
      var $341=($340);
      var $342=(($341)|0)!=0;
      if ($342) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $344=$TP;
      var $345=$C;
      HEAP32[(($345)>>2)]=$344;
      var $346=$T;
      var $347=$TP;
      var $348=(($347+24)|0);
      HEAP32[(($348)>>2)]=$346;
      var $349=$TP;
      var $350=$TP;
      var $351=(($350+12)|0);
      HEAP32[(($351)>>2)]=$349;
      var $352=$TP;
      var $353=(($352+8)|0);
      HEAP32[(($353)>>2)]=$349;
      label = 47; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 46; break;
    case 41: 
      var $357=$T;
      var $358=(($357+8)|0);
      var $359=HEAP32[(($358)>>2)];
      $F3=$359;
      var $360=$T;
      var $361=$360;
      var $362=$1;
      var $363=(($362+16)|0);
      var $364=HEAP32[(($363)>>2)];
      var $365=(($361)>>>0) >= (($364)>>>0);
      if ($365) { label = 42; break; } else { var $374 = 0;label = 43; break; }
    case 42: 
      var $367=$F3;
      var $368=$367;
      var $369=$1;
      var $370=(($369+16)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=(($368)>>>0) >= (($371)>>>0);
      var $374 = $372;label = 43; break;
    case 43: 
      var $374;
      var $375=(($374)&1);
      var $376=($375);
      var $377=(($376)|0)!=0;
      if ($377) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $379=$TP;
      var $380=$F3;
      var $381=(($380+12)|0);
      HEAP32[(($381)>>2)]=$379;
      var $382=$T;
      var $383=(($382+8)|0);
      HEAP32[(($383)>>2)]=$379;
      var $384=$F3;
      var $385=$TP;
      var $386=(($385+8)|0);
      HEAP32[(($386)>>2)]=$384;
      var $387=$T;
      var $388=$TP;
      var $389=(($388+12)|0);
      HEAP32[(($389)>>2)]=$387;
      var $390=$TP;
      var $391=(($390+24)|0);
      HEAP32[(($391)>>2)]=0;
      label = 47; break;
    case 45: 
      _abort();
      throw "Reached an unreachable!"
    case 46: 
      label = 34; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_add_segment["X"]=1;

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_mpn_fft_mul_modF_K","___gmpz_mul","_init_top","___gmpn_neg","_bs","_init_bins","_mpn_pow_1_highpart","___gmpn_toom_interpolate_8pts","___gmpn_toom32_mul","___gmpn_add_n","___gmpn_sbpi1_bdiv_qr","___gmpz_add","_mpn_fft_add_modF","_DO_mpn_sublsh_n209","_DO_mpn_sublsh_n200","___gmpn_sbpi1_div_qr","___gmp_assert_header","_mpn_mullo_n_itch","_DO_mpn_sublsh_n","_abs_sub_add_n","___gmpn_lshift","___gmpf_div_2exp","___gmpz_aorsmul_1","___gmpn_mulmod_bnm1_next_size","_mpn_zero_p152","___gmp_tmp_reentrant_alloc","_cputime","___gmpz_addmul_ui","___gmpn_add_1","_mpn_dc_get_str","___gmpn_sbpi1_bdiv_q","___gmpn_div_q","_mpn_mul_fft_decompose","___gmpn_preinv_mu_divappr_q","___gmpf_set_z","_build_sieve","___gmpn_toom2_sqr","___gmpn_toom_eval_dgr3_pm2","___gmpf_set_d","___gmpn_sub_1","_mpn_mulmod_bnm1_itch316","___gmpn_dcpi1_bdiv_q","_release_unused_segments","___gmpn_toom8h_mul","_tmalloc_large","_mpn_fft_mul_2exp_modF","___gmpn_toom_couple_handling","_sys_alloc","_fac_clear","_free","_mpn_mulmod_bnm1_itch280","_init_mparams","_mpn_toom8h_mul_itch","___gmpn_mu_bdiv_q_itch","___gmpn_add","___gmpn_get_str","_mpn_fft_fft","_mpn_fft_initl","___gmpn_bdiv_q","___gmpn_toom8_sqr","___gmpn_sbpi1_div_q","_abs_sub_n","_main","_DO_mpn_addlsh_n","_mpn_zero_p163","_mpn_sub_nc156","___gmpn_toom_interpolate_7pts","_mpn_sqrmod_bnm1_itch","_mpn_add_nc281","_mpn_bc_sqrmod_bnp1","_tmalloc_small","_mpn_dc_mullo_n","_fac_mul_bp","_mpn_zero_p","___gmpz_clear","___gmpf_init","___gmpn_toom4_sqr","___gmpn_toom53_mul","___gmpn_sub","___gmpz_mul_ui","_mpn_sub_nc286","___gmpn_mu_div_qr_itch","___gmpn_sub_n","_mpn_zero_p155","_fac_set_bp","___gmpn_rshift","_mpn_mul_fft_lcm","___gmpn_mullo_basecase","___gmpf_get_str","___gmpf_sub","_fac_init","_bs_mul","___gmpn_submul_1","_prepend_alloc","_fac_resize","___gmp_extract_double","___gmpn_tdiv_qr","_mpn_toom6h_mul_itch","___gmpn_divexact","___gmpf_set","_mpn_fft_sub_modF","___gmpn_sqrmod_bnm1_next_size","_fac_compact","___gmpn_sqrmod_bnm1","___gmpn_toom44_mul","___gmpn_mu_div_q_itch","_mpn_mulmod_bnm1_itch121","_mpn_sub_nc","___gmpn_dcpi1_bdiv_qr_n","___gmpn_binvert","___gmp_invalid_operation","_sys_trim","___gmpn_toom_eval_pm2exp","___gmpn_mullo_n","___gmpn_bdiv_q_itch","_mpn_fft_fftinv","_mmap_resize","_mpn_sub_nc139","___gmpf_ui_sub","___gmpf_set_ui","___gmpn_binvert_itch","___gmpn_dcpi1_divappr_q","___gmpf_set_default_prec","___gmpn_invertappr","___gmpf_mul_ui","___gmpz_set_ui","___gmpn_toom6_sqr","___gmpn_cmp","___gmpn_toom_interpolate_12pts","___gmpf_neg","___gmpn_mu_bdiv_q","___gmpn_ni_invertappr","___gmpn_toom6h_mul","___gmpf_set_prec_raw","_mpn_sb_get_str","___gmpn_lshiftc","___gmpn_mu_divappr_q","___gmpn_toom33_mul","___gmpn_sbpi1_divappr_q","___gmpn_mulmod_bnm1","___gmpz_realloc","___gmpn_toom_interpolate_16pts","___gmpn_mu_div_q","_mpn_fft_normalize","___gmpn_preinv_mu_div_qr","___gmpn_dcpi1_div_q","___gmpn_sqr","___gmpn_fft_next_size","_mpn_sub_nc104","_fac_remove_gcd","___gmpn_bc_mulmod_bnm1","___gmp_default_free","_mpn_fft_norm_modF","_mpn_mulmod_bnm1_itch107","___gmp_exception","___gmpn_dcpi1_div_qr","_fac_init_size","___gmpf_get_prec","___gmpz_init","___gmp_tmp_reentrant_free","_mpn_bc_mulmod_bnp1","_malloc","___gmpn_toom3_sqr","___gmp_assert_fail","___gmpn_dcpi1_bdiv_q_n","___gmpn_mu_div_qr_choose_in","___gmpn_toom43_mul","_mpn_mu_div_qr2","_mpn_bc_sqrmod_bnm1","_my_sqrt_ui","_mpn_mul_fft_internal","_fac_mul2","_mpn_mulmod_bnm1_itch289","___gmp_default_reallocate","_fac_reset","_mpn_sub_nc116","___gmpf_sub_ui","___gmpn_toom22_mul","___gmpz_neg","___gmpn_fft_best_k","_fac_mul","___gmpn_bdiv_dbm1c","___gmpn_mul_n","___gmpz_sizeinbase","___gmpf_mul","___gmpf_add","___gmpf_div","___gmpz_add_ui","___gmpn_mul","_mpn_bc_invertappr","_internal_realloc","_gen_digits","___gmpn_divrem_1","___gmpn_divrem_2","___gmpn_dcpi1_div_qr_n","___gmpn_mul_1","___gmp_default_allocate","___gmpn_addmul_1","___gmpn_mu_divappr_q_choose_in","_realloc","___gmpf_clear","___gmpn_toom_interpolate_5pts","_segment_holding","___gmpn_toom_interpolate_6pts","___gmpn_mu_div_qr","_mmap_alloc","___gmpn_toom63_mul","_add_segment","___gmpn_mul_fft","___gmpn_mu_divappr_q_itch","___gmpn_mul_basecase","___gmpn_dcpi1_divappr_q_n","___gmpn_nussbaumer_mul","___gmp_divide_by_zero","___gmpn_sqr_basecase","___gmpn_preinv_divrem_1","_mpn_add_nc","___gmpn_toom_eval_pm1","___gmpn_toom_eval_dgr3_pm1","___gmpf_add_ui","___gmpn_toom_eval_pm2","___gmpn_toom_eval_pm2rexp","___gmpz_divexact","___gmpn_divexact_1","_mpn_fft_div_2exp_modF","___gmpn_toom42_mul","_mpn_mulmod_bnm1_itch"]


